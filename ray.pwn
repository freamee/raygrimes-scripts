/*
EZEKET NE TÖRÖLD!
#error Írja, hogy kell-e lõfegyver WAR-on + UserCP + Haszon
#error SFbe kórház
#error Farmer munka javítása
#error csak sofõr versenyezhet + checkpoint ellenõrzés
#error Lövést ne csekkolja harcnál - más vwbe
EZEKET NE TÖRÖLD!
*/

//#error Animot mentse
//#error boltok és beszállítók
//#error eldob pickup

/*
=============== CHANGELOG =================
# modnev,mapnev,weblap, scripter átirva
# minimumfizuhoz 3600sec
# elhagyatott sziget betéve..
# ugrálos geciség kivéve
# /sziget - teleportál a szigetre..
# mysql hiba szerver leállás kivéve.
# ajtó textlabelek lerakva
# /betölt ajtók - betölti az ajtókat.. frissiti õket.
# /atm make - atm készités
# textlabelek letétele, lekéri a ajtókat, atmeket, benyakutakat. stb.
# /ujkocsi, /v vesz, stb. javitva.. 
# /betölt benyakutak, atmek..
# bizniszek helyrerakva, nem bugosak. -_-
# /deleteajto - törli a közeledben lévõ ajtót..
# ajtó rendszer újrairva.. bugos volt elõzõ nem volt textlabel stb.
# /benzinkút resi - nulláz mindent, senkinek nem lesz benzinkútja..
# textlabel bugok javitva, lehiváskor nem maradnak ott. stb.
# 15,1,5,20 id bizniszek kivéve..
# bizniszeknek mapicon a térképen. (bizniszpickup)
# [Gates] country mapolás betéve.
# /k parancsok használata adminoknak
# /v szin - mûködik adminoknak bárhol.
# bérelhetõ kocsik letéve.. 16db kocsi
# /vesz kordináta lehozva a boltba..
# /enter parancs
# /bayside- teleportál a helyre.
# kamionos kocsik/trailerek betéve
# /munka rendszer átirva.. nem kell városházára bemenni, hanem az adott munkának a helyénél fel kell venni.
# munka 3dtextlabelek
# benzinszállitás átirva..
# cég készités (forward LoadCeg)
# /cég adat, infó, létrehoz
# cégeknek textlabel, mapicon
# cégeknek széf, és percenkénti termelés.. (szinttel arányos)
# kamion checkpointok átirva..
# /enter /exit 5mp freeze, nem esünk ki a mapból..
# bank, kórház, stb átrakva a városba.. kiirva a módból.
# /deleteajto flood javitva..
# /betétlekötés - lekötsz x forintot és az kamatozik fizetéseknél..
# betétlekötés javitva.. beleirva paydayba.
# /kaszinójáték félkarú rabló.
# benzinkút jövedelem rendszer
# benzinkút jövedelemhez hozzáadva a negativ dolog, csökken a benzn 3 percenként (benzinkuttick)

BETÉTLEKÖTÉS PAYDAYNÁL BUGOS JAVITVA -- PIPA!
BENZINKÚT SZINT RENDSZERT ELKEZDTED --- PIPA!

/benzinkút info javitani

*/
//#error anti npc kick / ban + versenyrendszer

#include <a_samp>

#undef MAX_PLAYERS
#define MAX_PLAYERS 201

#include <core>
#include <float>
#include <time>
#include <file>
#include <utils>
#include <seif_walk>
#include <Dini>

#define split
#include <mysql>
#undef split

#include <md5>
#include <Heroes>

#pragma unused AntiDeAMX

#pragma dynamic 18000

#define MAX_MYSQL_STRING 2200
#define MAX_MYSQL_STRING_UPDATER 800

#include <MySQLadatok>

#define ALAPOBJECTDISTANCE 100.0
#include <streamer>
#include <junkbuster>
//#include <cnpc>
#include <oph>
#include <Paused>
#include <foreach>

#define NINCS -1
#define SPAWNID 1

new Iterator:Jatekosok<MAX_PLAYERS>;


//Beállítások
new modnev[64] = "Gates Beta v1.0";
new mapnev[32] = "Igen";
new weblap[32] = "nincs";
new Scripter[1][] =
{
	"Ray_Gates"
};

new BackTime = 15; //15secenként checkel - Mert ha egyszerre mentene elég durva lag lenne
new BackTimeSave = 900; //15perc - Player mentés - SQL

new MinimumFizuhoz = 3600; //1óra

#define SISAKSLOT 1
#define SZEMUVEGSLOT 2
#define MAXHP 150.0
#define MAXBEJELENTKEZES 3
#define MAXAFKIDO 300 // 5 perc
#define KAMATSZORZO 10 // Bankszéfbe

#define JOGSI_MOTOR 75
#define JOGSI_AUTO 75
#define JOGSI_REPULO 100
#define JOGSI_HORGASZ 100
#define JOGSI_HAJO 100
#define JOGSI_KAMION 100
#define JOGSI_FEGYVER 250

#define TERULET_VARAKOZAS 36000
#define TERULET_VARAKOZAS_FRAKCIO 18000
#define MAXIPBAN 1

#define NPC_AKCIO_START (1)
#define NPC_AKCIO_SZUNET (2)
#define NPC_AKCIO_FOLYTAT (3)
forward NPC_FelvetelVege(npcid);
forward NPC_FelvetelStart(npcid);
forward NPCSpawn(npc);

new ArveresNPC = NINCS;
new Text3D:ArveresNPCText;

new EladasIdo[3] = {
	30, // Ház eladási ideje		|	Alapértelmezett: 14nap (2hét)
	30, // Kocsi eladási ideje	|	Alapértelmezett: 14nap (2hét)
	30, // Biz eladási ideje		|	Alapértelmezett: 14nap (2hét)
};

new KorhazIdo = 45;

enum uInfo
{
	uPlayer,
	uHaz,
	uKocsi,
	uBiz,
	uTerulet
};
new UpdatePerSec[uInfo];
new UpdateFolytatodik[uInfo];
new tdcounter, checkprop;

enum idoInfo
{
	iVolt,
	iMost,
	iLesz,
	bool:iValtas
}
new IdoJaras[idoInfo];

/*enum vInfo
{
	vMinX,
	vMaxX,
	vMinY,
	vMaxY,
	vAreaID
}
new Varosok[VAROSTERULETEK][vInfo];*/
#define VAROSTERULETEK 2
new Varosok[VAROSTERULETEK];


	enum Kamionmunkainfo
{
    MissionName[200],
    MissionPay,
    Float:loadx,
    Float:loady,
    Float:loadz
}


enum
{
	NPC_TIPUS_HELYI,
	NPC_TIPUS_TAVOLI,
	NPC_DATA_NEV,
	NPC_DATA_FELVETEL,
	NPC_MEGALLO_ELOZO,
	NPC_MEGALLO_JELENLEGI,
	NPC_MEGALLO_KOVETKEZO,
	ELLENORZES_HIRDETES,
	ELLENORZES_SZIDAS,
	ELLENORZES_MINDKETTO,
	ARVERES_TIPUS_HAZ,
	ARVERES_TIPUS_KOCSI,
	INAKTIV_HAZ,
	INAKTIV_KOCSI,
	JELZES_SARGA,
	JELZES_NARANCS,
	JELZES_PIROS,
	KOCSI_MOTOR,
	KOCSI_LAMPA,
	KOCSI_RIASZTO,
	KOCSI_AJTO,
	KOCSI_MOTORHAZTETO,
	KOCSI_CSOMAGTARTO,
	HP_SET,
	HP_GIVE,
	HP_GET,
	VERSENY_BEERT,
	VERSENY_SHOCK,
	VERSENY_KILEPES,
	UTZAR_KICSI,
	UTZAR_NAGY,
	UTZAR_TOROL,
	UTZAR_TOROL_MOST
};

#define MAXAUKCIO 5
enum aInfo
{
	bool:aElinditva,
	aVarakozas,
	aIdo,
	aTipus,
	aID,
	aLicitalok[3],
	aLicitek[3],
	aLicit,
	aLicitalo,
	aLicitaloVolt[MAX_PLAYER_NAME],
	aKezdoLicit
}
enum avInfo
{
	bool:vVan,
	vTipus,
	vID,
	vKezdoLicit
}
new Aukcio[aInfo];
new AukcioVarolista[MAXAUKCIO][avInfo];
new bool:Licitalt[MAX_PLAYERS];
new LicitKocsi;

enum utzarInfo
{
	bool:uVan,
	uTipus,
	Float:uHely[4],
	uObject,
	uPickup[4]
}
new Utzarak[MAX_PLAYERS][utzarInfo];

enum npcinfo
{
	bool:nConnected,
	nNeve[40],
	nID,
	nKocsi,
	nNev[80],
	Text3D:nLeirasID,
	nFelvetelNev[40],
	nHolTart,
	nMegallokSzama,
	bool:nMegallt,
	bool:nMegallitva,
	bool:nSzamolas,
	nSzamolasTimer,
	nSzamolasIdo,
	nMenetIdo
};

#define MAX_NPC_SOFOR 5
#define MAX_MEGALLO 10

new NPC_ID[MAX_PLAYERS];
new NPC_Vezetok[MAX_NPC_SOFOR][npcinfo];
new NPC_MegallokIdo[MAX_NPC_SOFOR][MAX_MEGALLO];
new Float:NPC_Megallok[MAX_NPC_SOFOR][MAX_MEGALLO][3];
new NPC_MegallokNeve[MAX_NPC_SOFOR][MAX_MEGALLO][30];

//SWATPAJZS

new pajzs1 = 0;
new pajzs2 = 0;
new pajzs3 = 0;

new swatpajzs = 0;

new pajzsnala[MAX_PLAYERS];

new spajzs1;
new spajzs2;
new spajzs3;

//SWATPAJS

new fszallit;
new silencedaszallitoban[2];
new deagleaszallitoban[2];
new mp5aszallitoban[2];
new m4aszallitoban[2];
new shotgunaszallitoban[2];
new fegyverszallitokocsi[2];
new fegyveraszallitoban[2];
#define MAX_FEGYVER 1000


#define ADO_HAZ 250
#define ADO_JARMU 250
#define ADO_SZINT 200
#define ADO_HAZGN 400
#define ADO_HAZLS 250
#define ADO_HAZSF 200
#define ADO_HAZFALU 80
#define ADO_HAZTANYA 70
#define ADO_PENZ 0.01

#define BANK_KAMAT 25.0
#define BANK_SZAZALEK 2 // osztó

#define CUSTOMPICKUPSTIME 2900

//Az embernél MAX
#define MAXCSERJE 30
#define MAXMAK 20
#define MAXCANNABIS 15
#define MAXMUANYAG 3
#define MAXPENZ 9999999

// SF-Rob
#define MAXPENZSZALLITOPENZ 20000000
#define MAXZSAKPENZ 200000

#define MAXKOKAIN 5000
#define MAXMARIHUANA 2500
#define MAXHEROIN 4000
#define MAXMATI 40000
#define MAXKAJA 5
#define MAXKOTSZER 30
//A kocsiban MAX
#define MAXCUCCAKOCSIBAN 50
#define MAXMUANYAGAKOCSIBAN 10
#define MAXPROD 150
#define MAXMATIKOCSIBAN 80000
#define MAXKOKAINKOCSIBAN 10000
#define MAXHEROINKOCSIBAN 10000
#define MAXMARIHUANAKOCSIBAN 10000

//A házban MAX
#define MAXHAZKOKAIN 76000
#define MAXHAZHEROIN 76000
#define MAXHAZMARIHUANA 76000
#define MAXHAZMATI 500000
#define MAXHAZCIGI 150
#define MAXHAZKAJA 50

//Egyéb
#define MAXRENDELES 2
#define MAXTERULET 30
#define MAXBIZ 21
#define MAXHAZ 470
#define MAXAJTO 200
#define MAXVSKOCSI 750
#define MAXERTEK 2100000000

#define RENDELES_IDO 900

#define MAX_FRAKCIO 22
#define MAX_ATM 30
#define MAX_CEG 20
#define MAX_CHANNEL 4
#define CHANNEL_PLAYERS 10
#define CHANNEL_TIMEOUT 30
#define MAX_BENZINKUT 30
#define MAX_KINCS 409
#define MAX_BENZIN_SZALLITAS 500

new UtkozesErzekenyseg = 7;

enum btav
{
	Kozel,
	Normal,
	Tavol
}

#define TD_Info 1
#define TD_Info2 2

#define B_Kozel 3.0
#define B_Normal 8.0
#define B_Tavol 20.0
#define B_Tavol2 30.0
#define B_Cselekves 20.0

new Text3D: benyakuttextek[MAX_PLAYERS];
new Text3D: kincstextek[MAX_PLAYERS];
new kincspickup[MAX_PLAYERS];
new benyakutpickup[MAX_PLAYERS];
new Text3D: cegtextek[MAX_PLAYERS];
new cegpickup[MAX_PLAYERS];

new Text3D: ajtobetext[MAX_PLAYERS];
new Text3D: ajtokitext[MAX_PLAYERS];
new Text3D: atmtextek[MAX_PLAYERS];
new atmpickup[MAX_PLAYERS];
new bizpick0;
//new bizpick1[MAX_PLAYERS]; KIVÉVE!!
new bizpick2;
new bizpick3;
new bizpick4
//new bizpick5[MAX_PLAYERS]; KIVÉVE!!
new bizpick6;
new bizpick7;
new bizpick8;
new bizpick9;
new bizpick10;
new bizpick11;
new bizpick12;
new bizpick13;
new bizpick14;
//new bizpick15[MAX_PLAYERS]; KIVÉVE!!
new bizpick16;
new bizpick17;
new bizpick18;
new bizpick19;
//new bizpick20[MAX_PLAYERS]; KIVÉVE!!

#define RACESLOTOK 3
#define RACEMAXCP 51 //Ha átirod, sikeresen elbasztad a modot!
#define RACECPMERET 22.5
#define RACECPMERETB 22.5

#define RACE_EPITES -1
#define RACE_NINCS 0
#define RACE_BETOLTVE 1
#define RACE_INDUL 2
#define RACE_ELINDULT 3
#define RACE_VEGE 4
#define RACE_CP_START -1
#define RACE_CP_CEL -2

#define QUERY_LoadPlayer 1

//Ezekkel a kocsikkal lehet vontatni
new Vontatokocsik[7] = {
	427,
	508,
	525,
	596,
	597,
	598,
	599
};

new MaxTalalas[7] = {
//Maximum cuccok
8,		//Kokacserje kereséskor max ennyit kap
6,		//Máklevél kereséskor max ennyit kap
4,		//Cannabis kereséskor max ennyit kap
10,		//Kokain készítéskor (Kokacserje * ennyi) + 1-et kaphat max
7,		//Heroin készítéskor (Máklevél * ennyi) + 1-et kaphat max
5,		//Marihuana készítéskor (Cannabis * ennyi) + 1-et kaphat max
300,	//Mati készítéskor (Mûanyag * ennyi) + 1-et kaphat max
};

new MunkaIdo[8] = {
10*1000,	//Kokacserje
10*1000,	//Máklevél
10*1000,	//Cannabis
1*1000,	//Kokain
2*1000,	//Heroin
3*1000,   //Marihuana
12*1000,   //Material
120*1000, //Belsõcsere
};

new Float:KorhazSpawn[4][3] = {
	{1106.62, -1283.23, -26.29},
	{1118.64, -1290.88, -26.24},
	{1105.56, -1299.40, -26.29},
	{1106.91, -1303.60, -26.27}
};

new Float:SpawnHelyek[22][3] = {
	//X, Y, Z
	{0.0, 0.0, 0.0}, //Semmi
	{ 228.2135,      80.5706,   1005.0391}, //LSPD
	{ 230.1215,     167.6952,   1003.0234}, //FBI
	{2481.124023, 	-1536.560668, 	24.152761}, //Ballas
	{1143.9843,   -1324.4940,     13.6004}, //LS Mentõ
	{-318.7951, 1049.7927, 20.3403}, //Joka's
	{-2207.0024,	701.7578,	49.4375}, //Triad
	{ 356.2998,     151.9914,   1025.7891}, //Önkormányzat
	{-382.9263,   -1438.9409,     26.3295}, //Hitman
	{1782.7328,   -1310.4980,     13.6975}, //Riporter
    {1047.1227,   -1092.0061,     23.8281}, //Taxi
    { 725.7042,   -1440.3864,     13.5391}, //Olasz maffia
    {-2455.2114,	503.8840,	30.0781}, //Yoka maffia
    {979.3887,		-1254.2184,		16.9448}, //Los Aztecas
    {2751.9771,		-2453.8113,		13.6432},	 //Katona
    {-1616.5693,	684.1102,			7.1875},	 //SFPD
    {999.0977,		-1446.3744,		13.5469},	 //Oktató
	{2523.0586,		-1637.3992,		14.0488},  //Grove Street Families
	{-2196.7427,	287.2462,		35.3203}, //  SF taxi
	{-2594.0452,	642.2524,		14.4531}, // SF Mentõ
	{976.2130,-1268.2438,16.9894}, // VPOP	
	{-1335.4485,476.7428,7.1875} // Columbia
};
new SpawnHelyek2[22][2] = {
//  Int / VW
	{0, 0}, //Semmi
	{6, 0}, //LSPDt
	{3, 0}, //FBI
	{0, 0}, //Ballas
	{0, 0}, //Mentõ
	{0, 0}, //LCN
	{0, 0}, //Triad
	{3, 0}, //Önkormányzat
	{0, 0}, //Hitman
	{0, 0}, //Riporter
	{0, 0}, //Taxi
	{0, 0}, //Olasz
	{0, 0}, //orosz
	{0, 0}, //Los Aztecas
	{0, 0}, //LSAA
	{0, 0}, //PD
	{0, 0}, //Oktató
	{0, 0}, //The Green Gang
	{0, 0}, // SF taxi
	{0, 0}, // SF Mentõ
	{0, 0}, // VPOP	
	{0, 0} // Columbia
};

new Float:LoginSpawn[5][6] = {
	{1480.950, -1667.963, 21.431, 1481.058, -1758.957, 13.546}, // LS VH
	{-2719.094, 365.416, 9.331, -2771.326, 381.861, 5.876}, // SF VH
	{-1961.091, 588.879, 41.463, -1939.949, 551.257, 35.121}, // SF Bank
	{1442.384, -1045.555, 31.919, 1466.145, -1005.719, 26.836}, // LS Bank
	{1220.516, -1301.526, 34.050, 1177.698, -1322.449, 14.083} // LS Kórház
};

new Float:UttisztitoCheckpointok[15][3] = {
	{2042.814453, -1077.234497, 24.224184},
	{2081.817871, -1889.327026, 12.948751},
	{1961.662109, -2153.399902, 12.958511},
	{1454.344726, -1393.411010, 12.949224},
	{1472.282714, -1732.610961, 12.949385},
	{1077.881713, -1851.862426, 12.957169},
	{ 748.104309, -1763.538574, 12.493334},
	{1216.641723, -1194.164916, 20.116668},
	{1799.023681, -1731.869873, 12.949433},
	{1951.156494, -1752.129150, 12.949685},
	{1821.753784, -1913.239624, 12.954136},
	{2175.790771, -1384.980957, 23.394639},
	{2303.439208, -1321.457519, 23.402212},
	{2465.900878, -1256.681884, 24.687801},
	{2641.676025, -1280.775390, 46.773239}
};

new Float:FarmerCheckpointok[15][3] = {
	{-144.2250,6.3327,3.1172},
	{-156.7336,-4.6921,3.1172},
	{-197.6722,-25.3455,3.1172},
	{-226.9735,-53.3480,3.1172},
	{-248.5798,1.2757,2.6420},
	{-237.3711,36.1308,2.6101},
	{-210.1225,50.6599,3.1172},
	{-179.6299,102.5558,3.1172},
	{-125.9726,60.4897,3.1172},
	{-121.7111,98.8998,3.1172},
	{-130.3643,120.6673,3.1172},
	{-157.6150,111.7535,3.1172},
	{-177.8784,154.6687,6.1659},
	{-201.1922,174.4869,8.2516},
	{-228.9051,20.4614,3.0874}
};

new Float:FunyiroCheckpointok[16][3] = {
	{1943.9900,-1245.6160,19.1354},
	{1893.9377,-1244.1603,14.6031},
	{1875.6932,-1227.2356,16.4437},
	{1864.1442,-1204.0964,21.5165},
	{1876.6600,-1184.5115,23.4685},
	{1879.9319,-1160.6038,23.9330},
	{1898.8823,-1150.8660,24.3791},
	{1922.4103,-1151.3838,23.9467},
	{1950.5023,-1168.3359,20.5332},
	{1994.7494,-1150.0680,22.1778},
	{2006.9094,-1171.7098,20.7685},
	{2032.6486,-1189.8680,22.2880},
	{2053.5908,-1183.7035,23.6910},
	{2053.0061,-1227.6870,23.7022},
	{2021.2045,-1248.8296,23.7382},
	{2003.1487,-1228.5803,21.0391}
};

new Float:KukasCheckpointok[14][3] = {
	{1830.5853,-1699.1915,13.5469},
	{1003.1350,-1105.9508,23.8281},
	{1461.5050,-1488.4668,13.5469},
	{1486.8047,-1847.3901,13.5469},
	{1071.5273,-777.7357,107.2672},
	{959.7419,-822.2549,96.4251},
	{914.8740,-671.0469,117.1924},
	{1439.3481,-1324.8379,13.5458},
	{2566.1631,-1035.9598,69.5781},
	{2456.9834,-1023.9104,59.6187},
	{2396.7175,-1391.0240,24.0000},
	{2381.9146,-1940.1727,13.5469},
	{667.2060,-623.4116,16.3359},
	{1920.5352,-2123.2224,13.5848}
};

#define KereskedoSpawnok 2

new Float:KereskedoSpawn[KereskedoSpawnok][4] = {
	{-1712.508911, 16.418497, 3.594062, 317.3471},
	{-1701.155029, 8.260698, 3.554687, 317.3471}
};

new BelsoArak[1+36] = {
	0,
	50000, 50000, 60000, 70000, 100000,
	130000, 130000, 150000, 200000, 700000,
	160000, 220000, 150000, 100000, 100000,
	250000, 210000, 300000, 220000, 500000,
	510000, 600000, 220000, 400000, 1500000,
	1200000, 1700000, 1600000, 900000, 1400000,
	1600000, 2600000, 3000000, 3300000, 3500000,
	3200000
};

//Idõeltolódás a szerver miatt, javítása:
#define IDOHOZZAADAS 0

#define MAXINT 55
#define MAXIGENYLES 7
#define MAX_KOCSIK 100
#define MIN_VEHI_ID 400
#define MAXHAZPERSOR 5
#define MAXROSSZVALASZ 3
#define ALAPINTERIORSZAM 1

new VersenySzorzo[8] = { //Százalékban
35,		//1.
30,		//2.
25,		//3.
20,		//4.
15,		//5.
10,		//6.
7,		//7.
5			//8.
};

//Admin /goto
#define GOTOSZAMA 19
new Float:GotoPos[GOTOSZAMA][3] = {
	{884.8886,-1219.7520,18.0127}, // LS kamion
	{1543.981079, -1675.703491, 13.557516}, // LS LSPD
	{1460.035522, -1025.965087, 23.828125}, // LS Bank
	{1178.275024, -1322.871704, 14.112019}, // LS Kórház
	{1962.086791, -2187.048095, 13.546875}, // LS Reptér
	{2771.321533, -1624.911376, 10.927155}, // LS Gyár
	{2579.649169, -641.969482, 135.868911}, // LS Hegy
	{1828.587280, -1682.910522, 13.546875}, // LS Alhambra
	{379.869781, -2034.582031, 7.830090}, // LS Kikötõ NY
	{2682.927001, -2452.239746, 13.543884}, // LS Kikötõ K
	{-1753.261108, -592.223205, 16.484375}, // SF Reptér
	{-2705.837402, 376.239288, 4.968334}, // SF VH
	{-1942.018676, 566.536682, 35.241447}, // SF Bank
	{-1568.687377, 662.583557, 7.187500}, // SF SFPD
	{-2730.046875, 77.727020, 4.335937}, // SF Gyár
	{-1707.197753, 583.357116, 25.473482}, // SF Drog
	{-2311.386962, -1642.797851, 483.703125}, // Chilliad
	{-375.322052, -1442.390869, 25.726562}, // Farm
	{135.3359,1955.3657,19.4308} // Fort
};
new GotoNev[GOTOSZAMA][20] = {
	{"LS - kamion"},
	{"LS - LSPD"},
	{"LS - Bank"},
	{"LS - Kórház"},
	{"LS - Reptér"},
	{"LS - Gyár"},
	{"LS - Hegy (drog)"},
	{"LS - Alhambra"},
	{"LS - Kikötõ (NY)"},
	{"LS - Kikötõ (K)"},
	{"SF - Reptér"},
	{"SF - VH"},
	{"SF - Bank"},
	{"SF - SFPD"},
	{"SF - Gyár"},
	{"SF - Drog"},
	{"Egyéb - Chilliad"},
	{"Egyéb - Farm"},
	{"Egyéb - Fort"}
};

new RendelesID[37] = {
	411, 475, 560, 562, 565, 559,
	558, 429, 555, 475, 405, 551,
	540, 587, 535, 575, 534, 536,
	603, 402, 542, 415, 451, 480,
    500, 410, 600, 602, 545, 589,
	439, 496, 413, 422, 482, 554,
	579
};

new RendelesNev[37][60] = {
	{"Infernus"},
	{"Bullet"},
	{"Sultan"},
	{"Elegy"},
	{"Flash"},
	{"Jester"},
	{"Uranus"},
	{"Banshee"},
	{"Windsor"},
	{"Sabre"},
	{"Sentinel"},
	{"Merit"},
	{"Vincent"},
	{"Euros"},
   	{"Slamvan"},
   	{"Broadway"},
   	{"Remington"},
   	{"Blade"},
   	{"Phoenix"},
   	{"Buffalo"},
   	{"Clover"},
   	{"Cheetah"},
   	{"Turismo"},
   	{"Comet"},
   	{"Mesa"},
   	{"Manana"},
   	{"Picador"},
   	{"Alpha"},
   	{"Hustler"},
   	{"Club"},
   	{"Stallion"},
   	{"Blistac"},
   	{"Pony"},
   	{"Bobcat"},
   	{"Burrito"},
   	{"Yosemite"},
	{"Huntley"}
};

new RendelesAra[37] = {
	5000000, 6000000, 6500000, 6500000, 5500000, 6000000,
	6300000, 5800000, 7000000, 4000000, 7000000, 6700000,
	5000000, 5500000, 7000000, 6500000, 7500000, 7250000,
    8000000, 7750000, 4000000, 8500000, 9000000, 7750000,
	5200000, 2000000, 4500000, 8000000, 5200000, 5100000,
	6900000, 5300000, 5000000, 3200000, 4000000, 3900000,
	4400000

};

enum Halak
{
	pHorgaszbot,
	pCsali,
	pOsszesFogott,
	pSlot1,
	pSlot2,
	pSlot3,
	pSlot4,
	pSlot5,
	pSlot1nev,
	pSlot2nev,
	pSlot3nev,
	pSlot4nev,
	pSlot5nev,
	pAranyhoz
}
new pHalak[MAX_PLAYERS][Halak];


//Versenyhez
enum rinfo
{
	rStatusz,
	rEpitesAlatt,
	rCP,
	rInditotta,
	rIndul,
	rElindult,
	rNev[60],
	rSaveNev[32],
	rDij,
	Float:rSzorzo,
	rNyeremeny,
	rEngedelyezettKocsik[25],
	rBeert
}
new RaceInfo[RACESLOTOK][rinfo];
new Float:RaceStart[RACESLOTOK][3];
new Float:RaceCel[RACESLOTOK][3];
new Float:RaceCP[RACESLOTOK][RACEMAXCP][3];
new rHelyezes1[64] = "NINCS", rHelyezes2[64] = "NINCS", rHelyezes3[64] = "NINCS", rHelyezes4[64] = "NINCS", rHelyezes5[64] = "NINCS", rHelyezes6[64] = "NINCS", rHelyezes7[64] = "NINCS", rHelyezes8[64] = "NINCS"; // RACE HELYEZÉSEK MENTÉSE
new rNyeremeny1,rNyeremeny2,rNyeremeny3,rNyeremeny4,rNyeremeny5,rNyeremeny6,rNyeremeny7,rNyeremeny8;

enum xinfo
{
	xVersenyen,
	xCP,
	xKoviCP,
	xIdo,
	xEpites,
	xEpitesLoad,
	xEpitesCP,
	xHelyezes,
	xKocsi
}
new PlayerRaceInfo[MAX_PLAYERS][xinfo];

enum xtinfo
{
	bool:tNitroVolt,
	bool:tHidrVolt,
	tNitro,
	tNitroIdo,
	tUjito,
	bool:tOrvos,
	tSegitIdo,
	tEMP
}
new PlayerRaceTuning[MAX_PLAYERS][xtinfo];

//static gTeam[MAX_PLAYERS];
new CurCol[MAX_PLAYERS] = 0;
new Conn[MAX_PLAYERS] = 0;
new Money[MAX_PLAYERS] = 0;
new Text:MoneyTxt[MAX_PLAYERS];
new MoneyTxtCreated[MAX_PLAYERS];
new Text:resitd, Text:FeketesegTD;
new BViadal[MAX_PLAYERS] = 0;
new BVStart = 0;
new BVIdo = 1800;
new BVJatekosok = 0;
new BVPenz = 0;
new Locsolas[MAX_PLAYERS] = NINCS;
new Locsolniakar[MAX_PLAYERS] = NINCS;
new TudReportolni[MAX_PLAYERS] = 0;
new TilosOlni = 0; 
new HazKulcs[MAX_PLAYERS] = NINCS;
new JarmuKulcs[MAX_PLAYERS] = NINCS;
new PSzam1[MAX_PLAYERS] = 0;
new PSzam2[MAX_PLAYERS] = 0;
new PSzam3[MAX_PLAYERS] = 0;
new PSzam4[MAX_PLAYERS] = 0;
new PSzam5[MAX_PLAYERS] = 0;
new PSzam6[MAX_PLAYERS] = 0;
new PSzam7[MAX_PLAYERS] = 0;
new PSzam8[MAX_PLAYERS] = 0;
new VanSzelvenye[MAX_PLAYERS] = 0;
new PSorsolas = 300; // másodperc
new talalatok[MAX_PLAYERS] = 0;
new RadioHallgatas[MAX_PLAYERS] = NINCS;

#define CARRESIIDO 3600
new ResiCounter = CARRESIIDO;
new TimerCounter;
new SzerverCounter;

new Text:InfoTextDraw[MAX_PLAYERS];
new Text:InfoTextDraw2[MAX_PLAYERS];
new InfoTextDrawCreated[MAX_PLAYERS];
new InfoTextDrawCreated2[MAX_PLAYERS];

new Text:HelyezesTD[MAX_PLAYERS];
new bool:HelyezesTDCreated[MAX_PLAYERS];

// You can change the color in the define's below.
#define COLOR_GreenMoney 0x009900EE
#define COLOR_YellowMoney 0x999900EE
#define COLOR_RedMoney 0x990000EE
#define COLOR_GreyMoney 0xC0C0C0EE
#define COLOR_Live 0xFF6C00FF

//new FALSE = false;

#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1
#define SendFormatMessage(%1,%2,%3,%4) do{new sendfstring[128];format(sendfstring,128,(%3),%4);SendClientMessage(%1,(%2),sendfstring);}while(FALSE)
#define SendFormatMessageToAll(%1,%2,%3) do{new sendfstring[128];format(sendfstring,128,(%2),%3);SendClientMessageToAll((%1),sendfstring);}while(FALSE)
//#define Format(%1,%2,%3) do{ format(%1,sizeof(%1),(%2),%3); } while(FALSE)
#define Format(%1,%2,%3) format(%1,sizeof(%1),(%2),%3)
#define ABroadCastFormat(%1,%2,%3,%4) do{new sendfstring[128];format(sendfstring,128,(%3),%4);ABroadCast(%1,sendfstring,%2);}while(FALSE)
#define ClearAnim(%1) ApplyAnimation(%1, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0)

#define PlayerSQLID(%1) PlayerInfo[%1][pID]
#define SQLID(%1) PlayerInfo[%1][pID]

//#define CarUpdate(%1,%2,%3) do { new datastring[256],wherestring[32]; format(datastring,256,(%2),%3); format(wherestring,32,"id='%d'",%1); Mysql_Set(SQL_DB_Kocsik, datastring, wherestring); } while(FALSE)
//#define HazUpdate(%1,%2,%3) do { new datastring[256],wherestring[32]; format(datastring,256,(%2),%3); format(wherestring,32,"id='%d'",%1); Mysql_Set(SQL_DB_Hazak, datastring, wherestring); } while(FALSE)
#define PlayerUpdate(%1,%2,%3) do { new datastring[256],wherestring[32]; format(datastring,256,(%2),%3); format(wherestring,32,"id='%d'",PlayerSQLID(%1)); Mysql_Set(SQL_DB_Player, datastring, wherestring); } while(FALSE)
//#define BizUpdate(%1,%2,%3) do { new datastring[256],wherestring[32]; format(datastring,256,(%2),%3); format(wherestring,32,"id='%d'",%1); Mysql_Set(SQL_DB_Bizek, datastring, wherestring); } while(FALSE)

#define chrtolower(%1) \
	(((%1) > 0x40 && (%1) <= 0x5A) ? ((%1) | 0x20) : (%1))

#define BIZ_GS1 0
#define BIZ_GS2 1
#define BIZ_ETTEREM  2
#define BIZ_TUNING 3
#define BIZ_BERLES1 4
#define BIZ_BERLES2 5
#define BIZ_TELEFON 6
#define BIZ_OLAJ 7
#define BIZ_REZSI 8
#define BIZ_IMPORT 9
#define BIZ_HAZ 10
#define BIZ_HIRDETES 11
#define BIZ_FIXCAR 12
#define BIZ_247 13
#define BIZ_PB 14
#define BIZ_SFTUNING 15
#define BIZ_MCDONALD 16
#define BIZ_CSIRKE 17
#define BIZ_PIZZA 18
#define BIZ_KOCSMA 19
#define BIZ_PIGPEN 20
#define BIZ_AUTOMATA 21

//Datepropok
#define DP_Kocsi 1
#define DP_Haz 2
#define DP_Biz 3

//Dialog id-k
#define DIALOG_REGISTRATION 10
#define DIALOG_LOGIN 11
#define DIALOG_MUNKA_LEGALIS 12
#define DIALOG_MUNKA_ILLEGALIS 13
#define DIALOG_BELSO 14
#define DIALOG_GOTO 15
#define DIALOG_CAR 16
#define DIALOG_ADO 17
#define DIALOG_VESZ 18
//#define DIALOG_KOCSI 19
#define DIALOG_FBI 19
#define DIALOG_BEP 20
#define DIALOG_GABI 21
#define DIALOG_RACETUNING 22
#define DIALOG_RACETUNING_2 23
/*#define DIALOG_TRIAD 22
#define DIALOG_TRIAD2 23
#define DIALOG_TRIAD3 24
#define DIALOG_TRIAD4 25
#define DIALOG_TRIAD5 26*/


//stockos funkciók
#define STOCK_Ellenoriz 1

//Munkák folyamatai
#define M_CSERJE 1
#define M_MAK 2
#define M_CANNABIS 3
#define M_KOKAIN 11
#define M_HEROIN 12
#define M_MARIHUANA 13
#define M_MATERIAL 14
#define M_MELLENY 15
#define M_SEGIT 21
#define M_MOTOR 22
#define M_BELSO 23
#define M_MSEGIT 24

//Alapmunkák
#define MUNKA_DETEKTIV 1
#define MUNKA_UGYVED 2
#define MUNKA_PROSTI 3
#define MUNKA_DROG 4
#define MUNKA_AUTOTOLVAJ 5
#define MUNKA_SZERELO 6
#define MUNKA_TESTOR 7
#define MUNKA_FEGYVER 8
#define MUNKA_AUTOKERESKEDO 9
#define MUNKA_UTTISZTITO 10
#define MUNKA_BOXOLO 11
#define MUNKA_BUS 12
#define MUNKA_UJSAGOS 13
#define MUNKA_HACKER 14
#define MUNKA_KAMIONOS 15
#define MUNKA_FARMER 16
#define MUNKA_FUNYIRO 17
#define MUNKA_EPITESZ 18
#define MUNKA_PANCEL 19
#define MUNKA_KUKAS 20


new kaszinoosszeg;
new kaszinoplusz;
new riporterlogolas[MAX_PLAYERS] = 0;
new benzinkutlogolas[MAX_PLAYERS] = 0;
new benzinkutjovedelem[MAX_PLAYERS] = 0;

new LegalisMunkak[14][3][20] = {
	{MUNKA_DETEKTIV, "Detektív", 3},
	{MUNKA_UGYVED, "Ügyvéd", 6},
	{MUNKA_SZERELO, "Szerelõ", 5},
	{MUNKA_TESTOR, "Testõr", 3},
	{MUNKA_AUTOKERESKEDO, "Autókereskedõ", 15},
	{MUNKA_UTTISZTITO, "Úttisztító", 1},
	{MUNKA_BOXOLO, "Boxoló", 3},
	{MUNKA_BUS, "Buszsofõr", 7},
	{MUNKA_UJSAGOS, "Újságkihordó", 5},
	{MUNKA_KAMIONOS, "Kamionos", 2},
	{MUNKA_FARMER, "Farmer", 1},
	{MUNKA_FUNYIRO, "Fûnyíró", 1},
	{MUNKA_EPITESZ, "Építész", 10},
	{MUNKA_KUKAS, "Kukás", 5}
};

new IllegalisMunkak[6][3][20] = {
	{MUNKA_FEGYVER, "Fegyverkereskedõ", 5},
	{MUNKA_PROSTI, "Prostituált", 3},
	{MUNKA_DROG, "Drogdíler", 3},
	{MUNKA_AUTOTOLVAJ, "Autótolvaj", 3},
	{MUNKA_HACKER, "Hacker", 8},
	{MUNKA_PANCEL, "Páncélkészítõ", 12}
};

//Leaderes melók
#define LMUNKA_SCPD 1
#define LMUNKA_FBI 2
#define LMUNKA_BALLAS 3
#define LMUNKA_MENTO 4
#define LMUNKA_CAMORRA 5
#define LMUNKA_YAKUZA 6
#define LMUNKA_ONKORMANYZAT 7
#define LMUNKA_HITMAN 8 // D. Cortez
#define LMUNKA_RIPORTER 9
#define LMUNKA_TAXI 10
#define LMUNKA_VAGOS 11
#define LMUNKA_SAMAFIA 12
#define LMUNKA_AZTEC 13
#define LMUNKA_KATONA 14
#define LMUNKA_SFPD 15
#define LMUNKA_OKTATO 16
#define LMUNKA_GSF 17
#define LMUNKA_SFTAXI 18
#define LMUNKA_SFMENTO 19
#define LMUNKA_VPOP 20
#define LMUNKA_COLUMBIA 21

//Helyek
#define IsAt_McDonald 1
#define IsAt_Pizzazo 2
#define IsAt_Csirkes 3
#define IsAt_HotDog 9
#define IsAt_Korhaz 10
#define IsAt_Etterem 11
#define IsAt_LSPDBorton 20
#define IsAt_Fort 25
#define IsAt_KereskedoHQ 30
#define IsAt_ATM 31
//#define IsAt_Hotel 32
#define IsAt_Festo 40
#define IsAt_Haz 41
#define IsAt_HazElott 42
#define IsAt_Bank 43
#define IsAt_Buszmegallo 44
#define IsAt_Csokiautomata 45
#define IsAt_Italautomata 46

//Színek, egyebek
#define COLOR_INVISIBLE 0xFFFFFF00
#define COLOR_PIROS 0xFF0000FF
#define COLOR_PINK 0xFF80FFC7
#define COLOR_SKEK 0x2641FEAA
#define COLOR_LIGHTBROWN 0x8B4513FF
#define COLOR_ORANGE 0xFF8C00AA
#define CHECKPOINT_NONE 0
#define CHECKPOINT_HOME 12
#define COLOR_BLACK 0x050505AA
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_RED 0xAA3333AA
#define COLOR_RED2 0xAA0000AA
#define COLOR_BLUE 0x4661FEAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_NEWS 0xFFA500AA
#define COLOR_OOC 0xE0FFFFAA
#define TEAM_CYAN 1
#define TEAM_BLUE 2
#define TEAM_GREEN 3
#define TEAM_ORANGE 4
#define TEAM_COR 5
#define TEAM_BAR 6
#define TEAM_TAT 7
#define TEAM_CUN 8
#define TEAM_STR 9
#define TEAM_HIT 10
#define TEAM_ADMIN 11
#define OBJECTIVE_COLOR 0x64000064
#define TEAM_GREEN_COLOR 0xFFFFFFAA
#define TEAM_JOB_COLOR 0xFFB6C1AA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define TEAM_BLUE_COLOR 0x8D8DFF00
#define COLOR_ADD 0x63FF60AA
#define TEAM_GROVE_COLOR 0x00D900C8
#define TEAM_VAGOS_COLOR 0xFFC801C8
#define TEAM_BALLAS_COLOR 0xD900D3C8
#define TEAM_AZTECAS_COLOR 0x01FCFFC8
#define TEAM_CYAN_COLOR 0xFF8282AA
#define TEAM_ORANGE_COLOR 0xFF830000
#define TEAM_COR_COLOR 0x39393900
#define TEAM_BAR_COLOR 0x00D90000
#define TEAM_TAT_COLOR 0xBDCB9200
#define TEAM_CUN_COLOR 0xD900D300
#define TEAM_STR_COLOR 0x01FCFF00
#define TEAM_ADMIN_COLOR 0x00808000
#define COLOR_INVIS 0xAFAFAF00
#define COLOR_SPEC 0xBFC0C200
#define COLOR_ULTRAPIROS 0xE60000FF
#define COLOR_UJIRC 0x00A2FFFF
#define COLOR_GOV1 0xFF8800FF
#define COLOR_GOV2 0xEA0000FF
#define COLOR_RENDEZVENY 0x00C79DFF
#define Pink 0xFF00FFFF
#define Pink2 0xFF1493FF

new SzervezetSzinek[21] = 
{
	NINCS, // SCPD
	NINCS, // FBI
	COLOR_PINK, // Ballas
	NINCS, // LSMD
	COLOR_WHITE, // Camorra
	COLOR_BLACK, // TRIAD
	NINCS, // Önkormányzat
	NINCS, // D.Cortez - TÖRÖLT
	NINCS, // Riporter
	NINCS, // Taxi
	COLOR_YELLOW, // Vagos
	NINCS, // VAS - Törölt
	COLOR_BLUE, // Aztec
	NINCS, // Katonaság
	NINCS, // SFPD - TÖRÖLT
	NINCS, // Oktatók
	COLOR_GREEN, // GSF
	NINCS, // SF Taxi - TÖRÖLT
	NINCS, // SFMD - TÖRÖLT
	NINCS, // VPOP
	COLOR_RED // RSM
};

new SzervezetLimit[22] = {
	50, // SCPD
	20, // FBI
	25, // Ballas
	30, // Mentõ
	25, // Camorra
	25, // Yakuza
	20, // Önkormányzat
	0, // -
	20, // Riporter
	30, // Taxi
	25, // Vagos
	0, // -
	25, // Aztec
	25, // Katonaság
	0, // .
	25, // Oktató
	25, // GSF
	0, // -
	0, // -
	20, // VPOP
	30 // RSM
};

new Szervezetneve[21][3][32] = {
	//Név / Rövidítés / Ékezet nélküli rövidítés
	{"SCPD", "SCPD", "SCPD"}, // 1
	{"FBI", "FBI", "FBI"}, // 2
	{"Ballas", "Ballas", "Ballas"}, // 3
	{"SCMD", "SCD", "SCMD"}, // 4
	{"Camorra", "Camorra", "Camorra"}, // 5
	{"Yakuza", "Yakuza", "Yakuza"}, // 6
	{"Önkormányzat", "Önkormányzat", "Onkormanyzat"}, // 7
	{"D Cortez", "D Cortez", "D Cortez"}, // 8
	{"Riporter", "Riporter", "Riporter"}, // 9
	{"Los Santos Taxi", "LS Taxi", "LS Taxi"}, // 10
	{"Vagos", "Vagos", "Vagos"}, // 11
	{"Volume Architect Stunter", "V.A.S", "V.A.S"}, // 12
	{"Los Aztecas", "Los Aztecas", "Los Aztecas"}, // 13
	{"Katonaság", "Katonaság", "Katonasag"}, // 14
	{"SF Rendõrség", "SFPD", "SFPD"}, // 15
	{"See City Oktatási Központ", "SCOK", "SCOK"}, // 16
	{"Grove Street Families", "Grove Street Families", "GSF"}, // 17
	{"San Fierro Taxi", "SF Taxi", "SF Taxi"}, // 18
	{"SFMD", "SFMD", "SFMD"}, // 19
	{"NAV", "NAV", "NAV"}, // 20
	{"Columbian Drog Cartel", "CDC", "CDC"} // 21
};

new Rangok[21][13][32] = {
	//{"Kadét", "Õrmester", "Hadnagy", "Százados", "Õrnagy", "Alezredes", "Ezredes", "Tábornok"},
	{"Kadét", "Õrmester", "Törzsõrmester", "FõTörzsõrmester", "Zászlós", "Törzszászlós", "FõTörzszászlós", "Hadnagy", "Fõhadnagy", "Százados", "Õrnagy", "Alezredes", "Ezredes"},
	{"FBI Rookie", "FBI Rookie", "FBI Detective", "FBI Agent", "FBI Special Agent", "FBI Special Agent in Charge", "FBI Director", "FBI HeadDirector", "FBI HeadDirector", "FBI HeadDirector", "FBI HeadDirector", "FBI HeadDirector", "FBI HeadDirector"},
	{"The Newcomer", "Dawg", "Outsider", "Nigga", "Buddy", "Brother", "The Boss", "The BigBoss", "The BigBoss", "The BigBoss", "The BigBoss", "The BigBoss", "The BigBoss"},
	{"LS Ápoló", "LS Ápoló", "LS Medikus", "LS Rezidens", "LS Orvos", "LS Szakorvos", "LS Fõorvos", "LS Professzor", "LS Professzor", "LS Professzor", "LS Professzor", "LS Professzor", "LS Professzor"},
	{"Támogató", "Katona", "Végrehajtó", "Beszerzõ", "Kereskedelmi tanácsadó", "Tanácsadó", "Alvezér", "Fõnök", "Családfõ", "Keresztapa", "Keresztapa", "Keresztapa", "Keresztapa"},
	{"Shateigashira", "Shateigashira", "Fuku-Honbucho", "So-Honbucho", "Saiko-Komon", "Wakagashira", "Sensei", "Kumicho", "Oyabun", "Oyabun", "Oyabun", "Oyabun", "Oyabun"},
	{"Jegyellenõr", "Sofõr", "Testõr", "Fõtestõr", "Adóellenõr", "Miniszter", "Alelnök", "Elnök", "Elnök", "Elnök", "Elnök", "Elnök", "Elnök"},
	{"Associate", "Associate", "Soldier", "Caporegime", "Consigliere", "Underboss", "GodFather", "GodFather", "GodFather", "GodFather", "GodFather", "GodFather", "GodFather"},
	{"Tanuló riporter", "Riporter", "Fõriporter", "Rádiós", "Szerkesztõ", "Rendezõ Asszisztens", "gazgatóhelyettes ", "Igazgató", "Igazgató", "Igazgató", "Igazgató", "Igazgató", "Igazgató"},
	{"LS Újonc", "LS Gyakornok", "LS Sofõr", "LS Limuzinsofõr", "LS Állomás felügyelõ", "LS Menetirányító", "LS Igazgatóhelyettes", "LS Igazgató", "LS Igazgató", "LS Igazgató", "LS Igazgató", "LS Igazgató", "LS Igazgató"},
	{"Novato", "Perro", "Hermano", "Maton", "Asesino", "Capitan", "Mano Derecha", "El Jefe", "El Jefe", "El Jefe", "El Jefe", "El Jefe", "El Jefe"}, // Vagos
	{"Student", "Beginner", "Helper", "Teacher", "Breaker", "Driver", "Prince", "Senior", "Senior", "Senior", "Senior", "Senior", "Senior"}, // VAS
	{"Recluta", "Miembro", "Ejecutor", "Soldato", "Consejero", "UnderBoss", "Don Aztecas", "GodFather", "GodFather", "GodFather", "GodFather", "GodFather", "GodFather"}, //{"Outsider", "Outsider", "Associate", "Solider", "Capo", "UnderBoss", "Don Aztecas", "GodFather"},
	{"Katona Közlegény", "Katona Honvéd", "Katona Tizedes", "Katona Õrmester", "Katona Hadnagy", "Katona Fõhadnagy", "Katona Százados", "Katona Õrnagy", "Katona Alezredes", "Katona Ezredes", "Katona Dandártábornok", "Katona Tábornagy", "Katona Parancsnok"},
	{"SF Kadét", "SF Zászlós", "SF Törzsõrmester", "SF Hadnagy", "SF Alezredes", "SF Ezredes", "SF Tábornok", "SF Admirális", "SF Admirális", "SF Admirális", "SF Admirális", "SF Admirális", "SF Admirális"},
	{"Tanuló tanár", "Tanársegéd", "Tanár", "Fõtanár", "Professzor", "Dékán", "Igazgató helyettes", "Igazgató", "Igazgató", "Igazgató", "Igazgató", "Igazgató", "Igazgató"},
	{"Probationary", "Outsider", "Buddy", "Nigga", "Feeka", "Brother", "Boss", "GangBoss", "GangBoss", "GangBoss", "GangBoss", "GangBoss", "GangBoss"},
	{"SF Újonc", "SF Gyakornok", "SF Sofõr", "SF Limuzinsofõr", "SF Állomás felügyelõ", "SF Menetirányító", "SF Igazgatóhelyettes", "SF Igazgató", "SF Igazgató", "SF Igazgató", "SF Igazgató", "SF Igazgató", "SF Igazgató"},
	{"SF Ápoló", "SF Ápoló", "SF Medikus", "SF Rezidens", "SF Orvos", "SF Szakorvos", "SF Fõorvos", "SF Professzor", "SF Professzor", "SF Professzor", "SF Professzor", "SF Professzor", "SF Professzor"},
	{"NAV Õrmester", "NAV Törzsõrmester", "NAV Fõtörzsõrmester", "NAV Zászlós", "NAV Törzszászlós", "NAV Fõtörzszászlós", "NAV Hadnagy", "NAV Fõhadnagy", "NAV Százados", "NAV Õrnagy", "NAV Alezredes", "NAV Ezredes", "NAV VezérEzredes"},
	{"Independientes", "Adquisiciones", "Miembros", "Seguridad", "Líder de la banda", "Gángster", "Exterminador", "Comandante", "Mano derecha", "General", "Boss", "Boss", "Boss"}
};

new Float:iPlayerHealth[MAX_PLAYERS];
new Float:iNewPlayerHealth[MAX_PLAYERS];
new Float:iPlayerArmour[MAX_PLAYERS];
new Float:iNewPlayerArmour[MAX_PLAYERS];
new iPlayerMoney[MAX_PLAYERS];
new iNewPlayerMoney[MAX_PLAYERS];
new iPlayerAmmo[MAX_PLAYERS];
new iNewPlayerAmmo[MAX_PLAYERS];
new iPlayerVirtualWorld[MAX_PLAYERS];
new iNewPlayerVirtualWorld[MAX_PLAYERS];
new iPlayerScore[MAX_PLAYERS];
new iNewPlayerScore[MAX_PLAYERS];
new iPlayerTeam[MAX_PLAYERS];
new iNewPlayerTeam[MAX_PLAYERS];
new iPlayerSkin[MAX_PLAYERS];
new iNewPlayerSkin[MAX_PLAYERS];
new iPlayerWantedLevel[MAX_PLAYERS];
new iNewPlayerWantedLevel[MAX_PLAYERS];
new iPlayerWeapon[MAX_PLAYERS];
new iNewPlayerWeapon[MAX_PLAYERS];
new Sokkolt[MAX_PLAYERS];
new Leutott[MAX_PLAYERS];
new Fbibelepes;
new Fbibent = 0
new Fbicelpont[MAX_PLAYERS];
new Hazbanvan[MAX_PLAYERS];
new Fbios[MAX_PLAYERS];
new bool:Leutve[MAX_PLAYERS];
new LeutveIdo[MAX_PLAYERS];
new AblakLent[MAX_VEHICLES];
new Ugrasok[MAX_PLAYERS][3];
new ReportolasIdo[MAX_PLAYERS];
new skine[MAX_PLAYERS];
new fegyvere[MAX_PLAYERS];
new bool:NPCKocsi[MAX_VEHICLES];
//new Text3D:KocsiRendszamID[MAX_VEHICLES];

new HatartAtlepte[MAX_PLAYERS];
new Nyomozott[MAX_PLAYERS];
new SSSSzef;
new DeanObject[2];
new YakuzaKapu;
new YakuzaKapu2;
new Camorrakapu[7];
new Columbiakapu[4];
//forward Timer();
forward Fbitimer();

forward SebessegKorlatozo();
forward NPCTimer();
forward SzamlalasTimer(nid);
forward FelvetelFolytatasa(npcid, berakas);
forward BenzinTankolas(playerid);
forward AlapTuning(playerid);
forward UnFreeze(playerid);
forward MySQLUpdater();
forward Updater(type);
forward FbiKapuBecsuk();
forward Vizsgaido(playerid);
forward Fbikapcsolodas(playerid);

forward OnPlayerHealthChange(playerid, Float:newhealth, Float:oldhealth);
forward OnPlayerArmourChange(playerid, Float:newarmour, Float:oldarmour);
forward OnPlayerMoneyChange(playerid, newmoney, oldmoney);
forward OnPlayerAmmoChange(playerid, newammo, oldammo);
forward OnPlayerVirtualWorldChange(playerid, newvirtualworld, oldvirtualworld);
forward OnPlayerScoreChange(playerid, newscore, oldscore);
forward OnPlayerTeamChange(playerid, newteam, oldteam);
forward OnPlayerSkinChange(playerid, newskin, oldskin);
forward OnPlayerWantedLevelChange(playerid, newwantedlevel, oldwantedlevel);
forward OnPlayerWeaponChange(playerid, newweapon, oldweapon);

forward SecTimer();
forward RaceTimer();
forward TimerStarter();
forward SzerverNev();
forward PuttoSorsolas();
forward CsomagTartoMentes();
forward CsomagTartoBetoltes();
/*forward MatricaMentes();
forward MatricaBetoltes();*/

forward HaznalVan(playerid);
forward RandomHirdetes();

forward TextDrawUpdateAll();
forward AfkChecker();
forward Jail(playerid, muvelet[], ido, tipus[], oka[]);
forward DateProp(playerid, type);
forward MysqlEllenorzes();
forward AdatMentes(playerid);
forward AdatMentesSQL(playerid);
forward Spawnolas();
forward Restart();
forward Stop();
forward KocsiRespawn(kocsi);
forward AlapKocsiRespawn(kocsi);
//forward KocsiMatrica(kocsi);
forward VsTuningok();
forward VsTuning(kocsi);

forward PenzCheck(playerid, uj, regi, penzmozgas, minusz);

forward MunkaCheckpointCheck(playerid);
forward DutyFegyverekBeallitasa(playerid);
forward Munkaruha(playerid, ruha);

forward Startup(playerid, vehicleid);
forward IntekSzama();
//forward LoadBan();
forward LoadIgenylesek();
forward LoadCar();
forward LoadHouse();
forward LoadFrakcio();
forward LoadBankAdatok();
forward SaveBankAdatok();
forward SaveHalak(playerid);
forward LoadBenzinKutak();
forward SzefToltes();
forward ATMToltes();
forward LoadATM();
forward SaveATM();

forward LoadCeg();
forward SaveCeg();

forward LoadAjtok();
forward LoadInts();
forward LoadBizz();
forward LoadStuff();
forward SaveStuff();
forward LoadFamilies();
forward SaveFamilies();
forward LoadTurfs();
forward SaveTurfs();
forward LoadIRC();
forward SaveIRC();
forward LoadPapers();
forward SavePapers();
forward LoadBoxer();
forward SaveBoxer();
forward PenzUpdate();
//forward LoadBandaSzef();
//forward SaveBandaSzef();
forward LoadLspdmoney();
forward OnAjtoUpdate();
forward SaveFrakcio();
forward SaveBenzinKutak();
forward LoadKincsek();
forward OnIgenyUpdate();
//forward OnPropUpdate();
forward OnIntsUpdate();
forward JoinChannel(playerid, number, line[]);
forward JoinChannelNr(playerid, number);
forward SaveRaktar();
forward LoadRaktar();

forward IsAVsKocsi(kocsi);
forward IsAtDealership(playerid);
forward IsAt(playerid, hol);

forward IsKocsi(carid, tipus[]);
forward JatekosBeszallas(playerid, vehicleid);

forward IsAtClothShop(playerid);
forward IsAtGasStation(playerid);
forward IsAtFishPlace(playerid);
forward IsAtCookPlace(playerid);
forward IsAtBar(playerid);
forward IsAdmin(playerid);
forward IsAS(playerid);
forward UjMunka(playerid, munkaszama, munka);

forward MunkaLeader(playerid, munka);
forward AMT(playerid, munka);
forward LMT(playerid, munka);
forward Munkarang(playerid, rang);

forward SajatKocsi(id, kocsi);
forward RosszValasz(playerid);
//szállítás
forward FszallitasTimer(playerid);
//szállítás
forward SearchingHit(playerid);
forward DollahScoreUpdate();
forward SetPlayerSpawn(playerid);
forward SetupPlayerForClassSelection(playerid);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward CrimInRange(Float:radi, playerid,copid);
forward SendCopMessage(color, string[]);
forward ABroadCast(color,const string[],level);
forward GetClosestPlayer(p1);
forward IsPlayerInTurf(playerid, turfid);
forward LoadMission(playerid,name[]);
forward SaveMission(playerid,name[]);
forward PrintBizInfo(playerid,targetid);
forward SetPlayerUnjail();
forward IdojarasValtozas();
forward Drog();
//forward SonaFigyelo();
forward OtherTimer();
forward EgyebTimer();
forward MunkaTimer();
forward TeleTimer();
forward Hatar();
forward EletTimer();
forward RingTonerRev();
forward RingToner();
forward HireCost(carid);
forward BanLog(string[]);
forward KickLog(string[]);
//forward ClintLog(string[]);
forward ChatLog(string[]);
forward EgyebLog(string[]);
forward NevLog(string[]);
forward PosLog(string[]);
forward CommandLog(string[]);
forward BeKilepes(string[]);
forward PayLog(string[]);
forward KillLog(string[], cheat);
forward CKLog(string[]);
forward IsATruck(carid);
forward IsAPlato(carid);
forward IsAnAmbulance(carid);
forward IsACopCar(carid);
forward IsAPlane(carid);
forward IsABoat(carid);
forward IsABicikli(carid);
forward Bikes(carid);
forward LakoKocsik(carid);
forward IsAMotor(carid);
forward IsACop(playerid);
forward IsHitman(playerid);
forward IsDirector(playerid);
forward IsAMember(playerid);
forward IsAnInstructor(playerid);
forward Spectator();
forward ConvertTicks(ticks);
forward Encrypt(string[]);
forward KartingEnded();
forward StartKarting();
forward PrepareKarting();
forward PaintballEnded();
forward PaintballFreeze();
forward StartPaintball();
forward PreparePaintball();
forward c4szereles(playerid);
forward BankC4Robban(playerid);
forward BankLezar();
forward fuggoseg(playerid);
forward Edzes(playerid);
forward maszas2(playerid);
forward robpenzpakolas(playerid);
forward EgyenlegLekeres(playerid);
forward SisakFel(playerid);
forward JarmuFeltores(playerid);
forward JarmuRiasztoBe(carid);
forward JarmuRiaszto(playerid);
forward Mergezes(playerid);
forward EgyenlegFeltoltes(playeid, cashdeposit);
forward LspdmoneyLog(string[]);
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward SetPlayerCriminal(playerid,declare,reason[]);
forward SetPlayerFree(playerid,declare,reason[]);
//forward SetPlayerWeapons(playerid);
forward ShowStats(playerid,targetid);
forward ShowDetektivPlayerStats(playerid,targetid);
forward ShowZseb(playerid,targetid);
forward SetPlayerToTeamColor(playerid);
forward split(const strsrc[], strdest[][], delimiter);

forward OnPlayerLogin(playerid);
forward AdatBetoltes(playerid);
forward AdatBetoltesSQL(playerid);

forward OnPlayerUpdate(playerid);
forward BroadCast(color,const string[]);
forward OOCOff(color,const string[]);
forward OOCNews(color,const string[]);
forward SendJobMessage(job, color, string[]);
forward SendFamilyMessage(family, color, string[]);
forward SendNewFamilyMessage(family, color, string[]);
forward SendIRCMessage(channel, color, string[]);
forward SendTeamMessage(team, color, string[]);
forward SendRadioMessage(member, color, string[]);
forward SendSwatRadioMessage(color, string[]);
forward SendPowerRadioMessage(color, string[]);
forward SendKamionRadioMessage(color, string[]);
forward SendHitmanRadioMessage(color, string[]);
forward SendAdminMessage(color, string[]);
//forward AddCar(carcoords);
forward IsVehicleOccupied(vehicleid);
forward AllCarSpawn();
forward AllCarRespawn();
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetector2(Float:radi, string[], Float:oldposx, Float:oldposy, Float:oldposz, col1, col2, col3, col4, col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward ClearCK(ck);
forward ClearFamily(family);
forward ClearMarriage(playerid);
forward ClearPaper(paper);
forward ClearCrime(playerid);
forward FishCost(playerid, fish);
forward ClearFishes(playerid);
forward ClearFishID(playerid, fish);
forward ClearCooking(playerid);
forward ClearCookingID(playerid, cook);
forward ClearGroceries(playerid);
forward Lotto();
forward Benzinkut(playerid);
new benzinkuttick = 0;
forward CarCheck();
forward CarInit();
forward CarTow(carid);
forward CarRespawn(carid);
forward LockCar(carid);
forward UnLockCar(carid);
forward CheckGas();
forward Fillup(playerid);
forward Fagyasztas(playerid);
forward Kiolvasztas(playerid);
forward FegyverElvesz(playerid, weaponid);
forward Munkavege(playerid, Munka, db);
forward Kaszinojatek(playerid);
forward HalaszTimer(playerid);
forward HalaszKapas(playerid);
forward HalaszMulasztas(playerid);


new drogbetakarithato[MAX_PLAYERS] = 0;
forward DrogTakarit(playerid);
forward DroTakarithato(playerid);
forward DrogPlant(playerid);
forward DrogKesz(playerid);
new ultetett[MAX_PLAYERS] = 0;
new pdrogja[MAX_PLAYERS];
new pdrogjaX[MAX_PLAYERS];
new pdrogjaY[MAX_PLAYERS];
new pdrogjaZ[MAX_PLAYERS];

new kapastimer = 0;
new halaszkapas[MAX_PLAYERS] = 0;
new kapasfix = 120;
new berantasszamlalo[MAX_PLAYERS] = 0;
new halaszvege[MAX_PLAYERS] = 0;
forward StoppedVehicle();
forward SyncTime();
forward SyncUp();
forward SaveAccounts();
forward BackupTimer();
forward IsPlayerInZone(playerid, zoneid);
forward Production();
forward Checkprop(type);
forward PayDay();
forward ini_GetKey( line[] );
forward ini_GetValue( line[] );
forward PlayerPlayMusic(playerid);
forward StopMusic();
forward PlayerFixRadio(playerid);
forward PlayerFixRadio2();
forward CustomPickups();
forward IdleKick();
forward SetCamBack(playerid);
forward FixHour(hour);
forward AddsOn();
forward LAddsOn();
forward EngineBreak();
//forward kfreeze(playerid);
//forward Reporttimer(playerid);

//------------------------------------------------------------------------------------------------------

new Max_Benzin[212] = {
	60, //Landstalker (400)
	60, //Bravura (401)
	60, //Buffalo (402)
	300, //Linerunner (403)
	60, //Perenail (404)
	60, //Sentinel (405)
	60, //Dumper (406)
	60, //Firetruck (407)
	60, //Trashmaster (408)
	60, //Stretch (409)
	60, //Manana (410)
	60, //Infernus (411)
	60, //Voodoo (412)
	60, //Pony (413)
	100, //Mule (414)
	60, //Cheetah (415)
	120, //Ambulance (416)
	60, //Leviathan (417)
	60, //Moonbeam (418)
	60, //Esperanto (419)
	60, //Taxi (420)
	60, //Gates (421)
	60, //Bobcat (422)
	60, //Mr Whoopee (423)
	60, //BF Injection (424)
	60, //Hunter (425)
	60, //Premier (426)
	100, //Enforcer (427)
	100, //Securicar (428)
	60, //Banshee (429)
	60, //Predator (430)
	120, //Bus (431)
	120, //Rhino (432)
	150, //Barracks (433)
	60, //Hotknife (434)
	60, //Artic trailer 1 (435)
	60, //Previon (436)
	60, //Coach (437)
	60, //Cabbie (438)
	60, //Stallion (439)
	60, //Rumpo (440)
	60, //RC Bandit (441)
	60, //Romero (442)
	80, //Packer (443)
	60, //Monster (444)
	60, //Admiral (445)
	60, //Squalo (446)
	60, //Seasparrow (447)
	30, //Pizza boy (448)
	60, //Tram (449)
	60, //Artic trailer 2 (450)
	60, //Turismo (451)
	60, //Speeder (452)
	60, //Reefer (453)
	60, //Tropic (454)
	100, //Flatbed (455)
	100, //Yankee (456)
	30, //Caddy (457)
	60, //Solair (458)
	60, //Top fun (459)
	60, //Skimmer (460)
	60, //PCJ 600 (461)
	30, //Faggio (462)
	60, //Freeway (463)
	60, //RC Baron (464)
	60, //RC Raider (465)
	60, //Glendale (466)
	60, //Oceanic (467)
	40, //Sanchez (468)
	60, //Sparrow (469)
	80, //Patriot (470)
	30, //Quad (471)
	60, //Coastguard (472)
	60, //Dinghy (473)
	60, //Hermes (474)
	60, //Sabre (475)
	60, //Rustler (476)
	60, //ZR 350 (477)
	60, //Walton (478)
	60, //Regina (479)
	60, //Comet (480)
	60, //BMX (481)
	60, //Burrito (482)
	60, //Camper (483)
	60, //Marquis (484)
	60, //Baggage (485)
	60, //Dozer (486)
	60, //Maverick (487)
	60, //VCN Maverick (488)
	80, //Rancher (489)
	80, //FBI Rancher (490)
	60, //Virgo (491)
	60, //Greenwood (492)
	60, //Jetmax (493)
	60, //Hotring (494)
	60, //Sandking (495)
	60, //Blista Compact (496)
	60, //Police Maverick (497)
	60, //Boxville (498)
	60, //Benson (499)
	60, //Mesa (500)
	60, //RC Goblin (501)
	60, //Hotring A (502)
	60, //Hotring B (503)
	60, //Blood ring banger (504)
	60, //Rancher(lure) (505)
	60, //Super GT (506)
	60, //Elegant (507)
	100, //Journey (508)
	60, //Bike (509)
	60, //Mountain Bike (510)
	60, //Beagle (511)
	60, //Cropduster (512)
	60, //Stuntplane (513)
	300, //Petrol (514)
	300, //Roadtrain (515)
	60, //Nebula (516)
	60, //Majestic (517)
	60, //Buccaneer (518)
	60, //Shamal (519)
	60, //Hydra (520)
	40, //FCR 900 (521)
	40, //NRG 500 (522)
	40, //HPV 1000 (523)
	60, //Cement Truck (524)
	60, //Towtruck (525)
	60, //Fortune (526)
	60, //Cadrona (527)
	80, //FBI Truck (528)
	60, //Williard (529)
	60, //Fork lift (530)
	40, //Tractor (531)
	60, //Combine (532)
	60, //Feltzer (533)
	60, //Remington (534)
	60, //Slamvan (535)
	60, //Blade (536)
	60, //Freight (537)
	60, //Streak (538)
	60, //Vortex (539)
	60, //Vincent (540)
	60, //Bullet (541)
	60, //Clover (542)
	60, //Sadler (543)
	60, //Firetruck LA (544)
	60, //Hustler (545)
	60, //Intruder (546)
	60, //Primo (547)
	60, //Cargobob (548)
	60, //Tampa (549)
	60, //Sunrise (550)
	60, //Merit (551)
	60, //Utility van (552)
	60, //Nevada (553)
	60, //Yosemite (554)
	60, //Windsor (555)
	60, //Monster A (556)
	60, //Monster B (557)
	60, //Uranus (558)
	60, //Jester (559)
	60, //Sultan (560)
	60, //Stratum (561)
	60, //Elegy (562)
	60, //Raindance (563)
	60, //RC Tiger (564)
	60, //Flash (565)
	60, //Tahoma (566)
	60, //Savanna (567)
	60, //Bandito (568)
	60, //Freight flat (569)
	60, //Streak (570)
	60, //Kart (571)
	15, //Mower (572)
	100, //Duneride (573)
	40, //Sweeper (574)
	60, //Broadway (575)
	60, //Tornado (576)
	60, //AT 400 (577)
	100, //DFT 30 (578)
	60, //Huntley (579)
	60, //Stafford (580)
	60, //BF 400 (581)
	80, //News Van (582)
	60, //Tug (583)
	60, //Petrol tanker (584)
	60, //Emperor (585)
	60, //Wayfarer (586)
	60, //Euros (587)
	80, //Hotdog (588)
	60, //Club (589)
	60, //Freight box (590)
	60, //Artic trailer 3 (591)
	60, //Andromada (592)
	60, //Dodo (593)
	60, //RC Cam (594)
	60, //Launch (595)
	60, //Cop car LS (596)
	60, //Cop car SF (597)
	60, //Cop car LV (598)
	80, //Ranger (599)
	60, //Picador (600)
	150, //SWAT Tank (601)
	60, //Alpha (602)
	60, //Phoenix (603)
	60, //Glendale(damaged) (604)
	60, //Sadler(damaged) (605)
	60, //Bag box A (606)
	60, //Bag box B (607)
	60, //Stairs (608)
	100, //Boxville (609)
	60, //Farm trailer (610)
	60 //Utility van trailer (611)
};

//VEHICLE MODEL NAMES
new vehName[][] =
{
    "Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster",
	"Stretch","Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam",
	"Esperanto","Taxi","Gates","Bobcat","Whoopee","BFInjection","Hunter","Premier","Enforcer",
	"Securicar","Banshee","Predator","Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach",
	"Cabbie","Stallion","Rumpo","RCBandit","Romero","Packer","Monster0","Admiral","Squalo","Seasparrow",
	"Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed","Yankee","Caddy","Solair",
	"Berkley'sRCVan","Skimmer","PCJ600","Faggio","Freeway","RCBaron","RCRaider","Glendale","Oceanic",
	"Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler","ZR350","Walton",
	"Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","NewsChopper","Rancher",
	"FBIRancher","Virgo","Greenwood","Jetmax","Hotring0","Sandking","BlistaCompact","PoliceMaverick",
	"Boxvillde","Benson","Mesa","RCGoblin","HotringA","HotringB","Bloodring","Rancher",
	"SuperGT","Elegant","Journey","Bike","Mountain","Beagle","Cropduster","Stunt","Tanker","Roadtrain",
	"Nebula","Majestic","Buccaneer","Shamal","Hydra","FCR900","NRG500","HPV1000","Cement","TowTruck",
	"Fortune","Cadrona","FBITruck","Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan",
	"Blade","Freight","Streak","Vortex","Vincent","Bullet","Clover","Sadler","Firetruck","Hustler","Intruder",
	"Primo","Cargobob","Tampa","Sunrise","Merit","Utility","Nevada","Yosemite","Windsor","MonsterA","MonsterB",
	"Uranus","Jester","Sultan","Stratium","Elegy","Raindance","RCTiger","Flash","Tahoma","Savanna","Bandito",
	"FreightFlat","StreakCarriage","Kart","Mower","Dune","Sweeper","Broadway","Tornado","AT400","DFT30",
	"Huntley","Stafford","BF400","NewsVan","Tug","PetrolTrailer","Emperor","Wayfarer","Euros","Hotdog","Club",
	"FreightBox","Trailer","Andromada","Dodo","RCCam","Launch","LSPD","SFPD","LVPD",
	"Ranger","Picador","SWAT","Alpha","Phoenix","Glendale","Sadler","Luggage","Luggage","Stairs",
	"Boxville","Tiller","UtilityTrailer","Stratum"
};

new aWeaponSlotok[48] = {
	0, // 0
	0, // 1
	1, // 2
	1, // 3
	1, // 4
	1, // 5
	1, // 6
	1, // 7
	1, // 8
	1, // 9
	10, // 10
	10, // 11
	10, // 12
	10, // 13
	10, // 14
	10, // 15
	8, // 16
	8, // 17
	8, // 18
	0, // 19
	0, // 20
	0, // 21
	2, // 22
	2, // 23
	2, // 24
	3, // 25
	3, // 26
	3, // 27
	4, // 28
	4, // 29
	5, // 30
	5, // 31
	4, // 32
	6, // 33
	6, // 34
	7, // 35
	7, // 36
	7, // 37
	7, // 38
	8, // 39
	12, // 40
	9, // 41
	9, // 42
	9, // 43
	11, // 44
	11, // 45
	11, // 46
	0 // 47 ???
}

new aWeaponNames[][32] = {
	{"Ököl"}, // 0
	{"Boxer"}, // 1
	{"Golf"}, // 2
	{"Stick"}, // 3
	{"Kés"}, // 4
	{"Baseball"}, // 5
	{"Shovel"}, // 6
	{"Pool"}, // 7
	{"Katana"}, // 8
	{"Láncfûrész"}, // 9
	{"PurpleDildo"}, // 10
	{"BigWhiteVibrator"}, // 11
	{"MediumWhiteVibrator"}, // 12
	{"SmallWhiteVibrator"}, // 13
	{"Virág"}, // 14
	{"Cane"}, // 15
	{"Gránát"}, // 16
	{"Teargas"}, // 17
	{"Molotov"}, // 18
	{" "}, // 19
	{" "}, // 20
	{" "}, // 21
	{"Colt45"}, // 22
	{"SilencedColt45"}, // 23
	{"Deagle"}, // 24
	{"Shotgun"}, // 25
	{"Sawnoff"}, // 26
	{"Combat"}, // 27
	{"Uzi"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4"}, // 31
	{"Tec9"}, // 32
	{"Rifle"}, // 33
	{"Sniper"}, // 34
	{"Rocket"}, // 35
	{"HRocket"}, // 36
	{"Flamethrower"}, // 37
	{"Minigun"}, // 38
	{"Satchel"}, // 39
	{"Detonator"}, // 40
	{"Spray"}, // 41
	{"Fire"}, // 42
	{"Camera"}, // 43
	{"NightVision"}, // 44
	{"InfraredVision"}, // 45
	{"Parachute"}, // 46
	{"FakePistol"} // 47
};

const Float:INF_FLOAT=Float:0x7F800000;

new bool:Mysql = false;
new MysqlHiba = 0;

new Utolso_Player = MAX_PLAYERS;

new BenzintSzallit[MAX_PLAYERS];

new Iterator:Cegek<MAX_CEG>;

new AdasVeteliNeki[MAX_PLAYERS];
new AdasVeteliTipus[MAX_PLAYERS];
new AdasVeteliAra[MAX_PLAYERS];
new AdasVeteliCucc[MAX_PLAYERS];

new MostLepettBe[MAX_PLAYERS];
new Fegyvere[MAX_PLAYERS];

new LKocsik[24][24];
new BerelhetoKocsik[20];
new BerelhetoKocsik2[2];
new AdminKocsik[2];
new UtolsoKocsi;
new KocsiRiaszto[MAX_VEHICLES];
new BackupTime[MAX_PLAYERS];
new HazPickup[MAXHAZ];
new FelujitasElfogadas[MAX_PLAYERS];
new RegEngedely[MAX_PLAYERS];
new RegAdatok[MAX_PLAYERS];

#if defined KELLAJTOPICKUP
new AjtoPickup[255];
#endif

new BizPickup[MAXBIZ];
new Float:JatekosElete[MAX_PLAYERS];
new Float:KocsiElete[MAX_VEHICLES];
new MunkaFelvetel[MAX_PLAYERS];
new AdminDuty[MAX_PLAYERS];
new Text3D: AdminDuty3D[MAX_PLAYERS];
/*new bool:SSSDuty[MAX_PLAYERS];
new Text3D: SSSDuty3D[MAX_PLAYERS];*/
new bool:Szunet[MAX_PLAYERS], SzunetIdo[MAX_PLAYERS];
new AFKIdo[MAX_PLAYERS];

new Jelzes[MAX_PLAYERS], JelzesIdo[MAX_PLAYERS];

//new OsszesKocsi;
new Text3D: Swat3D[MAX_PLAYERS];

new LopasProbalkozas[MAX_PLAYERS];
new CuccokAKocsiban[MAX_VEHICLES][20];
new OsszesCuccAKocsiban[MAX_VEHICLES];
new NevvaltasiEngedely[MAX_PLAYERS];
new Munkaban[MAX_PLAYERS];
new MunkaCheckpoint[MAX_PLAYERS];
new MunkaCheckpoint2[MAX_PLAYERS];
new Float:MunkaStarthely[MAX_PLAYERS][3];
new Matrica[MAXVSKOCSI];

new Rabol[MAX_PLAYERS];
new Mergezve[MAX_PLAYERS] = 0;
new KiMergezte[MAX_PLAYERS] = NINCS;
/*new Tankol[MAX_PLAYERS] = 0;
new MenyitTankol[MAX_PLAYERS] = NINCS;
new MenyiABenzinAra[MAX_PLAYERS] = NINCS;*/
new Tkerek[MAX_PLAYERS];
new Tszin[MAX_PLAYERS];
new Visz[MAX_PLAYERS];
new Adminseged[MAX_PLAYERS];
new Drogozott[MAX_PLAYERS];
new Animban[MAX_PLAYERS];
new bool:Beszallt[MAX_PLAYERS];
new bool:Aukciozik[MAX_PLAYERS];
new bool:Tamasi[MAX_PLAYERS];
new AJSzokesek[MAX_PLAYERS], AJVarakozas[MAX_PLAYERS];

new KocsiUtolsoHasznalat[MAX_VEHICLES];
new Szirena[MAX_PLAYERS] = {NINCS, ...};

new KocsiSokkolva[MAX_VEHICLES], KocsitSokkolt[MAX_PLAYERS];
new bool:Sokkol[MAX_PLAYERS], SokkObject[MAX_PLAYERS], Float:SokkTav[MAX_PLAYERS];

new bool:MentoHivas[MAX_PLAYERS], bool:TaxiHivas[MAX_PLAYERS];
new KiertMegy[MAX_PLAYERS];

new bool:Harcol[MAX_PLAYERS], HarcolTerulet[MAX_PLAYERS];

new Float:TVPos[MAX_PLAYERS][3], TVVW[MAX_PLAYERS], TVInt[MAX_PLAYERS];
new bool:Varosban[MAX_PLAYERS];
new bool:JatekBetoltve[MAX_PLAYERS];
new SebessegKorlat[MAX_PLAYERS];
new bool:MostHalt[MAX_PLAYERS];
new bool:JegyBuntetve[MAX_PLAYERS];
new bool:Kilepesek[MAX_PLAYERS];
new Tankol[MAX_PLAYERS][2];
new SpawnVedelem[MAX_PLAYERS];
new SpawnHely[MAX_PLAYERS];
new BelepesIdo[MAX_PLAYERS];
new bool:Kamera[MAX_PLAYERS];
new bool:PlayerOnline[MAX_PLAYERS];
new Nevek[MAX_PLAYERS];
new Biztos[MAX_PLAYERS];
new Skinsel[MAX_PLAYERS];
new Animbanemrakhato[MAX_PLAYERS];
new AFK[MAX_PLAYERS];
new Lefoglalt[MAX_PLAYERS];
new HitmanRendeles[MAX_PLAYERS];
new Engedely[MAX_PLAYERS];
new ElsoSpawn[MAX_PLAYERS];
new Dialog[MAX_PLAYERS];
new Buszok[2];
new szallit[MAX_PLAYERS];
new KamionUtvonal[MAX_PLAYERS];
new rtelo = 1;
new TanultStilus[MAX_PLAYERS];
new Edzik[MAX_PLAYERS];
new Szondaztat[MAX_PLAYERS];
new CsatlakozottSzamla[MAX_PLAYERS];

new
	bool:AntiFegyverCheat = true,
	bool:FegyverVan[MAX_PLAYERS][12],
	Fegyver[MAX_PLAYERS][12],
	Tolteny[MAX_PLAYERS][12],
	AC_Figyelmeztetes[MAX_PLAYERS];

new BejelentkezokSzama;

new bool:JarmuValtozasok[MAX_VEHICLES][2];

new engineOn[MAX_VEHICLES];
new CreatedCars[100];
new CreatedCar = 0;
//new kerekbilincs[MAX_VEHICLES] = 0;
new PenzszallitoPenz[MAX_VEHICLES];
new JatekosZsak[MAX_PLAYERS];

new SisakotVesz[MAX_PLAYERS];
new Sisak[MAX_PLAYERS];
new BankSzef = 500000;
new BankTulaj[20];
new BankMasodTulaj[20];
new Tax = 500000;
new TaxValue = 5000;
new Jackpot = 0;
new IgenylesEngedelyezve = 1;
new FBISzef = 10000000;
new Autojogsi = 0;
new Motorjogsi = 0;
new Kamionjogsi = 0;
new Repulojogsi = 0;
new Hajojogsi = 0;
new Horgaszjogsi = 0;
new Fegyverjogsi = 0;
new Rejtett[MAX_PLAYERS];
new Tanulofelpenz[MAX_PLAYERS] = 0;
new ModBetoltve = 0;
new Csere[MAX_PLAYERS] = NINCS;
new MitCsere[MAX_PLAYERS] = NINCS;
new StartingPaintballRound = 0;
new AnnouncedPaintballRound = 0;
new PaintballPlayers = 0;
new PaintballRound = 0;
new PaintballWinner = 999;
new PaintballWinnerKills = 0;
new StartingKartRound = 0;
new EndingKartRound = 0;
new AnnouncedKartRound = 0;
new KartingPlayers = 0;
new KartingRound = 0;
new FirstKartWinner = 999;
new SecondKartWinner = 999;
new ThirdKartWinner = 999;
new InRing = 0;
new RoundStarted = 0;
new BoxDelay = 0;
new Boxer1 = 255;
new Boxer2 = 255;
new TBoxer = 255;
new PlayerBoxing[MAX_PLAYERS];
new Medics = 0;
//new MedicCall = 999;
new MedicCallTime[MAX_PLAYERS];
new Mechanics = 0;
new MechanicCall = 999;
new MechanicCallTime[MAX_PLAYERS];
new TaxiDrivers = 0;
//new TaxiCall = 999;
new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new BusDrivers = 0;
new BusCall = 999;
new BusCallTime[MAX_PLAYERS];
new BusAccepted[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new RegistrationStep[MAX_PLAYERS];
new RosszValaszok[MAX_PLAYERS];
new MapIconsShown[MAX_PLAYERS];
new OnCK[MAX_PLAYERS];
new PlayerPaintballing[MAX_PLAYERS];
new PlayerPaintballKills[MAX_PLAYERS];
new PlayerKarting[MAX_PLAYERS];
new PlayerInKart[MAX_PLAYERS];
new SchoolSpawn[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new PlayersChannel[MAX_PLAYERS];
new PlayerOnMission[MAX_PLAYERS];
new MissionCheckpoint[MAX_PLAYERS];
new Tevezik[MAX_PLAYERS], Tevezve[MAX_PLAYERS];
new NoFuel[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
new ConsumingMoney[MAX_PLAYERS];
new BringingPaper[MAX_PLAYERS]; //Paper Boys must pick up a Paper first, then use /deliver
new GotPaper[MAX_PLAYERS]; //The player has a paper so he can use /read
new WritingPaper[MAX_PLAYERS]; //Used for onplayertext so he can type in lines
new WritingPaperNumber[MAX_PLAYERS]; //To which Paper in PaperInfo will it be written
new WritingLine[MAX_PLAYERS]; //Used for onplayertext to see which line he's at
new FishCount[MAX_PLAYERS];
new TutTime[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new BoxWaitTime[MAX_PLAYERS];
new TestFishes[MAX_PLAYERS];
new PaperOffer[MAX_PLAYERS];
new BoxOffer[MAX_PLAYERS];
new CarOffer[MAX_PLAYERS];
new CarPrice[MAX_PLAYERS];
new CarID[MAX_PLAYERS];
new CarCalls[MAX_PLAYERS];
new OrderReady[MAX_PLAYERS];
new ConnectedToPC[MAX_PLAYERS];
new MedicTime[MAX_PLAYERS];
new NeedMedicTime[MAX_PLAYERS];
new MedicBill[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new PlacedNews[MAX_PLAYERS];
new SelectChar[MAX_PLAYERS];
new SelectCharID[MAX_PLAYERS];
new SelectCharPlace[MAX_PLAYERS];
new ChosenSkin[MAX_PLAYERS];
new GettingJob[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new ApprovedLawyer[MAX_PLAYERS];
new CallLawyer[MAX_PLAYERS];
new WantLawyer[MAX_PLAYERS];
new CurrentMoney[MAX_PLAYERS];
new KickPlayer[MAX_PLAYERS];
new Robbed[MAX_PLAYERS];
new RobbedTime[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new STDPlayer[MAX_PLAYERS];
new SexOffer[MAX_PLAYERS];
new SexPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new DrugOffer[MAX_PLAYERS];
new DrugPrice[MAX_PLAYERS];
new DrugGram[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new WantedPoints[MAX_PLAYERS];
new WantedLevel[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new HitmanDuty[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gLastCar[MAX_PLAYERS];
new gReport[MAX_PLAYERS];
new gInfo[MAX_PLAYERS];
new gOoc[MAX_PLAYERS];
new gBooc[MAX_PLAYERS];
new gBoocszidas[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new StartTime[MAX_PLAYERS];
new HireCar[MAX_PLAYERS];
new SafeTime[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new gDice[MAX_PLAYERS];
new gGas[MAX_PLAYERS];
new gSpeedo[MAX_PLAYERS];
//new gSpentCash[MAX_PLAYERS];
new FirstSpawn[MAX_PLAYERS];
new SwitchKey[MAX_PLAYERS];
new Fixr[MAX_PLAYERS];
new Locator[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new RingTone[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
new gPlayerMission[MAX_PLAYERS];
new gLastDriver[MAX_VEHICLES];
new gCarLock[MAX_VEHICLES];
new KocsiSzinek[MAX_VEHICLES][2];
new bool:KocsibanVan[MAX_PLAYERS];
new MissionPlayable = 0;
new noooc = 1;
new hatar = 1;
new vk = 0;
new resivan = 0;
new noas = 0;
new adds = 1;
new ladds = 1;
new addtimer = 60000;
new laddtimer = 20000;
new Float:rx, Float:ry, Float:rz;
new cbjstore[128];
new motd[256];
//new rccounter = 0;
//new RStart;
new gdate = -1;
new ghour = 1;
new gminute = 0;
new gsecond = 0;
new numplayers = 0;
new dollah = 0; // Amount player recieves on spawn.
new realtime = 1;
new wtime = 15;
new levelcost = 25000;
//new deathcost = 100;
new realchat = 1;
new shifthour;
new urlap[MAX_PLAYERS];
new maszas[MAX_PLAYERS];
new AdminJelszoMegadva[MAX_PLAYERS];
new AdminSzint[MAX_PLAYERS];
new UresUveg[MAX_PLAYERS];
new LezartUtat[MAX_PLAYERS];
new Float:LezartUtX[MAX_PLAYERS], Float:LezartUtY[MAX_PLAYERS], Float:LezartUtZ[MAX_PLAYERS];

new DialogIDk[MAX_PLAYERS][MAX_PLAYERS];

//Timerek
//new othtimer, egyebtimer, teletimer, elettimer, synctimer, weathertimer, drogtimer, newmistimer, unjailtimer, turftimer;
//new pickuptimer, spectatetimer, productiontimer, accountstimer, checkgastimer, stoppedvehtimer, cartimer;
//new munkatimer, mysqltimer, randomtimer, afktimer, infotimer;
new Timerek[32] = -1;

new RendeltKocsik, RendelesDatum, RendelesAlatt, RendelesPenz, RendelesIdo, RendelesModel, RendelesAzon;
new KereskedoKocsiElad[MAX_PLAYERS], KereskedoKocsiVetel[MAX_PLAYERS], KereskedoKocsi[MAX_PLAYERS];

new levelexp = 4;
new cchargetime = 60;
new pickups;
new CIV[] = {7,19,20,23,73,101,122};
new STD1[] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
new STD2[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
new STD3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3};
new STD4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3};
new SELLCAR1[] = { 1000, 1124, 1245, 1349, 1475, 1574, 1636, 1762, 1895, 1946, 2000 };
new SELLCAR2[] = { 2099, 2135, 2255, 2378, 2457, 2563, 2614, 2721, 2878, 2988, 3000 };
new SELLCAR3[] = { 3058, 3175, 3212, 3377, 3454, 3555, 3678, 3751, 3865, 3964, 4000 };
new SELLCAR4[] = { 4077, 4123, 4275, 4378, 4422, 4565, 4613, 4752, 4897, 4911, 5000 };
new Float:ChangePos[MAX_PLAYERS][3];
new ChangePos2[MAX_PLAYERS][2];
new Float:PlayerPos[MAX_PLAYERS][6];
new Float:TeleportDest[MAX_PLAYERS][3];
new Float:TelePos[MAX_PLAYERS][6];
new SzefEngedely[MAX_PLAYERS] = 0;

new LSPDKapu, LSPDKapu2, LSPDAjto, LSPDAjto2, LSPDAjto3, LSPDAjto4, cella1, cella2, vhkapu1, vhkapu2;
new ujkatonakapu1;
new ujkatonakapu2;
new ujkatonakapu3;
new ujkatonakapu4;
new szerelokapu;
new AutoSzereloKapu;
new katonakapu1, katonakapu2;
//new ms13kapu, ms13kapu2;
new sfpdkapu;
new swatkapu1;
//new tggkapu2, tggkapu3, tggkapu4, tggkapu5;
new FortKapu;
new KereskedoKapu;
new KereskedoKapuHQn;
new VPOPkapu1;
new VPOPkapu2;
new LSTaxiKapu;
//new LeonKapu;
new hatar1;
new hatar2;
new GSFajto;
new GSFajto2;
new Ronkapu;
new VagosKapu1;
new VagosKapu2;
//new UjOktatoKapu;
new FbiTitokKapu1;
new FbiTitokKapu2;
new FbiTitokKapu3;
new Fbibelso;
new Fbilezaro1;
new Fbilezaro2;
new Fbilezaro3;
new Mentokapu[4];
new Fbiparkolo1;
new Fbiparkolo2;

new OktatoKapu;
/*new ballaskapu;
new ballaskapu2;
new ballaskapu3;*/
//new LeonKapu2;
//new SonaBejarat, SonaGarazs, SonaKapu1, SonaKapu2, SonaFoKapu;
new roadblock[MAX_PLAYERS];
new block[MAX_PLAYERS];
new HolTart[MAX_PLAYERS];
/*new FbiKapu1;
new FbiKapu2;*/
new AirGate;
//new Text:Textdraw0;
//new Text:Textdraw2;
new Rob = 0;
//new c4[MAX_PLAYERS];
//new c4ready;
//new c4robbant;
new AnimIdo[MAX_PLAYERS];
new ov[MAX_PLAYERS];
new SzajBekotve[MAX_PLAYERS];
new SzemBekotve[MAX_PLAYERS];
new OvFlood[MAX_PLAYERS];
new C4Lerakva[MAX_PLAYERS] = 0;
new C4Kocsiban[MAX_PLAYERS] = NINCS;
new Float:C4X[MAX_PLAYERS], Float:C4Y[MAX_PLAYERS], Float:C4Z[MAX_PLAYERS];
new VizsgaAjanlat[MAX_PLAYERS] = NINCS;
new Vizsgafajta[MAX_PLAYERS];
new VizsgaAr[MAX_PLAYERS] = 0;
new Autocp[MAX_PLAYERS];
new Repulocp[MAX_PLAYERS];
new Hajocp[MAX_PLAYERS];
new Kamioncp[MAX_PLAYERS];
new Motorcp[MAX_PLAYERS];
new Jogsineki[MAX_PLAYERS] = NINCS;
new PrivatAjanlat[MAX_PLAYERS] = NINCS;
new PrivatAr[MAX_PLAYERS] = NINCS;
new PrivatEngedely[MAX_PLAYERS] = NINCS;
new robmoney;
new lspdmoney;
//new c4ido[MAX_PLAYERS] = 60;
new robpenzido[MAX_PLAYERS];
new reporttiltva[MAX_PLAYERS];
//new bankriaszto;
new vontatokotel[MAX_PLAYERS];
new TvEngedely[MAX_PLAYERS];
new kutya[MAX_PLAYERS];
new tuningolo[MAX_PLAYERS];
new VanBombaBenne[MAX_VEHICLES];
new Belepve[MAX_PLAYERS];

new BankAjto;
new BankC4;
new BankRobIdo = 0;
new MikorRabolhato = 0;

new HibasBelepes[MAX_PLAYERS];

Float:GetDistance( Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2 )
{
    new Float:d;
    d += floatpower(x1-x2, 2.0);
    d += floatpower(y1-y2, 2.0);
    d += floatpower(z1-z2, 2.0);
    d = floatsqroot(d);
	return d;
}
#define GasMax 100
#define RunOutTime 30000
#define RefuelWait 7500

//========================== HAL ÁRAK / 1KG-KÉNT

#define SUGERAR 500
#define MAKRELAAR 550
#define CSATTOGOHALAR 600
#define BLUEMARLINAR 600
#define PISZTRANGAR 650
#define VITORLASHALAR 700
#define TONHALAR 750
#define ANGOLNAAR 750
#define AMURAR 850
#define KARDHALAR 900
#define SULLOAR 1450

#define HORGASZBOTAR 25000
#define CSALIAR 500

#define DOBOZPENZ 1
#define DOBOZSKILL 2
#define DOBOZARANY 3
#define DOBOZID 30

#define SUGERID 1
#define CSATTOGOHALID 2
#define PISZTRANGID 3
#define BLUEMARLINID 4
#define VITORLASHALID 5
#define MAKRELAID 6
#define TONHALID 8
#define ANGOLNAID 9
#define AMURID 10
#define KARDHALID 11
#define SULLOID 12


//#define CAR_AMOUNT 700 //Change to Your Vehicle Amount
new Gas[MAX_VEHICLES];
new Benzin[MAX_VEHICLES];

new Refueling[MAX_PLAYERS];
new MunkaFolyamatban[MAX_PLAYERS];

enum SavePlayerPosEnum
{
    Float:LastX,
    Float:LastY,
    Float:LastZ
}
new SavePlayerPos[MAX_PLAYERS][SavePlayerPosEnum];
new SpeedMode = 1;
new UpdateSeconds = 1;
new utalas[MAX_PLAYERS];



new Music[MAX_PLAYERS];
new Songs[7][1] = {
{1187},
{1185},
{1183},
{1097},
{1076},
{1068},
{1062}
};

new FishNames[22][20] = {
{"Kabát"},
{"Dzseki"},
{"Fûrészes Sügér"},
{"Vörös Csattogóhal"},
{"Nadrág"},
{"Pisztráng"},
{"Blue Marlin"},
{"Doboz"},
{"Makréla"},
{"Tengeri Sügér"},
{"Bakancs"},
{"Csuka"},
{"Vitorláshal"},
{"Szemét"},
{"Tonhal"},
{"Angolna"},
{"Delfin"},
{"Cápa"},
{"Teknõs"},
{"Harcsa"},
{"Money Bag"},
{"Kardhal"}
};

new Float:PaintballSpawns[7][3] = {
{-394.8027,2232.2317,42.4297},
{-430.8412,2240.5371,42.9834},
{-369.2361,2248.3127,42.4844},
{-350.8910,2218.0215,42.4912},
{-384.0544,2206.2908,42.4235},
{-395.7100,2214.9480,42.4297},
{-445.3718,2222.5481,42.4297}
};

new Float:gRandomPlayerSpawns[1][3] = {
{2223.8,-1147.1,1025.7} // sp1
};

new Float:gInviteSpawns[10][4] = {
{-1976.5912,166.1818,36.9623,272.6393},
{-1975.8610,162.1945,36.9623,272.0126},
{-1975.7461,157.5404,36.9623,276.1093},
{-1975.2136,151.4920,36.9623,268.2993},
{-1974.9963,145.3430,36.9623,269.2628},
{-1975.5842,140.8170,36.9623,269.8895},
{-1975.7874,134.0368,36.9623,271.7696},
{-1975.1681,129.0926,36.9623,270.8531},
{-1975.9069,121.4700,36.9623,270.5631},
{-1975.3311,112.7078,36.9623,267.7665}
};

/*new Float:gMedicSpawns[2][3] = {
{317.9066,315.6765,999.1484},
{317.6252,311.8465,999.1484}
};*/
enum KocsiEnum
{
	kUttisztito,
	kSzerelo,
	kProd,
	kRepulo,
	kKamion,
	kFarmer,
	kFunyiro,
	kKukas,
	kSzabad
}
new Kocsik[KocsiEnum][2];

/*
enum ipBannok
{
	Van,
	ibIp[MAX_PLAYER_NAME],
	ibBannolo[MAX_PLAYER_NAME],
	ibMikor[40],
	ibOka[100]
}

new IpBanInfo[MAXIPBAN][ipBannok];

enum banKarakter
{
	Van,
	bNev[MAX_PLAYER_NAME],
	bBannolo[MAX_PLAYER_NAME],
	bMikor[40],
	bOka[100]
}

new BanInfo[MAXBAN][banKarakter];*/

enum pBoxingStats
{
    TitelName[128],
    TitelWins,
    TitelLoses,
};
new Titel[pBoxingStats];

enum pPaperInfo
{
	PaperUsed,
	PaperMaker[20],
	PaperTitle[64],
	PaperText1[128],
	PaperText2[128],
	PaperText3[128],
	PaperText4[128],
	PaperText5[128],
	PaperText6[128],
	PaperText7[128],
	SafeSaving,
};
new PaperInfo[10][pPaperInfo];

enum pPaper
{
	pMaker[20],
	pTitle[64],
	pLine1[128],
	pLine2[128],
	pLine3[128],
	pLine4[128],
	pLine5[128],
	pLine6[128],
	pLine7[128],
};
new Paper[MAX_PLAYERS][pPaper];

enum fInfo
{
	FamilyTaken,
	FamilyName[20],
	FamilyMOTD[128],
	FamilyColor[20],
	FamilyLeader[MAX_PLAYER_NAME],
	FamilyMembers,
	Float:FamilySpawn[4],
	FamilyInterior,
};
new FamilyInfo[10][fInfo];

enum zInfo
{
	zOwner[64],
	zColor[20],
    Float:zMinX,
    Float:zMinY,
    Float:zMaxX,
    Float:zMaxY,
};
new TurfInfo[6][zInfo];
new Turfs[6];

enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

enum pCooking
{
	pCook1[20],
	pCook2[20],
	pCook3[20],
	pCook4[20],
	pCook5[20],
	pCWeight1,
	pCWeight2,
	pCWeight3,
	pCWeight4,
	pCWeight5,
	pCookID1,
	pCookID2,
	pCookID3,
	pCookID4,
	pCookID5,
};
new Cooking[MAX_PLAYERS][pCooking];

enum pGroceries
{
	pChickens,
	pChicken,
	pHamburgers,
	pHamburger,
	pPizzas,
	pPizza,
};
new Groceries[MAX_PLAYERS][pGroceries];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum eCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
};

enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hAdd1[128],
	hAdd2[128],
	hAdd3[128],
	hAdd4[128],
	hAdd5[128],
	hContact1[128],
	hContact2[128],
	hContact3[128],
	hContact4[128],
	hContact5[128],
};
new News[hNews];

new bool:VanAccountja[MAX_PLAYERS];

enum tInfo
{
	bool:tAktiv,
	tSebesseg,
	tBuntetes,
	tBuntetheto,
	Float:tPosX,
	Float:tPosY,
	Float:tPosZ,
	Text3D:t3D
}
new TrafiPax[MAX_PLAYERS][tInfo];

enum pInfo
{
	pID,
	pRegistered,
	pNev[MAX_PLAYER_NAME],
	pKey[40],
	pLevel,
	pAdmin,
	pDonateRank,
	gPupgrade,
	pConnectTime,
	pSex,
	pAge,
	pOrigin,
	pMuted,
	pExp,
	pCash,
	pAccount,
	pCrimes,
	pKills,
	pDeaths,
	pArrested,
	pWantedDeaths,
	pPhoneBook,
	pLottoNr,
	pFishes,
	pBiggestFish,
	pJob1,
	pJob2,
	pPayCheck,
	pHeadValue,
	pJailed,
	pJailTime,
	pMats,
	pKokain,
	pHeroin,
	pMarihuana,
	pLeader,
	pMember,
	pFMember,
	pRank,
	pChar,
	pContractTime,
    pContractTime2,
	pDetSkill,
	pSexSkill,
	pBoxSkill,
	pLawSkill,
	pMechSkill,
	pJackSkill,
	pCarSkill,
	pNewsSkill,
	pDrugsSkill,
	pCookSkill,
	pFishSkill,
	pHackingSkill,
	pRiasztoSkill,
	Float:pHealth,
	Float:pSHealth,
	pInt,
	pLocal,
	pModel,
	pPnumber,
	pPhousekey,
	pPhousekey2,
	pBerlo,
	pPbiskey,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic,
	pMotorJogsi,
	pKamionJogsi,
	pCarTime,
	pPayDay,
	pPayDayHad,
	pCDPlayer,
	pWins,
	pLoses,
	pAlcoholPerk,
	pDrugPerk,
	pMiserPerk,
	pPainPerk,
	pTraderPerk,
	pTut,
	pMissionNr,
	pWarns,
	pKWarns,
	pFuel,
	pMarried,
	pMarriedTo[256],
	pLokator,
	pHamisNev[256],
	//pNyomkovetes,
	//pNyomkoveto,
	pSpawned,
	pGPS,
	pMuanyag,
	pCserje,
	pMak,
	pCannabis,
	pKaja,
	pDrogido,
	pAS,
	Float:pCPosX,
	Float:pCPosY,
	Float:pCPosZ,
	pCVW,
	pCInt,
	pCrash,
	pFegyver[12],
	pTolteny[12],
	Float:pCelet,
	Float:pCpajzs,
	pPcarkey,
	pPcarkey2,
	pCigiUsed,
	pCigiFuggoseg,
	pCigi,
	pNikotin,
	pGyujto,
	pPia,
	pSwattag,
	pSwatRang,
	pKituntetes,
	pSzallitott,
	pSpawnchange,
	pTeloEgyenleg,
	pAdminAlnev[MAX_PLAYER_NAME],
	pAdminAlnevBe,
	pClint,
	pKotszer,
	pUtlevel,
	pStilus,
	pIP[16],
	pBankSzamla,
	pBankSzamlaSzam,
	pBankSzamlaJelszo,
	pC4,
	pHitman,
	pHitmanNev[MAX_PLAYER_NAME],
	pPremiumCsomag,
	pPremiumIdo,
	pPremiumPont,
	pPower,
	pReportChannel,
	pViewReportChannel,
	pReportTiltva,
	pAdoHaz,
	pAdoHazHol,
	pAdoSzint,
	pAdoJarmu,
	pAdoKitoltve,
	pAdoFizetve,
	pAdo,
	pAdoEllenorizve,
	pElozoParancs,
	pFlood,
	pHitel,
	pFelvettHitel,
	pHitelOra,
	pHitelElteltOra,
	pZarolva,
	pJegy,
	pSSS,
	pJailOK[80],
	pLekotottpenz,
	pFutamido,
	
};
new PlayerInfo[MAX_PLAYERS][pInfo];

#define HAZ_X 1
#define HAZ_Y 2
#define HAZ_Z 3
#define HAZ_Belso 4
#define HAZ_Health 5
#define HAZ_Armour 6
#define HAZ_Owner 7
#define HAZ_Value 8
#define HAZ_Hel 9
#define HAZ_Arm 10
#define HAZ_Lock 11
#define HAZ_Owned 12
#define HAZ_Rooms 13
#define HAZ_Rent 14
#define HAZ_Rentabil 15
#define HAZ_Takings 16
#define HAZ_Date 17
#define HAZ_Csak 18
#define HAZ_Csakneki 19
#define HAZ_Kaja 20
#define HAZ_Cigi 21
#define HAZ_Kokain 22
#define HAZ_Heroin 23
#define HAZ_Marihuana 24
#define HAZ_Mati 25
#define HAZ_Tipus 26
#define HAZ_Fegyverek 27
#define HAZ_Mellenyek 27

enum hInfo
{
	Van,
	Uj,
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	hBelso,
	hHealth,
	hArmour,
	hOwner[MAX_PLAYER_NAME],
	hValue,
	hHel,
	hArm,
	hLock,
	hOwned,
	hRooms,
	hRent,
	hRentabil,
	hTakings,
	hDate,
	hCsak,
	hCsakneki[MAX_PLAYER_NAME],
	hKaja,
	hCigi,
	hKokain,
	hHeroin,
	hMarihuana,
	hMati,
	hTipus,
	hFegyverek[10],
	hToltenyek[10],
	hMellenyek[10],
	bool:hNeedUpdate
};

enum hUpdateInfo
{
	bool:hEntrancex,
	bool:hEntrancey,
	bool:hEntrancez,
	bool:hBelso,
	bool:hHealth,
	bool:hArmour,
	bool:hOwner,
	bool:hValue,
	bool:hHel,
	bool:hArm,
	bool:hLock,
	bool:hOwned,
	bool:hRooms,
	bool:hRent,
	bool:hRentabil,
	bool:hTakings,
	bool:hDate,
	bool:hCsak,
	bool:hCsakneki,
	bool:hKaja,
	bool:hCigi,
	bool:hKokain,
	bool:hHeroin,
	bool:hMarihuana,
	bool:hMati,
	bool:hTipus,
	bool:hFegyverek,
	bool:hMellenyek
};

new HouseInfo[MAXHAZ][hInfo], HouseUpdates[MAXHAZ][hUpdateInfo], HazakSzamaOsszesen;

#define CAR_Owned 1
#define CAR_Owner 2
#define CAR_Id 3
#define CAR_Model 4
#define CAR_X 5
#define CAR_Y 6
#define CAR_Z 7
#define CAR_Angle 8
#define CAR_ColorOne 9
#define CAR_ColorTwo 10
#define CAR_Value 11
#define CAR_Lock 12
#define CAR_Date 13
#define CAR_Painted 14
#define CAR_Tuning 15
#define CAR_Kerek 16
#define CAR_Matrica 17

enum cInfo
{
	Van,
	cId,
	cModel,
	Float:cLocationx,
	Float:cLocationy,
	Float:cLocationz,
	Float:cAngle,
	cColorOne,
	cColorTwo,
	cOwned,
	cOwner[MAX_PLAYER_NAME],
	cValue,
	cLock,
	cDate,
	cPainted,
	cTuning,
	cKerek,
	cNeedUpdate,
	cMatrica
};

enum cUpdateInfo
{
	bool:cOwned,
	bool:cOwner,
	bool:cId,
	bool:cModel,
	bool:cLocationx,
	bool:cLocationy,
	bool:cLocationz,
	bool:cAngle,
	bool:cColorOne,
	bool:cColorTwo,
	bool:cValue,
	bool:cLock,
	bool:cDate,
	bool:cPainted,
	bool:cTuning,
	bool:cKerek,
	bool:cMatrica
}

new CarInfo[MAXVSKOCSI][cInfo], CarUpdates[MAXVSKOCSI][cUpdateInfo];

#define TERULET_Nev 1
#define TERULET_MinX 2
#define TERULET_MaxX 3
#define TERULET_MinY 4
#define TERULET_MaxY 5
#define TERULET_Tulaj 6
#define TERULET_HaszonMit 7
#define TERULET_HaszonMennyit 8
#define TERULET_Foglalva 9

enum terInfo
{
	Van,
	tZone,
	tArea,
	tNev[40],
	Float:tMinX,
	Float:tMaxX,
	Float:tMinY,
	Float:tMaxY,
	tTulaj,
	tHaszon,
	tHaszonMennyi,
	
	bool:tHarc,
	tLofegyver,
	tHarcolok[2],
	tVarakozasIdo,
	
	tFoglalva,
	bool:tNeedUpdate
};

enum tUpdateInfo
{
	bool:tNev,
	bool:tMinX,
	bool:tMaxX,
	bool:tMinY,
	bool:tMaxY,
	bool:tTulaj,
	bool:tHaszon,
	bool:tHaszonMennyi,
	bool:tFoglalva
}

new TeruletInfo[MAXTERULET][terInfo], TeruletUpdates[MAXTERULET][tUpdateInfo], bool:HarcVan;

enum igenyInfo
{
	Van,
	Nev[MAX_PLAYER_NAME],
	Belso,
	Float:iX,
	Float:iY,
	Float:iZ,
}

new HazIgenylesek[MAXIGENYLES][igenyInfo];

enum ajtoInfo
{
	Van,
	Nev[32],
	Csak[16],
	Float:BeX,
	Float:BeY,
	Float:BeZ,
	BeInt,
	BeVW,
	Float:KiX,
	Float:KiY,
	Float:KiZ,
	KiInt,
	KiVW,
	Zarva,
}

new Ajtok[MAXAJTO][ajtoInfo];

#define BIZ_Owned 1
#define BIZ_Owner 2
#define BIZ_Message 3
#define BIZ_Extortion 4
#define BIZ_X 5
#define BIZ_Y 6
#define BIZ_Z 7
#define BIZ_ExitX 8
#define BIZ_ExitY 9
#define BIZ_ExitZ 10
#define BIZ_LevelNeeded 11
#define BIZ_BuyPrice 12
#define BIZ_EntranceCost 13
#define BIZ_Till 14
#define BIZ_Locked 15
#define BIZ_Interior 16
#define BIZ_Products 17
#define BIZ_MaxProducts 18
#define BIZ_PriceProd 19
#define BIZ_VanBelso 20

enum bInfo
{
    bOwned,
	bOwner[64],
	bMessage[128],
	bExtortion[MAX_PLAYER_NAME],
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bProducts,
	bMaxProducts,
	bPriceProd,
	bVanBelso,
	bNeedUpdate
};

enum bUpdateInfo
{
    bool:bOwned,
	bool:bOwner,
	bool:bMessage,
	bool:bExtortion,
	bool:bEntranceX,
	bool:bEntranceY,
	bool:bEntranceZ,
	bool:bExitX,
	bool:bExitY,
	bool:bExitZ,
	bool:bLevelNeeded,
	bool:bBuyPrice,
	bool:bEntranceCost,
	bool:bTill,
	bool:bLocked,
	bool:bInterior,
	bool:bProducts,
	bool:bMaxProducts,
	bool:bPriceProd,
	bool:bVanBelso,
}
new BizzInfo[MAXBIZ][bInfo], BizzUpdates[MAXBIZ][bUpdateInfo];

enum repInfo
{
	rAdmins,
	rAdminHelpers,
	rPlayers,
	rTitle[40],
	rClosed,
	rTimeOut,
	rMaxPlayers,
	rSeeing
}
new ReportChannel[MAX_CHANNEL][repInfo];

enum BenzinKutInfo
{
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	bMaxBenzin,
	bBenzin,
	Float:bTav,
	bBerlo[64],
	bBenzinAra,
	bSzef,
	bNev[64],
	bSzint,
};
new BenzinKutak[MAX_BENZINKUT][BenzinKutInfo];
enum KincsInfo
{
	Float:kPosX,
	Float:kPosY,
	Float:kPosZ
}
new Kincs[409][KincsInfo];

enum fAdatok
{
	fPenz,
	fMati,
	fKokain,
	fHeroin,
	fMinrang,
	fKaja,
	fMarihuana,
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	fObject,
	Float:fPosA,
	fObjectID,
	fDeagle,
	fSilenced,
	fMp5,
	fM4,
	fShotgun,
	fJelszo[32],
	fFegyver[51],
	fTolteny[51],
	fUtolsoTamadas,
	fTagokSzama,
	fUtolsoTagFelvetel,
	fFizetes[13],
};

enum aAdatok
{
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	aObjectID,
};
new ATM[MAX_ATM][aAdatok];

enum cAdatok
{
	cNev[128],
	cTulaj[128],
	cSzint,
	cSzef,
	Float:cPosX,
	Float:cPosY,
	Float:cPosZ,
};
new Ceg[MAX_CEG][cAdatok];

new FrakcioInfo[MAX_FRAKCIO][fAdatok];

enum interiorsInfo
{
	iType[32],
	iNumber,
	Float:iExitX,
	Float:iExitY,
	Float:iExitZ,
};
new IntInfo[MAXINT][interiorsInfo];

enum pHaul
{
	pLoad,
};

new PlayerHaul[MAX_VEHICLES][pHaul];

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];

enum mInfo
{
    mTitle[128],
    mText1[128],
    mText2[128],
    mText3[128],
    mText4[128],
    mText5[128],
    mText6[128],
    mText7[128],
    mText8[128],
    mText9[128],
    mText10[128],
    mText11[128],
    mText12[128],
    mText13[128],
    mText14[128],
    mText15[128],
    mText16[128],
    mText17[128],
    mText18[128],
    mGText1[128],
    mGText2[128],
    mGText3[128],
    mGText4[128],
    mGText5[128],
    mGText6[128],
	Float:mCP1[3],
	Float:mCP2[3],
	Float:mCP3[3],
	Float:mCP4[3],
	Float:mCP5[3],
	Float:mCP6[3],
	mReward,
	mToggle,
};
new MissionInfo[mInfo];

enum kInfo
{
    kTitle[128],
    kMaker[MAX_PLAYER_NAME],
    kText1[128],
    kText2[128],
    kText3[128],
    kText4[128],
    kText5[128],
    kText6[128],
    kText7[128],
    kText8[128],
    kText9[128],
    kText10[128],
    kText11[128],
    kText12[128],
    kText13[128],
    kText14[128],
    kText15[128],
    kText16[128],
    kText17[128],
    kText18[128],
    kGText1[128],
    kGText2[128],
    kGText3[128],
    kGText4[128],
    kGText5[128],
    kGText6[128],
	Float:kCP1[3],
	Float:kCP2[3],
	Float:kCP3[3],
	Float:kCP4[3],
	Float:kCP5[3],
	Float:kCP6[3],
	kNumber,
	kReward,
	kToggle,
};
new PlayMission[kInfo];

enum iInfo
{
	iAdmin[128],
	iMOTD[128],
	iPassword[128],
	iNeedPass,
	iLock,
	iPlayers,
};
new IRCInfo[50][iInfo];

new GunPrice[30][1] = {
{500}, //parachute 0
{400}, //golfclub 1
{300}, //nightstick 2
{2000}, //knife 3
{4000}, //baseballbat 4
{300}, //shovel 5
{100}, //poolcue 6
{400}, //purpledildo 7
{780}, //whitedildo 8
{560}, //longwhitedildo 9
{530}, //whitedildo2 10
{200}, //flowers 11
{600}, //cane 12
{15000}, //silenced 13 
{22000}, //colt45 14
{30000}, //deagle 15
{2000}, //Tec9 16
{3000}, //uzi 17
{35000}, //mp5 18
{3000}, //shotgun 19
{6000}, //spas12 20
{4000}, //sawnoff 21
{5000}, //ak47 22
{5000}, //m4 23
{1000}, //rifle 24
{100}, //pistolammo 25
{125}, //coltammo 26
{150}, //smgammo 27
{200}, //deagleammo 28
{100000} //katana 29
};


new LeaderSkinek[22][3] = {0,
{288, 288, 288}, //LSPD
{286, 286, 286}, //FBI
{104, 104, 104}, //Ballas
{228, 228, 228}, //Mentõ
{125, 113, 113}, //Camorra
{120, 120, 120}, //Yakuza
{147, 147, 147}, //Önkormányzat
{127, 127, 127}, //Hitman - De nem kell, de igen mert D. Cortez
{211, 211, 211}, //Riporter
{61, 61, 61}, //Taxi
{110, 110, 110}, //Vagos
{181, 248}, //VAS
{114, 114, 114}, //Los Aztecas
{295, 295, 298}, //Katonaság
{288, 288, 288}, //SFPD
{240, 240, 240}, //Oktató
{270, 270, 270}, //The Green Gang
{61, 61, 61}, // SF taxi
{228, 228, 228}, // SF mentõ
{288, 288, 288}, // VPOP
{33, 33, 33} // RSM
};
											// 1  	2  	3  	4  	5    	6  	7    	8   	9 	10 	11	12 	13  	   14  	15  16	17	18	19	20	21
new SkinekSzama[21] = {8, 	5, 	7, 	9, 	10,   7, 	7,   14,	9, 	11, 	9, 	9,   	 6,  	     4,  	7, 	7,   	6, 	11, 	9, 	8, 	20};
new Skinek[21][] = {
{280, 281, 267, 266, 265, 282, 283,9}, // LSPD
{163, 164, 165, 166, 211}, // FBI
{142 , 103 , 102 , 296 , 104 , 13 , 195}, // Ballas
{70, 274, 275, 276, 277, 278, 279, 91, 216}, // Mentõk
{98, 46, 113, 124, 127, 272, 126, 233, 223, 258}, // Camorra
{118, 121, 123, 122, 294, 229, 224}, // Yakuza
{228, 185, 223, 189, 172, 233, 57}, // Önkormányzat
{60, 223, 250, 211, 258, 259, 98, 111, 112, 113, 124, 125, 126, 240}, // Hitmannak nem kell, de átírtam D. Cortezre szal igen
{36, 37, 59, 60, 150, 170, 185, 187, 295}, //Riporter
{61, 17,147, 187, 255, 171, 189, 253, 150, 172, 11}, // Taxi
{30, 44, 48, 85,108, 109, 110, 184, 298}, // Vagos
{291, 1, 206, 128, 242, 247, 100, 190, 192}, // VAS
{115, 116, 173, 174, 175, 226}, // Los Aztecas
{287, 295, 284, 191}, // Katonaság
{280, 281, 267, 283,9, 265, 282}, // SFPD
{223,  37, 17, 185, 36,  240, 233, 172}, // Oktató
{105, 106, 107, 191, 269, 271}, // The Green Gang
{61, 17,147, 187, 255, 171, 189, 253, 150, 172, 11}, // Taxi
{70, 274, 275, 276, 277, 278, 279, 91, 216}, // Mentõk
{280, 266, 281, 267, 282, 283, 69, 265}, // VPOP
{28, 44, 100, 111, 112,128, 179, 182, 183, 186, 206, 211, 221, 222, 223, 241, 242, 249, 262, 292} // RSM
};

new Peds[155][1] = {
{1}, //1
{10},{12},{14},{15},{16},{18},{19}, //8
{21},{22},{23},{24},{26},{27},{29}, //7
{31},{32},{34},{35},{36},{37},{38},{39}, //8
{40},{41},{43},{45},{49}, //5
{51},{52},{53},{54},{55},{56},{58}, //7
{62},{63},{64},{66},{67},{68}, //6
{71},{72},{73},{75},{76},{77},{78},{79}, //8
{80},{81},{82},{83},{84},{87},{88},{89}, //8
{90},{92},{94},{95},{96},{97},{99}, //7
{101}, //1
{129}, //1
{130},{131},{132},{133},{134},{135},{136},{137},{138},{139}, //10
{140},{143},{144},{145},{146}, //5
{151},{152},{153},{154},{155},{156},{157},{158},{159}, //9
{160},{161},{162},{167},{168},{169}, //6
{170},{176},{178}, //3
{180},{181}, //2
{190},{192},{194},{196},{197},{199}, //6
{200},{201},{203},{204},{205},{207},{209}, //7
{212},{213},{214},{215},{218},{219}, //6
{220},{225},{227}, //3
{230},{231},{232},{234},{235},{236},{237},{238},{239}, //9
{243},{244},{245},{246},{247},{248}, //6
{250},{251},{252},{254},{256},{257},{258},{259}, //8
{260},{261},{263},{264},{268}, //5
{290},{291},{297},{298} //5
};

new Ferfiskinek[98][1] = {
{1},{7}, //2
{14},{15},{16},{18},{19}, //5
{21},{22},{23},{24},{25},{26},{27},{29}, //8
{32},{34},{35},{36},{37}, //5
{43},{45},{49}, //3
{51},{52},{58}, //3
{60},{62},{66},{67},{68}, //5
{31},{72},{73},{78},{79}, //5
{80},{81},{82},{83},{84}, //5
{94},{95},{96},{97}, //4
{101}, //1
{132},{133},{134},{135},{136},{137}, //6
{143},{144},{146}, //3
{153},{154},{155},{156},{158},{159}, //6
{160},{162},{167},{168}, //4
{170},{176},{179}, //3
{180},{181}, //2
{200},{202},{203},{204},{209}, //5
{212},{213}, //2
{220},{227}, //2
{230},{234},{235},{236},{239}, //5
{247},{248}, //2
{250},{252},{254},{258},{259}, //5
{260},{261},{264},{268}, //4
{290},{291},{297} //4
};

new NoiSkinek[63][1]  = {
{10},{12}, //2
{31},{38},{39}, //3
{40},{41}, //2
{53},{54},{55},{56}, //4
{63},{64}, //2
{75},{76},{77},  //3
{87},{88},{89}, //3
{90},{92}, //2
{129}, //1
{130},{131},{138},{139}, //4
{140},{145}, //2
{151},{152},{157}, //3
{169}, //1
{178}, //1
{190},{192},{194},{196},{197},{198},{199}, //7
{201},{205},{207}, //3
{214},{215},{218},{219}, //4
{224},{225},{226}, //3
{231},{232},{237},{238}, //4
{243},{244},{245},{246}, //4
{251},{256},{257}, //3
{263}, //1
{298} //1
};

//------------------------------------------------------------------------------------------------------
main()
{
	IdoJaras[iValtas] = true;
	IdoJaras[iMost] = 0;
	IdoJaras[iLesz] = 10;
}

forward Utzar(playerid, tipus);
public Utzar(playerid, tipus)
{
	if(Utzarak[playerid][uVan] && tipus != UTZAR_TOROL && tipus != UTZAR_TOROL_MOST || !Utzarak[playerid][uVan] && (tipus == UTZAR_TOROL || tipus == UTZAR_TOROL_MOST)) return 1;
	
	switch(tipus)
	{
		case UTZAR_TOROL:
		{
			DestroyDynamicObject(Utzarak[playerid][uObject]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][0]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][1]);
			if(Utzarak[playerid][uTipus] == UTZAR_NAGY)
			{
				DestroyDynamicPickup(Utzarak[playerid][uPickup][2]);
				DestroyDynamicPickup(Utzarak[playerid][uPickup][3]);
			}
			Utzarak[playerid][uVan] = false;
			Utzarak[playerid][uTipus] = 0;
			Utzarak[playerid][uPickup] = {NINCS, NINCS, NINCS, NINCS};
			
			Streamer_Update(playerid);
			
			Msg(playerid, "Sikeresen felvetted az útzáradat");
			Cselekves(playerid, "felvette az útzárát");
			
			UnFreeze(playerid);
			ClearAnim(playerid);
			
			return 1;
		}
		case UTZAR_TOROL_MOST:
		{
			DestroyDynamicObject(Utzarak[playerid][uObject]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][0]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][1]);
			if(Utzarak[playerid][uTipus] == UTZAR_NAGY)
			{
				DestroyDynamicPickup(Utzarak[playerid][uPickup][2]);
				DestroyDynamicPickup(Utzarak[playerid][uPickup][3]);
			}
			Utzarak[playerid][uVan] = false;
			Utzarak[playerid][uTipus] = 0;
			Utzarak[playerid][uPickup] = {NINCS, NINCS, NINCS, NINCS};
			
			return 1;
		}
		case UTZAR_NAGY:
		{
			new Float:X, Float:Y, Float:Z, Float:A;
					
			GetPlayerPos(playerid, X, Y, Z);
			GetXYInFrontOfPlayer(playerid, X, Y, 2.0);
			GetPlayerFacingAngle(playerid, A);
	
			Z -= 0.9;
			if(A >= 270.0) A -= 90.0;
			else A += 90.0;
					
			new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
	
			Utzarak[playerid][uVan] = true;
			Utzarak[playerid][uTipus] = UTZAR_NAGY;
			Utzarak[playerid][uHely][0] = X;
			Utzarak[playerid][uHely][1] = Y;
			Utzarak[playerid][uHely][2] = Z;
			Utzarak[playerid][uHely][3] = A;
					
			Utzarak[playerid][uObject] = CreateDynamicObject(2892, X, Y, Z, 0.0, 0.0, A);
			Utzarak[playerid][uPickup][0] = CreateDynamicPickup(1007, 14, X+(4.0*dis1), Y+(4.0*dis2), Z, 0);
			Utzarak[playerid][uPickup][1] = CreateDynamicPickup(1007, 14, X+(1.25*dis1), Y+(1.25*dis2), Z, 0);
			Utzarak[playerid][uPickup][2] = CreateDynamicPickup(1007, 14, X-(4.0*dis1), Y-(4.0*dis2), Z, 0);
			Utzarak[playerid][uPickup][3] = CreateDynamicPickup(1007, 14, X-(1.25*dis1), Y-(1.25*dis2), Z, 0);
					
			Streamer_Update(playerid);
					
			Msg(playerid, "Sikeresen leraktál egy nagy útzárat");
			Cselekves(playerid, "lerakott egy nagy útzárat");
			
			UnFreeze(playerid);
			ClearAnim(playerid);
					
			return 1;
		}
	
		case UTZAR_KICSI:
		{
			new Float:X, Float:Y, Float:Z, Float:A;
					
			GetPlayerPos(playerid, X, Y, Z);
			GetXYInFrontOfPlayer(playerid, X, Y, 2.0);
			GetPlayerFacingAngle(playerid, A);
					
			Z -= 0.85;
			if(A >= 270.0) A -= 90.0;
			else A += 90.0;
	
			new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
	
			Utzarak[playerid][uVan] = true;
			Utzarak[playerid][uTipus] = UTZAR_KICSI;
			Utzarak[playerid][uHely][0] = X;
			Utzarak[playerid][uHely][1] = Y;
			Utzarak[playerid][uHely][2] = Z;
			Utzarak[playerid][uHely][3] = A;
					
			Utzarak[playerid][uObject] = CreateDynamicObject(2899, X, Y, Z, 0.0, 0.0, A);
			Utzarak[playerid][uPickup][0] = CreateDynamicPickup(1007, 14, X+(1.5*dis1), Y+(1.5*dis2), Z, 0);
			Utzarak[playerid][uPickup][1] = CreateDynamicPickup(1007, 14, X-(1.5*dis1), Y-(1.5*dis2), Z, 0);
					
			Streamer_Update(playerid);
					
			Msg(playerid, "Sikeresen leraktál egy kicsi útzárat");
			Cselekves(playerid, "lerakott egy kicsi útzárat");
					
			UnFreeze(playerid);
			ClearAnim(playerid);
					
			return 1;
		}
	}
	
	return 0;
}

enum rankingEnum
{
	pOsszesFogott,
	pIDje,
	pNeve[128]
}

stock GetPlayerHighestScores(array[][rankingEnum], left, right)
{
	new
	    tempLeft = left,
	    tempRight = right,
	    pivot = array[(left + right) / 2][pOsszesFogott],
	    tempVar
	;
 	while(tempLeft <= tempRight)
	{
	    while(array[tempLeft][pOsszesFogott] > pivot) tempLeft++;
	    while(array[tempRight][pOsszesFogott] < pivot) tempRight--;
	    
	    if(tempLeft <= tempRight)
	    {
	        tempVar = array[tempLeft][pOsszesFogott], array[tempLeft][pOsszesFogott] = array[tempRight][pOsszesFogott], array[tempRight][pOsszesFogott] = tempVar;
			tempVar = array[tempLeft][pIDje], array[tempLeft][pIDje] = array[tempRight][pIDje], array[tempRight][pIDje] = tempVar;
			tempLeft++, tempRight--;
	    }
	}
	if(left < tempRight) GetPlayerHighestScores(array, left, tempRight);
	if(tempLeft < right) GetPlayerHighestScores(array, tempLeft, right);
}

stock PopPlayerTires(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid != 0)
	{
		new Float:hp;
		GetVehicleHealth(vehicleid, hp);
		if(hp >= 700.0 && hp <= 1000.0) SetVehicleHealth(vehicleid, hp - 200.0);
		new panels, doors, lights, tires;
		GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
	}
}

stock VersenyVege(playerid)
{
	PlayerRaceTuning[playerid][tNitro] = 0;
	PlayerRaceTuning[playerid][tNitroIdo] = 0;
	PlayerRaceTuning[playerid][tUjito] = 0;
	PlayerRaceTuning[playerid][tOrvos] = false;
	PlayerRaceTuning[playerid][tSegitIdo] = 0;
	PlayerRaceTuning[playerid][tEMP] = 0;
	HelyezesFelrak(playerid, false);
}

stock PenzLevesz(playerid, penz)
{
	new penze = VanEnnyiPenze(playerid, penz);
	if(penze == 0) return 0;
	else if(penze == 1) GiveMoney(playerid, -penz);
	else if(penze == 2) PlayerInfo[playerid][pAccount] -= penz;
	return 1;
}

stock VanEnnyiPenze(playerid, penz)
{
	if(GetMoney(playerid) >= penz)
		return 1;
	else if(PlayerInfo[playerid][pAccount] >= penz)
		return 2;
	return 0;
}

stock ShowTuningDialog(playerid, bool:cuccok = true, uzenet[] = "")
{
	if(cuccok)
	{
		new string[512];
		format(string, 512, "90k\tHidraulika\n\
		75k\tAlap nitropack [25mp]\n\
		150k\tGyors nitropack [18mp]\n\
		250k\tSzupergyors nitropack [10mp]\n\
		180k\tAlap mechanikus robot [0.75%% / mp]\n\
		300k\tFejlett mechanikus robot [2%% / mp]\n\
		150k\tOrvosi robot [5mp / segit és 1HP / mp]\n\
		150k\tMinimális EMP védelem [20%%]\n\
		400k\tKözepes EMP védelem [40%%]\n\
		1m\tFejlett EMP védelem [75%%]\n");
			
		ShowPlayerDialog(playerid, DIALOG_RACETUNING, DIALOG_STYLE_LIST, "Tuning", string, "Megveszem", "Mégse");
	}
	else
		ShowPlayerDialog(playerid, DIALOG_RACETUNING_2, DIALOG_STYLE_MSGBOX, "Tuning", uzenet, "Vásárlás", "Befejezés");
	return 1;
}

stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By Gabriel "Larcius" Cordes
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}

stock Float:GetDistanceToPoint(playerid,Float:x1,Float:y1,Float:z1) //By Gabriel "Larcius" Cordes
{
	if (IsPlayerConnected(playerid))
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return INF_FLOAT;
}

stock HelyezesFrissites(playerid)
{
	if(PlayerRaceInfo[playerid][xVersenyen] == NINCS) return 1;
	
	if(!HelyezesTDCreated[playerid])
		HelyezesFelrak(playerid);
		
	new szoveg[32];
	format(szoveg, 32, "~r~Helyezes: ~l~%d", PlayerRaceInfo[playerid][xHelyezes]);
	TextDrawSetString(HelyezesTD[playerid], szoveg);
	
	return 1;
}

stock HelyezesFelrak(playerid, bool:rak = true)
{
	if(rak)
	{
		if(!HelyezesTDCreated[playerid])
		{
			new Text:id = TextDrawCreate(100, 250, "~r~Helyezes: ~l~?");

			TextDrawAlignment(id, 2);
			TextDrawFont(id, 1);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, COLOR_BLACK);
			TextDrawBackgroundColor(id, COLOR_WHITE);
			TextDrawSetOutline(id, 1);

			TextDrawUseBox(id, 1);
			TextDrawBoxColor(id, 0x111133AA);
			TextDrawLetterSize(id, 0.5, 1.2);
	
			TextDrawTextSize(id, 0, 120);
			TextDrawShowForPlayer(playerid, id);
	
			HelyezesTD[playerid] = id;
			HelyezesTDCreated[playerid] = true;
		}
		else
		{
			TextDrawDestroy(HelyezesTD[playerid]);
			HelyezesTDCreated[playerid] = false;
			HelyezesFelrak(playerid, true);
		}
	}
	else if(!rak && HelyezesTDCreated[playerid])
	{
		TextDrawDestroy(HelyezesTD[playerid]);
		HelyezesTDCreated[playerid] = false;
	}
}

stock HelyezesCheck()
{
	new helyezes, cpszama, Float:tav, Float:ptav, elso, darab;

	foreach(Jatekosok, p)
	{
		if(PlayerRaceInfo[p][xVersenyen] != NINCS)
			PlayerRaceInfo[p][xHelyezes] = 0;
	}

	for(new race = 0; race < RACESLOTOK; race++)
	{
		if(RaceInfo[race][rStatusz] != RACE_ELINDULT && RaceInfo[race][rStatusz] != RACE_INDUL) continue;
		
		helyezes = 1 + RaceInfo[race][rBeert];
		
		cel_check:
		
		tav = 9999.9;
		elso = NINCS;
		darab = 0;
		cpszama = RaceInfo[race][rCP];
		
		foreach(Jatekosok, p)
		{
			if(PlayerRaceInfo[p][xVersenyen] == race && PlayerRaceInfo[p][xHelyezes] == 0 && PlayerRaceInfo[p][xCP] == RACE_CP_CEL)
			{
				darab++;
				ptav = GetDistanceToPoint(p, RaceCel[race][0], RaceCel[race][1], RaceCel[race][2]);
				if(ptav < tav)
				{
					tav = ptav;
					elso = p;
				}
			}
		}
		
		if(elso != NINCS)
		{
			PlayerRaceInfo[elso][xHelyezes] = helyezes;
			HelyezesFrissites(elso);
			tav = 9999.9;
			elso = NINCS;
			helyezes++;
			if(darab > 1) goto cel_check;
		}
		
		if(cpszama != 0)
		{
			for(new cp = (cpszama - 1); cp >= 0; cp--)
			{
				tav = 9999.9;
				elso = NINCS;
				darab = 0;
				
				foreach(Jatekosok, p)
				{
					if(PlayerRaceInfo[p][xVersenyen] == race && PlayerRaceInfo[p][xHelyezes] == 0 && PlayerRaceInfo[p][xCP] == cp)
					{
						darab++;
						ptav = GetDistanceToPoint(p, RaceCP[race][cp][0], RaceCP[race][cp][1], RaceCP[race][cp][2]);
						if(ptav < tav)
						{
							tav = ptav;
							elso = p;
						}
					}
				}
				
				if(elso != NINCS)
				{
					PlayerRaceInfo[elso][xHelyezes] = helyezes;
					HelyezesFrissites(elso);
					helyezes++;
					
					if(darab > 1) cp++;
				}
			}
		}
		
		start_check:
		
		tav = 9999.9;
		elso = NINCS;
		darab = 0;
		
		foreach(Jatekosok, p)
		{
			if(PlayerRaceInfo[p][xVersenyen] == race && PlayerRaceInfo[p][xHelyezes] == 0 && PlayerRaceInfo[p][xCP] == RACE_CP_START)
			{
				darab++;
				ptav = GetDistanceToPoint(p, RaceStart[race][0], RaceStart[race][1], RaceStart[race][2]);
				if(ptav < tav)
				{
					tav = ptav;
					elso = p;
				}
			}
		}
		
		if(elso != NINCS)
		{
			PlayerRaceInfo[elso][xHelyezes] = helyezes;
			HelyezesFrissites(elso);
			helyezes++;
			if(darab > 1) goto start_check;
		}
	}
}

stock FegyverCheatCheck(playerid)
{
	if(!AntiFegyverCheat) return 1;

	new
		fegyver[12],
		tolteny[12],
		bool:talalt,
		mit[12] = {NINCS, ...},
		hol;
	
	for(new slot = 0; slot < 12; slot++)
	{
		GetPlayerWeaponData(playerid, slot, fegyver[slot], tolteny[slot]);
		
		if(tolteny[slot] == 0 || slot == 0 && fegyver[0] == 0 || slot == 11 && fegyver[11] == 46) continue;
		
		if(!FegyverVan[playerid][slot] || FegyverVan[playerid][slot] && Fegyver[playerid][slot] != fegyver[slot])
		{
			talalt = true;
			mit[hol] = slot;
			hol++;
		}
		else if(Lofegyver(Fegyver[playerid][slot]) && Tolteny[playerid][slot] < (tolteny[slot] - 10))
		{
			talalt = true;
			mit[hol] = slot;
			hol++;
		}
		else
		{
			if(fegyver[slot] > 0 && tolteny[slot] != 0)
			{
				FegyverVan[playerid][slot] = true;
				Fegyver[playerid][slot] = fegyver[slot];
				Tolteny[playerid][slot] = tolteny[slot];
			}
			else
			{
				FegyverVan[playerid][slot] = false;
				Fegyver[playerid][slot] = 0;
				Tolteny[playerid][slot] = 0;
			}
		}
	}
	
	if(talalt)
	{
		if(OnlineAdminok() > 0)
		{
			//ABroadCast(COLOR_LIGHTRED, "===[ Fegyver AntiCheat ]===", 1);
			
			new szoveg[128], slot;
			for(new x = 0; x < 12; x++)
			{
				if(mit[x] == NINCS || mit[x] == 0 && fegyver[0] == 0) continue;
				
				slot = mit[x];
				
				if(!FegyverVan[playerid][slot] || FegyverVan[playerid][slot] && Fegyver[playerid][slot] != fegyver[slot])
				{
					if(x != 0) format(szoveg, 128, "%s, %s", szoveg, aWeaponNames[ fegyver[slot] ]);
					else format(szoveg, 128, "%s", aWeaponNames[ fegyver[slot] ]);
				}
				else
				{
					if(x != 0) format(szoveg, 128, "%s, %s (+%d)", szoveg, aWeaponNames[ fegyver[slot] ], (tolteny[slot] - Tolteny[playerid][slot]));
					else format(szoveg, 128, "%s (+%d)", aWeaponNames[ fegyver[slot] ], (tolteny[slot] - Tolteny[playerid][slot]));
				}
			}
			ABroadCastFormat(COLOR_LIGHTRED, 1, "[%d]%s: %s", playerid, PlayerName(playerid), szoveg);
		}
		else
		{
			AC_Figyelmeztetes[playerid]++;
			
			if(AC_Figyelmeztetes[playerid] >= 3)
				SeeBan(playerid, 0, NINCS, "Fegyver cheat");
			
			ResetWeapon(playerid, false);
			for(new slot = 0; slot < 12; slot++)
			{
				if(FegyverVan[playerid][slot])
					GiveWeapon(playerid, Fegyver[playerid][slot], Tolteny[playerid][slot], false);
			}		}
	}
	
	return 1;
}

stock bool:IngyenTankol(playerid, kocsi)
{
	if( (LMT(playerid, LMUNKA_SCPD) && (kocsi >= LKocsik[0][0] && kocsi <= LKocsik[0][1])) ||
		 (LMT(playerid, LMUNKA_FBI) && (kocsi >= LKocsik[1][0] && kocsi <= LKocsik[1][1])) ||
		 (LMT(playerid, LMUNKA_MENTO) && (kocsi >= LKocsik[3][0] && kocsi <= LKocsik[3][1])) ||
		 (LMT(playerid, LMUNKA_ONKORMANYZAT) && (kocsi >= LKocsik[6][0] && kocsi <= LKocsik[6][1])) ||
		 (LMT(playerid, LMUNKA_RIPORTER) && (kocsi >= LKocsik[8][0] && kocsi <= LKocsik[8][1])) ||
		 (LMT(playerid, LMUNKA_TAXI) && (kocsi >= LKocsik[9][0] && kocsi <= LKocsik[9][1])) ||
		 (LMT(playerid, LMUNKA_KATONA) && (kocsi >= LKocsik[13][0] && kocsi <= LKocsik[13][1])) ||
		 (LMT(playerid, LMUNKA_VPOP) && (kocsi >= LKocsik[19][0] && kocsi <= LKocsik[19][1])))
		return true;
	else
		return false;
}

stock bool:SzirenaPozicio(model, &Float:x, &Float:y, &Float:z)
{
	switch(model)
	{
		case 405: // Sentinel
		{
			x = 0.35;
			y = -0.1;
			z = 0.8;
		}
		case 411: // Infernus
		{
			x = -0.3;
			y = 0.1;
			z = 0.75;
		}
		case 451: // Turismo
		{
			x = -0.4;
			y = -0.5;
			z = 0.6;
		}
		case 522: // NRG
		{
			x = 0.0;
			y = 0.55;
			z = 0.6;
		}
		case 541: // Bullet
		{
			x = -0.3;
			y = -0.2;
			z = 0.69;
		}
		case 560: // Sultan
		{
			x = -0.5;
			y = 0.1;
			z = 0.87;
		}
		default: return false;
	}
	return true;
}

stock LetszamFrissites(frakcio = NINCS)
{
	new query[128];
	if(frakcio == NINCS)
	{
		for(new id = 1; id < MAX_FRAKCIO; id++)
		{
			FrakcioInfo[id][fTagokSzama] = 0;
			format(query, 128, "SELECT ID FROM %s WHERE Online='0' AND Member='%d'", SQL_DB_Player, id);
			mysql_query(query);
			mysql_store_result();
			FrakcioInfo[id][fTagokSzama] = mysql_num_rows();
			mysql_free_result();
			
			foreach(Jatekosok, p)	if(LMT(p, id))		FrakcioInfo[id][fTagokSzama]++;
		}
	}
	else if(frakcio > 0 && frakcio < MAX_FRAKCIO)
	{
		FrakcioInfo[frakcio][fTagokSzama] = 0;
		format(query, 128, "SELECT ID FROM %s WHERE Online='0' AND Member='%d'", SQL_DB_Player, frakcio);
		mysql_query(query);
		mysql_store_result();
		FrakcioInfo[frakcio][fTagokSzama] = mysql_num_rows();
		mysql_free_result();
			
		foreach(Jatekosok, p)	if(LMT(p, frakcio))		FrakcioInfo[frakcio][fTagokSzama]++;
	}
}

stock HarcKieses(playerid, oka[])
{
	new uzenet[128], terulet = HarcolTerulet[playerid];
	format(uzenet, 128, "Kiesés: %s kiesett a harcból! Oka: %s", PlayerName(playerid), oka);
	foreach(Jatekosok, p)
	{
		if(p != playerid && Harcol[p])
			SendClientMessage(p, COLOR_GREY, uzenet);
	}
	Harcol[playerid] = false;
	SetPlayerWorldBounds(playerid,20000.0000, -20000.0000, 20000.0000, -20000.0000);
	SetPlayerVirtualWorld(playerid, 0);
		
	new vedo, tamado;
	foreach(Jatekosok, p)
	{
		if(LMT(p, TeruletInfo[terulet][tHarcolok][0]) && Harcol[p])
			vedo++;
		else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]) && Harcol[p])
			tamado++;
	}
	
	/* ############################# */
	if(vedo > 0 && tamado > 0) return 1;
	/* ############################# */
	
	HarcVan = false;
	TeruletInfo[terulet][tHarc] = false;
	GangZoneStopFlashForAll(TeruletInfo[terulet][tZone]);
	
	if(vedo < 1)
	{
		foreach(Jatekosok, p)
		{
			if(LMT(p, TeruletInfo[terulet][tTulaj]))
				SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Elvesztettétek a területet... Terület: %s", TeruletInfo[terulet][tNev]);
			else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
				SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Sikeresen megszereztétek a területet! Terület: %s", TeruletInfo[terulet][tNev]);
		}
		TeruletInfo[terulet][tTulaj] = TeruletInfo[terulet][tHarcolok][1];
		TeruletUpdate(terulet, TERULET_Tulaj);
	}
	else if(tamado < 1)
	{
		foreach(Jatekosok, p)
		{
			if(LMT(p, TeruletInfo[terulet][tTulaj]))
				SendClientMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: A támadók elbuktak, így sikeresen megvédtétek a területet");
			else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
				SendClientMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: A támadás sikertelen volt, mindenki elbukott...");
		}
	}
	
	TeruletInfo[terulet][tFoglalva] = gettime();
	TeruletUpdate(terulet, TERULET_Foglalva);
	
	foreach(Jatekosok, p)
	{
		if(Harcol[p])
		{
			Harcol[p] = false;
			SetPlayerVirtualWorld(p, 0);
			SetPlayerWorldBounds(p,20000.0000, -20000.0000, 20000.0000, -20000.0000);
		}
	}
	
	TeruletFrissites();
	return 1;
}

stock TeruletFrissites()
{
	foreach(Jatekosok, x)
	{
		if(!LegalisSzervezetTagja(x) && !Civil(x) || Admin(x, 1337))
			TeruletekMutatasa(x);
	}
}

stock TeruletekMutatasa(playerid)
{
	for(new x = 0; x < MAXTERULET; x++)
	{
		if(!TeruletInfo[x][Van]) continue;
		
		GangZoneShowForPlayer(playerid, TeruletInfo[x][tZone], SzervezetSzinek[TeruletInfo[x][tTulaj]-1]);
		
		if(TeruletInfo[x][tHarc])
			GangZoneFlashForPlayer(playerid, TeruletInfo[x][tZone], COLOR_INVISIBLE);
		else
			GangZoneStopFlashForPlayer(playerid, TeruletInfo[x][tZone]);
	}
}

stock SetHealth(playerid, Float:mennyi)
{
	new Float:hp;
	if(mennyi < 0.0) hp = 0.0;
	else if(mennyi > MAXHP) hp = MAXHP;
	else hp = mennyi;
	
	JatekosElete[playerid] = 1;
	iPlayerHealth[playerid] = 1;
	SetPlayerHealth(playerid, hp);
}

stock GiveHealth(playerid, Float:health)
{
	new Float:elet, Float:ujelet;
	GetPlayerHealth(playerid, elet);
	ujelet = elet + health;
	
	if(ujelet > MAXHP) ujelet = MAXHP;
	if(ujelet < 0.0) ujelet = 0.0;
	
	JatekosElete[playerid] = 1;
	iPlayerHealth[playerid] = 1;
	SetPlayerHealth(playerid, ujelet);
	return 1;
}

#include <parancsok.pwn>

/*stock HP(playerid, Float:mennyi = -987.6, muvelet = HP_GIVE)
{
	new Float:hp;
	GetPlayerHealth(playerid, hp);
	
	if(mennyi == -987.6)
		return floatround(hp);
	
	switch(muvelet)
	{
		case HP_GIVE:
		{
			if((hp + mennyi) > MAXHP)
			{
				JatekosElete[playerid] = MAXHP;
				iPlayerHealth[playerid] = MAXHP;
				SetHealth(playerid, MAXHP);
			}
			else
			{
				JatekosElete[playerid] = hp + mennyi;
				iPlayerHealth[playerid] = hp + mennyi;
				SetHealth(playerid, hp + mennyi);
			}
		}
		case HP_SET:
		{
			if(mennyi > MAXHP)
			{
				JatekosElete[playerid] = MAXHP;
				iPlayerHealth[playerid] = MAXHP;
				SetHealth(playerid, MAXHP);
			}
			else
			{
				JatekosElete[playerid] = mennyi;
				iPlayerHealth[playerid] = mennyi;
				SetHealth(playerid, mennyi);
			}
		}
	}
	return 0;
}*/

stock SetJarmu(kocsi, edit, ertek)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, objective);
	switch(edit)
	{
		case KOCSI_MOTOR: SetVehicleParamsEx(kocsi, ertek, lights, alarm, doors, bonnet, boot, objective);
		case KOCSI_LAMPA: SetVehicleParamsEx(kocsi, engine, ertek, alarm, doors, bonnet, boot, objective);
		case KOCSI_RIASZTO: SetVehicleParamsEx(kocsi, engine, lights, ertek, doors, bonnet, boot, objective);
		case KOCSI_AJTO: SetVehicleParamsEx(kocsi, engine, lights, alarm, ertek, bonnet, boot, objective);
		case KOCSI_MOTORHAZTETO: SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, ertek, boot, objective);
		case KOCSI_CSOMAGTARTO: SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, ertek, objective);
	}
}

stock GetJarmu(kocsi, edit)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, objective);
	switch(edit)
	{
		case KOCSI_MOTOR: return engine;
		case KOCSI_LAMPA: return lights;
		case KOCSI_RIASZTO: return alarm;
		case KOCSI_AJTO: return doors;
		case KOCSI_MOTORHAZTETO: return bonnet;
		case KOCSI_CSOMAGTARTO: return boot;
	}
	return 1;
}

stock valtostr(szam)
{
	new str[10];
	valstr(str, szam);
	return str;
}

stock NPC_Uzenet(bot, uzenet[])
{
	if(egyezik(uzenet, "vege"))
		NPC_FelvetelVege(bot);
	else if(egyezik(uzenet, "kocsiba") && !Beszallt[bot])
	{
		NPC_FelvetelStart(bot);
		Beszallt[bot] = true;
	}
}

stock bool:Parkolohely(playerid)
{
	if(PlayerInfo[playerid][pPhousekey] != NINCS && PlayerToPoint(30, playerid, HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez]) ||
		PlayerInfo[playerid][pPhousekey2] != NINCS && PlayerToPoint(30, playerid, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hEntrancez]) ||
		PlayerToPoint(23, playerid, 1081.134, -1758.159, 13.091) || // LS Parkoló
		PlayerToPoint(25, playerid, 1575.635, -1620.397, 13.252) || // LSPD
		PlayerToPoint(30, playerid, 1660.375, -1706.777, 15.316) || // LSPD Mögötti
		PlayerToPoint(25, playerid, 1942.759, -2134.976, 13.301) || // Reptér melletti
		PlayerToPoint(10, playerid, 996.216, -1341.293, 13.087) || // Hotdog - fagyis
		PlayerToPoint(50, playerid, 863.343, -1232.532, 14.570) || // Kamion HQ
		PlayerToPoint(50, playerid, 1049.001, -908.058, 42.407) || // Északi benzinkut
		PlayerToPoint(15, playerid, -1945.115, 579.526, 34.879) || // SFBank
		PlayerToPoint(75, playerid, -2271.098, 137.027, 34.869) || // SF Parkoló
		PlayerToPoint(30, playerid, -2649.790, -42.329, 4.042)) // SF Parkoló
	return true;
		//PlayerToPoint(25252525, playerid, ) // 
	return false;
}
stock Akta(playerid, targetid)
{
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Férfi"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Nõ"; }
		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "USA"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Európa"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Ázsia"; }
		new ttext[32];


		if(PlayerInfo[targetid][pMember] > 0)
		{
			new szam = PlayerInfo[targetid][pMember] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else if(PlayerInfo[targetid][pLeader] > 0)
		{
			new szam = PlayerInfo[targetid][pLeader] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else
			ttext = "Civil";
		new jtext[20], jtext2[20];

        if(PlayerInfo[targetid][pJob1] == MUNKA_DETEKTIV) jtext = "Detektív";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_UGYVED) jtext = "Ügyvéd";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_PROSTI) jtext = "Prostituált";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_DROG) jtext = "Drog Díler";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_AUTOTOLVAJ) jtext = "Autótolvaj";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_SZERELO) jtext = "Autószerelõ";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_TESTOR) jtext = "Testõr";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_FEGYVER) jtext = "Fegyverkereskedõ";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_AUTOKERESKEDO) jtext = "Autókereskedõ";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_BOXOLO) jtext = "Boxoló";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_BUS) jtext = "Buszsofõr";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_UJSAGOS) jtext = "Újságkihordó";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_UTTISZTITO) jtext = "Úttisztító";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_HACKER) jtext = "Hacker";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_KAMIONOS) jtext = "Kamion Sofõr";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_FARMER) jtext = "Farmer";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_FUNYIRO) jtext = "Fûnyíró";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_EPITESZ) jtext = "Építész";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_PANCEL) jtext = "Páncélkészítõ";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_KUKAS) jtext = "Kukás";
        else jtext = "Nincs";

        if(PlayerInfo[targetid][pJob2] == MUNKA_DETEKTIV) jtext2 = "Detektív";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_UGYVED) jtext2 = "Ügyvéd";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_PROSTI) jtext2 = "Prostituált";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_DROG) jtext2 = "Drog Díler";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_AUTOTOLVAJ) jtext2 = "Autótolvaj";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_SZERELO) jtext2 = "Autószerelõ";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_TESTOR) jtext2 = "Testõr";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_FEGYVER) jtext2 = "Fegyverkereskedõ";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_AUTOKERESKEDO) jtext2 = "Autókereskedõ";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_BOXOLO) jtext2 = "Boxoló";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_BUS) jtext2 = "Buszsofõr";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_UJSAGOS) jtext2 = "Újságkihordó";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_UTTISZTITO) jtext2 = "Úttisztító";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_HACKER) jtext2 = "Hacker";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_KAMIONOS) jtext2 = "Kamion Sofõr";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_FARMER) jtext2 = "Farmer";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_FUNYIRO) jtext2 = "Fûnyíró";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_EPITESZ) jtext2 = "Építész";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_PANCEL) jtext2 = "Páncélkészítõ";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_KUKAS) jtext2 = "Kukás";
        else jtext2 = "Nincs";


		new rtext[32];
	    if(PlayerInfo[targetid][pFMember] < 255)//The 2 Organisations
	    {
        	if(PlayerInfo[targetid][pRank] == 1) { rtext = "Outsider"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Associate"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Soldier"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Capo"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Underboss"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Godfather"; }
			else { rtext = "Outsider"; }
		}
		else if(PlayerInfo[targetid][pMember] >= 1 || PlayerInfo[targetid][pLeader] >= 1)//PD Ranks
		{
			new rang = PlayerInfo[targetid][pRank], munka;
			if(PlayerInfo[targetid][pLeader] >= 1 && PlayerInfo[targetid][pLeader] < 200)
				munka = PlayerInfo[targetid][pLeader] - 1;
			else
				munka = PlayerInfo[targetid][pMember] - 1;

			if(rang <= 0) rtext = Rangok[munka][0];
			else if(rang >= 1 && rang <= 12) rtext = Rangok[munka][rang];
			else rtext = Rangok[munka][12];
		}
		else
		{
		    rtext = "-";
		}


		new married[20];
		if(PlayerInfo[targetid][pMarriedTo] != 0)
			strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		else
			married = "Nincs";
		new age = PlayerInfo[targetid][pAge];
		new arrests = PlayerInfo[targetid][pArrested];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new housekey = PlayerInfo[targetid][pPhousekey];
		new housekey2 = PlayerInfo[targetid][pPhousekey2];
		new szolgiruha = PlayerInfo[targetid][pChar];
		new ruhaja = PlayerInfo[targetid][pModel];



		new vkocsi[40], vkocsi2[40], bkocsi[40], id;

		if(PlayerInfo[targetid][pPcarkey] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey]][cId];
			format(vkocsi, sizeof(vkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi = "Nincs";
		
		if(PlayerInfo[targetid][pPcarkey2] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey2]][cId];
			format(vkocsi2, sizeof(vkocsi2), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi2 = "Nincs";

		if(HireCar[targetid] != NINCS)
		{
			id = HireCar[targetid];
			format(bkocsi, sizeof(bkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			bkocsi = "Nincs";
	
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "====%s Aktája====", PlayerName(targetid))
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Származás: %s | Nem: %s | Életkor: %d", otext, atext, age)
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Városban eltöltött évek: %d | Letartoztatások Száma: %d", Szint(targetid), arrests)
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Telefonszám: %d | Házszám: %d/%d | Autó: %s/%s", pnumber, housekey, housekey2, vkocsi, vkocsi2)
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Házastárs: %s | Bankszámlaszám: %d", married, PlayerInfo[targetid][pBankSzamlaSzam])
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Frakció: %s | Rang: %s (%d)", ttext, rtext, PlayerInfo[targetid][pRank])
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Ruhamodell: %d | Szolgálati: %d", ruhaja, szolgiruha)
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Munka: %s | Másodmunka: %s", jtext, jtext2)
}



stock NPCArveresUpdate()
{
	new szoveg[256];
	format(szoveg, 256, "==[ Árverés ]==");
	if(!Aukcio[aElinditva] && Aukcio[aVarakozas] == 0)
		format(szoveg, 256, "%s\nNincs elindítva árverés", szoveg);
	else if(!Aukcio[aElinditva] && Aukcio[aVarakozas] != 0)
	{
		if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
			format(szoveg, 256, "%s\nAukció indul %dmp múlva egy házra\nHely: %s", szoveg, Aukcio[aIdo], Haztipus(HouseInfo[Aukcio[aID]][hTipus]));
		else
			format(szoveg, 256, "%s\nAukció indul %dmp múlva egy kocsira\nModel: %s", szoveg, Aukcio[aIdo], GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true));
	}
	else
	{
		if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
			format(szoveg, 256, "%s\nJelenleg árverés van egy házra\nHely: %s", szoveg, Haztipus(HouseInfo[Aukcio[aID]][hTipus]));
		else
			format(szoveg, 256, "%s\nJelenleg árverés van egy kocsira\nModel: %s", szoveg, GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true));
		
		if(Aukcio[aLicitalo] == NINCS)
			format(szoveg, 256, "%s\nMég nem licitált senki\nLicitálás: /licit", szoveg);
		else if(Aukcio[aLicitalo] == INVALID_PLAYER_ID)
			format(szoveg, 256, "%s\nA licitáló kilépett: %s", szoveg, Aukcio[aLicitaloVolt]);
		else
			format(szoveg, 256, "%s\nUtolsó licitáló: %s, licit: %dFt\nLicitálás: /licit", szoveg, PlayerName(Aukcio[aLicitalo]), Aukcio[aLicit]);
	}
	UpdateDynamic3DTextLabelText(ArveresNPCText, COLOR_LIGHTBLUE, szoveg);
}

stock bool:VarosbanVan(playerid)
{
	if(IsPlayerInDynamicArea(playerid, Varosok[0]) || IsPlayerInDynamicArea(playerid, Varosok[1]))
	{
		if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
			return true;
	}
	return false;
}

stock JelzesBeallitas(celpont, fokozat, kinek = NINCS)
{
	if(fokozat == 0)
	{
		if(kinek == NINCS)
		{
			foreach(Jatekosok, p)
			{
				if(IsACop(p))
					SetPlayerMarkerForPlayer(p, celpont, 0xFFFFFF00);
			}
			Jelzes[celpont] = 0;
		}
		else
		{
			if(IsACop(kinek))
				SetPlayerMarkerForPlayer(kinek, celpont, 0xFFFFFF00);
		}
	}
	else if(fokozat == JELZES_SARGA)
	{
		if(kinek == NINCS)
		{
			foreach(Jatekosok, p)
			{
				if(IsACop(p))
					SetPlayerMarkerForPlayer(p, celpont, COLOR_YELLOW);
			}
			Jelzes[celpont] = JELZES_SARGA;
		}
		else
		{
			if(IsACop(kinek))
				SetPlayerMarkerForPlayer(kinek, celpont, COLOR_YELLOW);
		}
	}
	else if(fokozat == JELZES_NARANCS)
	{
		if(kinek == NINCS)
		{
			foreach(Jatekosok, p)
			{
				if(IsACop(p))
					SetPlayerMarkerForPlayer(p, celpont, COLOR_ORANGE);
			}
			Jelzes[celpont] = JELZES_NARANCS;
			}
		else
		{
			if(IsACop(kinek))
				SetPlayerMarkerForPlayer(kinek, celpont, COLOR_ORANGE);
		}
	}
	else if(fokozat == JELZES_PIROS)
	{
		if(kinek == NINCS)
		{
			foreach(Jatekosok, p)
			{
				if(IsACop(p))
					SetPlayerMarkerForPlayer(p, celpont, COLOR_LIGHTRED);
			}
			Jelzes[celpont] = JELZES_PIROS;
		}
		else
		{
			if(IsACop(kinek))
				SetPlayerMarkerForPlayer(kinek, celpont, COLOR_LIGHTRED);
		}
	}
}

stock OnModBetoltve()
{
	SetWeather(0);
	Varosok[0] = CreateDynamicRectangle(93.148, -2712.683, 2889.188, -553.586);
	Varosok[1] = CreateDynamicRectangle(-2948.473, -610.450, -1202.150, 1508.301);
	
	//Kórház - Bank - Étterem
	CreateDynamicMapIcon(1480.589, -1769.973, 18.502, 56, 0, NINCS, NINCS, NINCS, 300.0); // LS Városháza
	CreateDynamicMapIcon(1185.271, -1324.711, 13.572, 22, 0, NINCS, NINCS, NINCS, 300.0); // LS Kórház
	CreateDynamicMapIcon(1465.141, -1011.278, 26.843, 52, 0, NINCS, NINCS, NINCS, 300.0); // LS Bank
	CreateDynamicMapIcon(-1942.265, 557.346, 35.171, 52, 0, NINCS, NINCS, NINCS, 300.0); // SF Bank
	CreateDynamicMapIcon(1498.374, -1583.298, 13.546, 50, 0, NINCS, NINCS, NINCS, 300.0); // LS Városházával szembeni étterem
	/* ############################################################################################################ */
}

stock VarosbaBe(playerid)
{
	if(Jelzes[playerid] != 0)
	{
		foreach(Jatekosok, p)
			JelzesBeallitas(playerid, Jelzes[playerid], p);
	}
	Varosban[playerid] = true;
}

stock VarosbolKi(playerid)
{
	if(Jelzes[playerid] != 0)
	{
		foreach(Jatekosok, p)
			SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
	}
	Varosban[playerid] = false;
}

stock ResetWeapon(playerid, bool:adatfrissites = true)
{
	if(adatfrissites) for(new slot = 0; slot < 12; slot++)
	{
		FegyverVan[playerid][slot] = false;
		Fegyver[playerid][slot] = 0;
		Tolteny[playerid][slot] = 0;
	}
	ResetPlayerWeapons(playerid);
}

stock GiveWeapon(playerid, fegyver, loszer, bool:adatfrissites = true)
{
	if((35 <= fegyver <= 38 || 43 <= fegyver <= 45) && PlayerInfo[playerid][pAdmin] < 1337) return 1;
	new fegyo, losz;
	//GetPlayerWeaponData(playerid, aWeaponSlotok[fegyver], fegyo, losz);
	if(FegyverVan[playerid][ aWeaponSlotok[fegyver] ])
	{
		fegyo = Fegyver[playerid][ aWeaponSlotok[fegyver] ];
		losz = Tolteny[playerid][ aWeaponSlotok[fegyver] ];
	}

	if(adatfrissites)
	{
		if( (losz + loszer) > 0)
		{
			FegyverVan[playerid][ aWeaponSlotok[fegyver] ] = true;
			Fegyver[playerid][ aWeaponSlotok[fegyver] ] = fegyver;
			Tolteny[playerid][ aWeaponSlotok[fegyver] ] = losz + loszer;
		}
		else
		{
			FegyverVan[playerid][ aWeaponSlotok[fegyver] ] = false;
			Fegyver[playerid][ aWeaponSlotok[fegyver] ] = NINCS;
			Tolteny[playerid][ aWeaponSlotok[fegyver] ] = 0;
		}
	}

	if(loszer > 0 && fegyver >= 16 && fegyver <= 38)
	{
		if(fegyver != fegyo && losz > 0 && fegyo >= 16 && fegyo <= 38 && aWeaponSlotok[fegyver] == aWeaponSlotok[fegyo])
			GivePlayerWeapon(playerid, fegyver, (loszer - losz));
		else
			GivePlayerWeapon(playerid, fegyver, loszer);
	}
	else
		GivePlayerWeapon(playerid, fegyver, loszer);
	
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(Harcol[playerid] && areaid == TeruletInfo[ HarcolTerulet[playerid] ][tArea])
		HarcKieses(playerid, "Elhagyta a zónát");
		
	return 1;
}

/*public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return 1;
	
	if(areaid == Varosok[0] || areaid == Varosok[1])
	{
		if(Jelzes[playerid] != 0)
			JelzesBeallitas(playerid, Jelzes[playerid]);
		Varosban[playerid] = true;
	}
		
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(Jelzes[playerid] != 0)
		JelzesBeallitas(playerid, 0);
		
	Varosban[playerid] = false;
	return 1;
}*/

/*stock Licit(playerid, bool:licit, osszeg = 0)
{
	if(licit)
	{
		if(Aukcio[aLicitalo] != NINCS)
		{
			new id = NINCS;
			for(new x = 2; x > 0; x--)
			{
				if(Aukcio[aLicitalok][x] == NINCS)
				{
					id = x;
					break;
				}
			}
			if(id == NINCS)
			{
				Aukcio[aLicitek][0] = Aukcio[aLicitek][1];
				Aukcio[aLicitalok][0] = Aukcio[aLicitalok][1];
				
				Aukcio[aLicitek][1] = Aukcio[aLicitek][2];
				Aukcio[aLicitalok][1] = Aukcio[aLicitalok][2];
				
				Aukcio[aLicitek][2] = Aukcio[aLicit];
				Aukcio[aLicitalok][2] = Aukcio[aLicitalo];
				
				Aukcio[aLicit] = osszeg;
				Aukcio[aLicitalo] = playerid;
			}
			else
			{
				Aukcio[aLicitalok][id] = Aukcio[aLicitalo];
				Aukcio[aLicitek][id] = Aukcio[aLicit];
				
				Aukcio[aLicit] = osszeg;
				Aukcio[aLicitalo] = playerid;
			}
		}
		else
		{
			Aukcio[aLicitalo] = playerid;
			Aukcio[aLicit] = osszeg;
		}
	}
	else
	{
		new id = NINCS;
		if(playerid == Aukcio[aLicitalo])
		{
			for(new x = 2; x > 0; x--)
			{
				if(Aukcio[aLicitalok][x] != NINCS)
					id = x;
			}
			Aukcio[aLicitalo] = NINCS;
			Aukcio[aLicit] = 0;
			if(id != NINCS)
			{
				Aukcio[aLicit] = Aukcio[aLicitek][id];
				Aukcio[aLicitalo] = Aukcio[aLicitalok][id];
				Aukcio[aLicitek][id] = 0;
				Aukcio[aLicitalok][id] = NINCS;
			}
		}
		else if(playerid == Aukcio[aLicitalok][2])
		{
			Aukcio[aLicitek][2] = 0;
			Aukcio[aLicitalok][2] = NINCS;
		}
		else if(playerid == Aukcio[aLicitalok][1])
		{
			Aukcio[aLicitek][1] = Aukcio[aLicitek][2];
			Aukcio[aLicitalok][1] = Aukcio[aLicitalok][2];
			Aukcio[aLicitek][2] = 0;
			Aukcio[aLicitalok][2] = NINCS;
		}
		else if(playerid == Aukcio[aLicitalok][0])
		{
			Aukcio[aLicitek][0] = Aukcio[aLicitek][1];
			Aukcio[aLicitalok][0] = Aukcio[aLicitalok][1];
			Aukcio[aLicitek][1] = Aukcio[aLicitek][2];
			Aukcio[aLicitalok][1] = Aukcio[aLicitalok][2];
			Aukcio[aLicitek][2] = 0;
			Aukcio[aLicitalok][2] = NINCS;
		}
	}
}*/

stock Haztipus(tipus)
{
	new szoveg[32];
	switch(tipus)
	{
		case 1: szoveg = "Los Santos";
		case 2: szoveg = "San Fierro";
		case 3: szoveg = "Gazdagnegyed";
		case 4: szoveg = "Falu";
		case 5: szoveg = "Tanya";
		default: szoveg = "Ismeretlen";
	}
	return szoveg;
}

stock bool:InaktivCucc(id, tipus)
{
	if(tipus == INAKTIV_HAZ)
		return (HouseInfo[id][hDate] <= (gettime() - EladasIdo[0] * 60*60*24));
	else if(tipus == INAKTIV_KOCSI)
		return (CarInfo[id][cDate] <= (gettime() - EladasIdo[1] * 60*60*24));
	return false;
}

public OnPlayerPause(playerid)
{
	if(GetPlayerWeapon(playerid) == 43 || GetPlayerWeapon(playerid) == 44 || GetPlayerWeapon(playerid) == 45) return 1;
	if(RendesJatekos(playerid) && !AFK[playerid] && !Szunet[playerid] && PlayerInfo[playerid][pAdmin] == 0)
	{
		Szunet[playerid] = true;
		SzunetIdo[playerid] = 0;
		//Cselekves(playerid, "szünetelteti a játékot", 0, true);
	}
	return 1;
}

public OnPlayerUnPause(playerid)
{
	if(RendesJatekos(playerid) && Szunet[playerid] && PlayerInfo[playerid][pAdmin] == 0)
	{
		Szunet[playerid] = false;
		Cselekves(playerid, "már nem szünetelteti a játékot", 0, true);
	}
	return 1;
}

stock CheckUtolso()
{
	new p;
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(RendesJatekos(x))
			p = x;
	}
	Utolso_Player = p;
}

/*public SebessegOldKorlatozo()
{
	new Float:seb, Float:oszto, Float:x, Float:y, Float:z, carid;
	for(new playerid = 0; playerid <= Utolso_Player; playerid++)
	{
		if(RendesJatekos(playerid) && SebessegKorlat[playerid] != 0 && KocsibanVan[playerid])
		{
			carid = GetPlayerVehicleID(playerid);
			GetVehicleVelocity(carid, x, y, z);
			seb = floatsqroot(x*x+y*y+z*z) *100.0*1.6 + 3.0;
			if(seb > SebessegKorlat[playerid])// && (x+y) > z)
			{
				oszto = seb / float(SebessegKorlat[playerid]);
				x /= oszto;
				y /= oszto;
				z /= oszto;
				SetVehicleVelocity(carid, x, y, z);
			}
		}
	}
}*/

public SebessegKorlatozo()
{
	new Float:seb, Float:sk, carid,
	Float:x, Float:y, Float:z,
	Float:Vx, Float:Vy, Float:Vz
	;
	
	for(new playerid = 0; playerid <= Utolso_Player; playerid++)
	{
		if(RendesJatekos(playerid) && SebessegKorlat[playerid] != 0 && KocsibanVan[playerid])
		{
			carid = GetPlayerVehicleID(playerid);
			GetVehiclePos(carid, x, y, z);
			GetVehicleVelocity(carid, Vx, Vy, Vz);
			
			sk = float(SebessegKorlat[playerid]) / 100.0 / 1.6;
			
			if(!IsPlayerInRangeOfPoint(playerid, sk + 0.05, x + Vx, y + Vy, z + Vz))
			{
				seb = floatsqroot(Vx*Vx+Vy*Vy+Vz*Vz);
				
				Vx = (Vx / seb) * sk;
				Vy = (Vy / seb) * sk;
				Vz = (Vz / seb) * sk;
				
				SetVehicleVelocity(carid, Vx, Vy, Vz);
			}
		}
	}
	return 1;
}

stock SebessegKorlatozoPlayer(playerid)
{
	new Float:seb, Float:sk, carid,
	Float:x, Float:y, Float:z,
	Float:Vx, Float:Vy, Float:Vz
	;
	
	carid = GetPlayerVehicleID(playerid);
	GetVehiclePos(carid, x, y, z);
	GetVehicleVelocity(carid, Vx, Vy, Vz);
		
	sk = float(SebessegKorlat[playerid]) / 100.0 / 1.6;
			
	if(!IsPlayerInRangeOfPoint(playerid, sk + 0.05, x + Vx, y + Vy, z + Vz))
	{
		seb = floatsqroot(Vx*Vx+Vy*Vy+Vz*Vz);
				
		Vx = (Vx / seb) * sk;
		Vy = (Vy / seb) * sk;
		Vz = (Vz / seb) * sk;
			
		SetVehicleVelocity(carid, Vx, Vy, Vz);
	}
	return 1;
}

stock NemMozoghat(playerid)
{
	if(Animban[playerid] || PlayerCuffed[playerid] || Leutve[playerid])
		return 1;
	return 0;
}

stock FegyverElrak(playerid)
{
	Fegyvere[playerid] = 0;
	SetPlayerArmedWeapon(playerid, 0);
}

stock AnimbaRak(playerid, bool:uzenet = true)
{
	if(Animban[playerid]) return 1;
	
	Animban[playerid] = 1;
	if(uzenet)
		Msg(playerid, "Súlyosan megsérültél");
		
	Freeze(playerid, 5000);
	ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	SetPlayerDrunkLevel(playerid, 50000);
	
	if(HarcVan && Harcol[playerid] && TeruletInfo[ HarcolTerulet[playerid] ][tHarc])
		HarcKieses(playerid, "Animba esett");
	
	if(PlayerRaceInfo[playerid][xVersenyen] != NINCS && KocsibanVan[playerid] && PlayerRaceTuning[playerid][tOrvos])
	{
		PlayerRaceTuning[playerid][tSegitIdo] = 5;
		Msg(playerid, "Robot: Ellátás folyamatban", false);
	}
	return 1;
}

public OnPlayerHit(playerid, hiterid, bodypart, weaponid, Float:distance)
{
	if(IsPlayerNPC(playerid) || weaponid < 22 || weaponid > 36 || weaponid == 34 || weaponid == 23 || NemMozoghat(playerid) || NemMozoghat(hiterid)) return 1;
	
	new anim = GetPlayerAnimationIndex(playerid);
	switch(anim)
	{
		case 1069, 1070: return 1; // Gugolás balra és jobbra - Bugkihasználás
	}
	
	new
		gombok,
		fel_le,
		bal_jobb,
		animlib[32],
		animnev[32];
		
	GetAnimationName(anim, animlib, 32, animnev, 32);
	GetPlayerKeys(playerid, gombok, fel_le, bal_jobb);
	if(strfind(animnev, "CROUCH") != NINCS && (fel_le != 0 || bal_jobb != 0))
		return 1; // bugkihasználás - Clint
	
	if(!IsACop(hiterid) && Jelzes[hiterid] != JELZES_PIROS && Varosban[hiterid] && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
	{
		//if(Jelzes[playerid] != JELZES_PIROS)
		//	Msg(playerid, "Gyilkos lettél, a rendõrség köröz!");
		if(bodypart == OPH_HEAD)
		{
			if(JelzesIdo[hiterid] < 300)
				JelzesIdo[hiterid] = 300;
			JelzesBeallitas(hiterid, JELZES_PIROS);
		}
		else
		{
			if(JelzesIdo[hiterid] < 150)
				JelzesIdo[hiterid] = 150;
			JelzesBeallitas(hiterid, JELZES_NARANCS);
		}
	}
	
	if(bodypart == OPH_HEAD)
	{
		if(!IsPlayerAimingAtPlayer(hiterid, playerid)) return 1;
		if(pajzsnala[playerid] <= 0)
		{
			SetOnPlayerDeath(playerid, hiterid, weaponid);
			SetHealth(playerid, 0);
			Msg(playerid, "Fejen lõttek, ezért meghaltál");
			Msg(hiterid, "Fejen lõtted, ezért meghalt");
		}
	}
	else if(bodypart == OPH_FOOT)
	{
		if(!IsPlayerAimingAtPlayer(hiterid, playerid)) return 1;
		if(pajzsnala[playerid] <= 0)
		{
			new Float:hp;
			GetPlayerHealth(playerid, hp);
			if(hp > 30.0)
				SetHealth(playerid, (hp -15.0));
			AnimbaRak(playerid);
			Msg(playerid, "Lábon lõttek, ezért nem tudsz mozogni");
			Msg(hiterid, "Lábon lõtted, ezért nem tud mozogni");
		}
	}
	/*new testresz[32];
	switch(bodypart)
	{
		case OPH_HEAD: testresz = "fej";
		case OPH_BODY: testresz = "test";
		case OPH_FOOT: testresz = "lab";
		default: testresz = "ismeretlen";
	}
	printf("[HIT]Player %s(%d) - Hiterid: %s(%d) - Body: %s - Weapon: %s - Dist: %.3f", PlayerName(playerid), playerid, PlayerName(hiterid), hiterid, testresz, GetGunName(weaponid), distance);
	SendFormatMessageToAll(COLOR_WHITE, "[HIT]Player %s(%d) - Hiterid: %s(%d) - Body: %s - Weapon: %s - Dist: %.3f", PlayerName(playerid), playerid, PlayerName(hiterid), hiterid, testresz, GetGunName(weaponid), distance);*/
	return 1;
}

stock Feketeseg(playerid, bool:sotet = false)
{
	if(sotet) TextDrawShowForPlayer(playerid, FeketesegTD);
	else TextDrawHideForPlayer(playerid, FeketesegTD);
	return 1;
}

/*public OnNPCGetDamage(npcid,playerid,Float:health_loss,bodypart)
{
	if(!IsPlayerNPC(playerid))
	{
		if(npcid != ArveresNPC)
			SeeKick(playerid, "Ne nyírd már ki a szerencsétlen buszsofõrt aki egész nap dolgozik...");
	}
	printf("OnNPCGetDamage(%d,%d,%f,%d)",npcid,playerid,health_loss,bodypart);
	return 0;
}*/

stock bool:JegyEllenor(playerid)
{
	if(!LMT(playerid, LMUNKA_ONKORMANYZAT) || PlayerInfo[playerid][pRank] != 0)
		return false;
	return true;
}

stock MegalloNev(nid, tipus = NPC_MEGALLO_JELENLEGI)
{
	new id = Megallo(nid, tipus);
	return NPC_MegallokNeve[nid][id];
}

stock Megallo(nid, tipus = NPC_MEGALLO_JELENLEGI)
{
	new id;
	switch(tipus)
	{
		case NPC_MEGALLO_ELOZO:
		{
			if(NPC_Vezetok[nid][nHolTart] == 1)
				id = NPC_Vezetok[nid][nMegallokSzama] - 1;
			else
				id = NPC_Vezetok[nid][nHolTart] - 2;
		}
		case NPC_MEGALLO_JELENLEGI:
			id = NPC_Vezetok[nid][nHolTart] - 1;
		case NPC_MEGALLO_KOVETKEZO:
		{
			if(NPC_Vezetok[nid][nHolTart] == NPC_Vezetok[nid][nMegallokSzama])
				id = 0;
			else
				id = NPC_Vezetok[nid][nHolTart];
		}
	}
	return id;
}

stock NPCBuszban(playerid, sofor_npc = NINCS)
{
	if(sofor_npc != NINCS)
	{
		if(GetPlayerVirtualWorld(playerid) == (50000 + sofor_npc))
			return 1;
		return 0;
	}
	else
	{
		new vw = GetPlayerVirtualWorld(playerid);
		if(vw >= 50000 && vw <= (50000 + MAX_PLAYERS))
		{
			vw -= 50000;
			if(IsPlayerConnected(vw) && IsPlayerNPC(vw))
				return vw;
		}
		return NINCS;
	}
}

stock UtolsoSzabadSlot()
{
	new s = NINCS;
	for(new x = (GetMaxPlayers() - 1); x > 0; x--)
	{
		if(!IsPlayerConnected(x))
		{
			s = x;
			break;
		}
	}
	return s;
}

/*public NPC_Checker()
{
	for(new n = 0; n < MAX_PLAYERS; n++)
	{
		if(!IsPlayerConnected(n) || !IsPlayerNPC(n)) continue;
		if(!IsValidNPC(n)) continue;
		
		new Float:x, Float:y, Float:z, bool:van, nid;
		nid = NPC_ID[n];
		
		for(new p = 0; p < MAX_PLAYERS; p++)
		{
			if(!IsPlayerConnected(p) || !Logged(p) || IsPlayerNPC(p)) continue;
			GetXYInFrontOfPlayer(p, x, y, 5);
			if(PlayerToPoint(3, nid, x, y, z))
			{
				van = true;
				break;
			}
		}
		if(van)
		{
			NPC_Vezetok[nid][nMegallitva] = true;
			PauseRecordingPlayback(n);
		}
		else if(NPC_Vezetok[nid][nMegallitva])
		{
			ContinueRecordingPlayback(n);
			NPC_Vezetok[nid][nMegallitva] = false;
		}
	}
	return 1;
}*/

stock Szamlalas(nid, bool:start)
{
	if(start)
	{
		NPC_Vezetok[nid][nSzamolasIdo] = 0;
		NPC_Vezetok[nid][nSzamolasTimer] = SetTimerEx("SzamlalasTimer", 1000, true, "d", nid);
		new jelenlegi, kovetkezo;
		jelenlegi = NPC_Vezetok[nid][nHolTart] - 1;
		if(NPC_Vezetok[nid][nHolTart] == NPC_Vezetok[nid][nMegallokSzama])
			kovetkezo = 0;
		else
			kovetkezo = jelenlegi+1;
		SendFormatMessage(0, COLOR_WHITE, "Számolás! Járat: %s / Út: %s > %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][jelenlegi], NPC_MegallokNeve[nid][kovetkezo]);
		printf("Számolás! Járat: %s / Út: %s > %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][jelenlegi], NPC_MegallokNeve[nid][kovetkezo]);
	}
	else
	{
		new jelenlegi, elozo;
		jelenlegi = NPC_Vezetok[nid][nHolTart] - 1;
		if(NPC_Vezetok[nid][nHolTart] == 1)
			elozo = NPC_Vezetok[nid][nMegallokSzama] - 1;
		else
			elozo = jelenlegi - 1;
		SendFormatMessage(0, COLOR_WHITE, "Kész! Járat: %s / Út: %s > %s | Idõ: %dmp", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][elozo], NPC_MegallokNeve[nid][jelenlegi], NPC_Vezetok[nid][nSzamolasIdo]);
		printf("Kész! Járat: %s / Út: %s > %s | Idõ: %dmp", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][elozo], NPC_MegallokNeve[nid][jelenlegi], NPC_Vezetok[nid][nSzamolasIdo]);
		NPC_Vezetok[nid][nSzamolasIdo] = 0;
		KillTimer(NPC_Vezetok[nid][nSzamolasTimer]);
	}
	return 1;
}

public NPCTimer()
{
	new nid, szoveg[128], bool:talalt;
	for(new npc = 0; npc < MAX_PLAYERS; npc++)
	{
		if(!RendesJatekos(npc, true, true)) continue;
		nid = NPC_ID[npc];
		if(nid != NINCS && NPC_Vezetok[nid][nConnected] && !NPC_Vezetok[nid][nMegallt])
		{
			talalt = false;

			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				if(!RendesJatekos(p) || LezartUtat[p] == 0) continue;
				if(PlayerToPoint(20.0, npc, LezartUtX[p], LezartUtY[p], LezartUtZ[p]))
				{
					talalt = true;
					break;
				}
			}
			if(talalt && !NPC_Vezetok[nid][nMegallitva])
			{
				//PauseRecordingPlayback(npc);
				//CallRemoteFunction(NPC_Vezetok[nid][nNeve], "ds", NPC_AKCIO_SZUNET, "asd");
				SendFormatMessage(npc, 1, "NPCPARANCS %d", NPC_AKCIO_SZUNET);
				NPC_Vezetok[nid][nMegallitva] = true;
			}
			else if(!talalt && NPC_Vezetok[nid][nMegallitva])
			{
				//ContinueRecordingPlayback(npc);
				//CallRemoteFunction(NPC_Vezetok[nid][nNeve], "ds", NPC_AKCIO_FOLYTAT, "asd");
				SendFormatMessage(npc, 1, "NPCPARANCS %d", NPC_AKCIO_FOLYTAT);
				NPC_Vezetok[nid][nMegallitva] = false;
			}
			
			if(!NPC_Vezetok[nid][nMegallitva] && NPC_Vezetok[nid][nMenetIdo] != NINCS)
			{
				NPC_Vezetok[nid][nMenetIdo]--;
				
				if(NPC_Vezetok[nid][nMenetIdo] % 15 == 0)
				{
					if(NPC_Vezetok[nid][nMenetIdo] == 0)
						format(szoveg, 128, "Busz: Hamarosan megérkezünk: %s", MegalloNev(nid, NPC_MEGALLO_KOVETKEZO));
					else
						format(szoveg, 128, "Busz: Körülbelül %d másodperc múlva megérkezünk: %s", NPC_Vezetok[nid][nMenetIdo], MegalloNev(nid, NPC_MEGALLO_KOVETKEZO));
						
					for(new p = 0; p < MAX_PLAYERS; p++)
					{
						if(!RendesJatekos(p) || !NPCBuszban(p, npc)) continue;
						SendClientMessage(p, COLOR_LIGHTBLUE, szoveg);
					}
				}
			}
		}
	}
	return 1;
}

public SzamlalasTimer(nid)
{
	if(!NPC_Vezetok[nid][nSzamolas]) return 1;
	NPC_Vezetok[nid][nSzamolasIdo]++;
	//SetTimerEx("SzamlalasTimer", 1000, false, "d", nid);
	return 1;
}

stock SetBuszData(npc, id, nev[])
{
	switch(id)
	{
		case NPC_DATA_NEV: strmid(NPC_Vezetok[npc][nNev], nev, 0, strlen(nev), 255);
		case NPC_DATA_FELVETEL: strmid(NPC_Vezetok[npc][nFelvetelNev], nev, 0, strlen(nev), 255);
	}
	return 1;
}

stock SetMegallo(npc, id, nev[], Float:x, Float:y, Float:z, ido)
{
	strmid(NPC_MegallokNeve[npc][id], nev, 0, strlen(nev));
	new Float:pos[3];
	pos[0] = x;
	pos[1] = y;
	pos[2] = z;
	NPC_Megallok[npc][id] = pos;
	NPC_MegallokIdo[npc][id] = ido;
	return 1;
}

public FelvetelFolytatasa(npcid, berakas)
{
	new nid = NPC_ID[npcid];

	/*if(berakas == 1)
	{
		SetPlayerVirtualWorld(npcid, 0);
		SetTimerEx("FelvetelFolytatasa", 3000, false, "dd", npcid, 2);
		return 1;
	}
	else if(berakas == 2)
	{
		PutPlayerInVehicle(npcid, NPC_Vezetok[NPC_ID[npcid]][nKocsi], 0);
		SetTimerEx("FelvetelFolytatasa", 3000, false, "dd", npcid, 0);
	}*/

	new recfajl[32];
	//format(recfajl, 32, "%s%d", NPC_Vezetok[nid][nFelvetelNev], NPC_Vezetok[nid][nHolTart]);
	//StartRecordingPlayback(npcid, recfajl);
	//CallRemoteFunction(NPC_Vezetok[nid][nNeve], "ds", NPC_AKCIO_START, recfajl);
	format(recfajl, 32, "NPCPARANCS %d %s%d", NPC_AKCIO_START, NPC_Vezetok[nid][nFelvetelNev], NPC_Vezetok[nid][nHolTart]);
	SendClientMessage(npcid, 1, recfajl);
	
	new kovetkezo;
	if(NPC_Vezetok[nid][nHolTart] == NPC_Vezetok[nid][nMegallokSzama])
		kovetkezo = 0;
	else
		kovetkezo = NPC_Vezetok[nid][nHolTart];
	
	NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][kovetkezo];

	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(!RendesJatekos(p) || !NPCBuszban(p, npcid)) continue;
		SendFormatMessage(p, COLOR_LIGHTBLUE, "Busz: Kedves utasaink, a következõ megálló: %s", NPC_MegallokNeve[nid][kovetkezo]);
	}

	new szoveg[256];
	format(szoveg, 256, "%s\nKövetkezõ megálló: %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][kovetkezo]);
	UpdateDynamic3DTextLabelText(NPC_Vezetok[nid][nLeirasID], COLOR_WHITE, szoveg);

	if(NPC_Vezetok[nid][nSzamolas]) Szamlalas(nid, true);

	NPC_Vezetok[nid][nMegallt] = false;
	
	return 1;
}

public NPC_FelvetelStart(npcid)
{
	//printf("NPC_FelvetelStart(npcid: %d)", npcid);
	new nid = NPC_ID[npcid], recfajl[50];
	format(recfajl, sizeof(recfajl), "NPCPARANCS %d %s%d", NPC_AKCIO_START, NPC_Vezetok[nid][nFelvetelNev], NPC_Vezetok[nid][nHolTart]);
	SendClientMessage(npcid, 1, recfajl);
	
	return 1;
}

public NPC_FelvetelVege(npcid)//, reason)
{
	//if(reason == NPC_RECORD_END_REASON_END)
	//{
	new nid = NPC_ID[npcid];
	if(NPC_Vezetok[nid][nMegallokSzama] == NPC_Vezetok[nid][nHolTart])
		NPC_Vezetok[nid][nHolTart] = 1;
	else
		NPC_Vezetok[nid][nHolTart]++;
		
	new megallo = NPC_Vezetok[nid][nHolTart] - 1, kovetkezo;
	
	if(NPC_Vezetok[nid][nHolTart] == NPC_Vezetok[nid][nMegallokSzama])
		kovetkezo = 0;
	else
		kovetkezo = NPC_Vezetok[nid][nHolTart];
		
	//NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][megallo];
		
	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(!RendesJatekos(p) || !NPCBuszban(p, npcid)) continue;
		SendFormatMessage(p, COLOR_LIGHTBLUE, "Busz: Kedves utasaink, megérkeztünk a következõ megállóhoz: %s", NPC_MegallokNeve[nid][megallo]);
	}
	
	SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", npcid, 1);
		
	new szoveg[256];
	format(szoveg, 256, "%s\nKövetkezõ megálló: %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][kovetkezo]);
	UpdateDynamic3DTextLabelText(NPC_Vezetok[nid][nLeirasID], COLOR_GREEN, szoveg);
		
	format(szoveg, 256, "Busz: Beszállás! Következõ megálló a %s", NPC_MegallokNeve[nid][kovetkezo]);
	ProxDetector(50.0, npcid, szoveg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		
	if(NPC_Vezetok[nid][nSzamolas] && NPC_Vezetok[nid][nSzamolasIdo] > 0) Szamlalas(nid, false);
		
	NPC_Vezetok[nid][nMegallt] = true;
	
	new Float:x, Float:y, Float:z;
	GetPlayerPos(npcid, x, y, z);
	SetPlayerPos(npcid, x, y, z);
	//SetPlayerVirtualWorld(npcid, 1);
	
	//}
	return 1;
}

public NPCSpawn(npc)
{
	new nev[MAX_PLAYER_NAME];
	nev = PlayerName(npc);
	
	//printf("NPCSpawn(nev: %s, npc: %d)", nev, npc);
	new nid, car, szoveg[256];
	if(egyezik(nev, "NPC_Buszsofor_LS"))
	{
		nid = 0;
		car = NPC_Vezetok[nid][nKocsi];
		
		PutPlayerInVehicle(npc, car, 0); printf("PutPlayerInVehicle(npc: %d, car: %d, 0)", npc, car);

		format(szoveg, sizeof(szoveg), "%s\nKövetkezõ megálló: %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][1]);
		NPC_Vezetok[nid][nLeirasID] = CreateDynamic3DTextLabel(szoveg, COLOR_WHITE, 0.0, 0.0, 4.0, 100.0, INVALID_PLAYER_ID, car);
	}
	else if(egyezik(nev, "NPC_Buszsofor_LS_2"))
	{
		nid = 1;
		car = NPC_Vezetok[nid][nKocsi];

		PutPlayerInVehicle(npc, car, 0); printf("PutPlayerInVehicle(npc: %d, car: %d, 0)", npc, car);

		format(szoveg, sizeof(szoveg), "%s\nKövetkezõ megálló: %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][1]);
		NPC_Vezetok[nid][nLeirasID] = CreateDynamic3DTextLabel(szoveg, COLOR_WHITE, 0.0, 0.0, 4.0, 100.0, INVALID_PLAYER_ID, car);
	}
	else if(egyezik(nev, "NPC_Buszsofor_SF_LV"))
	{
		nid = 2;
		car = NPC_Vezetok[nid][nKocsi];

		PutPlayerInVehicle(npc, car, 0); printf("PutPlayerInVehicle(npc: %d, car: %d, 0)", npc, car);

		format(szoveg, sizeof(szoveg), "%s\nKövetkezõ megálló: %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][1]);
		NPC_Vezetok[nid][nLeirasID] = CreateDynamic3DTextLabel(szoveg, COLOR_WHITE, 0.0, 0.0, 4.0, 100.0, INVALID_PLAYER_ID, car);
	}
	else if(egyezik(nev, "NPC_Buszsofor_SF_LV2"))
	{
		nid = 3;
		car = NPC_Vezetok[nid][nKocsi];

		PutPlayerInVehicle(npc, car, 0); printf("PutPlayerInVehicle(npc: %d, car: %d, 0)", npc, car);

		format(szoveg, sizeof(szoveg), "%s\nKövetkezõ megálló: %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][1]);
		NPC_Vezetok[nid][nLeirasID] = CreateDynamic3DTextLabel(szoveg, COLOR_WHITE, 0.0, 0.0, 4.0, 100.0, INVALID_PLAYER_ID, car);
	}
	else if(egyezik(nev, "NPC_Arveres"))
	{
		SetPlayerVirtualWorld(npc, 9999);
		SetPlayerSkin(npc, 141);

		ArveresNPC = npc;
		if(!IsValidDynamic3DTextLabel(ArveresNPCText)) ArveresNPCText = CreateDynamic3DTextLabel("Árverés", COLOR_LIGHTBLUE, 0.0, 0.0, 0.5, 30.0, npc);
	}
	return 1;
}

stock NPCCsatlakozas(nev[], npc)
{
	//printf("NPCCsatlakozas(nev: %s, npc: %d)", nev, npc);
	new nid;
	if(egyezik(nev, "NPC_Buszsofor_LS"))
	{
		nid = 0;
		
		SetBuszData(nid, NPC_DATA_NEV, "[Helyi] Járat 1 - Los Santos");
		SetBuszData(nid, NPC_DATA_FELVETEL, "Busz_");
	
		NPC_Vezetok[nid][nHolTart] = 1;
		NPC_Vezetok[nid][nMegallokSzama] = 3;
	
		SetMegallo(nid, 0, "Városháza", 1492.098, -1741.344, 13.546, 48);
		SetMegallo(nid, 1, "Bank", 1490.208, -1059.940, 23.826, 49);
		SetMegallo(nid, 2, "Kórház", 1188.293, -1341.848, 13.570, 52);

		NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][1];
	
		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_GREY);
	
		NPC_Vezetok[nid][nKocsi] = UjKocsi(437, NPC_Megallok[nid][0][0], NPC_Megallok[nid][0][1], NPC_Megallok[nid][0][2], 269.799, 0, 0);
		NPCKocsi[NPC_Vezetok[nid][nKocsi]] = true;
	
		NPC_ID[npc] = nid;
		NPC_Vezetok[nid][nConnected] = true;
	}
	else if(egyezik(nev, "NPC_Buszsofor_LS_2"))
	{
		nid = 1;
		
		SetBuszData(nid, NPC_DATA_NEV, "[Helyi] Járat 2 - Los Santos");
		SetBuszData(nid, NPC_DATA_FELVETEL, "LS_");
	
		NPC_Vezetok[nid][nHolTart] = 1;
		NPC_Vezetok[nid][nMegallokSzama] = 9;
	
		SetMegallo(nid, 0, "Paintball", 1298.751, -1388.146, 13.489, 27);
		SetMegallo(nid, 1, "Kamion HQ", 948.763, -1240.345, 16.458, 29);
		SetMegallo(nid, 2, "Fánkos", 1004.424, -1313.985, 13.546, 21);
		SetMegallo(nid, 3, "VPOP", 750.472, -1388.663, 13.682, 22);
		SetMegallo(nid, 4, "Ruhabolt", 430.928, -1487.781, 30.791, 23);
		SetMegallo(nid, 5, "Horgászhely", 356.275, -1651.912, 32.954, 22);
		SetMegallo(nid, 6, "Reptér", 1947.086, -2172.943, 13.554, 82);
		SetMegallo(nid, 7, "Benzinkút", 1968.089, -1770.010, 13.546, 27);
		SetMegallo(nid, 8, "Étterem", 1484.475, -1585.722, 13.546, 35);

		NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][1];

		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_GREY);
	
		NPC_Vezetok[nid][nKocsi] = UjKocsi(437, NPC_Megallok[nid][0][0], NPC_Megallok[nid][0][1], NPC_Megallok[nid][0][2], 269.799, 0, 0);
		NPCKocsi[NPC_Vezetok[nid][nKocsi]] = true;

		NPC_ID[npc] = nid;
		NPC_Vezetok[nid][nConnected] = true;
	}
	else if(egyezik(nev, "NPC_Buszsofor_SF_LV"))
	{
		nid = 2;
		
		SetBuszData(nid, NPC_DATA_FELVETEL, "Fort_");
		SetBuszData(nid, NPC_DATA_NEV, "[Távolsági] Járat 3 - Fort DeMorgan <> San Fierro");
	
		NPC_Vezetok[nid][nHolTart] = 1;
		NPC_Vezetok[nid][nMegallokSzama] = 2;

		SetMegallo(nid, 0, "SF Wang Cars", -2013.773, 271.785, 32.575, 147);
		SetMegallo(nid, 1, "Fort DeMorgan", 168.132, 1159.072, 14.558, 141);
	
		NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][1];
	
		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_GREY);
	
		NPC_Vezetok[nid][nKocsi] = UjKocsi(437, NPC_Megallok[nid][0][0], NPC_Megallok[nid][0][1], NPC_Megallok[nid][0][2], 269.799, 0, 0);
		NPCKocsi[NPC_Vezetok[nid][nKocsi]] = true;
	
		NPC_ID[npc] = nid;
		NPC_Vezetok[nid][nConnected] = true;
	}
	else if(egyezik(nev, "NPC_Buszsofor_SF_LV2"))
	{
		nid = 3;
		
		SetBuszData(nid, NPC_DATA_FELVETEL, "Oktato_");
		SetBuszData(nid, NPC_DATA_NEV, "[Távolsági] Járat 4 - Los Santos <> Farm <> San Fierro");
	
		NPC_Vezetok[nid][nHolTart] = 1;
		NPC_Vezetok[nid][nMegallokSzama] = 6;

		SetMegallo(nid, 0, "Pályaudvar", 1168.151, -1822.518, 13.570, 262);
		SetMegallo(nid, 1, "LS Autóbérlõ", 529.574, -1239.627, 16.604, 57);
		SetMegallo(nid, 2, "Farm", -289.819, -139.942, 1.864, 93);
		SetMegallo(nid, 3, "Oktatók", -2027.723, -62.263, 35.320, 119);
		SetMegallo(nid, 4, "SF Városháza", -2757.362, 370.942, 4.348, 77);
		SetMegallo(nid, 5, "SF Bank", -1943.025, 595.064, 35.171, 68);
	
		NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][1];
	
		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_GREY);
	
		NPC_Vezetok[nid][nKocsi] = UjKocsi(437, NPC_Megallok[nid][0][0], NPC_Megallok[nid][0][1], NPC_Megallok[nid][0][2], 269.799, 0, 0);
		NPCKocsi[NPC_Vezetok[nid][nKocsi]] = true;

		NPC_ID[npc] = nid;
		NPC_Vezetok[nid][nConnected] = true;
	}
	else if(egyezik(nev, "NPC_Arveres"))
	{
		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_GREY);
	
		SetSpawnInfo(npc, 0, 141, 319.203, 130.035, 1007.965, 270.0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(npc);
	}
}

stock NPCBetoltese()
{
	ConnectNPC("NPC_Buszsofor_LS", "SeeBusz");
	ConnectNPC("NPC_Buszsofor_LS_2", "SeeBusz");
	ConnectNPC("NPC_Buszsofor_SF_LV", "SeeBusz");
	ConnectNPC("NPC_Buszsofor_SF_LV2", "SeeBusz");
	ConnectNPC("NPC_Arveres", "NPC_Arveres");
	//ConnectNPC("NPC_Buszsofor", "busz");
	return 1;
}

stock RendesJatekos(playerid, bool:npccsekk = true, bool:csaknpc = false)
{
	if(!csaknpc && npccsekk && IsPlayerConnected(playerid) && Logged(playerid) && !IsPlayerNPC(playerid) ||
		!csaknpc && !npccsekk && IsPlayerConnected(playerid) && Logged(playerid) ||
		csaknpc && IsPlayerConnected(playerid) && IsPlayerNPC(playerid))
		return 1;
	return 0;
}

stock SpecKarakterek(szoveg[], karakterek[] = ",")
{
	new bool:talalt;
	for(new x = 0; x < strlen(karakterek); x++)
	{
		if(strfind(szoveg, karakterek[x]) != NINCS)
		{
			talalt = true;
			break;
		}
	}
	return talalt;
}

stock Lofegyver(fegyver)
{
	new slot = GetGunSlot(fegyver);
	if(slot == 2 || slot == 3 || slot == 4 || slot == 5 || slot == 6 || slot == 7 || slot == 8 || slot == 9)
		return 1;
	return 0;
}

public BenzinTankolas(playerid)
{
	if(Tankol[playerid][0] == 0) return 1;
	new kocsi = Tankol[playerid][0], kut = Tankol[playerid][1], maxbenzin = MaxBenzin(kocsi), uzenet[64];
	
	if(GetMoney(playerid) < BenzinKutak[kut][bBenzinAra] && ( IngyenTankol(playerid, kocsi) && FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] < BenzinKutak[kut][bBenzinAra] || !IngyenTankol(playerid, kocsi) ) )
	{
		Cselekves(playerid, "befejezte a tankolást, mert nincs több pénze tankolni");
		Tankol[playerid][0] = 0;
		UnFreeze(playerid);
		return 1;
	}
	if(BenzinKutak[kut][bBenzin] < 1)
	{
		Cselekves(playerid, "befejezte a tankolást, mivel az utolsó liter benzint, ami a benzinkútba volt, beletankolta a kocsijába");
		Tankol[playerid][0] = 0;
		UnFreeze(playerid);
		return 1;
	}

	Gas[kocsi]++;
	BenzinKutak[kut][bBenzin]--;
	BenzinKutak[kut][bSzef] += BenzinKutak[kut][bBenzinAra];
	SaveBenzinKutak();
	
	if(IngyenTankol(playerid, kocsi) && FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] >= BenzinKutak[kut][bBenzinAra])
		FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] -= BenzinKutak[kut][bBenzinAra];
	else
		GiveMoney(playerid, -BenzinKutak[kut][bBenzinAra]);

	if(Gas[kocsi] >= maxbenzin)
	{
		Cselekves(playerid, "feltankolta a jármûvét");
		GameTextForPlayer(playerid, "~n~~n~~n~~g~~h~Feltankolva", 1000, 5);
		SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Köszönjük hogy a(z) %s-t választotta. Jó utat!", BenzinKutak[kut][bNev]);
		UnFreeze(playerid);
	}
	else
	{
		new Float:x, Float:y, Float:z; GetVehiclePos(kocsi, x, y, z);
		if(!PlayerToPoint(10.0, playerid, x,y,z)) return Msg(playerid, "A tankolás megszakadt");
		
		format(uzenet, sizeof(uzenet), "~n~~n~~n~~w~%d ~r~/ ~w~%d~n~~y~%d%%", maxbenzin, Gas[kocsi], floatround(float(Gas[kocsi]) / float(maxbenzin) * 100.0));
		GameTextForPlayer(playerid, uzenet, 480, 5);
		SetTimerEx("BenzinTankolas", 1000, false, "d", playerid);
	}
	
	return 1;
}

stock MaxBenzin(adat, model_ = false)
{
	new model;
	if(model_) model = adat;
	else model = GetVehicleModel(adat);
	
	return Max_Benzin[model - 400];
}

stock FrakcioTagok(frakcio)
{
	new tagok;
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
		if(PlayerInfo[x][pMember] == frakcio)
			tagok++;
	}
	return tagok;
}

stock TrafipaxCheck(playerid, sebesseg, kocsi)
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || !OnDuty[x] || !TrafiPax[x][tAktiv] || TrafiPax[x][tSebesseg] >= sebesseg || IsAPlane(kocsi) || IsABicikli(kocsi)) continue;
		if(ProxDetectorS(20, playerid, x))
		{
			new uzenet[200];
			//format(uzenet, sizeof(uzenet), "Büntetést kaptál gyorshajtás miatt!\n\nMegengedett sebesség: %d km/h\nA te sebességed: %d km/h\n\nBüntetés: %dFt", TrafiPax[x][tSebesseg], sebesseg, TrafiPax[x][tBuntetes]);
			//ShowPlayerDialog(playerid, 5555, DIALOG_STYLE_MSGBOX, "Trafipax", uzenet, "OK", "");
			Msg(playerid, "=====[ TRAFIPAX ]=====", false);
			Msg(playerid, "Büntetést kaptál gyorshajtás miatt", false);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességed: %d km/h", sebesseg);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességkorlát: %d km/h", TrafiPax[x][tSebesseg]);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Büntetés: %dFt", TrafiPax[x][tBuntetes]);
			SendClientMessage(playerid, COLOR_WHITE, " ");
			Msg(playerid, "Legközelebb vigyázz!", false);
			SendClientMessage(playerid, COLOR_WHITE, " ");
			
			Msg(x, "=====[ TRAFIPAX ]=====", false);
			Msg(x, "Elkaptál egy gyorshajtót!", false);
			SendFormatMessage(x, COLOR_LIGHTRED, "Név: %s", PlayerName(playerid));
			SendFormatMessage(x, COLOR_LIGHTRED, "Rendszám: %d", GetPlayerVehicleID(playerid));
			SendFormatMessage(x, COLOR_LIGHTRED, "Sebességed: %d km/h", sebesseg);
			SendFormatMessage(x, COLOR_LIGHTRED, "Sebességkorlát: %d km/h", TrafiPax[x][tSebesseg]);
			SendFormatMessage(x, COLOR_LIGHTRED, "Büntetés: %dFt", TrafiPax[x][tBuntetes]);
			SendClientMessage(x, COLOR_WHITE, " ");
			
			format(uzenet, sizeof(uzenet), "Büntetést kapott: %s\nRendszám: %d\n\nMegengedett sebesség: %d km/h\nSebessége: %d km/h\n\nBüntetés: %dFt\n\n(A pénz a széfbe került)", PlayerName(playerid), GetPlayerVehicleID(playerid), TrafiPax[x][tSebesseg], sebesseg, TrafiPax[x][tBuntetes]);
			ShowPlayerDialog(x, 5555, DIALOG_STYLE_MSGBOX, "Trafipax", uzenet, "OK", "");
			//ShowPlayerDialog(x, 5555, DIALOG_STYLE_MSGBOX, "Trafipax", "Elkaptál egy gyorshajtót!", "OK", "");
			Cselekves(x, "Valakit elkapott egy trafipax", NINCS);
			PlayerInfo[playerid][pAccount] -= TrafiPax[x][tBuntetes];
			FrakcioInfo[PlayerInfo[x][pMember]][fPenz] += TrafiPax[x][tBuntetes];
			TrafiPax[playerid][tBuntetheto] = 60;
			Freeze(playerid, 250);
			break;
		}
	}
	return 1;
}

stock CountChars(szoveg[], karakter)
{
	new darab;
	for(new x = 0; x < strlen(szoveg); x++)
		if(szoveg[x] == karakter) darab++;
	return darab;
}

stock EngedelyezettKarakterek(szoveg[], extrajelek[] = ".!?_[]():,;<>#&@ -")
{
	new bool:talalt;
	for(new x = 0; x < strlen(szoveg); x++)
	{
		if(szoveg[x] < 48 || szoveg[x] > 57 && szoveg[x] < 65 || szoveg[x] > 90 && szoveg[x] < 97 || szoveg[x] > 122 && szoveg[x] < 128)
		{
			if(!strlen(extrajelek)) return 0;
			talalt = false;
			for(new y = 0; y < strlen(extrajelek); y++)
			{
				if(szoveg[x] == extrajelek[y])
				{
					talalt = true;
					break;
				}
			}
			if(!talalt) return 0;
		}
	}
	return 1;
}

stock OnlinePlayers()
{
	new players;
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(IsPlayerConnected(x))
			players++;
	}
	return players;
}

stock SetVehicleInterior(kocsi, interior)
{
	if(interior < 0) return 1;
	else if(interior == 0) JarmuValtozasok[kocsi][0] = false;
	else if(interior > 0)  JarmuValtozasok[kocsi][0] = true;
	LinkVehicleToInterior(kocsi, interior);
	return 1;
}

stock SetVehicleVW(kocsi, vw)
{
	if(vw < 0) return 1;
	else if(vw == 0) JarmuValtozasok[kocsi][1] = false;
	else if(vw > 0)  JarmuValtozasok[kocsi][1] = true;
	SetVehicleVirtualWorld(kocsi, vw);
	return 1;
}

stock ZsarukOnline()
{
	new zsaruk;
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || !LegalisSzervezetTagja(x)) continue;
		zsaruk++;
	}
	return zsaruk;
}

stock JatekosSebessege(playerid)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else
	    return 0;
	return floatround(floatsqroot(x*x+y*y+z*z) *100.0*1.6);
	
	//return SpeedCheck(x, y, z, 100.0, get3d);
	//return floatround(floatsqroot(get3d?(x*x+y*y+z*z):(x*x+y*y) ) *z*1.6);
}

stock SetVehicleColor(kocsi, szin1, szin2)
{
	KocsiSzinek[kocsi][0] = szin1;
	KocsiSzinek[kocsi][1] = szin2;
	ChangeVehicleColor(kocsi, szin1, szin2);
}

stock Nagyobbadmin(player, kinel)
{
	if(PlayerInfo[player][pAdmin] > PlayerInfo[kinel][pAdmin])
		return 1;
	return 0;
}

stock FloodCheck(playerid, ido = 3, kick = 5)
{
	if(PlayerInfo[playerid][pElozoParancs] != 0)
	{
		PlayerInfo[playerid][pFlood]++;
		if(PlayerInfo[playerid][pFlood] >= kick)
		{
			SeeKick(playerid, "Parancs flood", NINCS);
		}
		Msg(playerid, "Ne floodolj!");
		return 1;
	}
	else
	{
		PlayerInfo[playerid][pElozoParancs] = ido;
		PlayerInfo[playerid][pFlood] = 0;
	}
	
	return 0;
}

stock tizmp(playerid, ido = 10, kick = 5)
{
	if(PlayerInfo[playerid][pElozoParancs] != 0)
	{
		PlayerInfo[playerid][pFlood]++;
		if(PlayerInfo[playerid][pFlood] >= kick)
		{
			SeeKick(playerid, "Parancs flood", NINCS);
		}
		Msg(playerid, "Még várnod kell %d másodpercet", ido);
		return 1;
	}
	else
	{
		PlayerInfo[playerid][pElozoParancs] = ido;
		PlayerInfo[playerid][pFlood] = 0;
	}
	
	return 0;
}

stock TeruletUpdate(t, ...)
{
	if(!TeruletInfo[t][tNeedUpdate])
		TeruletInfo[t][tNeedUpdate] = true;

	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == TERULET_Nev) TeruletUpdates[t][tNev] = true;
		else if(val == TERULET_MinX) TeruletUpdates[t][tMinX] = true;
		else if(val == TERULET_MaxX) TeruletUpdates[t][tMaxX] = true;
		else if(val == TERULET_MinY) TeruletUpdates[t][tMinY] = true;
		else if(val == TERULET_MaxY) TeruletUpdates[t][tMaxY] = true;
		else if(val == TERULET_Tulaj) TeruletUpdates[t][tTulaj] = true;
		else if(val == TERULET_HaszonMit) TeruletUpdates[t][tHaszon] = true;
		else if(val == TERULET_HaszonMennyit) TeruletUpdates[t][tHaszonMennyi] = true;
		else if(val == TERULET_Foglalva) TeruletUpdates[t][tFoglalva] = true;
	}
}

stock CarUpdate(c, ...)
{
	if(!CarInfo[c][cNeedUpdate])
		CarInfo[c][cNeedUpdate] = true;
	
	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == CAR_Owned) CarUpdates[c][cOwned] = true;
		else if(val == CAR_Owner) CarUpdates[c][cOwner] = true;
		else if(val == CAR_Model) CarUpdates[c][cModel] = true;
		else if(val == CAR_X) CarUpdates[c][cLocationx] = true;
		else if(val == CAR_Y) CarUpdates[c][cLocationy] = true;
		else if(val == CAR_Z) CarUpdates[c][cLocationz] = true;
		else if(val == CAR_Angle) CarUpdates[c][cAngle] = true;
		else if(val == CAR_ColorOne) CarUpdates[c][cColorOne] = true;
		else if(val == CAR_ColorTwo) CarUpdates[c][cColorTwo] = true;
		else if(val == CAR_Value) CarUpdates[c][cValue] = true;
		else if(val == CAR_Lock) CarUpdates[c][cLock] = true;
		else if(val == CAR_Date) CarUpdates[c][cDate] = true;
		else if(val == CAR_Painted) CarUpdates[c][cPainted] = true;
		else if(val == CAR_Tuning) CarUpdates[c][cTuning] = true;
		else if(val == CAR_Kerek) CarUpdates[c][cKerek] = true;
		else if(val == CAR_Matrica) CarUpdates[c][cMatrica] = true;
		//else if(val == CAR_) CarUpdates[x][c] = true;
	}
}

stock BizUpdate(c, ...)
{
	if(!BizzInfo[c][bNeedUpdate])
		BizzInfo[c][bNeedUpdate] = true;
		
	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == BIZ_Owned) BizzUpdates[c][bOwned] = true;
		else if(val == BIZ_Owner) BizzUpdates[c][bOwner] = true;
		else if(val == BIZ_X) BizzUpdates[c][bEntranceX] = true;
		else if(val == BIZ_Y) BizzUpdates[c][bEntranceY] = true;
		else if(val == BIZ_Z) BizzUpdates[c][bEntranceZ] = true;
		else if(val == BIZ_ExitX) BizzUpdates[c][bExitX] = true;
		else if(val == BIZ_ExitY) BizzUpdates[c][bExitY] = true;
		else if(val == BIZ_ExitZ) BizzUpdates[c][bExitZ] = true;
		else if(val == BIZ_Message) BizzUpdates[c][bMessage] = true;
		else if(val == BIZ_Extortion) BizzUpdates[c][bExtortion] = true;
		else if(val == BIZ_LevelNeeded) BizzUpdates[c][bLevelNeeded] = true;
		else if(val == BIZ_BuyPrice) BizzUpdates[c][bBuyPrice] = true;
		else if(val == BIZ_EntranceCost) BizzUpdates[c][bEntranceCost] = true;
		else if(val == BIZ_Till) BizzUpdates[c][bTill] = true;
		else if(val == BIZ_Locked) BizzUpdates[c][bLocked] = true;
		else if(val == BIZ_Interior) BizzUpdates[c][bInterior] = true;
		else if(val == BIZ_Products) BizzUpdates[c][bProducts] = true;
		else if(val == BIZ_MaxProducts) BizzUpdates[c][bMaxProducts] = true;
		else if(val == BIZ_PriceProd) BizzUpdates[c][bPriceProd] = true;
		else if(val == BIZ_VanBelso) BizzUpdates[c][bVanBelso] = true;
		//else if(val == BIZ_) BizzUpdates[x][b] = true;
	}
}

stock HazUpdate(c, ...)
{
	if(!HouseInfo[c][hNeedUpdate])
		HouseInfo[c][hNeedUpdate] = true;
		
	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == HAZ_Owned) HouseUpdates[c][hOwned] = true;
		else if(val == HAZ_Owner) HouseUpdates[c][hOwner] = true;
		else if(val == HAZ_X) HouseUpdates[c][hEntrancex] = true;
		else if(val == HAZ_Y) HouseUpdates[c][hEntrancey] = true;
		else if(val == HAZ_Z) HouseUpdates[c][hEntrancez] = true;
		else if(val == HAZ_Belso) HouseUpdates[c][hBelso] = true;
		else if(val == HAZ_Health) HouseUpdates[c][hHealth] = true;
		else if(val == HAZ_Armour) HouseUpdates[c][hArmour] = true;
		else if(val == HAZ_Value) HouseUpdates[c][hValue] = true;
		else if(val == HAZ_Hel) HouseUpdates[c][hHel] = true;
		else if(val == HAZ_Arm) HouseUpdates[c][hArm] = true;
		else if(val == HAZ_Lock) HouseUpdates[c][hLock] = true;
		else if(val == HAZ_Rooms) HouseUpdates[c][hRooms] = true;
		else if(val == HAZ_Rent) HouseUpdates[c][hRent] = true;
		else if(val == HAZ_Rentabil) HouseUpdates[c][hRentabil] = true;
		else if(val == HAZ_Takings) HouseUpdates[c][hTakings] = true;
		else if(val == HAZ_Date) HouseUpdates[c][hDate] = true;
		else if(val == HAZ_Csak) HouseUpdates[c][hCsak] = true;
		else if(val == HAZ_Csakneki) HouseUpdates[c][hCsakneki] = true;
		else if(val == HAZ_Kaja) HouseUpdates[c][hKaja] = true;
		else if(val == HAZ_Cigi) HouseUpdates[c][hCigi] = true;
		else if(val == HAZ_Kokain) HouseUpdates[c][hKokain] = true;
		else if(val == HAZ_Heroin) HouseUpdates[c][hHeroin] = true;
		else if(val == HAZ_Marihuana) HouseUpdates[c][hMarihuana] = true;
		else if(val == HAZ_Mati) HouseUpdates[c][hMati] = true;
		else if(val == HAZ_Tipus) HouseUpdates[c][hTipus] = true;
		else if(val == HAZ_Fegyverek) HouseUpdates[c][hFegyverek] = true;
		else if(val == HAZ_Mellenyek) HouseUpdates[c][hMellenyek] = true;
		//else if(val == HAZ_) HouseUpdates[c][h] = true;
	}
}

public IsPlayerAdminCall(playerid)
	return Admin(playerid, 1);
//public IsPlayerAdminCallF(playerid)
//	return Admin(playerid, 1337);

public MySQLUpdater()
{
	new darab, x;
	for(x = 0; x < MAXHAZ; x++)
	{
		if(HouseInfo[x][hNeedUpdate])
			darab++;
	}
	if(darab > 0) Updater(1);

	darab = 0;
	for(x = 0; x < MAXBIZ; x++)
	{
		if(BizzInfo[x][bNeedUpdate])
			darab++;
	}
	if(darab > 0) Updater(2);

	darab = 0;
	for(x = 0; x < MAXVSKOCSI; x++)
	{
		if(CarInfo[x][cNeedUpdate])
			darab++;
	}
	if(darab > 0) Updater(3);
	
	darab = 0;
	for(x = 0; x < MAXTERULET; x++)
	{
		if(TeruletInfo[x][tNeedUpdate])
			darab++;
	}
	if(darab > 0) Updater(4);
	
	CsomagTartoMentes();
	SaveStuff();
}

/*public kfreeze(playerid)
{
	SendClientMessage(playerid, COLOR_GREY, "Mostmár mozoghatsz, ha nem töltötte be a belsõt szólj egy adminnak!");
	TogglePlayerControllable(playerid, 1);
}
*/
public Updater(type)
{
	new x, updated, folytat, query[MAX_MYSQL_STRING_UPDATER];
	if(type == 1)
	{
		if(UpdateFolytatodik[uHaz] != NINCS)
			folytat = UpdateFolytatodik[uHaz];

		for(x = folytat; x < MAXHAZ; x++)
		{
			if(!HouseInfo[x][hNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uHaz])
			{
				UpdateFolytatodik[uHaz] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Hazak);
		
			//if(HouseUpdate[x][h]) MysqlUpdateInt("", HouseInfo[x][h]);
			if(HouseUpdates[x][hOwned]) { MysqlUpdateInt(query, "Eladva", HouseInfo[x][hOwned]); HouseUpdates[x][hOwned] = false; }
			if(HouseUpdates[x][hOwner]) { MysqlUpdateStr(query, "Tulaj", HouseInfo[x][hOwner]); HouseUpdates[x][hOwner] = false; }
			if(HouseUpdates[x][hCsak]) { MysqlUpdateInt(query, "Csak", HouseInfo[x][hCsak]); HouseUpdates[x][hCsak] = false; }
			if(HouseUpdates[x][hCsakneki]) { MysqlUpdateInt(query, "Neki", HouseInfo[x][hCsakneki]); HouseUpdates[x][hCsakneki] = false; }
			if(HouseUpdates[x][hEntrancex]) { MysqlUpdateFlo(query, "X", HouseInfo[x][hEntrancex]); HouseUpdates[x][hEntrancex] = false; }
			if(HouseUpdates[x][hEntrancey]) { MysqlUpdateFlo(query, "Y", HouseInfo[x][hEntrancey]); HouseUpdates[x][hEntrancey] = false; }
			if(HouseUpdates[x][hEntrancez]) { MysqlUpdateFlo(query, "Z", HouseInfo[x][hEntrancez]); HouseUpdates[x][hEntrancez] = false; }
			if(HouseUpdates[x][hValue]) { MysqlUpdateInt(query, "Ara", HouseInfo[x][hValue]); HouseUpdates[x][hValue] = false; }
			if(HouseUpdates[x][hRentabil]) { MysqlUpdateInt(query, "Kiado", HouseInfo[x][hRentabil]); HouseUpdates[x][hRentabil] = false; }
			if(HouseUpdates[x][hRent]) { MysqlUpdateInt(query, "KAra", HouseInfo[x][hRent]); HouseUpdates[x][hRent] = false; }
			if(HouseUpdates[x][hBelso]) { MysqlUpdateInt(query, "Belso", HouseInfo[x][hBelso]); HouseUpdates[x][hBelso] = false; }
			if(HouseUpdates[x][hHel]) { MysqlUpdateInt(query, "Elet", HouseInfo[x][hHel]); HouseUpdates[x][hHel] = false; }
			if(HouseUpdates[x][hArm]) { MysqlUpdateInt(query, "Pajzs", HouseInfo[x][hArm]); HouseUpdates[x][hArm] = false; }
			if(HouseUpdates[x][hTakings]) { MysqlUpdateInt(query, "Penz", HouseInfo[x][hTakings]); HouseUpdates[x][hTakings] = false; }
			if(HouseUpdates[x][hCigi]) { MysqlUpdateInt(query, "Cigi", HouseInfo[x][hCigi]); HouseUpdates[x][hCigi] = false; }
			if(HouseUpdates[x][hKaja]) { MysqlUpdateInt(query, "Kaja", HouseInfo[x][hKaja]); HouseUpdates[x][hKaja] = false; }
			if(HouseUpdates[x][hKokain]) { MysqlUpdateInt(query, "Kokain", HouseInfo[x][hKokain]); HouseUpdates[x][hKokain] = false; }
			if(HouseUpdates[x][hHeroin]) { MysqlUpdateInt(query, "Heroin", HouseInfo[x][hHeroin]); HouseUpdates[x][hHeroin] = false; }
			if(HouseUpdates[x][hMarihuana]) { MysqlUpdateInt(query, "Marihuana", HouseInfo[x][hMarihuana]); HouseUpdates[x][hMarihuana] = false; }
			if(HouseUpdates[x][hMati]) { MysqlUpdateInt(query, "Material", HouseInfo[x][hMati]); HouseUpdates[x][hMati] = false; }
			if(HouseUpdates[x][hLock]) { MysqlUpdateInt(query, "Zarva", HouseInfo[x][hLock]); HouseUpdates[x][hLock] = false; }
			if(HouseUpdates[x][hDate]) { MysqlUpdateInt(query, "UtolsoBelepes", HouseInfo[x][hDate]); HouseUpdates[x][hDate] = false; }
			if(HouseUpdates[x][hTipus]) { MysqlUpdateInt(query, "Tipus", HouseInfo[x][hTipus]); HouseUpdates[x][hTipus] = false; }
			
			if(HouseUpdates[x][hFegyverek]) {
				new cuccok[90], z;
				format(cuccok, 90, "%d", HouseInfo[x][hFegyverek][0]);
				for(z = 1; z < 10; z++) format(cuccok, 90, "%s,%d", cuccok, HouseInfo[x][hFegyverek][z]); MysqlUpdateStr(query, "Fegyverek", cuccok); /*cuccok[0] = EOS;*/ format(cuccok, 90, "%d", HouseInfo[x][hToltenyek][0]);
				for(z = 1; z < 10; z++) format(cuccok, 90, "%s,%d", cuccok, HouseInfo[x][hToltenyek][z]); MysqlUpdateStr(query, "Toltenyek", cuccok);
				HouseUpdates[x][hFegyverek] = false;
			}
			if(HouseUpdates[x][hMellenyek]) 
			{
				new cuccok[90], z;
				format(cuccok, 90, "%d", HouseInfo[x][hMellenyek][0]);
				for(z = 1; z < 10; z++)
					format(cuccok, 90, "%s,%d", cuccok, HouseInfo[x][hMellenyek][z]);
				MysqlUpdateStr(query, "Mellenyek", cuccok); 
				HouseUpdates[x][hMellenyek] = false;
			}
			MysqlFinalUpdate(query, x);
			
			HouseInfo[x][hNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uHaz])
			UpdateFolytatodik[uHaz] = NINCS;
	}
	if(type == 2)
	{
		if(UpdateFolytatodik[uBiz] != NINCS)
			folytat = UpdateFolytatodik[uBiz];

		for(x = folytat; x < MAXBIZ; x++)
		{
			if(!BizzInfo[x][bNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uBiz])
			{
				UpdateFolytatodik[uBiz] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Bizek);
		
			//if(BizzUpdates[x][b]) MysqlUpdateInt("", BizzInfo[x][b]);
			if(BizzUpdates[x][bMessage]) { MysqlUpdateStr(query, "Nev", BizzInfo[x][bMessage]); BizzUpdates[x][bMessage] = false; }
			if(BizzUpdates[x][bOwned]) { MysqlUpdateInt(query, "Eladva", BizzInfo[x][bOwned]); BizzUpdates[x][bOwned] = false; }
			if(BizzUpdates[x][bOwner]) { MysqlUpdateStr(query, "Tulaj", BizzInfo[x][bOwner]); BizzUpdates[x][bOwner] = false; }
			if(BizzUpdates[x][bExtortion]) { MysqlUpdateStr(query, "Extortion", BizzInfo[x][bExtortion]); BizzUpdates[x][bExtortion] = false; }
			if(BizzUpdates[x][bEntranceX]) { MysqlUpdateFlo(query, "BeX", BizzInfo[x][bEntranceX]); BizzUpdates[x][bEntranceX] = false; }
			if(BizzUpdates[x][bEntranceY]) { MysqlUpdateFlo(query, "BeY", BizzInfo[x][bEntranceY]); BizzUpdates[x][bEntranceY] = false; }
			if(BizzUpdates[x][bEntranceZ]) { MysqlUpdateFlo(query, "BeZ", BizzInfo[x][bEntranceZ]); BizzUpdates[x][bEntranceZ] = false; }
			if(BizzUpdates[x][bExitX]) { MysqlUpdateFlo(query, "KiX", BizzInfo[x][bExitX]); BizzUpdates[x][bExitX] = false; }
			if(BizzUpdates[x][bExitY]) { MysqlUpdateFlo(query, "KiY", BizzInfo[x][bExitY]); BizzUpdates[x][bExitY] = false; }
			if(BizzUpdates[x][bExitZ]) { MysqlUpdateFlo(query, "KiZ", BizzInfo[x][bExitZ]); BizzUpdates[x][bExitZ] = false; }
			if(BizzUpdates[x][bLevelNeeded]) { MysqlUpdateInt(query, "Szint", BizzInfo[x][bLevelNeeded]); BizzUpdates[x][bLevelNeeded] = false; }
			if(BizzUpdates[x][bBuyPrice]) { MysqlUpdateInt(query, "Ara", BizzInfo[x][bBuyPrice]); BizzUpdates[x][bBuyPrice] = false; }
			if(BizzUpdates[x][bEntranceCost]) { MysqlUpdateInt(query, "BelepesAra", BizzInfo[x][bEntranceCost]); BizzUpdates[x][bEntranceCost] = false; }
			if(BizzUpdates[x][bTill]) { MysqlUpdateInt(query, "Kassza", BizzInfo[x][bTill]); BizzUpdates[x][bTill] = false; }
			if(BizzUpdates[x][bLocked]) { MysqlUpdateInt(query, "Zarva", BizzInfo[x][bLocked]); BizzUpdates[x][bLocked] = false; }
			if(BizzUpdates[x][bInterior]) { MysqlUpdateInt(query, "Interior", BizzInfo[x][bInterior]); BizzUpdates[x][bInterior] = false; }
			if(BizzUpdates[x][bVanBelso]) { MysqlUpdateInt(query, "VanBelso", BizzInfo[x][bVanBelso]); BizzUpdates[x][bVanBelso] = false; }
			if(BizzUpdates[x][bProducts]) { MysqlUpdateInt(query, "Prod", BizzInfo[x][bProducts]); BizzUpdates[x][bProducts] = false; }
			if(BizzUpdates[x][bMaxProducts]) { MysqlUpdateInt(query, "MaxProd", BizzInfo[x][bMaxProducts]); BizzUpdates[x][bMaxProducts] = false; }
			if(BizzUpdates[x][bPriceProd]) { MysqlUpdateInt(query, "ProdPrice", BizzInfo[x][bPriceProd]); BizzUpdates[x][bPriceProd] = false; }

			MysqlFinalUpdate(query, x);
			
			BizzInfo[x][bNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uBiz])
			UpdateFolytatodik[uBiz] = NINCS;
	}
	if(type == 3)
	{
		if(UpdateFolytatodik[uKocsi] != NINCS)
			folytat = UpdateFolytatodik[uKocsi];

		for(x = folytat; x < MAXVSKOCSI; x++)
		{
			if(!CarInfo[x][cNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uKocsi])
			{
				UpdateFolytatodik[uKocsi] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Kocsik);

			//if(CarUpdates[x][c]) MysqlUpdateInt("", CarInfo[x][c]);
			if(CarUpdates[x][cOwned]) { MysqlUpdateInt(query, "Eladva", CarInfo[x][cOwned]); CarUpdates[x][cOwned] = false; }
			if(CarUpdates[x][cOwner]) { MysqlUpdateStr(query, "Tulaj", CarInfo[x][cOwner]); CarUpdates[x][cOwner] = false; }
			if(CarUpdates[x][cModel]) { MysqlUpdateInt(query, "Model", CarInfo[x][cModel]); CarUpdates[x][cModel] = false; }
			if(CarUpdates[x][cValue]) { MysqlUpdateInt(query, "Ara", CarInfo[x][cValue]); CarUpdates[x][cValue] = false; }
			if(CarUpdates[x][cLocationx]) { MysqlUpdateFlo(query, "LocX", CarInfo[x][cLocationx]); CarUpdates[x][cLocationx] = false; }
			if(CarUpdates[x][cLocationy]) { MysqlUpdateFlo(query, "LocY", CarInfo[x][cLocationy]); CarUpdates[x][cLocationy] = false; }
			if(CarUpdates[x][cLocationz]) { MysqlUpdateFlo(query, "LocZ", CarInfo[x][cLocationz]); CarUpdates[x][cLocationz] = false; }
			if(CarUpdates[x][cAngle]) { MysqlUpdateFlo(query, "Angle", CarInfo[x][cAngle]); CarUpdates[x][cAngle] = false; }
			if(CarUpdates[x][cColorOne]) { MysqlUpdateInt(query, "Szin1", CarInfo[x][cColorOne]); CarUpdates[x][cColorOne] = false; }
			if(CarUpdates[x][cColorTwo]) { MysqlUpdateInt(query, "Szin2", CarInfo[x][cColorTwo]); CarUpdates[x][cColorTwo] = false; }
			if(CarUpdates[x][cLock]) { MysqlUpdateInt(query, "Zarva", CarInfo[x][cLock]); CarUpdates[x][cLock] = false; }
			if(CarUpdates[x][cDate]) { MysqlUpdateInt(query, "UtolsoBelepes", CarInfo[x][cDate]); CarUpdates[x][cDate] = false; }
			if(CarUpdates[x][cTuning]) { MysqlUpdateInt(query, "Tuning", CarInfo[x][cTuning]); CarUpdates[x][cTuning] = false; }
			if(CarUpdates[x][cKerek]) { MysqlUpdateInt(query, "Kerek", CarInfo[x][cKerek]); CarUpdates[x][cKerek] = false; }
			if(CarUpdates[x][cMatrica]) { MysqlUpdateInt(query, "Matrica", CarInfo[x][cMatrica]); CarUpdates[x][cMatrica] = false; }

			MysqlFinalUpdate(query, x);
			
			CarInfo[x][cNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uKocsi])
			UpdateFolytatodik[uKocsi] = NINCS;
	}
	if(type == 4)
	{
		if(UpdateFolytatodik[uTerulet] != NINCS)
			folytat = UpdateFolytatodik[uTerulet];

		for(x = folytat; x < MAXTERULET; x++)
		{
			if(!TeruletInfo[x][tNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uTerulet])
			{
				UpdateFolytatodik[uTerulet] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Terulet);

			//if(TeruletUpdates[x][t]) { MysqlUpdateInt(query, "", TeruletInfo[x][t]); TeruletUpdates[x][t] = false; }
			if(TeruletUpdates[x][tNev]) { MysqlUpdateStr(query, "Nev", TeruletInfo[x][tNev]); TeruletUpdates[x][tNev] = false; }
			if(TeruletUpdates[x][tMinX]) { MysqlUpdateFlo(query, "MinX", TeruletInfo[x][tMinX]); TeruletUpdates[x][tMinX] = false; }
			if(TeruletUpdates[x][tMaxX]) { MysqlUpdateFlo(query, "MaxX", TeruletInfo[x][tMaxX]); TeruletUpdates[x][tMaxX] = false; }
			if(TeruletUpdates[x][tMinY]) { MysqlUpdateFlo(query, "MinY", TeruletInfo[x][tMinY]); TeruletUpdates[x][tMinY] = false; }
			if(TeruletUpdates[x][tMaxY]) { MysqlUpdateFlo(query, "MaxY", TeruletInfo[x][tMaxY]); TeruletUpdates[x][tMaxY] = false; }
			if(TeruletUpdates[x][tHaszon]) { MysqlUpdateInt(query, "Haszon", TeruletInfo[x][tHaszon]); TeruletUpdates[x][tHaszon] = false; }
			if(TeruletUpdates[x][tHaszonMennyi]) { MysqlUpdateInt(query, "HaszonMennyi", TeruletInfo[x][tHaszonMennyi]); TeruletUpdates[x][tHaszonMennyi] = false; }
			if(TeruletUpdates[x][tFoglalva]) { MysqlUpdateInt(query, "Foglalva", TeruletInfo[x][tFoglalva]); TeruletUpdates[x][tFoglalva] = false; }
			if(TeruletUpdates[x][tTulaj]) { MysqlUpdateInt(query, "Tulaj", TeruletInfo[x][tTulaj]); TeruletUpdates[x][tTulaj] = false; }

			MysqlFinalUpdate(query, x);
			
			TeruletInfo[x][tNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uTerulet])
			UpdateFolytatodik[uTerulet] = NINCS;
	}
}

public BackupTimer()
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;

		BackupTime[x] += BackTime;
		if(BackupTime[x] >= BackTimeSave)
		{
			AdatMentesSQL(x);
			BackupTime[x] = 0;
		}
	}

	return 1;
}

public OnPlayerMoneyChange(playerid, newmoney, oldmoney)
{
	if(oldmoney >= 0)
	{
		if(newmoney - oldmoney > 100)
		{
			/*if(OnlineAdminok() > 0)
			{
				new string[128];
				Format(string, "[CHEAT WARNING] Név: %s, Régi összeg: %d, Új összeg: %d", PlayerName(playerid), oldmoney, newmoney);
    			ABroadCast(COLOR_LIGHTRED, string, 1);
				PayLog(string);
			}
			else*/
			SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s ki lett bannolva a rendszer által | Oka: Pénz cheat", PlayerName(playerid));
			SeeBan(playerid, 0, NINCS, "Pénz cheat");
		}
	}
}

public OnPlayerWeaponChange(playerid, newweapon, oldweapon)
{
	if(!Admin(playerid, 1337))
	{
		if(35 <= newweapon <= 38 || 43 <= newweapon <= 45)
		{
			new string[64];
			format(string, 64, "Fegyver cheat (%s)", GetGunName(newweapon));
			SeeBan(playerid, 0, NINCS, string);
		}
	}
	if(newweapon != Fegyvere[playerid] && MostLepettBe[playerid] == 0)
	{
		if(NincsIlyenFegyvere(playerid, Fegyvere[playerid]))
		{
			Fegyvere[playerid] = 0;
			SetPlayerArmedWeapon(playerid, 0);
		}
		else
		{
			if(GetPlayerState(playerid) == 1)
			{
				Msg(playerid, "Használd a /fegyver-t fegyver elõvételre / elrakásra!");
				SetPlayerArmedWeapon(playerid, Fegyvere[playerid]);
			}
		}
	}
	return 1;
}

public OnPlayerHealthChange(playerid, Float:newhealth, Float:oldhealth)
{
	if(SpawnVedelem[playerid] > 0 && newhealth < 150.0) SetHealth(playerid, 150.0);
	else if(Logged(playerid) && !PlayerPaintballing[playerid] && 15.0 > newhealth > 0.1 && !Animban[playerid])
	{
		AnimbaRak(playerid);
		SetHealth(playerid, 15.0);
	}
	return 1;
}

public OnPlayerArmourChange(playerid, Float:newarmour, Float:oldarmour)
{
	return 1;
}

public OnPlayerAmmoChange(playerid, newammo, oldammo)
{
	if((oldammo - newammo) < 5)
		Tolteny[playerid][ GetGunSlot( GetPlayerWeapon(playerid) ) ] = newammo;
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(Tevezve[playerid] != NINCS)
		SetPlayerVirtualWorld(Tevezve[playerid], newinteriorid);

	return 1;
}

public OnPlayerVirtualWorldChange(playerid, newvirtualworld, oldvirtualworld)
{
	if(Tevezve[playerid] != NINCS)
		SetPlayerVirtualWorld(Tevezve[playerid], newvirtualworld);

	return 1;
}

public OnPlayerScoreChange(playerid, newscore, oldscore)
{
	return 1;
}

public OnPlayerTeamChange(playerid, newteam, oldteam)
{
	return 1;
}

public OnPlayerSkinChange(playerid, newskin, oldskin)
{
	return 1;
}

public OnPlayerWantedLevelChange(playerid, newwantedlevel, oldwantedlevel)
{
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	KocsiRendszam(vehicleid, false);
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(Locked(vehicleid))
		SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, 1);
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new kocsi = GetPlayerVehicleID(playerid);
	if(IsAPlane(kocsi)) return 1;
	
	new race,cp,statusz;
	race = PlayerRaceInfo[playerid][xVersenyen];
	cp = PlayerRaceInfo[playerid][xCP];
	statusz = RaceInfo[race][rStatusz];

	if(race == NINCS)
		return 1;
	if(statusz != RACE_ELINDULT)
		return 1;

	if(cp != RACE_CP_CEL)
	{
		if(cp == RACE_CP_START)
		{
			if(RaceInfo[race][rCP] > 0)
			{
				PlayerRaceInfo[playerid][xCP] = 0;
				
				if(RaceInfo[race][rCP] > 1)
					PlayerRaceInfo[playerid][xKoviCP] = 1;
				else
					PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
			}
			else
			{
				PlayerRaceInfo[playerid][xCP] = RACE_CP_CEL;
				PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
			}
		}
		else
		{
			if((cp+1) >= RaceInfo[race][rCP])
			{
				PlayerRaceInfo[playerid][xCP] = RACE_CP_CEL;
				PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
			}
			else
			{
				PlayerRaceInfo[playerid][xCP]++;
				
				if((cp+2) >= RaceInfo[race][rCP])
					PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
				else
					PlayerRaceInfo[playerid][xKoviCP] = PlayerRaceInfo[playerid][xCP] + 1;
			}
		}
		SetPlayerRaceCP(playerid);
	}
	else if(cp == RACE_CP_CEL)
	{
		DisablePlayerRaceCheckpoint(playerid);
		new time = PlayerRaceInfo[playerid][xIdo];
		RaceInfo[race][rBeert]++;
		new hanyadik = RaceInfo[race][rBeert];
		new uzenet[128];

		if(hanyadik <= 8)
		{
			new nyeremeny = floatround(float(RaceInfo[race][rNyeremeny]) * float(VersenySzorzo[hanyadik-1]) * 0.01);
			format(uzenet, 128, "[%d.] %s %s alatt teljesítette a %s-t | Nyeremény: %dFt", RaceInfo[race][rBeert], PlayerName(playerid), FormatTime(time), RaceInfo[race][rNev], nyeremeny);
			foreach(Jatekosok, x)
			{
				if(PlayerRaceInfo[x][xVersenyen] == race && x != playerid || x != playerid && Admin(x, 1337))
					SendClientMessage(x, COLOR_LIGHTGREEN, uzenet);
					
					
				//============================================= RACE HELYEZÉSEK MENTÉSE! ==========================================
				//============================================= RACE HELYEZÉSEK MENTÉSE! ==========================================
				if(RaceInfo[race][rBeert] == 1)
				{
					rHelyezes1 = PlayerName(playerid);
					rNyeremeny1 = nyeremeny;
				}
				if(RaceInfo[race][rBeert] == 2)
				{
					rHelyezes2 = PlayerName(playerid);
					rNyeremeny2 = nyeremeny;
				}
				if(RaceInfo[race][rBeert] == 3)
				{
					rHelyezes3 = PlayerName(playerid);
					rNyeremeny3 = nyeremeny;
				}
				if(RaceInfo[race][rBeert] == 4)
				{
					rHelyezes4 = PlayerName(playerid);
					rNyeremeny4 = nyeremeny;
				}
				if(RaceInfo[race][rBeert] == 5)
				{
					rHelyezes5 = PlayerName(playerid);
					rNyeremeny5 = nyeremeny;
				}
				if(RaceInfo[race][rBeert] == 6)
				{
					rHelyezes6 = PlayerName(playerid);
					rNyeremeny6 = nyeremeny;
				}
				if(RaceInfo[race][rBeert] == 7)
				{
					rHelyezes7 = PlayerName(playerid);
					rNyeremeny7 = nyeremeny;
				}
				if(RaceInfo[race][rBeert] == 8)
				{
					rHelyezes8 = PlayerName(playerid);
					rNyeremeny8 = nyeremeny;
				}
				//==========================================================================================
				//==========================================================================================
				//==========================================================================================
			}
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Gratulálunk! %d. lettél! A nyereményed %dFt! Máris utaljuk a számládra", hanyadik, nyeremeny);
			PlayerInfo[playerid][pAccount] += nyeremeny;
		}
		else
		{
			format(uzenet, 128, "[%d.] %s - Idõ: %s", hanyadik, PlayerName(playerid), FormatTime(time));
			foreach(Jatekosok, x)
			{
				if(PlayerRaceInfo[x][xVersenyen] == race && x != playerid || x != playerid && Admin(x, 1337))
					SendClientMessage(x, COLOR_YELLOW, uzenet);
			}
		}

		PlayerRaceInfo[playerid][xVersenyen] = NINCS;
		VersenyVege(playerid);

		new meg = 0;
		foreach(Jatekosok, x)
		{
			if(PlayerRaceInfo[x][xVersenyen] == race)
				meg++;
		}
		if(meg == 0)
		{
			RaceInfo[race][rStatusz] = RACE_VEGE;
			format(uzenet, 128, "A %s versenynek vége", RaceInfo[race][rNev]);
			foreach(Jatekosok, x)
			{
				if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					SendClientMessage(x, COLOR_WHITE, uzenet);
			}
		}
	}
	/*else
	{
		new race = RaceStartnal(playerid);
		if(race != -1)
		{
			new string[128];
			Format(string, "~r~~h~Nevezesi dij:~n~~b~~h~%dFt"
		}
	}*/

	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnMysqlError(error[], errorid, MySQL:handle)
{
	new sqlerror[92];
	Format(sqlerror, "MySQL Hiba történt. ErrorID: %d. Hiba: | kitérdekel?", errorid);
	ABroadCast(COLOR_LIGHTRED, sqlerror, 1);
	Format(sqlerror, "%s", error);
	ABroadCast(COLOR_LIGHTRED, sqlerror, 1);
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(response == 1) //resp1!
	{
		new string[1000];
		if(dialogid == DIALOG_RACETUNING)
		{
			if(PlayerRaceInfo[playerid][xVersenyen] == NINCS || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			listitem++;
			new kocsi = GetPlayerVehicleID(playerid);
			switch(listitem)
			{
				case 1:
				{
					if(!PenzLevesz(playerid, 75000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 75,000Ftba kerül");
					else if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_HYDRAULICS) == 1087)
						return ShowTuningDialog(playerid, false, "Hiba: Már van hidraulika a kocsin");
					
					if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_HYDRAULICS) != 1087)
						AddVehicleComponent(kocsi, 1087);
						
					PlayerRaceTuning[playerid][tNitro] = 0;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Hidraulika");
					Cselekves(playerid, "vett egy hidraulikát");
				}
				case 2:
				{
					if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_NITRO) == 1010)
						return ShowTuningDialog(playerid, false, "Hiba: Már van nitro a kocsidon!");
					else if(!PenzLevesz(playerid, 75000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 75,000Ftba kerül");
					
					if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_NITRO) != 1010)
						AddVehicleComponent(kocsi, 1010);
						
					PlayerRaceTuning[playerid][tNitro] = 0;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Alap nitropack");
					Cselekves(playerid, "vett egy alap nitropackot");
				}
				case 3:
				{
					if(PlayerRaceTuning[playerid][tNitro] >= 1)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen vagy erõsebb nitro a kocsidon!");
					else if(!PenzLevesz(playerid, 150000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 150,000Ftba kerül");
					
					if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_NITRO) != 1010)
						AddVehicleComponent(kocsi, 1010);
						
					PlayerRaceTuning[playerid][tNitro] = 1;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Gyors nitropack");
					Cselekves(playerid, "vett egy gyors nitropackot");
				}
				case 4:
				{
					if(PlayerRaceTuning[playerid][tNitro] == 2)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen nitro a kocsidon!");
					else if(!PenzLevesz(playerid, 250000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 250,000Ftba kerül");
					
					if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_NITRO) != 1010)
						AddVehicleComponent(kocsi, 1010);
						
					PlayerRaceTuning[playerid][tNitro] = 2;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Szupergyors nitropack");
					Cselekves(playerid, "vett egy szupergyors nitropackot");
				}
				case 5:
				{
					if(PlayerRaceTuning[playerid][tUjito] >= 1)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen vagy erõsebb robot a kocsidon!");
					else if(!PenzLevesz(playerid, 180000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 180,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tUjito] = 1;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Alap mechanikus robot");
					Cselekves(playerid, "vett egy alap mechanikus robotot");
				}
				case 6:
				{
					if(PlayerRaceTuning[playerid][tUjito] == 2)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen robot a kocsidon!");
					else if(!PenzLevesz(playerid, 180000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 300,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tUjito] = 2;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Fejlett mechanikus robot");
					Cselekves(playerid, "vett egy fejlett mechanikus robotot");
				}
				case 7:
				{
					if(PlayerRaceTuning[playerid][tOrvos])
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen robot a kocsidon!");
					else if(!PenzLevesz(playerid, 150000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 150,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tOrvos] = true;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Orvosi robot");
					Cselekves(playerid, "vett egy orvosi robotot");
				}
				case 8:
				{
					if(PlayerRaceTuning[playerid][tEMP] >= 1)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen vagy erõsebb EMP védelem a kocsidon!");
					else if(!PenzLevesz(playerid, 150000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 150,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tEMP] = 1;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Minimális EMP védelem");
					Cselekves(playerid, "vett egy minimális EMP védelmet");
				}
				case 9:
				{
					if(PlayerRaceTuning[playerid][tEMP] >= 2)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen vagy erõsebb EMP védelem a kocsidon!");
					else if(!PenzLevesz(playerid, 400000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 400,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tEMP] = 2;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Közepes EMP védelem");
					Cselekves(playerid, "vett egy közepes EMP védelmet");
				}
				case 10:
				{
					if(PlayerRaceTuning[playerid][tEMP] == 3)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen EMP védelem a kocsidon!");
					else if(!PenzLevesz(playerid, 1000000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 1,000,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tEMP] = 3;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Felett EMP védelem");
					Cselekves(playerid, "vett egy fejlett EMP védelmet");
				}
			}
		}
		else if(dialogid == DIALOG_RACETUNING_2)
		{
			ShowTuningDialog(playerid);
			return 1;
		}
		else if(dialogid == DIALOG_VESZ)
		{
			new gondolat[100];
			listitem++;
			switch(listitem)
			{
				case 1:
				{
					if(GetMoney(playerid) < 30000)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -30000);
					BizPenz(BIZ_247, 30000);
					new randphone = 1000 + random(8999);
					PlayerInfo[playerid][pPnumber] = randphone;
					format(string, sizeof(string), "Megvetted a telefont, a számod: %d\n", randphone);
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy telefont", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 2:
				{
					if(GetMoney(playerid) < 5000)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(PlayerInfo[playerid][pPhoneBook] != 0)
					{
						format(string, sizeof(string), "Nekem már van telefonkönyvem...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -5000);
					BizPenz(BIZ_247, 5000);
					PlayerInfo[playerid][pPhoneBook] = 1;
					format(string, sizeof(string), "Vettél egy telefonkönyvet!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy telefonkönyvet", 1);
					TogglePlayerControllable(playerid, true);
				}
				case 3:
				{
					if(GetMoney(playerid) < 25000)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(PlayerInfo[playerid][pLokator] == 1)
					{
						format(string, sizeof(string), "Nekem már van GPS Lokátorom...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -25000);
					BizPenz(BIZ_247, 25000);
					PlayerInfo[playerid][pLokator] = 1;
					format(string, sizeof(string), "Vettél egy GPS Lokátort!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy GPS Lokátort", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 4:
				{
					if(GetMoney(playerid) < 3000)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(vontatokotel[playerid] == 1)
					{
						format(string, sizeof(string), "Nekem már van vontatókötelem...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -3000);
					BizPenz(BIZ_247, 3000);
					vontatokotel[playerid] = 1;
					format(string, sizeof(string), "Vettél egy vontatókötelet!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy vontató kötelet", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 5:
				{
					if(GetMoney(playerid) < 1250)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(PlayerInfo[playerid][pKotszer] < MAXKOTSZER)
					{
						PlayerInfo[playerid][pKotszer] += 3;
						format(string, sizeof(string), "Vettél egy kötszeres dobozt(3db)!\nMost %d kötszer van nálad.\n", PlayerInfo[playerid][pKotszer]);
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
						Cselekves(playerid, "vett egy kötszeres dobozt", 1);
						BizzInfo[BIZ_247][bProducts]--;
						GiveMoney(playerid, -1250);
						BizPenz(BIZ_247, 1250);
						TogglePlayerControllable(playerid, true);
					}
					else
					{
						format(string, sizeof(string), "Ennyi kötszert nem bírok elrakni...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
					}
				}
				case 6:
				{
					if(GetMoney(playerid) < 200)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -200);
					BizPenz(BIZ_247, 200);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
					new nyero = Rand(1, 3);
					if(nyero == 1)
					{
						new menyit = Rand(200, 1000);
						GiveMoney(playerid, menyit);
						format(string, sizeof(string), "Vettél egy kaparós sorsjegyet!\nNyertél %dFt-ot\n", menyit);
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					}
					else
					{
						format(string, sizeof(string), "Vettél egy kaparós sorsjegyet!\nNem nyertél semmit.\n");
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					}
					Cselekves(playerid, "vett egy kaparós sorsjegyet", 1);
				}
				case 7:
				{
					if(GetMoney(playerid) < 500)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(gDice[playerid] == 1)
					{
						format(string, sizeof(string), "Nekem már van dobókockám...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -500);
					BizPenz(BIZ_247, 500);
					gDice[playerid] = 1;
					format(string, sizeof(string), "Vettél egy dobókockát!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy dobókockát", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 8:
				{
					if(GetMoney(playerid) < 600)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -600);
					BizPenz(BIZ_247, 600);
					new rand = random(15);
					Groceries[playerid][pChickens] += 1;
					Groceries[playerid][pChicken] += rand;
					format(string, sizeof(string), "Vettél egy csirkét!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy csirkét", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 9:
				{
					if(GetMoney(playerid) < 450)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -450);
					BizPenz(BIZ_247, 450);
					new rand = random(15);
					Groceries[playerid][pHamburgers] += 1;
					Groceries[playerid][pHamburger] += rand;
					format(string, sizeof(string), "Vettél egy hamburgert!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy hamburgert", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 10:
				{
					if(GetMoney(playerid) < 700)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -700);
					BizPenz(BIZ_247, 700);
					new rand = random(15);
					Groceries[playerid][pPizzas] += 1;
					Groceries[playerid][pPizza] += rand;
					format(string, sizeof(string), "Vettél egy fagyasztott pizzát\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy fagyasztott pizzát", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 11:
				{
					if(GetMoney(playerid) < 700)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(PlayerInfo[playerid][pKaja] < MAXKAJA)
					{
						GiveMoney(playerid, -700);
						BizPenz(BIZ_247, 700);
						PlayerInfo[playerid][pKaja]++;
						format(string, sizeof(string), "Vettél egy szendvicset!\nMost %ddb van nálad", PlayerInfo[playerid][pKaja]);
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
						BizzInfo[BIZ_247][bProducts]--;
						TogglePlayerControllable(playerid, true);
					}
					else
					{
						format(string, sizeof(string), "Ennyi szendvicset nem tudok hova rakni...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
					}
				}
				case 12:
				{
					if(GetMoney(playerid) < 250)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -250);
					BizPenz(BIZ_247, 250);
					PlayerInfo[playerid][pPia]++;
					format(string, sizeof(string), "Vettél egy üveg üditõt!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy üveg üditõt", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 13:
				{
					if(GetMoney(playerid) < 510)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -510);
					BizPenz(BIZ_247, 510);
					PlayerInfo[playerid][pCigi] += 12;
					format(string, sizeof(string), "Vettél egy doboz cigit(12 szál)!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy doboz cigit", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 14:
				{
					if(GetMoney(playerid) < 600)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -600);
					BizPenz(BIZ_247, 600);
					PlayerInfo[playerid][pGyujto] += 12;
					format(string, sizeof(string), "Vettél egy vihar gyújtót!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy vihar gyújtót", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 15:
				{
					if(GetMoney(playerid) < 3000)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -3000);
					BizPenz(BIZ_247, 3000);
					PlayerInfo[playerid][pNikotin]++;
					format(string, sizeof(string), "Vettél egy nikotin tapaszt!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy nikotin tapaszt", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 16:
				{
					if(GetMoney(playerid) < 2000)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -2000);
					BizPenz(BIZ_247, 2000);
					Condom[playerid]++;
					format(string, sizeof(string), "Vettél egy óvszert!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "Mégse");
					Cselekves(playerid, "vett egy óvszert", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
			}
		}
		/*else if(dialogid == DIALOG_KOCSI)
		{
			new gondolat[100];
			listitem++;
			switch(listitem)
			{
				case 1:
				{
					if(GetMoney(playerid) < 1000000)
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					GiveMoney(playerid, -100000);
					BizPenz(BIZ_KOCSI, 100000);
					PlayerInfo[playerid][pRiaszto] = 1;
					format(string, sizeof(string), "Megvetted a riasztót az autódba.");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "Au", string, "Ok", "Mégse");
					Cselekves(playerid, "vett riasztót az autójába", 1);
					TogglePlayerControllable(playerid, true);*/
		else if(dialogid == DIALOG_BEP)
		{
			if(HolTart[playerid] == NINCS)
				TogglePlayerControllable(playerid, true);
			if(HolTart[playerid] == 1)
			{
				if(strlen(inputtext) < 1)
				{
					format(string, sizeof(string), "Azért valamit irjál be..\n"); 
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Ok","Mégse");
					TogglePlayerControllable(playerid, true);
					HolTart[playerid] = NINCS;
					return 1;
				}
				if(strval(inputtext) < 1 || strval(inputtext) > 300)
				{
					format(string, sizeof(string), "Aha biztos..\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Ok","Mégse");
					HolTart[playerid] = NINCS;
					return 1;
				}
				new skin = strval(inputtext);
				new talalt = NINCS;
				for(new x = 0; x < sizeof(Peds); x++)
				{
    				if(Peds[x][0] == skin)
					{
						talalt = skin;
						break;
					}
					else
						talalt = NINCS;
				}
				if(talalt == NINCS)
				{
					format(string, sizeof(string), "Rossz Skin ID.\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Ok","Mégse");
					HolTart[playerid] = NINCS;
					return 1;
				}
				else
				{
					format(string, sizeof(string), "Skin Beállítva.\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
					HolTart[playerid] = 2;
					skine[playerid] = skin;
					return 1;
				}
			}
			else if(HolTart[playerid] == 2)
			{
				format(string, sizeof(string), "Kérlek válaszd ki mien pisztolyt szeretnél.\nVálasztható: Deagle, Silenced, Colt.\n");
				ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_INPUT, "Beépített", string, "Tovább","Mégse");
				HolTart[playerid] = 3;
				return 1;
			}
			else if(HolTart[playerid] == 3)
			{
				if(egyezik(inputtext, "deagle"))
				{
					format(string, sizeof(string), "Választott Fegyver: Deagle.\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
					HolTart[playerid] = 4;
					fegyvere[playerid] = 1;
					return 1;
				}
				else if(egyezik(inputtext, "silenced"))
				{
					format(string, sizeof(string), "Választott Fegyver: Silenced.\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
					HolTart[playerid] = 4;
					fegyvere[playerid] = 2;
					return 1;
				}
				else if(egyezik(inputtext, "colt"))
				{
					format(string, sizeof(string), "Választott Fegyver: Colt.\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
					HolTart[playerid] = 4;
					fegyvere[playerid] = 3;
					return 1;
				}
				else
				{
					format(string, sizeof(string), "Mondom Deagle, Colt vagy Silenced!\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
					HolTart[playerid] = 2;
					return 1;
				}
			}
			else if(HolTart[playerid] == 4)
			{
				format(string, sizeof(string), "Rendben, Pack összerakva.\n Kést és páncélt mellékeltünk.\n");
				ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Kész","Mégse");
				HolTart[playerid] = NINCS;
				new skinke = skine[playerid];
				SetPlayerSkin(playerid, skinke);
				SetHealth(playerid, 100);
				SetPlayerArmour(playerid, 100);
				GiveWeapon(playerid, 4, 1);
				GiveWeapon(playerid, 41, 1);
				skine[playerid] = 0;
				if(fegyvere[playerid] == 1)
				{
					GiveWeapon(playerid, 24, 150);
					fegyvere[playerid] = 0;
					return 1;
				}
				else if(fegyvere[playerid] == 2)
				{
					GiveWeapon(playerid, 23, 150);
					fegyvere[playerid] = 0;
					return 1;
				}
				else if(fegyvere[playerid] == 3)
				{
					GiveWeapon(playerid, 22, 150);
					fegyvere[playerid] = 0;
					return 1;
				}
				return 1;
			}
		}
		/*else if(dialogid == DIALOG_TRIAD)
		{
			if(strlen(inputtext) < 1)
			{
				format(string, sizeof(string), "Kérem adja meg a jelszót."); 
				ShowPlayerDialog(playerid, DIALOG_TRIAD2, DIALOG_STYLE_MSGBOX, "Triad belépés", string, "Ok","Mégse");
				TogglePlayerControllable(playerid, true);
			}
			else if(egyezik(inputtext, FrakcioInfo[LMUNKA_YAKUZA][fJelszo]))
			{
				format(string, sizeof(string), "A jelszó elfogadva.");
				ShowPlayerDialog(playerid, DIALOG_TRIAD3, DIALOG_STYLE_MSGBOX, "Triad belépés", string, "Ok","Ok");
				format(string, sizeof(string), "Valaki belépett a bázisra!");
				SendRadioMessage(LMUNKA_YAKUZA, COLOR_LIGHTRED, string);
				TogglePlayerControllable(playerid, true);
				MoveDynamicObject(Triadkapu[0], -2279.7082519531, 2356.7102050781, 0.8277354240417, 5);
				Triadnyitva = 1;
				SetTimer("Triad", 10000, false);
				return 1;
			}
			else
			{
				format(string, sizeof(string), "A Jelszó helytelen.\nAz egységek riasztva.");
				ShowPlayerDialog(playerid, DIALOG_TRIAD4, DIALOG_STYLE_MSGBOX, "Triad belépés", string, "Ok","Ok");
				format(string, sizeof(string), "Valaki elrontotta a jelszót!");
				SendRadioMessage(LMUNKA_YAKUZA, COLOR_LIGHTRED, string);
				MoveDynamicObject(Triadkapu[1], -2282.2297363281, 2365.8562011719, 7.1597633361816, 5);
				MoveDynamicObject(Triadkapu[2], -2289.3342285156, 2356.1628417969, 7.1102004051208, 5);
				MoveDynamicObject(Triadkapu[3], -2290.4816894531, 2364.224609375, 7.1408858299255, 5);
				Triadnyitva = 2;
				return 1;
			}
		}
		else if(dialogid == DIALOG_TRIAD5)
		{
			if(strlen(inputtext) < 1)
			{
				format(string, sizeof(string), "Kérem adja meg a jelszót."); 
				ShowPlayerDialog(playerid, DIALOG_TRIAD2, DIALOG_STYLE_MSGBOX, "Triad belépés", string, "Ok","Mégse");
				TogglePlayerControllable(playerid, true);
			}
			else if(egyezik(inputtext, FrakcioInfo[LMUNKA_YAKUZA][fJelszo]))
			{
				format(string, sizeof(string), "A jelszó elfogadva.");
				ShowPlayerDialog(playerid, DIALOG_TRIAD3, DIALOG_STYLE_MSGBOX, "Triad belépés", string, "Ok","Ok");
				format(string, sizeof(string), "Valaki belépett a bázisra!");
				SendRadioMessage(LMUNKA_YAKUZA, COLOR_LIGHTRED, string);
				TogglePlayerControllable(playerid, true);
				MoveDynamicObject(Triadkapu[4], -2173.0864257813, 639.96374511719, 1051.3791503906, 3);
				Triadnyitva = 1;
				SetTimer("Triad2", 10000, false);
				return 1;
			}
			else
			{
				format(string, sizeof(string), "A Jelszó helytelen.\nAz egységek riasztva.");
				ShowPlayerDialog(playerid, DIALOG_TRIAD4, DIALOG_STYLE_MSGBOX, "Triad belépés", string, "Ok","Ok");
				format(string, sizeof(string), "Valaki elrontotta a jelszót!");
				SendRadioMessage(LMUNKA_YAKUZA, COLOR_LIGHTRED, string);
				MoveDynamicObject(Triadkapu[1], -2282.2297363281, 2365.8562011719, 7.1597633361816, 5);
				MoveDynamicObject(Triadkapu[2], -2289.3342285156, 2356.1628417969, 7.1102004051208, 5);
				MoveDynamicObject(Triadkapu[3], -2290.4816894531, 2364.224609375, 7.1408858299255, 5);
				Triadnyitva2 = 2;
				return 1;
			}
		}*/
		else if(dialogid == DIALOG_FBI)
		{
			if(HolTart[playerid] == NINCS)
				TogglePlayerControllable(playerid, true);
			if(HolTart[playerid] != NINCS)
			{
				if(strlen(inputtext) < 1)
				{
					format(string, sizeof(string), "Kérem adja meg a jelszót."); 
					ShowPlayerDialog(playerid, DIALOG_FBI, DIALOG_STYLE_MSGBOX, "FBI Access", string, "Ok","Mégse");
					TogglePlayerControllable(playerid, true);
				}
				else if(egyezik(inputtext, FrakcioInfo[LMUNKA_FBI][fJelszo]))
				{
					format(string, sizeof(string), "A jelszó elfogadva.");
					ShowPlayerDialog(playerid, DIALOG_FBI, DIALOG_STYLE_MSGBOX, "FBI Access", string, "Ok","Ok");
					TogglePlayerControllable(playerid, true);
					MoveDynamicObject(Fbibelso, 228.2333984375, 153.2314453125, 1003.3428344727, 3);
					SetTimer("FbiKapuBecsuk", 10000, false);
					HolTart[playerid] = NINCS;
					return 1;
				}
				else
				{
				format(string, sizeof(string), "A Jelszó helytelen.\nAz egységek riasztva.");
				ShowPlayerDialog(playerid, DIALOG_FBI, DIALOG_STYLE_MSGBOX, "FBI Access", string, "Ok","Ok");
				TogglePlayerControllable(playerid, true);
				MoveDynamicObject(Fbilezaro1, 234.6336517334, 169.48387145996, 1001.9366455078, 4);
				MoveDynamicObject(Fbilezaro2, 246.57153320313, 169.48551940918, 1001.9366455078, 4);
				MoveDynamicObject(Fbilezaro3, 238.75532531738, 139.39646911621, 1002.6133422852, 4);
				format(string, sizeof(string), "FBI HQ: Figyelem minden egység! Illetéktelen behatolási kísérlet!");
				SendRadioMessage(LMUNKA_FBI, COLOR_RED, string);
				SendRadioMessage(PlayerInfo[playerid][pSwattag], COLOR_RED, string);
				Fbibelepes = 1;
				HolTart[playerid] = NINCS;
				return 1;
				}
			}
		}
		else if(dialogid == DIALOG_ADO)
		{
			if(HolTart[playerid] == NINCS)
				TogglePlayerControllable(playerid, true);
				
			if(HolTart[playerid] == 0)
			{
				if(strlen(inputtext) < 1)
				{
					format(string, sizeof(string), "Nem írtál be semmit...\nKérlek írd be.");
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_INPUT, "Adóbevallás[Hány éve él a városban?]", string, "Ok","Mégse");
					return 1;
				}
				if(strval(inputtext) < 1 || strval(inputtext) > 50)
				{
					format(string, sizeof(string), "Minimum 1, maximum 50\nKérlek írd be újra.");
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_INPUT, "Adóbevallás[Hány éve él a városban?]", string, "Ok","Mégse");
					return 1;
				}
				PlayerInfo[playerid][pAdoSzint] = strval(inputtext);
				HolTart[playerid] = 1;
				PlayerInfo[playerid][pAdo] += (strval(inputtext) * ADO_SZINT);
				format(string, sizeof(string), "Van háza?\n");
				ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbevallás[Van háza?]", string, "Van","Nincs");
				return 1;
			}	
			else if(HolTart[playerid] == 1)
			{
					PlayerInfo[playerid][pAdoHaz] = 1;
					HolTart[playerid] = 2;
					PlayerInfo[playerid][pAdo] += (Szint(playerid) * ADO_HAZ);
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_INPUT, "Adóbevallás[Hol lakik?]", "Los Santos\nSan Fierro\nGazdagNegyed\nFalu\nTanya", "Ok", "Mégse");
					return 1;
			}
			else if(HolTart[playerid] == 2)
			{
				if(egyezik(inputtext, "Los Santos"))
				{
					PlayerInfo[playerid][pAdoHazHol] = 1;
					PlayerInfo[playerid][pAdo] += (Szint(playerid) * ADO_HAZLS);
					HolTart[playerid] = 3;
					format(string, sizeof(string), "Rendelkezik gépjármûvel?\n");
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbevallás[Rendelkezik gépjármûvel?]", string, "Igen","Nem");
					return 1;
				}
				else if(egyezik(inputtext, "San Fierro"))
				{
					PlayerInfo[playerid][pAdoHazHol] = 2;
					PlayerInfo[playerid][pAdo] += (Szint(playerid) * ADO_HAZSF);
					HolTart[playerid] = 3;
					format(string, sizeof(string), "Rendelkezik gépjármûvel?\n");
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbevallás[Rendelkezik gépjármûvel?]", string, "Igen","Nem");
					return 1;
				}
				else if(egyezik(inputtext, "GazdagNegyed"))
				{
					PlayerInfo[playerid][pAdoHazHol] = 3;
					PlayerInfo[playerid][pAdo] += (Szint(playerid) * ADO_HAZGN);
					HolTart[playerid] = 3;
					format(string, sizeof(string), "Rendelkezik gépjármûvel?\n");
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbevallás[Rendelkezik gépjármûvel?]", string, "Igen","Nem");
					return 1;
				}
				else if(egyezik(inputtext, "Falu"))
				{
					PlayerInfo[playerid][pAdoHazHol] = 4;
					PlayerInfo[playerid][pAdo] += (Szint(playerid) * ADO_HAZFALU);
					HolTart[playerid] = 3;
					format(string, sizeof(string), "Rendelkezik gépjármûvel?\n");
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbevallás[Rendelkezik gépjármûvel?]", string, "Igen","Nem");
					return 1;
				}
				else if(egyezik(inputtext, "Tanya"))
				{
					PlayerInfo[playerid][pAdoHazHol] = 5;
					PlayerInfo[playerid][pAdo] += (Szint(playerid) * ADO_HAZTANYA);
					HolTart[playerid] = 3;
					format(string, sizeof(string), "Rendelkezik gépjármûvel?\n");
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbevallás[Rendelkezik gépjármûvel?]", string, "Igen","Nem");
					return 1;
				}
				else
				{
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_INPUT, "Adóbevallás[Hol lakik?]", "Los Santos\nSan Fierro\nGazdagNegyed\nFalu\nTanya", "Ok", "Mégse");
				}
			}
			else if(HolTart[playerid] == 3)
			{
				PlayerInfo[playerid][pAdoJarmu] = 1;
				PlayerInfo[playerid][pAdo] += (Szint(playerid) * ADO_JARMU);
				format(string, sizeof(string), "Köszönjük hogy kitöltötte az ûrlapot, az adója: %dFt\n", PlayerInfo[playerid][pAdo]);
				ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbevallás", string, "Ok", "Mégse");
				PlayerInfo[playerid][pAdoKitoltve] = 1;
				HolTart[playerid] = NINCS;
				Cselekves(playerid, "kitöltötte az adóbevallását", 1);
				return 1;
			}
			else if(HolTart[playerid] == 4)
			{
				listitem++;
				new p = DialogIDk[playerid][listitem];
				new ado_bevallva, ado_rendes, adoszoveg[512], szint, haz, tipus, kocsi;
				
				szint = PlayerInfo[p][pLevel];
				haz = PlayerInfo[p][pPhousekey];
				
				if(haz != NINCS) haz = 1;
				else haz = 0;
				
				tipus = HouseInfo[haz][hTipus];
				kocsi = PlayerInfo[p][pPcarkey];
				
				if(kocsi != NINCS) kocsi = 1;
				else kocsi = 0;
				
				format(adoszoveg, sizeof(adoszoveg), "=====[ %s ]=====", PlayerName(p));

				ado_rendes = (szint * ADO_SZINT);
				
				format(adoszoveg, sizeof(adoszoveg), "%s\nAz adatbázis szerint:\n - %d éve él a városban", adoszoveg, szint);
				
				if(haz == 1)
				{
					format(adoszoveg, sizeof(adoszoveg), "%s\n - Van háza", adoszoveg);
					ado_rendes += (szint * ADO_HAZ);
					switch(tipus)
					{
						case 1:
						{
							format(adoszoveg, sizeof(adoszoveg), "%s\n - Los Santosban él", adoszoveg);
							ado_rendes += (szint * ADO_HAZLS);
						}
						case 2:
						{
							format(adoszoveg, sizeof(adoszoveg), "%s\n - San Fierroban él", adoszoveg);
							ado_rendes += (szint * ADO_HAZSF);
						}
						case 3:
						{
							format(adoszoveg, sizeof(adoszoveg), "%s\n - Gazdagnegyedben él", adoszoveg);
							ado_rendes += (szint * ADO_HAZGN);
						}
						case 4:
						{
							format(adoszoveg, sizeof(adoszoveg), "%s\n -  Faluban él", adoszoveg);
							ado_rendes += (szint * ADO_HAZFALU);
						}
						case 5:
						{
							format(adoszoveg, sizeof(adoszoveg), "%s\n - Tanyán él", adoszoveg);
							ado_rendes += (szint * ADO_HAZTANYA);
						}
						default: format(adoszoveg, sizeof(adoszoveg), "%s\n - Ismeretlen helyen él", adoszoveg);
					}
				}
				else
					format(adoszoveg, sizeof(adoszoveg), "%s\n - Nincs háza", adoszoveg);
				
				if(kocsi == 1)
				{
					format(adoszoveg, sizeof(adoszoveg), "%s\n - Rendelkezik gépjármûvel", adoszoveg);
					ado_rendes += (szint * ADO_JARMU);
				}
				else
					format(adoszoveg, sizeof(adoszoveg), "%s\n - Nem rendelkezik gépjármûvel", adoszoveg);
				
				format(adoszoveg, sizeof(adoszoveg), "%s\n\nA bevallottak szerint:", adoszoveg);

				if(PlayerInfo[p][pAdoKitoltve] == 1)
				{
					szint = PlayerInfo[p][pAdoSzint];
					haz = PlayerInfo[p][pAdoHaz];					
					tipus = PlayerInfo[p][pAdoHazHol];
					kocsi = PlayerInfo[p][pAdoJarmu];
					
					ado_bevallva = (szint * ADO_SZINT);
					
					format(adoszoveg, sizeof(adoszoveg), "%s\n - %d éve él a városban", adoszoveg, szint);
					
					if(haz == 1)
					{
						format(adoszoveg, sizeof(adoszoveg), "%s\n - Van háza", adoszoveg);
						ado_bevallva += (szint * ADO_HAZ);
						switch(tipus)
						{
							case 1:
							{
								format(adoszoveg, sizeof(adoszoveg), "%s\n - Los Santosban él", adoszoveg);
								ado_bevallva += (szint * ADO_HAZLS);
							}
							case 2:
							{
								format(adoszoveg, sizeof(adoszoveg), "%s\n - San Fierroban él", adoszoveg);
								ado_bevallva += (szint * ADO_HAZSF);
							}
							case 3:
							{
								format(adoszoveg, sizeof(adoszoveg), "%s\n - Gazdagnegyedben él", adoszoveg);
								ado_bevallva += (szint * ADO_HAZGN);
							}
							case 4:
							{
								format(adoszoveg, sizeof(adoszoveg), "%s\n - Faluban él", adoszoveg);
								ado_bevallva += (szint * ADO_HAZFALU);
							}
							case 5:
							{
								format(adoszoveg, sizeof(adoszoveg), "%s\n - Tanyán él", adoszoveg);
								ado_bevallva += (szint * ADO_HAZTANYA);
							}
							default: format(adoszoveg, sizeof(adoszoveg), "%s\n - Ismeretlen helyen él", adoszoveg);
						}
					}
					else
						format(adoszoveg, sizeof(adoszoveg), "%s\n - Nincs háza", adoszoveg);
					
					if(kocsi == 1)
					{
						format(adoszoveg, sizeof(adoszoveg), "%s\n - Rendelkezik gépjármûvel", adoszoveg);
						ado_bevallva += (szint * ADO_JARMU);
					}
					else
						format(adoszoveg, sizeof(adoszoveg), "%s\n - Nem rendelkezik gépjármûvel", adoszoveg);
				}
				else
				{
					format(adoszoveg, sizeof(adoszoveg), "%s\n - Nem töltötte ki az adóbevallását", adoszoveg);
					PlayerInfo[p][pAdo] = ado_rendes;
				}
				
				if(PlayerInfo[p][pAdoKitoltve] == 1)
				{
					format(adoszoveg, sizeof(adoszoveg), "%s\n\nAdó a bevallása szerint: %dFt", adoszoveg, ado_bevallva);
					format(adoszoveg, sizeof(adoszoveg), "%s\nAdó az adatbázis szerint: %dFt", adoszoveg, ado_rendes);
					//format(adoszoveg, sizeof(adoszoveg), "%s\n\n", adoszoveg);
				}
				else
					format(adoszoveg, sizeof(adoszoveg), "%s\n\nAdó az adatbázis szerint: %dFt", adoszoveg, ado_rendes);
				
				format(adoszoveg, sizeof(adoszoveg), "%s\n\nBefizetve: %dFt", adoszoveg, PlayerInfo[p][pAdoFizetve]);
				
				if(ado_bevallva < ado_rendes)
					format(adoszoveg, sizeof(adoszoveg), "%s\n\nAdócsalás: Igen", adoszoveg);
				else
					format(adoszoveg, sizeof(adoszoveg), "%s\n\nAdócsalás: Nincs", adoszoveg);
					
				if(PlayerInfo[p][pAdoFizetve] < ado_rendes)
					format(adoszoveg, sizeof(adoszoveg), "%s\nBefizette: Nem", adoszoveg);
				else
					format(adoszoveg, sizeof(adoszoveg), "%s\nBefizette: Igen", adoszoveg);

				if(ado_bevallva < ado_rendes || PlayerInfo[p][pAdoFizetve] < ado_rendes)
				{
					HolTart[playerid] = 6;
					DialogIDk[playerid][0] = p;
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóellenõrzés", adoszoveg, "OK", "Büntetés");
				}
				else
				{
					HolTart[playerid] = NINCS;
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóellenõrzés", adoszoveg, "OK", "");
					PlayerInfo[p][pAdoEllenorizve] = 1;
				}
				return 1;
			}	
			else if(HolTart[playerid] == 5)
			{
				if(strlen(inputtext) < 1)
				{
					format(string, sizeof(string), "Nem írtad be az összeget...\nKérlek írd be.");
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_INPUT, "Adóbefizetés", string, "Befizet","Mégse");
					return 1;
				}
				if(strval(inputtext) < 1)
				{
					format(string, sizeof(string), "Nem lehet az összeg kissebb mint 1..\nKérlek írd be újra.");
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_INPUT, "Adóbefizetés", string, "Befizet","Mégse");
					return 1;
				}
				
				new megkell = PlayerInfo[playerid][pAdo] - PlayerInfo[playerid][pAdoFizetve];
				
				if(strval(inputtext) > megkell)
				{	
					format(string, sizeof(string), "Csak %dFtot kell befizetned", megkell);
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbefizetés", string, "Ok","Mégse");
					return 1;
				}
				if(strval(inputtext) > GetMoney(playerid))
				{
					HolTart[playerid] = NINCS;
					format(string, sizeof(string), "Nincs elég pénzed.");
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbefizetés", string, "Ok","Mégse");
					return 1;
				}
				if(strval(inputtext) == megkell)
				{
					HolTart[playerid] = NINCS;
					GiveMoney(playerid, -strval(inputtext));
					PlayerInfo[playerid][pAdoFizetve] += strval(inputtext);
					FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] += strval(inputtext);
					format(string, sizeof(string), "Befizetted az adód.");
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbefizetés", string, "Ok","Mégse");
					Cselekves(playerid, "befizette az adóját.", 1);
					return 1;
				}
				else
				{
					HolTart[playerid] = NINCS;
					GiveMoney(playerid, -strval(inputtext));
					PlayerInfo[playerid][pAdoFizetve] += strval(inputtext);
					FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] += strval(inputtext);
					format(string, sizeof(string), "Befizettél %dFtot, még %dFt kell.", strval(inputtext), (megkell - strval(inputtext)));
					ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbefizetés", string, "Ok","Mégse");
					Cselekves(playerid, "befizette az adója egy részét.", 1);
					return 1;
				}
			}
			else if(HolTart[playerid] == 6)
			{
				HolTart[playerid] = NINCS;
				TogglePlayerControllable(playerid, true);
				return 1;
			}
			else if(HolTart[playerid] == 7)
			{
				new i = DialogIDk[playerid][0], kell = PlayerInfo[i][pAdo] - PlayerInfo[i][pAdoFizetve];
				
				if(PlayerInfo[i][pAdoEllenorizve]) return Msg(playerid, "Õt már ellenõrizték");
				
				listitem++;
				switch(listitem)
				{
					case 1:
					{
						if(PlayerInfo[i][pBankSzamla] > 0)
						{
							if(kell > 0)
							{
								Msg(playerid, "Megbírságoltad.");
								if(PlayerInfo[i][pAccount] > (kell * 20))
								{
									format(string, sizeof(string), "Egy adó ellenõr megbüntetett!.");
									SendClientMessage(i, COLOR_GRAD1, string);
									format(string, sizeof(string), "Nem fizetted be az adód (%dFt), ezért a 20x-osát vonjuk le a számládról (%dFt).", kell, (kell * 20));
									SendClientMessage(i, COLOR_GRAD1, string);
									PlayerInfo[i][pAccount] -= (kell * 20);
									FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] += (kell * 20);
									PlayerInfo[i][pAdoKitoltve] = 0;
									PlayerInfo[i][pAdo] = 0;
								}
								else
								{
									format(string, sizeof(string), "Egy adó ellenõr megbüntetett!");
									SendClientMessage(i, COLOR_GRAD1, string);
									PlayerInfo[i][pAccount] = 0;
									format(string, sizeof(string), "Nem fizetted be az adód (%dFt), és nem volt elég pénzed így töröltük a bankszámlád.", kell);
									SendClientMessage(i, COLOR_GRAD1, string);
									PlayerInfo[i][pBankSzamla] = 0;
									PlayerInfo[i][pBankSzamlaJelszo] = 0;
									PlayerInfo[i][pBankSzamlaSzam] = 0;
									PlayerInfo[i][pAdoKitoltve] = 0;
									PlayerInfo[i][pAdo] = 0;
									FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] += (kell * 20);
								}
								PlayerInfo[i][pAdoEllenorizve] = 1;
							}
							else return Msg(playerid, "Õ már befizette az adóját, nem büntetheted meg.");
						}	
					}
					case 2:
					{
						if(kell > 0)
						{
							SendClientMessage(i, COLOR_GRAD1, "Egy adó ellenõr feljelentett!")
							WantedPoints[i]+= 4;
							SetPlayerCriminal(i,playerid, "Adócsalás");
							Msg(playerid, "Feljelentetted.");
							PlayerInfo[i][pAdoEllenorizve] = 1;
						}
						else return Msg(playerid, "Õ már befizette az adóját, nem büntetheted meg.");
					}
				}
				return 1;
			}
		}
		else if(dialogid == DIALOG_LOGIN)
		{
			if(resivan)
				return Msg(playerid, "Restart van, hiába lépsz be...");
			if(BejelentkezokSzama >= MAXBEJELENTKEZES)
				return Msg(playerid, "Jelenleg több ember lép be a játékba, a túlterhelés miatt várnod kell 1-2 másodpercet, kérlek próbáld meg most");

			if(Registered(playerid))
			{
				new tmppass[50];

				//format(tmppass, sizeof(tmppass), "%s próbál belépni, pass: %s", PlayerName(playerid), inputtext);
				//BeKilepes(tmppass);

				if(strlen(inputtext) < 1)
				{
					format(string, sizeof(string), "A jelszó nem lehet kisebb egy karakternél...\nKérlek írd be újra.");
					ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Bejelentkezés", string, "Belépés","Mégse");
					return 1;
				}

				new idpass[40];

				Format(idpass, "%d", (PlayerInfo[playerid][pID]*5));

				if(strlen(PlayerInfo[playerid][pKey]) < 1 || egyezik(PlayerInfo[playerid][pKey], idpass))
				{
					Msg(playerid, "Sajnálom, de nincs beállítva jelszód, ezért biztonsági okokból nem engedhetünk belépni!");
					Msg(playerid, "Írj a jelszo@[Gates].net email címre egy üzenetet, hogy milyen jelszó legyen beállítva neked!");
					Msg(playerid, "Az üzenetnek tartalmaznia kell a Fórum neved, RolePlay neved, és az IP címedet!");
					return 1;
				}

				strmid(tmppass, inputtext, 0, strlen(inputtext));
				
				new pass;
				
				if(egyezik(tmppass, PlayerInfo[playerid][pKey])) pass = 2;
				else if(egyezik(md5(tmppass), PlayerInfo[playerid][pKey])) pass = 1;
				else pass = 0;

				if(pass != 0)// || Registered(playerid) == 1)
				{
					//if(Registered(playerid) == 2)
					//{
					AdatBetoltesSQL(playerid);
					if(pass == 2)
					{
						new hashpass[40];
						Format(hashpass, "%s", md5(tmppass));
						strmid(PlayerInfo[playerid][pKey], hashpass, 0, strlen(hashpass), 40);
						PlayerUpdate(playerid, "Pass='%s'", hashpass);
					}
					/*}
					else
					{
						AdatBetoltes(playerid);
						PlayerUpdate(playerid, "Pass='%s'", md5(tmppass));
						SendFormatMessage(playerid, COLOR_WHITE, "A jelszavad: %s - El ne felejtsd!", tmppass);
					}*/
					if(TilosOlni == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "============[Zero Tolerancia]============");
						SendClientMessage(playerid, COLOR_LIGHTRED, "* Zero tolerancia bekapcsolva!");
						SendClientMessage(playerid, COLOR_LIGHTRED, "* Amíg ez érvényben van, tilos ölni, aki megszegi automata 2 óra jail!");
					}
					BejelentkezokSzama++;
//					if(BejelentkezokSzama > 0)
//					{
					SetTimerEx("OnPlayerLogin", 2000, false, "d", playerid);
					Msg(playerid, "A karakter betöltése folyamatban...");
//					}
//					else
//						OnPlayerLogin(playerid);
				}
				else
					HibasJelszo(playerid);
			}
			else
				SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Nem vagy regisztrálva");
		}
		else if(dialogid == DIALOG_REGISTRATION)
		{
			if(resivan)
				return Msg(playerid, "Restart van, hiába regizel be...");

			if(!Registered(playerid))
			{
				//if(PlayerInfo[playerid][pTut] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Elõbb töltsd ki a tesztet! Parancs: /teszt");

				new pass[50];
				strmid(pass, inputtext, 0, strlen(inputtext));

				strmid(PlayerInfo[playerid][pKey], pass, 0, strlen(pass), 50);

				if(strlen(pass) < 6)
				{
					format(string, sizeof(string), "Hibás jelszó.\nA biztonság kedvéért,\nminimum 6 karakternek\nkell lennie a jelszavadnak!");
					ShowPlayerDialog(playerid, DIALOG_REGISTRATION, DIALOG_STYLE_INPUT, "Regisztráció", string, "Regisztráció","Mégse");
					return 1;
				}

				//PlayerInfo[playerid][pRegistered] = 2;

				/*new string[128];
				Format(string, "[Gates]: [%d]%s regisztrált a szerverre", playerid, PlayerName(playerid));
				ABroadCast(COLOR_LIGHTRED, string, 1);*/

				PlayerInfo[playerid][pConnectTime] = 0;
				AdatMentesSQL(playerid);


				SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Gates]: Sikeresen beregisztráltál! Mostmár beléphetsz.");
				format(string, sizeof(string), "Üdv!\nTe regisztrálva vagy,\nKérlek jelentkezz be\n\nKérlek add meg a jelszavad.\nJelszavad:");
				ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Bejelentkezés", string, "Belépés","Mégse");
			}
			else
				SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Már regisztrálva vagy");
		}
		else if(dialogid == DIALOG_MUNKA_LEGALIS)
		{
			if(PlayerInfo[playerid][pLevel] < LegalisMunkak[listitem][2][0])
			{
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "A munkához szükséges szint: %d", LegalisMunkak[listitem][2][0]);
				UnFreeze(playerid);
				return 1;
			}
			listitem++;
			switch(listitem)
			{
				case 1:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_DETEKTIV);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Detektív | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 2:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_UGYVED);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Ügyvéd | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 3:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_SZERELO);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Szerelõ | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 4:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_TESTOR);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Testõr | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 5:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_AUTOKERESKEDO);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Autókereskedõ | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 6:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_UTTISZTITO);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Úttisztító | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 7:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_BOXOLO);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Boxoló | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 8:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_BUS);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Buszsofõr | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 9:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_UJSAGOS);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Újságkihordó | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 10:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_KAMIONOS);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Kamionos | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 11:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_FARMER);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Farmer | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 12:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_FUNYIRO);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Fûnyíró | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 13:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_EPITESZ);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Építész | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
				case 14:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_KUKAS);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Kukás | Ahhoz, hogy felmondj, le kell dolgoznod még 2,5 órát");
					TogglePlayerControllable(playerid, true);
				}
			}
		}
		else if(dialogid == DIALOG_MUNKA_ILLEGALIS)
		{
			if(PlayerInfo[playerid][pLevel] < IllegalisMunkak[listitem][2][0])
			{
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "A munkához szükséges szint: %d", IllegalisMunkak[listitem][2][0]);
				UnFreeze(playerid);
				return 1;
			}
			listitem++;
			switch(listitem)
			{
				case 1:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_FEGYVER);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: FegyverKereskedõ");
					TogglePlayerControllable(playerid, true);
				}
				case 2:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_PROSTI);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Prostituált");
					TogglePlayerControllable(playerid, true);
				}
				case 3:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_DROG);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Drogdíler");
					TogglePlayerControllable(playerid, true);
				}
				case 4:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_AUTOTOLVAJ);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Autótolvaj");
					TogglePlayerControllable(playerid, true);
				}
				case 5:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_HACKER);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Hacker");
					TogglePlayerControllable(playerid, true);
				}
				case 6:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_PANCEL);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Páncélkészítõ");
					TogglePlayerControllable(playerid, true);
				}
			}
		}
		else if(dialogid == DIALOG_BELSO)
		{
			listitem++;
			new ara = BelsoArak[listitem];
			if(PlayerInfo[playerid][pAccount] < ara)
				return Msg(playerid, "Nincs elég pénz a számládon, így nem tudod mibõl finnanszírozni.");

			Cselekves(playerid, "elkezdett felújítani egy házat");
			ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);

			SetTimerEx("Munkavege", MunkaIdo[7], false, "ddd", playerid, M_BELSO, listitem);
			MunkaFolyamatban[playerid] = 1;
		}
		else if(dialogid == DIALOG_GOTO)
		{
			Tele(playerid, GotoPos[listitem][0], GotoPos[listitem][1], GotoPos[listitem][2], true, 0, 0);
			SendFormatMessage(playerid, COLOR_WHITE, "Teleportálva ide: %s", GotoNev[listitem]);
		}
		else if(dialogid == DIALOG_CAR)
		{
			Format(string, "%s mondja: Üdv. Rendelnék egy %s-t.", PlayerName(playerid), RendelesNev[listitem]);
			ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

			RendelesPenz = RendelesAra[listitem];
			RendelesAlatt = 1;
			RendelesModel = RendelesID[listitem];
			RendelesIdo = RENDELES_IDO;
			RendelesAzon = listitem;

			SendFormatMessage(playerid, COLOR_WHITE, "Importos mondja: Rendben. Az ára %dFt lesz, amit át kell utalnia a 0102es bankszámlaszámra, és utána visszük a kocsit. Üdv!", RendelesPenz);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
	}
	else //resp0!
	{
		if(dialogid == DIALOG_MUNKA_ILLEGALIS || dialogid == DIALOG_MUNKA_LEGALIS || dialogid == DIALOG_ADO || dialogid == DIALOG_VESZ)
			TogglePlayerControllable(playerid, true);
	
		if(dialogid == DIALOG_CAR)
		{
			new string[128];
			Format(string, "%s mondja: Elnézést, mégsem szeretnék rendelni. Viszlát!", PlayerName(playerid));
			ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
		else if(dialogid == DIALOG_ADO)
		{
			new string[128];
			if(HolTart[playerid] == 1)
			{
				PlayerInfo[playerid][pAdoHaz] = 0;
				HolTart[playerid] = 3;
				format(string, sizeof(string), "Rendelkezik gépjármûvel?\n");
				ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbevallás[Rendelkezik gépjármûvel?]", string, "Igen","Nem");
				return 1;
			}
			else if(HolTart[playerid] == 3)
			{
				PlayerInfo[playerid][pAdoJarmu] = 0;
				format(string, sizeof(string), "Köszönjük hogy kitöltötte az ûrlapot, az adója: %dFt\n", PlayerInfo[playerid][pAdo]);
				ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbevallás", string, "Ok", "Mégse");
				PlayerInfo[playerid][pAdoKitoltve] = 1;
				HolTart[playerid] = NINCS;
				Cselekves(playerid, "kitöltötte az adóbevallását", 1);
			}
			else if(HolTart[playerid] == 6)
			{
				new asd[5], p; format(asd, 5, "%d", DialogIDk[playerid][0]);
				p = ReturnUser(asd);
				if(p == INVALID_PLAYER_ID)
				{
					DialogIDk[playerid][0] = NINCS;
					Msg(playerid, "A játékos nem online.");
					return 1;
				}
				HolTart[playerid] = 7;
				ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_LIST, "Adóellenõrzés", "Pénz büntetés\nFeljelentés\n", "Büntetés","Mégse");
				return 1;
			}
			HolTart[playerid] = NINCS;
		}
	}

	return 0;
}

//-------------------------------------------------------------------------------------------------------

stock InChannel(playerid, view = false)
{
	if(view)
		return PlayerInfo[playerid][pViewReportChannel];
	else
		return PlayerInfo[playerid][pReportChannel];
}

stock Channel(playerid, channel = NINCS, view = false) // Berakja õt a channelre
{
	new ori;
	if(view)
	{
		ori = PlayerInfo[playerid][pViewReportChannel];
		PlayerInfo[playerid][pViewReportChannel] = channel;
		
		if(ori != NINCS)
		{
			if(ori == 555)
			{
				if(Admin(playerid, 1))
					for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rAdmins]--;
				else
					for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rAdminHelpers]--;
			}
			else
			{
				if(Admin(playerid, 1))
					ReportChannel[ori][rAdmins]--;
				else
					ReportChannel[ori][rAdminHelpers]--;
			}
		}
		if(channel != NINCS)
		{
			if(channel == 555)
			{
				if(Admin(playerid, 1))
					for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rAdmins]++;
				else
					for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rAdminHelpers]++;
			}
			else
			{
				if(Admin(playerid, 1))
					ReportChannel[channel][rAdmins]++;
				else
					ReportChannel[channel][rAdminHelpers]++;
			}
		}
	}
	else
	{
		ori = PlayerInfo[playerid][pReportChannel];
		PlayerInfo[playerid][pReportChannel] = channel;
		
		if(ori != NINCS)
			ReportChannel[ori][rPlayers]--;
		if(channel != NINCS)
		{
			ReportChannel[channel][rPlayers]++;
			TudReportolni[playerid] = 0;
		}
	}
	if(view && ori != NINCS)
	{
		if(ori != 555)
		{
			if(ReportChannel[ori][rAdmins] > 0 || ReportChannel[ori][rAdminHelpers] > 0) return 1;
			
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
				if(PlayerInfo[x][pReportChannel] == ori)
				{
					Msg(x, "Ki lettél rúgva a channelrõl, mivel már nincs rajta se admin, se adminsegéd");
					PlayerInfo[x][pReportChannel] = NINCS;
					ReportChannel[ori][rPlayers]--;
				}
			}
		}
		else
		{
			for(new c = 0; c < MAX_CHANNEL; c++)
			{
				if(ReportChannel[c][rAdmins] > 0 || ReportChannel[c][rAdminHelpers] > 0) continue;
				
				for(new x = 0; x < MAX_PLAYERS; x++)
				{
					if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
					if(PlayerInfo[x][pReportChannel] == c)
					{
						Msg(x, "Ki lettél rúgva a channelrõl, mivel már nincs rajta se admin, se adminsegéd");
						PlayerInfo[x][pReportChannel] = NINCS;
						ReportChannel[c][rPlayers]--;
					}
				}
			}
		}
	}
	return 1;
}

stock ReportUzenet(playerid, uzenet[], admin = false, osszeschannel = false, channel = NINCS) // Reportolás
{
	if(channel == NINCS)
	{
		if(Admin(playerid, 1) || IsAS(playerid))
			channel = PlayerInfo[playerid][pViewReportChannel];
		else
			channel = PlayerInfo[playerid][pReportChannel];
	}
	if(!osszeschannel)
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
			if(PlayerInfo[x][pViewReportChannel] == channel || PlayerInfo[x][pViewReportChannel] == 555 || admin && PlayerInfo[x][pReportChannel] == channel || ReportChannel[channel][rSeeing] && PlayerInfo[x][pReportChannel] == channel || playerid == x)
			{
				if(!admin)
				{
					if(playerid != x)
						SendFormatMessage(x, COLOR_YELLOW2, "[Channel %d][%d]%s: %s", channel, playerid, PlayerName(playerid), uzenet);
				}
				else
				{
					if(Admin(playerid, 1))
						SendFormatMessage(x, COLOR_LIGHTGREEN, "[Channel %d]Admin %s: %s", channel, PlayerName(playerid), uzenet);
					else
						SendFormatMessage(x, COLOR_LIGHTGREEN, "[Channel %d]Adminsegéd %s: %s", channel, PlayerName(playerid), uzenet);
				}
			}
		}
	}
	else
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
			if(PlayerInfo[x][pViewReportChannel] != NINCS || PlayerInfo[x][pReportChannel] != NINCS)
			{
				if(!admin)
					SendFormatMessage(x, COLOR_YELLOW2, "[Összes Channelen]%s: %s", PlayerName(playerid), uzenet);
				else
				{
					if(Admin(playerid, 1))
						SendFormatMessage(x, COLOR_LIGHTGREEN, "[Összes Channelen]Admin %s: %s", PlayerName(playerid), uzenet);
					else
						SendFormatMessage(x, COLOR_LIGHTGREEN, "[Összes Channelen]Adminsegéd %s: %s", PlayerName(playerid), uzenet);
				}
			}
		}
	}
}

stock FloatOsztas(szam1, szam2, IntegerEredmeny = false)
{
	new Float:eredmeny, Float:sz1, Float:sz2;
	eredmeny = float(szam1) / float(szam2);
	
	if(IntegerEredmeny)
		return floatround(eredmeny);
	else
		return eredmeny;
}

stock HibasJelszo(playerid)
{
	new string[128];
	HibasBelepes[playerid]++;
	if(HibasBelepes[playerid] == 2)
	{
		Msg(playerid, "Többszöri hibás belépési kísérlet miatt bannolva lettél a szerverrõl!");
		format(string, sizeof(string), "[!!FIGYELMEZTETÉS!!]: %s kilett bannolva a rendszer által, oka: Hibás jelszó!", PlayerName(playerid)); BanLog(string);
		ABroadCast(COLOR_LIGHTRED, string, 1);
		SeeBan(playerid, (gettime() + 3600), NINCS, "Hibás jelszó", true);
		Kick(playerid);
		return 1;
	}
	format(string, sizeof(string), "Hibás jelszó.\nKérlek írd be újra.");
	ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Bejelentkezés", string, "Belépés","Mégse");
	
	return 1;
}

stock SetPInt(jatekos, adatmezo[], ertek)
{
	SetPVarInt(jatekos, adatmezo, ertek);
}
stock SetPFloat(jatekos, adatmezo[], Float:ertek)
{
	SetPVarFloat(jatekos, adatmezo, ertek);
}
stock SetPString(jatekos, adatmezo[], ertek[])
{
	SetPVarString(jatekos, adatmezo, ertek);
}
stock GetPInt(jatekos, adatmezo[])
{
	return GetPVarInt(jatekos, adatmezo);
}
stock GetPFloat(jatekos, adatmezo[])
{
	return GetPVarFloat(jatekos, adatmezo);
}
stock DelVar(jatekos, adatmezo[])
{
	DeletePVar(jatekos, adatmezo);
}

stock NincsIlyenFegyvere(playerid, fegyo)
{
	if(fegyo < 0 || fegyo >= sizeof(aWeaponNames))
		return 1;
	
	new wep, ammo, slot;
	slot = GetGunSlot(fegyo);
	GetPlayerWeaponData(playerid, slot, wep, ammo);
	
	if(slot != 0 && wep < 1 || ammo == 0)
		return 1;
	
	return 0;
}

stock IsToltenyesFegyver(fegyver, slot = false)
{
	new slotok[5] = {0, 1, 10, 11, 12}, x, fegyo;
	if(slot) fegyo = fegyver;
	else fegyo = GetGunSlot(fegyver);
	for(x = 0; x < sizeof(slotok); x++)
	{
		if(fegyo == slotok[x])
			return 0;
	}
	return 1;
}

stock GetGunSlot(fegyo)
{
	if(fegyo < 0 || fegyo >= sizeof(aWeaponSlotok))
		return 0;
	return aWeaponSlotok[fegyo];
}

stock GetGunName(id)
{
	new nev[30];
	if(id < 0 || id >= sizeof(aWeaponNames))
		nev = "Nincs";
	else
		strmid(nev, aWeaponNames[id], 0, strlen(aWeaponNames[id]));
		
	return nev;	
}

stock GetGunID(string[])
{
	new fegyo;
	for(new x = 0; x < sizeof(aWeaponNames); x++)
	{
		if(egyezik(string, aWeaponNames[x]))
		{
			fegyo = x;
			break;
		}
	}
	
	return fegyo;
}

stock IsTrailer(kocsi)
{
	new model = GetVehicleModel(kocsi);
	new trailers[8] = {435, 450, 591, 606, 607, 608, 610, 611};
	for(new x = 0; x < sizeof(trailers); x++)
	{
		if(model == trailers[x])
			return 1;
	}
	return 0;
}

stock TrailerAttached(trailer)
{
	new csatolva = NINCS;
	for(new x = 1; x < MAX_VEHICLES; x++)
	{
		if(!IsVehicleConnected(x) || x == trailer) continue;
		if(GetVehicleTrailer(x) == trailer)
		{
			csatolva = x;
			break;
		}
	}
	
	return csatolva;
}

stock ViadalMessage(uzenet, szin = COLOR_YELLOW, kellsms = true)
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || !BViadal[x]) continue;
		
		if(kellsms)
			SendFormatMessage(x, szin, "SMS: %s | Küldõ: Hitman Director", uzenet);
		else
			Msg(x, uzenet, false, szin);
	}
	return 1;
}

stock Berlo(playerid)
{
	return PlayerInfo[playerid][pBerlo];
}

stock NincsHaza(playerid)
{
	if(PlayerInfo[playerid][pPhousekey] == NINCS && PlayerInfo[playerid][pPhousekey2] == NINCS)
		return 1;
	return 0;
}

stock Hazban(playerid, haz)
{
	new VW = GetPlayerVirtualWorld(playerid), Int = GetPlayerInterior(playerid);
	new belso = HouseInfo[haz][hBelso];
	if(VW == haz && Int == IntInfo[belso][iNumber] && PlayerToPoint(150, playerid, IntInfo[belso][iExitX], IntInfo[belso][iExitY], IntInfo[belso][iExitZ]))
		return 1;
	return 0;
}

stock Haznal(playerid, haz)
{
	if(PlayerToPoint(2, playerid, HouseInfo[haz][hEntrancex], HouseInfo[haz][hEntrancey], HouseInfo[haz][hEntrancez]))
		return 1;
	return 0;
}

stock HazaElottVan(playerid)
{
	if(NincsHaza(playerid)) return NINCS;
	
	if(PlayerInfo[playerid][pPhousekey] != NINCS)
	{
		if(Haznal(playerid, PlayerInfo[playerid][pPhousekey]))
			return PlayerInfo[playerid][pPhousekey];
	}
	if(PlayerInfo[playerid][pPhousekey2] != NINCS)
	{
		if(Haznal(playerid, PlayerInfo[playerid][pPhousekey2]))
			return PlayerInfo[playerid][pPhousekey2];
	}
	
	return NINCS;
}

stock HazabanVan(playerid)
{
	if(NincsHaza(playerid)) return NINCS;
	
	if(PlayerInfo[playerid][pPhousekey] != NINCS)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pPhousekey]))
			return PlayerInfo[playerid][pPhousekey];
	}
	if(PlayerInfo[playerid][pPhousekey2] != NINCS)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pPhousekey2]))
			return PlayerInfo[playerid][pPhousekey2];
	}
	
	return NINCS;
}

stock PremiumPont(playerid)
{
	return PlayerInfo[playerid][pPremiumPont];
}

stock VanHaza(playerid)
{
	new van;
	if(PlayerInfo[playerid][pPhousekey] != NINCS) van++;
	if(PlayerInfo[playerid][pPhousekey2] != NINCS) van++;
	
	return van;
}

stock ViadalRadar()
{
	new x, y;
	for(x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
		if(BViadal[x] || IsHitman(x) || IsDirector(x))
		{
			for(y = 0; y < MAX_PLAYERS; y++)
			{
				if(!IsPlayerConnected(y) || !Logged(y) || IsPlayerNPC(y)) continue;
				if(BViadal[y])
					SetPlayerMarkerForPlayer(x, y, COLOR_YELLOW);
			}
		}
	}
	return 1;
}

stock KocsiElad(kocsi, szoveg = 1)
{
	if(szoveg == 1) SendFormatMessageToAll(COLOR_LIGHTRED, "Car Zrt: Egy kocsi eladóvá vált. Megvehetõ az autókereskedõktõl! Elõzõ tulaj: %s", CarInfo[kocsi][cOwner]);
	
	CarInfo[kocsi][cOwned] = 0;
	strmid(CarInfo[kocsi][cOwner], "Nincs_Tulaj", 0, strlen("Nincs_Tulaj"), 20);
	CarInfo[kocsi][cDate] = 0;
	
	//CarUpdate(kocsi, "Eladva='0', Tulaj='Nincs_Tulaj', UtolsoBelepes='0'", 0);
	CarUpdate(kocsi, CAR_Owned, CAR_Owner, CAR_Date);
	
	ParkCarToKereskedo(kocsi);
		
	return 1;
}

stock HazElad(haz, minimumar = 2500000, szoveg = 1)
{
	if(szoveg == 1) SendFormatMessageToAll(COLOR_LIGHTRED, "Házmesterek Zrt: [Gates] utca %d eladó lett! Ára %dFt! Elõzõ tulaj: %s", haz, HouseInfo[haz][hValue], HouseInfo[haz][hOwner]);

	new nev[MAX_PLAYER_NAME];
	nev = "Senki";
	HouseInfo[haz][hOwner] = nev;
	HouseInfo[haz][hHel] = 0;
	HouseInfo[haz][hArm] = 0;
	HouseInfo[haz][hLock] = 0;
	HouseInfo[haz][hOwned] = 0;

	if(HouseInfo[haz][hValue] < minimumar)
		HouseInfo[haz][hValue] = minimumar;

	DestroyDynamicPickup(HazPickup[haz]);
	HazPickup[haz] = UjPickup(1273, 23, HouseInfo[haz][hEntrancex], HouseInfo[haz][hEntrancey], HouseInfo[haz][hEntrancez]);

	//HazUpdate(haz, "Elet='0', Pajzs='0', Zarva='0', Eladva='0', Ara='%d', Tulaj='Senki'", HouseInfo[haz][hValue]);
	HazUpdate(haz, HAZ_Owner, HAZ_Hel, HAZ_Arm, HAZ_Lock, HAZ_Owned);
		
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(Nevek[forplayerid] == 1 && HitmanDuty[playerid] == 0)
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	else
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	
	//if(AdminDuty[playerid])
	//	SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_DBLUE);
	
	if(BViadal[playerid] && BViadal[forplayerid] && BVStart || BViadal[playerid] && IsHitman(forplayerid) || BViadal[playerid] && IsDirector(forplayerid))
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_YELLOW);
	
	//SendFormatMessageToAll(COLOR_WHITE, "OnPlayerStreamIn(%s, for: %s)", PlayerName(playerid), PlayerName(forplayerid));
	
	if(Jelzes[playerid] != 0 && Varosban[playerid])
		JelzesBeallitas(playerid, Jelzes[playerid], forplayerid);
	
	/*if(TaxiHivas[playerid] && LMT(forplayerid, LMUNKA_TAXI) || MentoHivas[playerid] && LMT(forplayerid, LMUNKA_MENTO))
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_LIGHTGREEN);*/
	if(KiertMegy[playerid] == forplayerid)
		SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_LIGHTGREEN); 
	if(KiertMegy[forplayerid] == playerid)
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_LIGHTGREEN);

	if(PlayerInfo[playerid][pHeadValue] > 0 && HitmanDuty[forplayerid] == 1)
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x00FF00AA);
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(Jelzes[playerid] != 0 && Varosban[playerid])
		JelzesBeallitas(playerid, Jelzes[playerid], forplayerid);

	/*if(TaxiHivas[playerid] && LMT(forplayerid, LMUNKA_TAXI) || MentoHivas[playerid] && LMT(forplayerid, LMUNKA_MENTO))
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_LIGHTGREEN);*/
	
	if(PlayerInfo[playerid][pHeadValue] > 0 && HitmanDuty[forplayerid] == 1)
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x00FF00AA);
	//SendFormatMessageToAll(COLOR_WHITE, "OnPlayerStreamOut(%s, for: %s)", PlayerName(playerid), PlayerName(forplayerid));
	//if(AdminDuty[playerid])
	//	SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_DBLUE);
}

stock ShowNames(playerid, beki)
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || HitmanDuty[x] == 1) continue;
		ShowPlayerNameTagForPlayer(playerid, x, beki);
	}
}

stock OnlineAdminok(minszint = 1, maxszint = NINCS)
{
	new adminok;
	
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || IsPlayerNPC(x) || !Logged(x)) continue;
		if(maxszint == NINCS && PlayerInfo[x][pAdmin] >= minszint || minszint != NINCS && PlayerInfo[x][pAdmin] >= minszint && PlayerInfo[x][pAdmin] <= maxszint) adminok++;
	}

	return adminok;
}

stock BVIdoCheck()
{
	if(BVStart != 1) return 1;
	
	if(BVIdo > 0)
		BVIdo--;

	if(BVIdo % 30 == 0)
		ViadalRadar();

	new uzi[128], uzii[128];
	if(BVJatekosok < 2)
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || !Logged(x) || BViadal[x] != 1) continue;
			format(uzii, sizeof(uzii), "Viadal: A Viadalnak vége! Nyertes: %s", PlayerName(x));
			SendHitmanRadioMessage(COLOR_YELLOW, uzii);
			SendClientMessage(x, COLOR_YELLOW, "SMS: A Viadalnak vége! Te gyõztél, a pénzt átutaltuk! | Feladó: Hitman Director");
			PlayerInfo[x][pAccount] += BVPenz;
		}
		BVPenz = 0;
		BVStart = 0;
		BVIdo = 1800;
		BVJatekosok = 0;
		return 1;
	}
	if(BVIdo < 1)
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || !Logged(x) || BViadal[x] != 1) continue;
			format(uzii, sizeof(uzii), "Viadal: A Viadalnak vége! Nincs nyertes, mert lejárt az idõ!", PlayerName(x));
			SendHitmanRadioMessage(COLOR_YELLOW, uzii);
			SendClientMessage(x, COLOR_YELLOW, "Az idõ lejárt. Mivel nem volt nyertes, ezért a testetekben lévõ bomba végzett veletek.");
			SetHealth(x, 1);
			new Float:xx, Float:yy, Float:zz;
			GetPlayerPos(x, xx, yy, zz);
			CreateExplosion(xx, yy, zz, 4, 5);
			BViadal[x] = 0;
		}
		BVPenz = 0;
		BVStart = 0;
		BVIdo = 1800;
		BVJatekosok = 0;
		return 1;
	}
    if(BVIdo > 0)
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || !Logged(x) || BViadal[x] != 1) continue;
			Format(uzi, "~y~Meg ~r~%d ~b~mp...", BVIdo);
			GameTextForPlayer(x, uzi, 975, 4);
		}
	}
	return 1;
}

stock RabolasCheck()
{
	new penz, uzi[32];
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || Rabol[x] != 1) continue;
		if(BankRobIdo < 1)
		{
			Rabol[x] = 0;
			UnFreeze(x);
			ClearAnimations(x);
			TextDrawUpdate(x, TD_Info2);
			continue;
		}
		/*if(BankSzef <= 0)
		{
			Rabol[x] = 0;
			BankSzef = 0;
			Msg(x, "Elfogyott a pénz.");
			return 1;
		}*/
		penz = Rand(5000, 15000);
		if(JatekosZsak[x] >= MAXZSAKPENZ)
		{
			Rabol[x] = 0;
			UnFreeze(x);
			ClearAnimations(x);
			Cselekves(x, "zsákja megtelt");
			Msg(x, "A zsákod megtelt");
			TextDrawUpdate(x, TD_Info2);
			continue;
		}
		if(BankSzef < penz && BankSzef > 0)
			penz = BankSzef;
		else if(BankSzef <= 0)
		{
			Rabol[x] = 0;
			UnFreeze(x);
			ClearAnimations(x);
			Msg(x, "A pénz elfogyott a bankszéfben");
			Cselekves(x, "végzett a pénzpakolással");
			TextDrawUpdate(x, TD_Info2);
			continue;
		}
		if((JatekosZsak[x] + penz) >= MAXZSAKPENZ)
			penz = MAXZSAKPENZ - JatekosZsak[x];
			
		Format(uzi, "~y~+~g~%d", penz);
		GameTextForPlayer(x, uzi, 950, 5);
		JatekosZsak[x] += penz;
		BankSzef -= penz;
	}
	return 1;
}

stock Rand(szam1, szam2)
{
	new szam;
	szam += szam1;
	szam += random(szam2-szam1);

	return szam;
}

stock BankSzamla(szam)
{
	new player = NINCS;
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(PlayerInfo[x][pBankSzamlaSzam] == szam)
		{
			player = x;
			break;
		}
	}

	return player;
}

stock Float:KocsiElet(car)
{
	if(!IsVehicleConnected(car)) return 0.0;
	new Float:elet;
	GetVehicleHealth(car, elet);
	return elet;
}

stock ParkCarToKereskedo(car)
{
	new Float:x, Float:y, Float:z;
	x = -2053.8244015 + random(80);
	y = -191.9231375 - random(80);
	z = 38.0;
	ParkCar(car, x, y, z);
	return 1;
}

stock ParkCar(kocsi, Float:posx, Float:posy, Float:posz, Float:posa = 0.0)
{
	CarInfo[kocsi][cLocationx] = posx;
	CarInfo[kocsi][cLocationy] = posy;
	CarInfo[kocsi][cLocationz] = posz;
	CarInfo[kocsi][cAngle] = posa;

	//CarUpdate(kocsi, "LocX='%f', LocY='%f', LocZ='%f', Angle='%f'", posx, posy, posz, posa);
	CarUpdate(kocsi, CAR_X, CAR_Y, CAR_Z, CAR_Angle);

	DestroyVehicle(CarInfo[kocsi][cId]);
	CarInfo[kocsi][cId] = UjKocsi(CarInfo[kocsi][cModel],CarInfo[kocsi][cLocationx],CarInfo[kocsi][cLocationy],CarInfo[kocsi][cLocationz],CarInfo[kocsi][cAngle],CarInfo[kocsi][cColorOne],CarInfo[kocsi][cColorTwo]);
	KocsiRespawn(CarInfo[kocsi][cId]);
	return 1;
}

stock Locker(car)
{
	if(Locked(car))
		LockCar(car);
	else
		UnLockCar(car);

	return 1;
}

stock CreateKereskedoCar()
{
	new hely = random(sizeof(KereskedoSpawn));
	UjCar(KereskedoSpawn[hely][0], KereskedoSpawn[hely][1], KereskedoSpawn[hely][2], KereskedoSpawn[hely][3], 0, 0, RendelesModel, RendelesAra[RendelesAzon], 0);
	RendeltKocsik++;

	return 1;
}

stock UjCar(Float:posx, Float:posy, Float:posz, Float:posa, szin1, szin2, model = 410, ara = 1000000, zarva = 0)
{
	new ureshely = UresKocsiHely();
	if(ureshely == -1)
		return 0;

	CarInfo[ureshely][Van] = 1;

	new nev[MAX_PLAYER_NAME];
	format(nev, sizeof(nev), "Nincs_Tulaj");

	CarInfo[ureshely][cOwned] = 0;
	CarInfo[ureshely][cOwner] = nev;
	CarInfo[ureshely][cModel] = model;
	CarInfo[ureshely][cValue] = ara;
	CarInfo[ureshely][cLocationx] = posx;
	CarInfo[ureshely][cLocationy] = posy;
	CarInfo[ureshely][cLocationz] = posz;
	CarInfo[ureshely][cAngle] = posa;
	CarInfo[ureshely][cColorOne] = szin1;
	CarInfo[ureshely][cColorTwo] = szin2;
	CarInfo[ureshely][cLock] = zarva;

	new nevek[100], adatok[256];
	nevek = "Id, Eladva, Tulaj, Model, Ara, LocX, LocY, LocZ, Angle, Szin1, Szin2, Zarva";
	Format(adatok, "'%d', '0', '%s', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d'", ureshely, nev, model, ara, posx, posy, posz, posa, szin1, szin2, zarva);

	Mysql_Insert(SQL_DB_Kocsik, nevek, adatok);

	CarInfo[ureshely][cId] = UjKocsi(model, posx, posy, posz, posa, szin1, szin2);
	
	gCarLock[CarInfo[ureshely][cId]] = zarva;
	
	return CarInfo[ureshely][cId];
}

stock GetVehicleModelName(id, bool:carid = false)
{
	new str[64];
	if(!carid)
	{
		if(id >= 400)
			id -= 400;
		Format(str, "%s", vehName[id]);
	}
	else
		Format(str, "%s", vehName[GetVehicleModel(id) - 400]);
	return str;
}

stock UresKocsiHely()
{
	new hely = -1;
	for(new x = 0; x < sizeof(CarInfo); x++)
	{
		if(CarInfo[x][Van] == 0)
		{
			hely = x;
			break;
		}
	}
	return hely;
}

stock Tele(playerid, Float:posx, Float:posy, Float:posz, kocsival = true, VW = NINCS, Int = NINCS)
{
	if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid) || !Logged(playerid)) return 1;
	new kocsi, trailer;
	
	if(kocsival && GetPlayerState(playerid) == 2)
	{
		kocsi = GetPlayerVehicleID(playerid);
		SetVehiclePos(kocsi, posx, posy, posz);
		trailer = GetVehicleTrailer(kocsi);
		if(trailer != 0) AttachTrailerToVehicle(trailer, kocsi);
	}
	else
		SetPlayerPos(playerid, posx, posy, posz);
		
	if(VW != NINCS)
	{
		SetPlayerVirtualWorld(playerid, VW);
		if(kocsi != 0)
		{
			SetVehicleVW(kocsi, VW);
			if(trailer != 0)
				SetVehicleVW(trailer, VW);
		}
	}
		
	if(Int != NINCS)
	{
		SetPlayerInterior(playerid, Int);
		if(kocsi != 0)
		{
			SetVehicleInterior(kocsi, Int);
			if(trailer != 0)
				SetVehicleInterior(trailer, Int);
		}
	}
		
	return 1;
}

stock Szint(playerid)
{
	return PlayerInfo[playerid][pLevel];
}

stock CheckSzint(playerid)
{
	if(Szint(playerid) < 0) return 1;

	if(Szint(playerid) == 0)
	{
		new bool:folytat = true, exp, lvlexp, lvl, jo;
		jo = PlayerInfo[playerid][pConnectTime];
		exp = jo;
		lvlexp = levelexp * 2;
		lvl = 1;
		while(folytat)
		{
			if(exp >= lvlexp)
			{
				lvl++;
				exp -= lvlexp;
				lvlexp += levelexp;
			}
			else
				folytat = false;
		}
		PlayerInfo[playerid][pExp] = exp;
		PlayerInfo[playerid][pLevel] = lvl;
		SendFormatMessage(playerid, COLOR_WHITE, "Szinted beállítva! Összesen %d játszott órád volt! Szinted: %d, maradék respect pontjaid: %d", jo, lvl, exp);
	}
	else
	{
		new exp, kell;
		exp = PlayerInfo[playerid][pExp];
		kell = (Szint(playerid) + 1) * levelexp;
		if(exp >= kell)
		{
			PlayerInfo[playerid][pExp] = 0;
			PlayerInfo[playerid][pLevel] += 1;
			SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
			SendFormatMessage(playerid, COLOR_WHITE, "Gratulálunk! Szintet léptél! Új szinted: %d! Következõ szinthez szükséges még %d játszott óra!", PlayerInfo[playerid][pLevel], (Szint(playerid) + 1) * levelexp);
		}
	}

	return 1;
}

stock SzovegEllenorzes(playerid, szoveg[], parancs[], tipus = ELLENORZES_HIRDETES)
{
	new talalt, szoveg1[128], szoveg2[128], hol;
	if(tipus == ELLENORZES_HIRDETES || tipus == ELLENORZES_MINDKETTO)
	{
		new cenzurak[25][] = {"fay", "WRP", "elife.atw.hu", "elife", "fayrpg", "royalrpg", "royal RPG", "skyrpg","RajRPG", "Raj RPG", "80.249.173.238:7820", ":7820", "80.249.173.230", ":7070", "80.249.173.122", ":7777", ":22000", ":7840", "4life", "80.249.165.73", "atw.hu", "clanbazis.com", "dtsh.hu", "moon-rpg", "littletown"};

		for(new x = 0; x < sizeof(cenzurak); x++)
		{
			hol = strfind(szoveg, cenzurak[x], true);
			if(egyezik(cenzurak[x], "sky"))
			{
				if(strfind(szoveg, "sky") != -1 && strfind(szoveg, "skype") == -1 && strfind(szoveg, "skypo") == -1)
				{
					talalt = 1;
					break;
				}
			}
			else if(egyezik(cenzurak[x], "fay"))
			{
				if(strfind(szoveg, "fay", true) != -1 && strfind(szoveg, "fayg", true) == -1)
				{
					talalt = 1;
					break;
				}
			}
			else if(egyezik(cenzurak[x], "raj"))
			{
				if(strfind(szoveg, "raj", true) != -1)
				{
					talalt = 1;
					break;
				}
			}
			else if(hol != -1)
			{
				talalt = 1;
				break;
			}
		}
		if(talalt)
		{
			Format(szoveg1, "[Szerverhírdetés figyelmeztetés] ID: %d, Név: %s, Parancs: %s", playerid, PlayerName(playerid), parancs);
			Format(szoveg2, "Szöveg: %s", szoveg);
			if(OnlineAdminok() > 0)
			{
				ABroadCast(COLOR_LIGHTRED, szoveg1, 1);
				ABroadCast(COLOR_LIGHTRED, szoveg2, 1);
			}
			else
			{
				SeeBan(playerid, 0, NINCS, "Szerverhírdetés");
				BanLog(szoveg1);
				BanLog(szoveg2);
			}
			return 1;
		}
	}
	if(tipus == ELLENORZES_SZIDAS || tipus == ELLENORZES_MINDKETTO)
	{
		new cenzurak_x[23][] = {"fasz", "buzi", "geci", "cigány", "cigany", "zsidó", "zsido", "szop", "kurva", "baz", "bmeg", "b+", "anyád", "anyad", "köcsög", "low", "noob", "láma", "lama", "szar", "azdmeg", "jóédeskurvaanyád","frici"};
		for(new x = 0; x < sizeof(cenzurak_x); x++)
		{
			hol = strfind(szoveg, cenzurak_x[x], true);
			if(hol != NINCS)
			{
				if(egyezik(cenzurak_x[x], "fasz"))
				{
					if(strfind(szoveg, "fasz", true) != NINCS && strfind(szoveg, "fasza", true) == NINCS)
					{
						talalt = 1;
						break;
					}
				}
				else
				{
					talalt = 1;
					break;
				}
			}
		}
		if(talalt)
		{
			Format(szoveg1, "[OOC Szidás figyelmeztetés] ID: %d, Név: %s, Parancs: %s", playerid, PlayerName(playerid), parancs);
			Format(szoveg2, "Szöveg: %s", szoveg);
			if(OnlineAdminok() > 0)
			{
				foreach(Jatekosok, o)
				{
					if(gBoocszidas[o] == 1 && Admin(o, 1))
					{
						SendClientMessage(o, COLOR_LIGHTRED, szoveg1);
						SendClientMessage(o, COLOR_LIGHTRED, szoveg2);
					}
				}
				//ABroadCast(COLOR_LIGHTRED, szoveg1, 1);
				//ABroadCast(COLOR_LIGHTRED, szoveg2, 1);
			}
			/*else
			{
				SeeKick(playerid, "OOC Szidás", NINCS);
				KickLog(szoveg1);
				KickLog(szoveg2);
			}*/
			//return 1;
		}
	}
	return 0;
}

/*stock IsSzidas(playerid, szoveg[])
{
	new cenzurak[18][] = {"fasz", "buzi", "geci", "cigány", "cigany", "zsidó", "zsido", "szop", "kurva", "baz", "bmeg", "b+", "anyád", "anyad", "köcsög", "kocsog", "low", "noob"};
	new talalt;

	for(new x = 0; x < sizeof(cenzurak); x++)
	{
		if(strfind(szoveg, cenzurak[x]))
		{
			talalt = 1;
			break;
		}
	}
	if(talalt)
	{
		Msg(playerid, "Hm OOC szidás? Nem kéne!");
		return 1;
	}
	return 0;
}


stock CheckHirdetes(playerid, szoveg[], parancs[])
{
	new cenzurak[24][] = {"fay", "WRP", "elife.atw.hu", "elife", "fayrpg", "royalrpg", "royal RPG", "skyrpg","RajRPG", "Raj RPG", "80.249.173.238:7820", ":7820", "80.249.173.230", ":7070", "80.249.173.122", ":7777", ":22000", ":7840", "4life", "80.249.165.73", "atw.hu", "clanbazis.com", "dtsh.hu", "moon-rpg"};
	new szoveg1[128], szoveg2[128], talalt, hol;

	for(new x = 0; x < sizeof(cenzurak); x++)
	{
		hol = strfind(szoveg, cenzurak[x]);
		if(egyezik(cenzurak[x], "sky"))
		{
			if(strfind(szoveg, "sky") != -1 && strfind(szoveg, "skype") == -1 && strfind(szoveg, "skypo") == -1)
			{
				talalt = 1;
				break;
			}
		}
		else if(egyezik(cenzurak[x], "fay"))
		{
			if(strfind(szoveg, "fay") != -1 && strfind(szoveg, "fayg") == -1)
			{
				talalt = 1;
				break;
			}
		}
		else if(egyezik(cenzurak[x], "raj"))
		{
			if(strfind(szoveg, "raj") != -1)
			{
				talalt = 1;
				break;
			}
		}
		else if(hol != -1)
		{
			talalt = 1;
			break;
		}
	}
	if(talalt)
	{
		Format(szoveg1, "[Szerverhírdetés figyelmeztetés] ID: %d, Név: %s, Parancs: %s", playerid, PlayerName(playerid), parancs);
		Format(szoveg2, "Szöveg: %s", szoveg);
		if(OnlineAdminok() > 0)
		{
			ABroadCast(COLOR_LIGHTRED, szoveg1, 1);
			ABroadCast(COLOR_LIGHTRED, szoveg2, 1);
		}
		else
		{
			SeeBan(playerid, gettime() + (60*60*48), NINCS, "Szerverhírdetés");
			BanLog(szoveg1);
			BanLog(szoveg2);
		}
		return 1;
	}
	return 0;
}*/

stock Civil(playerid)
{
	if(PlayerInfo[playerid][pMember] == 0 && PlayerInfo[playerid][pLeader] == 0)
		return 1;
	return 0;
}

stock SeeKick(playerid, miert[], kivolt = NINCS)
{
	new string[128], ki[MAX_PLAYER_NAME], jatekos[MAX_PLAYER_NAME];

	if(kivolt == NINCS || !IsPlayerConnected(kivolt) || IsPlayerNPC(kivolt))
		ki = "a rendszer";
	else
		ki = PlayerName(kivolt);

	jatekos = PlayerName(playerid);
	Format(string, "[Gates]: %s kirúgva %s által | Oka: %s", jatekos, ki, miert);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Kick(playerid);
	
	format(string, sizeof(string), "[Gates]: %s kirúgva %s által | Oka: %s", PlayerName(playerid), ki, miert); KickLog(string);
	return 1;
}


stock LegalisSzervezetTagja(playerid)
{
	if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNKA_FBI) || LMT(playerid, LMUNKA_MENTO) || LMT(playerid, LMUNKA_SFMENTO) ||
		LMT(playerid, LMUNKA_ONKORMANYZAT) || LMT(playerid, LMUNKA_RIPORTER) || LMT(playerid, LMUNKA_TAXI) || LMT(playerid, LMUNKA_SFTAXI) ||
		LMT(playerid, LMUNKA_KATONA) || LMT(playerid, LMUNKA_SFPD) || LMT(playerid, LMUNKA_OKTATO) || LMT(playerid, LMUNKA_VPOP))
		return 1;
	return 0;
}

stock FoglaltNev(string[])
{
	new where[40];
	Format(where, "nev='%s'", string);
	if(Mysql_Num(SQL_DB_Player, where) >= 1)
		return 1;
	return 0;
}

stock KocsiSofor(kocsi)
{
	new player = NINCS;
	foreach(Jatekosok, p)
	{
		if(IsPlayerInVehicle(p, kocsi) && GetPlayerState(p) == PLAYER_STATE_DRIVER)
		{
			player = p;
			break;
		}
	}
	return player;
}

public RaceTimer()
{
	new string[16], uzenet[128];
	for(new race = 0; race < RACESLOTOK; race++)
	{
		if(RaceInfo[race][rStatusz] == RACE_INDUL)
		{
			RaceInfo[race][rIndul]--;
			new time = RaceInfo[race][rIndul];
			
			if((time >= 1800 && time % 1800 == 0) || (time >= 600 && time < 1800 && time % 600 == 0))
			{
				format(uzenet, 128, "A %s %s múlva indul! (( /gps race %d ))", RaceInfo[race][rNev], FormatTime(time), race);
				if(time > 1800) foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== See City Racing Team ==========");
						SendClientMessage(x, COLOR_RED, uzenet);
					}
				}
				else foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== See City Racing Team ==========");
						SendClientMessage(x, COLOR_LIGHTRED, uzenet);
					}
				}
			}
			else if(time >= 120 && time < 600 && time % 60 == 0)
			{
				if(time > 300) format(uzenet, 128, "A %s %s múlva indul! (( /gps race %d ))", RaceInfo[race][rNev], FormatTime(time), race);
				else format(uzenet, 128, "A %s %s múlva indul! (( /gps race %d )) - Mostmár lehet jelentkezni! (( /race join ))", RaceInfo[race][rNev], FormatTime(time), race);
				
				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== See City Racing Team ==========");
						SendClientMessage(x, COLOR_ORANGE, uzenet);
					}
				}
			}
			else if(time == 60)
			{
				format(uzenet, 128, "A %s egy perc mulva indul! (( /gps race %d )) - Ha még nem jelentkeztél, jelentkezz! (( /race join ))", RaceInfo[race][rNev], race);
				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== See City Racing Team ==========");
						SendClientMessage(x, COLOR_YELLOW, uzenet);
					}
				}
			}
			else if(time == 30)
			{
				format(uzenet, 128, "A %s 30 másodperc mulva indul! (( /gps race %d )) - Ha még nem jelentkeztél, jelentkezz! (( /race join ))", RaceInfo[race][rNev], race);
				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== See City Racing Team ==========");
						SendClientMessage(x, COLOR_YELLOW, uzenet);
					}
				}
			}
			else if(time <= 15 && time > 0)
			{
				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] != race) continue;

					if(time > 10)
						Format(string, "~g~%d", time);
					else if(time <= 10 && time >= 8)
						Format(string, "~g~~h~%d", time);
					else if(time <= 7&& time >= 6)
						Format(string, "~y~%d", time);
					else if(time <= 5 && time >= 4)
						Format(string, "~r~~h~~h~%d", time);
					else if(time <= 3 && time >= 2)
						Format(string, "~r~~h~%d", time);
					else if(time < 2)
						Format(string, "~r~%d", time);
					GameTextForPlayer(x, string, 925, 5);
				}
			}
			else if(time <= 0)
			{
				format(uzenet, 128, "A %s elindult!", RaceInfo[race][rNev]);
				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== See City Racing Team ==========");
						SendClientMessage(x, COLOR_LIGHTGREEN, uzenet);
					}
				}
				
				RaceInfo[race][rStatusz] = RACE_ELINDULT;
				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == NINCS)
					{
						DisablePlayerRaceCheckpoint(x);
						continue;
					}
					Format(string, "~r~~h~Go!!", time);
					GameTextForPlayer(x, string, 3000, 5);

					/*if(RaceInfo[race][rCP] > 0)
						PlayerRaceInfo[x][xCP] = 0;
					else
						PlayerRaceInfo[x][xCP] = RACE_CP_CEL;*/
						
					PlayerRaceInfo[x][xCP] = RACE_CP_START;

					PlayerRaceInfo[x][xIdo] = 0;
					SetPlayerRaceCP(x);

				}
			}
		}
		else if(RaceInfo[race][rStatusz] == RACE_ELINDULT)
		{
			foreach(Jatekosok, x)
			{
				if(PlayerRaceInfo[x][xVersenyen] != race) continue;
				PlayerRaceInfo[x][xIdo]++;
			}
		}
	}

	return 1;
}

stock SetPlayerRaceCP(playerid)
{
	new cp = PlayerRaceInfo[playerid][xCP], race = PlayerRaceInfo[playerid][xVersenyen];
	if(cp == RACE_CP_START)
	{
		if(RaceInfo[race][rCP] > 0)
			SetPlayerRaceCheckpoint(playerid, 0, RaceStart[race][0], RaceStart[race][1], RaceStart[race][2], RaceCP[race][0][0], RaceCP[race][0][1], RaceCP[race][0][2], RACECPMERET);
		else
			SetPlayerRaceCheckpoint(playerid, 0, RaceStart[race][0], RaceStart[race][1], RaceStart[race][2], RaceCel[race][0], RaceCel[race][1], RaceCel[race][2], RACECPMERET);
	}
	else if(cp == RACE_CP_CEL)
		SetPlayerRaceCheckpoint(playerid, 1, RaceCel[race][0], RaceCel[race][1], RaceCel[race][2], 0.0, 0.0, 0.0, RACECPMERET);
	else
	{
		if((cp+1) >= RaceInfo[race][rCP])
			SetPlayerRaceCheckpoint(playerid, 0, RaceCP[race][cp][0], RaceCP[race][cp][1], RaceCP[race][cp][2], RaceCel[race][0], RaceCel[race][1], RaceCel[race][2], RACECPMERET);
		else
			SetPlayerRaceCheckpoint(playerid, 0, RaceCP[race][cp][0], RaceCP[race][cp][1], RaceCP[race][cp][2], RaceCP[race][cp+1][0], RaceCP[race][cp+1][1], RaceCP[race][cp+1][2], RACECPMERET);
	}

	return 1;
}

stock RaceStartnal(playerid)
{
	for(new x = 0; x < RACESLOTOK; x++)
	{
		if(RaceInfo[x][rStatusz] == RACE_INDUL)
		{
			if(PlayerToPoint(15, playerid, RaceStart[x][0], RaceStart[x][1], RaceStart[x][2]))
				return x;
		}
	}
	return -1;
}

stock FormatTime(ido)
{
	new string[128];
	if(ido < 60)
		Format(string, "%d másodperc", ido);
	else if(ido >= 60 && ido < 3600)
	{
		if(ido % 60 == 0)
			Format(string, "%d perc", (ido / 60));
		else
			Format(string, "%d perc és %d másodperc", floatround((ido / 60), floatround_floor), (ido % 60));
	}
	else if(ido >= 3600)
	{
		if(ido % 3600 == 0)
			Format(string, "%d óra", (ido / 3600));
		else
			Format(string, "%d óra és %d perc", floatround((ido / 3600), floatround_floor), floatround((ido % 3600) / 60));
	}

	return string;
}

stock HibasRaceSlot(playerid, slot)
{
	if(slot < 0 || slot > (RACESLOTOK - 1))
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "Hibás RaceSlot! A RaceSlot minimum 0 és max %d lehet!", (RACESLOTOK - 1));
		return 1;
	}
	return 0;
}

stock HibasBizNev(string[])
{
	if(strfind(string, "|") != -1)
		return 1;
	return 0;
}

stock CorrectPlayerDatas(playerid)
{
	new x, talalat;
	for(x = 0; x < sizeof(BizzInfo); x++)
	{
		if(BizzInfo[x][bOwned] && egyezik(BizzInfo[x][bOwner], PlayerName(playerid)))
		{
			PlayerInfo[playerid][pPbiskey] = x;
			talalat = 1;
			break;
		}
	}
	if(talalat != 1)
		PlayerInfo[playerid][pPbiskey] = 255;

	talalat = 0;
	for(x = 0; x < sizeof(CarInfo); x++)
	{
		if(CarInfo[x][Van] == 1 && CarInfo[x][cOwned] && egyezik(CarInfo[x][cOwner], PlayerName(playerid)))
		{
			if(talalat == 0)
				PlayerInfo[playerid][pPcarkey] = x;
			else if(talalat == 1)
				PlayerInfo[playerid][pPcarkey2] = x;
			else
			{
				CarInfo[x][cOwned] = 0;
				//CarUpdate(x, "Eladva='%d'", CarInfo[x][cOwned]);
				CarUpdate(x, CAR_Owned);
				ParkCarToKereskedo(x);
			}
			talalat++;
		}
	}
	if(talalat == 0)
	{
		PlayerInfo[playerid][pPcarkey] = NINCS;
		PlayerInfo[playerid][pPcarkey2] = NINCS;
	}
	else if(talalat == 1)
		PlayerInfo[playerid][pPcarkey2] = NINCS;

	talalat = 0;
	for(x = 0; x < sizeof(HouseInfo); x++)
	{
		if(HouseInfo[x][Van] == 1 && HouseInfo[x][hOwned] && egyezik(HouseInfo[x][hOwner], PlayerName(playerid)))
		{
			if(talalat == 0)
				PlayerInfo[playerid][pPhousekey] = x;
			else if(talalat == 1)
				PlayerInfo[playerid][pPhousekey2] = x;
			else
				HazElad(x);
			talalat++;
		}
	}
	if(talalat == 0)
	{
		PlayerInfo[playerid][pPhousekey] = NINCS;
		PlayerInfo[playerid][pPhousekey2] = NINCS;
	}
	else if(talalat == 1)
		PlayerInfo[playerid][pPhousekey2] = NINCS;


	new haza = PlayerInfo[playerid][pPhousekey];
	if(haza != NINCS)
	{
		if(haza > MAXHAZ || HouseInfo[haza][Van] != 1 || HouseInfo[haza][hOwned] != 1)
			PlayerInfo[playerid][pPhousekey] = NINCS;
	}

	return 1;
}

stock BizbeVan(playerid)
{
	new biz = NINCS, Interior, VW;
	Interior = GetPlayerInterior(playerid);
	VW = GetPlayerVirtualWorld(playerid);
	for(new x = 0; x < sizeof(BizzInfo); x++)
	{
		if(PlayerToPoint(100, playerid, BizzInfo[x][bExitX], BizzInfo[x][bExitY], BizzInfo[x][bExitZ]) && Interior == BizzInfo[x][bInterior] && VW == x)
		{
			biz = x;
			break;
		}
	}
	return biz;
}

stock BiznelVan(playerid)
{
	new biz = NINCS;
	for(new x = 0; x < sizeof(BizzInfo); x++)
	{
		if(PlayerToPoint(2.0, playerid, BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceX]))
		{
			biz = x;
			break;
		}
	}
	return biz;
}

stock BizPenz(biz, penz, playerid = NINCS)
{
	if(biz == BIZ_TUNING || biz == BIZ_REZSI)
		penz = floatround(float(penz) * 0.05);
		
	if(playerid != NINCS)
		GiveMoney(playerid, -penz);

	BizzInfo[biz][bTill] += penz;
	if(strlen(BizzInfo[biz][bExtortion]) && strcmp(BizzInfo[biz][bExtortion], "No-One", true) && strcmp(BizzInfo[biz][bExtortion], BizzInfo[biz][bOwner], true))
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x)) continue;
			if(strcmp(BizzInfo[biz][bExtortion], PlayerName(x), true) == 0)
			{
				PlayerInfo[x][pAccount] += floatround(penz / 10);
				BizzInfo[biz][bTill] -= floatround(penz / 10);
			}
		}
	}
	//BizUpdate(biz, "Kassza='%d'", BizzInfo[biz][bTill]);
	BizUpdate(biz, BIZ_Till);
	return 1;
}

stock Freeze(playerid, ido = 0)
{
	TogglePlayerControllable(playerid, false);

	if(ido > 0)
		SetTimerEx("UnFreeze", ido, false, "i", playerid);

	return 1;
}

public UnFreeze(playerid)
{
	TogglePlayerControllable(playerid, true);
	return 1;
}

	
public FbiKapuBecsuk()
{
	MoveDynamicObject(Fbibelso, 228.2333984375, 151.2314453125, 1003.3428344727, 3);
	return 1;
}
public Fbikapcsolodas(playerid)
{
	SendClientMessage(playerid, Pink, "Connected to FBI Server. Lehetõségek:");
	SendClientMessage(playerid, Pink2, "| - Jelszó - Clear");
	SendClientMessage(playerid, Pink, "| - Beépülés - Álnév");
	SendClientMessage(playerid, Pink2, "| - Aktiválás - Deaktiválás");
	SendClientMessage(playerid, Pink, "| - Lehallgatás - Lefoglalás");
	SendClientMessage(playerid, Pink2, "| - Lenyomozás - Adatnézés");
	SendClientMessage(playerid, Pink, "| - Rendõrfelfüggesztés - Bankszámla");
	SendClientMessage(playerid, Pink2, "							                Logout					");
	Belepve[playerid] = 1;
	return 1;
}
	
/*stock IsFluckS(playerid)
{
	if(PlayerInfo[playerid][pClint] == 2)
		return 1;
	return 0;
}*/

stock IsClint(playerid)
{
	if(PlayerInfo[playerid][pClint])
		return 1;
	return 0;
}

stock IsClintCar(vs)
{
	if(CarInfo[vs][cClint])
		return 1;
	return 0;
}

stock RangNev(playerid)
{
	new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

	if(rang <= 0) rangnev = Rangok[munka][0];
	else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
	else rangnev = Rangok[munka][7];

	return rangnev;
}

stock AdminName(playerid)
{
	new name[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pAdminAlnevBe])
		strmid(name, PlayerInfo[playerid][pAdminAlnev], 0, strlen(PlayerInfo[playerid][pAdminAlnev]), 25);
	else
		strmid(name, PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), 25);

	return name;
}

stock Nevvaltas(playerid, ujnev[])
{
	new x;

	for(x = 0; x < sizeof(HouseInfo); x++)
	{
		if(HouseInfo[x][hOwned] && strlen(HouseInfo[x][hOwner]) > 0 && egyezik(PlayerName(playerid), HouseInfo[x][hOwner]))
		{
			//HazUpdate(x, "Tulaj='%s'", ujnev);
			HazUpdate(x, HAZ_Owner);
			strmid(HouseInfo[x][hOwner], ujnev, 0, strlen(ujnev), 255);
		}
	}
	for(x = 0; x < sizeof(BizzInfo); x++)
	{
		if(BizzInfo[x][bOwned] && strlen(BizzInfo[x][bOwner]) > 0 && egyezik(PlayerName(playerid), BizzInfo[x][bOwner]))
		{
			strmid(BizzInfo[x][bOwner], ujnev, 0, strlen(ujnev), 255);
			//BizUpdate(x, "Tulaj='%s'", ujnev);
			BizUpdate(x, BIZ_Owner);
		}
	}
	for(x = 0; x < sizeof(CarInfo); x++)
	{
		if(CarInfo[x][cOwned] && strlen(CarInfo[x][cOwner]) > 0 && egyezik(PlayerName(playerid), CarInfo[x][cOwner]))
		{
			//CarUpdate(x, "Tulaj='%s'", ujnev);
			CarUpdate(x, CAR_Owner);
			strmid(CarInfo[x][cOwner], ujnev, 0, strlen(ujnev), 255);
		}
	}

	strmid(PlayerInfo[playerid][pNev], ujnev, 0, strlen(ujnev), 25);
	PlayerUpdate(playerid, "Nev='%s'", ujnev);
	SetPlayerName(playerid, ujnev);

}

/*stock PlayerSQLID(playerid)
{
	return PlayerInfo[playerid][pID];
}*/

stock MysqlGetPass(playerid)
{
	if(Registered(playerid) != 2) return 1;

	new pass[50],keres[12], ahol[20];
	keres = "Pass";
	Format(ahol, "id='%d'", PlayerInfo[playerid][pID]);
	
	pass = Mysql_Get(SQL_DB_Player, keres, ahol);
	
	strmid(PlayerInfo[playerid][pKey], pass, 0, strlen(pass), 50);

	return 1;

}

stock MysqlGetPlayerId(playerid)
{
	new id, keres[5], ahol[40];
	keres = "id";
	Format(ahol, "nev='%s'", PlayerName(playerid));

	if(Mysql_Num(SQL_DB_Player, ahol) > 0)
		id = strval(Mysql_Get(SQL_DB_Player, keres, ahol));
	else
		id = NINCS;

	PlayerInfo[playerid][pID] = id;

	return 1;
}

stock MysqlFinalUpdate(query[], sqlid)
{
	new string[64];
	Format(string, " WHERE id = '%d'", sqlid);
	strcat(query, string, MAX_MYSQL_STRING);
	mysql_query(query);
	return 1;
}

stock MysqlUpdateFlo(query[], nev[], Float:ertek)
{
	if(strfind(query, "=", true) != -1)
		strcat(query, ", ", MAX_MYSQL_STRING);
	new string[32];
	Format(string, "%s='%.3f'", nev, ertek);
	strcat(query, string, MAX_MYSQL_STRING);
	return 1;
}

stock MysqlUpdateStr(query[], nev[], ertek[])
{
	if(strfind(query, "=", true) != -1)
		strcat(query, ", ", MAX_MYSQL_STRING);
	new string[256];
	Format(string, "%s='%s'", nev, ertek);
	strcat(query, string, MAX_MYSQL_STRING);
	return 1;
}

stock MysqlUpdateInt(query[], nev[], ertek)
{
	if(strfind(query, "=", true) != -1)
		strcat(query, ", ", MAX_MYSQL_STRING);
	new string[32];
	Format(string, "%s='%d'", nev, ertek);
	strcat(query, string, MAX_MYSQL_STRING);
	return 1;
}

stock MoneyTrans(kitol, kinek, mennyit)
{
	if(!IsPlayerConnected(kitol) || !IsPlayerConnected(kinek)) return 1;

	GiveMoney(kitol, -mennyit);
	GiveMoney(kinek, mennyit);

	return 1;
}

stock GetMoney(playerid)
{
	return PlayerInfo[playerid][pCash];
}

stock SetMoney(playerid, money)
{
	PlayerInfo[playerid][pCash] = money;
	return 1;
}

stock ResetMoney(playerid)
{
	PlayerInfo[playerid][pCash] = 0;
	return 1;
}

stock GiveMoney(playerid, money)
{
	PlayerInfo[playerid][pCash] += money;
	return 1;
}

public SzerverNev()
{
	SzerverCounter++;

	if(SzerverCounter == 1)
		SendRconCommand("hostname [HUN]Fream [Gates] Island Beta [0.3z]");
	else if(SzerverCounter == 5)
		SendRconCommand("hostname [HUN]Fream [Gates] Island Beta [0.3z]");
	else if(SzerverCounter == 7)
		SendRconCommand("hostname [HUN]Fream [Gates] Island Beta [0.3z]");
	else if(SzerverCounter == 9)
		SzerverCounter = 0;

	return 1;
}

stock Bortonben(playerid)
{
	if(PlayerInfo[playerid][pJailed] > 0)
		return 1;
	else
		return 0;
}

stock Bilincs(playerid, bilincs, ido = -1)
{
	if(ido == -1)
	{
		if(bilincs == 0)
			ido = 0;
		else if(bilincs == 1)
			ido = 60;
		else if(bilincs == 2)
			ido = 300;
		else if(bilincs == 3)
			ido = 60;
	}

	if(bilincs == 0)
	{
		PlayerCuffed[playerid] = 0;
		PlayerCuffedTime[playerid] = ido;
		UnFreeze(playerid);
		TogglePlayerControllable(playerid, 1);
	}
	else if(bilincs == 1)
	{
		PlayerCuffed[playerid] = 1;
		PlayerCuffedTime[playerid] = ido;
		TogglePlayerControllable(playerid, 0);
	}
	else if(bilincs == 2)
	{
		PlayerCuffed[playerid] = 2;
		PlayerCuffedTime[playerid] = ido;
		TogglePlayerControllable(playerid, 0);
	}
	return 1;
}

public RandomHirdetes()
{
	//new hirdetes, fajl[64], string[32], szoveg[256];
	//format(fajl, sizeof(fajl), "Config/hirdetesek.cfg");
	
	//hirdetes = Rand(1, 3);
	//format(string, sizeof(string), "hirdetes%d", hirdetes);
	//szoveg = dini_Get(fajl, string);
	
	//SendClientMessageToAll(COLOR_WHITE, "Info: Fejlesztések megtekintéséért /changelog parancs.");
	return 1;
}

stock Cselekves(playerid, cselekves[], valaki = 0, bool:OOC = false)
{
	new string[128];
	if(valaki == 1)
		format(string, sizeof(string), "* Valaki %s", cselekves);
	if(valaki == 0)
	{
		if(PlayerInfo[playerid][pHamisNev] == 0)
			format(string, sizeof(string), "* %s %s", PlayerName(playerid), cselekves);
		else
			format(string, sizeof(string), "* %s %s", PlayerInfo[playerid][pHamisNev], cselekves);
	}	
	if(valaki == 2 || valaki == NINCS)
		format(string, sizeof(string), "* %s", cselekves);
		
	if(OOC)
		format(string, sizeof(string), "(( %s ))", string);
	
	ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

	return 1;
}

public HaznalVan(playerid)
{
	new haz = -1;

	for(new x = 0; x < sizeof(HouseInfo); x++)
	{
		if(PlayerToPoint(2, playerid, HouseInfo[x][hEntrancex], HouseInfo[x][hEntrancey], HouseInfo[x][hEntrancez]))
		{
			haz = x;
			break;
		}
	}

	return haz;
}

public TextDrawUpdateAll()
{
	tdcounter ++;
	new bool:tdgo;
	if(tdcounter % 5 == 0) tdgo = true; else tdgo = false;
	
	if(tdcounter == 10)
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || IsPlayerNPC(x) || !Logged(x)) continue;
			TextDrawUpdate(x, TD_Info);
			TextDrawUpdate(x, TD_Info2);
		}
	}
	else
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || IsPlayerNPC(x) || !Logged(x)) continue;
			if(KocsibanVan[x] || Rabol[x] || tdgo) TextDrawUpdate(x, TD_Info2);
		}
	}
	if(tdcounter >= 10) tdcounter = 0;
}

stock TextDrawUpdate(playerid, textdraw)
{
	if(IsPlayerNPC(playerid)) return 1;

	if(textdraw == TD_Info)
	{
		new string[512], sor1[256], sor2[256], ido[64], korhazido, frakcio[64], szervezet;
		korhazido = NeedMedicTime[playerid] - MedicTime[playerid];
		szervezet = PlayerInfo[playerid][pMember];

		if(PlayerInfo[playerid][pJailed] > 0)
			Format(ido, " ~r~Borton: ~l~%dmp ", PlayerInfo[playerid][pJailTime]);
		else if(korhazido > 0)
			Format(ido, " ~r~Korhaz: ~l~%dmp ", korhazido);
		else
			ido = " ";

		if(szervezet > 0)
			Format(frakcio, "%s [Rang: %d]", Szervezetneve[szervezet-1][2], PlayerInfo[playerid][pRank]);
		else
			frakcio = "Nincs";

		new fizuinfo[128];
		Format(fizuinfo, "~r~Fizetes: ~l~%dperc mulva", floatround((MinimumFizuhoz - PlayerInfo[playerid][pPayDay]) / 60, floatround_floor));

		Format(sor1, " ~r~Frakcio: ~l~%s %s %s", frakcio, fizuinfo, ido);

		Format(sor2, " ~r~Ido: ~l~%s-%s-%s %s:%s   ~l~Ray Gates teszt szervere", Time("ev"), Time("honap"), Time("nap"), Time("ora"), Time("perc"));
		Format(string, "%s~n~%s", sor1, sor2);
		TextDrawSetString(InfoTextDraw[playerid], string);
	}
	else if(textdraw == TD_Info2)
	{
		new string[512]; //, sor1[256], sor2[256], ido[64], korhazido, frakcio[64], szervezet;
		
		new ideiglenes;
		ideiglenes = (Szint(playerid) + 1) * levelexp;
		Format(string, "~r~~h~%s~n~~r~Bank: %dFt~n~~y~_______________~n~~r~Szint: ~l~%dlvl (%d ora)~n~~r~HP: ~l~%.0f / %.0f", PlayerName(playerid),PlayerInfo[playerid][pAccount], Szint(playerid), (ideiglenes - PlayerInfo[playerid][pExp]), MAXHP, iPlayerHealth[playerid]);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			ideiglenes = GetPlayerVehicleID(playerid);
			new sebesseg = JatekosSebessege(playerid);
			
			new Float:serules = (1000.0 - KocsiElete[ideiglenes]) / 6.5;
			if(serules < 0.0)
				serules = 0.0;
			else if(serules > 100.0)
				serules = 100.0;
			
			Format(string, "%s~n~---[ Jármû ]---~n~~r~Model: ~l~%s~n~~r~Benzin: ~l~%dl / %dl (%.0f%%)~n~~r~Serules: ~l~%.0f%%~n~~r~Sebesseg: ~l~%d km/h", string, GetVehicleModelName(ideiglenes, true), MaxBenzin(ideiglenes), Gas[ideiglenes], (Gas[ideiglenes] / float(MaxBenzin(ideiglenes)) * 100.0), serules, sebesseg);
			if(sebesseg > 50 && TrafiPax[playerid][tBuntetheto] == 0 && !OnDuty[playerid] && !AdminDuty[playerid]) TrafipaxCheck(playerid, sebesseg, ideiglenes);
		}
		if(JatekosZsak[playerid] >= 0)
			Format(string, "%s~n~---[ Zsakod ]---~n~~r~Penz: ~l~%dFt (%.0f%%)", string, JatekosZsak[playerid], floatround((float(JatekosZsak[playerid]) / float(MAXZSAKPENZ)) * 100.0));
		TextDrawSetString(InfoTextDraw2[playerid], string);
	}

	return 1;
}

stock ShowTextDraw(playerid, textdraw)
{
	if(IsPlayerNPC(playerid)) return 1;

	new Text:id;

	if(textdraw == TD_Info)
	{
		if(!InfoTextDrawCreated[playerid])
		{
			InfoTextDrawCreated[playerid] = 1;
			id = TextDrawCreate(0, 428, "Informaciok betoltese...");

			TextDrawAlignment(id, 1);
			TextDrawFont(id, 1);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, COLOR_BLACK);
			TextDrawBackgroundColor(id, COLOR_WHITE);
			TextDrawSetOutline(id, 1);

			TextDrawUseBox(id, 1);
			TextDrawBoxColor(id, 0x05050555);
			TextDrawLetterSize(id, 0.4, 1);

			TextDrawTextSize(id, 640, 480);

			InfoTextDraw[playerid] = id;
		}
		else
			id = InfoTextDraw[playerid];

		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info2)
	{
		if(!InfoTextDrawCreated2[playerid])
		{
			InfoTextDrawCreated2[playerid] = 1;
			id = TextDrawCreate(498, 110, "Betoltes...");
			
			TextDrawAlignment(id, 1);
			TextDrawFont(id, 1);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, COLOR_BLACK);
			TextDrawBackgroundColor(id, COLOR_WHITE);
			TextDrawSetOutline(id, 1);

			TextDrawUseBox(id, 1);
			TextDrawBoxColor(id, 0x05050555); //170
			TextDrawLetterSize(id, 0.3, 1);

			TextDrawTextSize(id, 640, 200);

			InfoTextDraw2[playerid] = id;
		}
		else
			id = InfoTextDraw2[playerid];

		TextDrawShowForPlayer(playerid, id);
	}
	/*else if(textdraw == Zsak)
	{
		if(ZsakVanRajta[playerid] == 0)
		{
			id = TextDrawCreate(302.000000,1.000000,"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~");
			TextDrawUseBox(id,1);
			TextDrawBoxColor(id,0x000000ff);
			TextDrawTextSize(id,-52.000000,-738.000000);
			TextDrawAlignment(id,2);
			TextDrawBackgroundColor(id,0x000000ff);
			TextDrawFont(id,1);
			TextDrawLetterSize(id,1.000000,1.000000);
			TextDrawColor(id,0x000000ff);
			TextDrawSetOutline(id,1);
			TextDrawSetProportional(id,1);
			TextDrawSetShadow(id,1);
		}
	}*/

	return 1;
}

public AfkChecker()
{
	HelyezesCheck();
	//new string[128];
	foreach(Jatekosok, x)
	{	
		if(VarosbanVan(x) && !Varosban[x]) VarosbaBe(x);
		else if(!VarosbanVan(x) && Varosban[x]) VarosbolKi(x);
			
		if(TrafiPax[x][tAktiv])
		{
			if(!PlayerToPoint(5, x, TrafiPax[x][tPosX], TrafiPax[x][tPosY], TrafiPax[x][tPosZ]))
			{
				DestroyDynamic3DTextLabel(TrafiPax[x][t3D]);
				TrafiPax[x][tAktiv] = false;
				Msg(x, "Mivel elmentél a helyedrõl, a trafipax törölve");
			}
		}
		if(!IsPlayerConnected(x) || IsPlayerNPC(x) || !Logged(x) || AFK[x] || Admin(x, 3)) continue;
		AFKIdo[x] += 5;
		if(AFKIdo[x] > MAXAFKIDO)
		{
			Msg(x, "Kirúgva AFK miatt.");
			Kick(x);
		}
	}
	
	for(new terulet = 0; terulet < MAXTERULET; terulet++)
	{
		if(TeruletInfo[terulet][tVarakozasIdo] > 0)
		{
			TeruletInfo[terulet][tVarakozasIdo] -= 5;
			if(TeruletInfo[terulet][tVarakozasIdo] <= 600 && TeruletInfo[terulet][tVarakozasIdo] >= 60 && TeruletInfo[terulet][tVarakozasIdo] % 60 == 0)
			{
				foreach(Jatekosok, p)
				{
					if(LMT(p, TeruletInfo[terulet][tTulaj]))
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: %d perc van hátra a harcig!", (TeruletInfo[terulet][tVarakozasIdo] / 60));
						Msg(p, "Figyelmeztetés: Ha nem megy oda legalább egy tag harcolni, a területet õk szerzik meg!", false);
					}
					else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: %d perc van hátra a harcig!", (TeruletInfo[terulet][tVarakozasIdo] / 60));
						Msg(p, "Figyelmeztetés: Ha nem megy oda legalább egy tag harcolni, a területet nem tudjátok megszerezni!", false);
					}
				}
			}
			else if(TeruletInfo[terulet][tVarakozasIdo] < 60 && TeruletInfo[terulet][tVarakozasIdo] > 0 && TeruletInfo[terulet][tVarakozasIdo] % 15 ==  0)
			{
				foreach(Jatekosok, p)
				{
					if(LMT(p, TeruletInfo[terulet][tTulaj]))
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: %d másodperc van hátra a harcig!", TeruletInfo[terulet][tVarakozasIdo]);
						Msg(p, "Figyelmeztetés: Ha nem megy oda legalább egy tag harcolni, a területet õk szerzik meg!", false);
					}
					else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: %d másodperc van hátra a harcig!", TeruletInfo[terulet][tVarakozasIdo]);
						Msg(p, "Figyelmeztetés: Ha nem megy oda legalább egy tag harcolni, a területet nem tudjátok megszerezni!", false);
					}
				}
			}
			else if(TeruletInfo[terulet][tVarakozasIdo] == 0)
			{
				new vedo, tamado;
				foreach(Jatekosok, p)
				{
					if(LMT(p, TeruletInfo[terulet][tHarcolok][0]) && IsPlayerInDynamicArea(p, TeruletInfo[terulet][tArea]) && !NemMozoghat(p))
						vedo++;
					else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]) && IsPlayerInDynamicArea(p, TeruletInfo[terulet][tArea]) && !NemMozoghat(p))
						tamado++;
				}
				if(vedo < 1)
				{
					foreach(Jatekosok, p)
					{
						if(LMT(p, TeruletInfo[terulet][tTulaj]))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Mivel senki sem ment ki, a területeteket elvesztettétek: %s - Megszerezte a %s", TeruletInfo[terulet][tNev], Szervezetneve[ TeruletInfo[terulet][tHarcolok][1] - 1 ][0]);
						else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Mivel senki sem védte a területet, így megszereztétek: %s", TeruletInfo[terulet][tNev]);
					}
					TeruletInfo[terulet][tTulaj] = TeruletInfo[terulet][tHarcolok][1];
					HarcVan = false;
					TeruletInfo[terulet][tFoglalva] = gettime();
					TeruletUpdate(terulet, TERULET_Tulaj, TERULET_Foglalva);
					TeruletFrissites();
				}
				else if(tamado < 1)
				{
					foreach(Jatekosok, p)
					{
						if(LMT(p, TeruletInfo[terulet][tTulaj]))
							SendClientMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Mivel senki sem jött megtámadni a területet, így sikeresen megvédtétek");
						else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Nem támadt senki, így nem tudtátok elfoglalni a területet: %s", TeruletInfo[terulet][tNev]);
					}
					HarcVan = false;
					TeruletInfo[terulet][tFoglalva] = gettime();
					TeruletUpdate(terulet, TERULET_Foglalva);
				}
				else
				{
					foreach(Jatekosok, p)
					{
						if((LMT(p, TeruletInfo[terulet][tTulaj]) || LMT(p, TeruletInfo[terulet][tHarcolok][1])) && IsPlayerInDynamicArea(p, TeruletInfo[terulet][tArea]) && !NemMozoghat(p))
						{
							SendClientMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: A HARC ELINDÚLT! AZ NYER, AKI TALPON MARAD!");
							Msg(p, "15 másodperces fagyasztás után indul a harc! Készülj fel!");
							
							Harcol[p] = true;
							HarcolTerulet[p] = terulet;
							Freeze(p, 15000);
							
							Fegyvere[p] = 0;
							SetPlayerArmedWeapon(p, 0);
							
							SetPlayerVirtualWorld(p, 123456789);
							SetPlayerWorldBounds(p, TeruletInfo[terulet][tMaxX] - 5.0, TeruletInfo[terulet][tMinX] + 5.0, TeruletInfo[terulet][tMaxY] - 5.0, TeruletInfo[terulet][tMinY] + 5.0);
						}
					}
					TeruletInfo[terulet][tHarc] = true;
					TeruletFrissites();
				}
			}
		}
	}
	
	return 1;
}

stock SeeBan(playerid, ido, banner = NINCS, oka[], bool:ipban=false, bool:kick = true)
{
	new query[256], orok[10], tipus[5], cim[30], bannolo[30];

	if(ido <= 0) orok = "i";
	else orok = "n";
	
	if(ipban) tipus = "ip";
	else tipus = "nev";
	
	if(ipban) strmid(cim, PlayerIP(playerid), 0, strlen(PlayerIP(playerid)), 30);
	else strmid(cim, PlayerName(playerid), 0, strlen(PlayerName(playerid)), 30);
	
	if(banner == NINCS) bannolo = "Rendszer";
	else strmid(bannolo, PlayerName(banner), 0, strlen(PlayerName(banner)), 30);
	
	format(query, sizeof(query), "INSERT INTO bans(Tipus, Cim, Ido, Orok, Bannolta, Oka, Datum) VALUES('%s', '%s', '%d', '%s', '%s', '%s', '%d')", tipus, cim, ido, orok, bannolo, oka, gettime());
	mysql_query(query);
	
	if(kick)
		Kick(playerid);

	return 1;
}

stock Mysql_Insert(tabla[], adatok[], ertekek[])
{
	new query[512];
	Format(query, "INSERT INTO %s (%s) VALUES(%s)", tabla, adatok, ertekek);
	mysql_query(query);
	return 1;
}

stock Mysql_Num(tabla[], ahol[])
{
	new query[256], num;
	Format(query, "SELECT * FROM `%s` WHERE %s", tabla, ahol);
	mysql_query(query);
	mysql_store_result();
	num = mysql_num_rows();
	mysql_free_result();
	return num;
}

stock Mysql_Get(tabla[], nev[], ahol[])
{
	new query[256], ertek[50];//, result[128];
	Format(query, "SELECT `%s` FROM `%s` WHERE %s LIMIT 1", nev, tabla, ahol);
	mysql_query(query);
	mysql_store_result();
	mysql_fetch_row(ertek);
	mysql_free_result();
	//strmid(result, ertek, 0, strlen(ertek));
	return ertek;
}

stock Mysql_Set(tabla[], ertekek[], ahol[])
{
	new query[256];
	Format(query, "UPDATE `%s` SET %s WHERE %s", tabla, ertekek, ahol);
	mysql_query(query);
	return 1;
}

stock MysqlKapcsolodas(bool:muvelet)
{
	if(!Mysql && muvelet == true)
	{
		new isreal = IsRealServer();
		if(isreal == 1)
			mysql_connect(SQL_Host, SQL_User, SQL_Jelszo, SQL_Adatbazis);
		else if(isreal == 0)
			mysql_connect(SQL_Host, SQL_User, SQL_Jelszo, SQL_AdatbazisTeszt);
		else if(isreal == -1)
			FatalServerStopping();
	}
	else if(Mysql && muvelet == false)
		mysql_close();

	return 1;
}

stock MysqlCheck()
{
	if(mysql_ping() == 1)
		return 1;
	return 0;
}

public MysqlEllenorzes()
{
	foreach(Jatekosok, x)
		FegyverCheatCheck(x);
		
	if(Mysql)
	{
		//if(MysqlHiba % 2 == 1) mysql_reload();

		if(mysql_ping() == -1)
			MysqlHiba++;
		else
			MysqlHiba = 0;

		if(MysqlHiba >= 10)
		{
			SendClientMessageToAll(COLOR_LIGHTRED, "[Gates]: Hiba az adatbázis tárolónál, ezért a szerver leáll...");
			SetTimer("Stop", 3000, false);
		}
	}
}

stock egyezik(string1[], string2[], bool:betumeretmindegy = true)
{
	return !strcmp(string1, string2, betumeretmindegy);
}

stock Msg(playerid, szoveg[], kellseerpg = true, szin = COLOR_LIGHTRED)
{
	if(!IsPlayerConnected(playerid)) return 1;
	if(kellseerpg)
		SendFormatMessage(playerid, szin, "[Gates]: %s", szoveg);
	else
		SendClientMessage(playerid, szin, szoveg);
	return 1;
}

stock Msg2(playerid, szoveg[], szin = COLOR_WHITE)
{
	if(!IsPlayerConnected(playerid)) return 1;
	SendClientMessage(playerid, szin, szoveg);
	return 1;
}

stock Online(nev[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && Logged(i) || IsPlayerNPC(i))
			if(strcmp(PlayerName(i), nev, false) == 0)
				return 1;
	}
	return 0;
}

stock NameTag(playerid, bool:be)
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || playerid == x || IsPlayerNPC(x)) continue;
		ShowPlayerNameTagForPlayer(playerid, x, be);
	}
	return 1;
}

stock NameTagEngem(playerid, bool:be)
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || playerid == x || IsPlayerNPC(x)) continue;
		ShowPlayerNameTagForPlayer(x, playerid, be);
	}
	return 1;
}

public IsAt(playerid, hol)
{
	new Int = GetPlayerInterior(playerid);
	if(hol == IsAt_Csokiautomata)
	{
		if(PlayerToPoint(3, playerid, 1634.0973,-2238.2817,13.5078) ||
		PlayerToPoint(3, playerid, 2481.7778,-1958.6669,13.5817) ||
		PlayerToPoint(3, playerid, 2140.2891,-1161.9464,23.9922) ||
		PlayerToPoint(3, playerid, 2154.1648,-1016.1125,62.8740) ||
		PlayerToPoint(3, playerid, 662.2329,-551.3305,16.3359) ||
		PlayerToPoint(3, playerid, 361.5373,159.5193,1008.3828) || 
		PlayerToPoint(3, playerid, 500.2959,-2.3686,1000.6797) || 
		PlayerToPoint(3, playerid, -17.5830,-90.5193,1003.5469) ||
		PlayerToPoint(3, playerid, -36.3786,-57.1332,1003.5469) ||
		PlayerToPoint(3, playerid, -1349.3627,494.0229,11.1953) ||
		PlayerToPoint(3, playerid, -1819.9491,341.9710,-41.7493) ||
		PlayerToPoint(3, playerid, -2229.0271,287.2406,35.3203))
			return 1;
	}
	if(hol == IsAt_Italautomata)
	{
		if(PlayerToPoint(3, playerid, 1787.5691,-1369.2091,15.7578) ||
		PlayerToPoint(3, playerid, 1153.3550,-1460.9474,15.7969) ||
		PlayerToPoint(3, playerid, -2005.7046,-490.8700,35.5313) ||
		PlayerToPoint(3, playerid, -2010.2950,-396.9321,35.5313) ||
		PlayerToPoint(3, playerid, -2039.9181,-397.5221,35.5313) ||
		PlayerToPoint(3, playerid, -2068.4399,-397.5222,35.5313) ||
		PlayerToPoint(3, playerid, -2097.3289,-397.5222,35.5313) ||
		PlayerToPoint(3, playerid, -2119.6128,-422.8927,35.5313) ||
		PlayerToPoint(3, playerid, -2092.2852,-490.8770,35.5313) ||
		PlayerToPoint(3, playerid, -2063.2310,-490.8701,35.5313) ||
		PlayerToPoint(3, playerid, -2034.3966,-490.8794,35.5313) ||
		PlayerToPoint(3, playerid, -2419.5813,984.4733,45.2969) ||
		PlayerToPoint(3, playerid, 1929.7091,-1772.0161,13.5469) ||
		PlayerToPoint(3, playerid, -16.8375,-90.8663,1003.5469) ||
		PlayerToPoint(3, playerid, 1729.5658,-1944.3823,13.5668) ||
		PlayerToPoint(3, playerid, 2060.6199,-1898.4546,13.5538) ||
		PlayerToPoint(3, playerid, 2325.6445,-1645.9592,14.8270) ||
		PlayerToPoint(3, playerid, 2353.0840,-1357.3569,24.3984) ||
		PlayerToPoint(3, playerid, 2224.3989,-1153.3273,1025.7969) ||
		PlayerToPoint(3, playerid, -1349.3037,492.4825,11.1953) ||
		PlayerToPoint(10, playerid, -1820.0435,337.3485,-41.7493) ||
		PlayerToPoint(3, playerid, -1981.9413,142.5771,27.6875))
			return 1;
	}
	if(hol == IsAt_McDonald)
	{
		if(PlayerToPoint(2, playerid, 375.730133, -67.441177, 1001.507812) && Int == 10)
			return 1;
	}
	else if(hol == IsAt_Bank)
	{
		if(PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187))
			return 1;
	}
	else if(hol == IsAt_Pizzazo)
	{
		if(PlayerToPoint(3, playerid, 375.997497, -118.807800, 1001.499511) && Int == 5)
			return 1;
	}
	else if(hol == IsAt_Csirkes)
	{
		if(PlayerToPoint(2.5, playerid, 369.596130, -6.029798, 1001.858886) && Int == 9)
			return 1;
	}
	else if(hol == IsAt_Korhaz)
	{
		if(PlayerToPoint(35, playerid, 1112.79, -1281.89, -26.18))
			return 1;
	}
	else if(hol == IsAt_Etterem)
	{
		if(PlayerToPoint(10, playerid, -786.0734,500.2314,1371.7422) && Int == 1)
			return 1;
	}
	else if(hol == IsAt_LSPDBorton)
	{
		if(PlayerToPoint(10, playerid, 264.365966, 77.483154, 1001.039062) && Int == 6)
			return 1;
	}
	else if(hol == IsAt_Fort)
	{
		if(PlayerToPoint(50, playerid, 215.038833, 1862.826782, 13.140625))
			return 1;
	}
	else if(hol == IsAt_KereskedoHQ)
	{
		if(PlayerToPoint(90, playerid, -2053.8244015, -191.9231375, 37.820312))
			return 1;
	}
	/*else if(hol == IsAt_Hotel)
	{
		if(PlayerToPoint(3, playerid, -2425.4722,337.6092,37.0020))
			return 1;
	}*/
	else if(hol == IsAt_Buszmegallo)
	{
		if(PlayerToPoint(5, playerid, 1504.946, -1737.760, 13.546) || // VH
			PlayerToPoint(5, playerid, 1487.449, -1048.174, 23.829) || // LS Bank
			PlayerToPoint(5, playerid, 1188.482, -1343.266, 13.565) || // LS Kórház
			PlayerToPoint(5, playerid, 168.423, 1160.428, 14.660) || // Fort
			PlayerToPoint(5, playerid, -2014.010, 273.818, 32.831) || // SF Wang Cars
			PlayerToPoint(5, playerid, 1168.151, -1822.518, 13.570) || // LS Pályaudvar
			PlayerToPoint(5, playerid, 529.574, -1239.627, 16.604) || // LS Autóbérlõ
			PlayerToPoint(5, playerid, -289.819, -139.942, 1.864) || // Farm
			PlayerToPoint(5, playerid, -2027.723, -62.263, 35.320) || // SF Oktatók
			PlayerToPoint(5, playerid, -2757.362, 370.942, 4.348) || // SF Városháza
			PlayerToPoint(5, playerid, -1943.025, 595.064, 35.171)) // SF Bank
		return 1;
	}
	else if(hol == IsAt_Festo)
	{
		if(PlayerToPoint(5, playerid, 487.332397, -1741.302734, 11.131089) ||
			PlayerToPoint(5, playerid, 2066.086425, -1831.412353, 13.546875) ||
			PlayerToPoint(5, playerid, 1024.939453, -1024.406738, 31.798025) ||
			PlayerToPoint(5, playerid, 720.166687, -457.286499, 16.032396) ||
			PlayerToPoint(5, playerid, -2425.677734, 1022.328552, 50.080821) ||
			PlayerToPoint(5, playerid, -1904.543579, 282.904937, 40.743328))
		return 1;
	}
	else if(hol == IsAt_ATM)
	{
		if(PlayerToPoint(5.0,playerid,1469.341675, -1772.268066, 18.363657) ||
			PlayerToPoint(6.0,playerid,1836.913452, -1677.364624, 12.975209) ||
			PlayerToPoint(7.0,playerid,1927.790283, -1765.892456, 13.156972) ||
			PlayerToPoint(8.0,playerid,1304.649658, -1367.892456, 13.182307) ||
			PlayerToPoint(6.0,playerid,1810.772461, -1877.020142, 13.226860) ||
			PlayerToPoint(7.0,playerid,2051.406494, -1897.543457, 13.196700) ||
			PlayerToPoint(8.0,playerid,2231.275879, -1722.784912, 13.204838) ||
			PlayerToPoint(6.0,playerid,2232.996582, -1362.803345, 23.635086) ||
	 		PlayerToPoint(7.0,playerid,2235.976074, -1150.396362, 25.530949) ||
			PlayerToPoint(8.0,playerid,1628.364380, -1171.898438, 23.721024) ||
			PlayerToPoint(6.0,playerid,1010.001892, -1115.541504, 23.542313) ||
			PlayerToPoint(7.0,playerid,622.896423, -1774.111816, 13.856520) ||
		 	PlayerToPoint(8.0,playerid,453.312622, -1475.028076, 30.363472) ||
		 	PlayerToPoint(8.0,playerid,986.761230, -1336.739380, 13.346378) ||
		 	PlayerToPoint(8.0,playerid,2215.514404, -2196.378418, 13.346378) ||
			PlayerToPoint(8.0,playerid,-1985.5392,1129.6703,53.2113) ||
			PlayerToPoint(8.0,playerid,-2449.2236,755.3339,35.1719) ||
			PlayerToPoint(8.0,playerid,-1981.5295,119.8280,27.6799) ||
			PlayerToPoint(8.0,playerid,-1696.8431,412.7425,7.1797) ||
			PlayerToPoint(8.0,playerid,-2764.8291,384.6720,6.3281))
				return 1;
		
		for(new a = 0; a < MAX_ATM; a++)
		{
			if(PlayerToPoint(2, playerid, ATM[a][aPosX], ATM[a][aPosY], ATM[a][aPosZ]))
			{
				return 1;
			}
		}		
	}
	else if(hol == IsAt_HotDog)
	{
		if(PlayerToPoint(1, playerid, 388.891296, -2070.652343, 7.835937) || // LS Kikötõ
			PlayerToPoint(1, playerid, 1000.174865, -1850.045043, 12.814621) || // LS Part
			PlayerToPoint(1, playerid, 1589.746948, -1288.330566, 17.511436) || // LS Csillagépület alatt
			PlayerToPoint(1, playerid, 1219.070678, -1324.420410, 13.481049) || // LS Kórház
			PlayerToPoint(1, playerid, 1491.664550, -1769.269042, 18.795755) || // LS Városháza
			PlayerToPoint(1, playerid, 1471.004882, -1044.569091, 23.828125) || // LS Bank
			PlayerToPoint(1, playerid, 1785.103637, -1184.715576, 23.876075) || // LS Gunshop
			PlayerToPoint(1, playerid, -2692.398437, 385.206237, 4.374998) || // SF Városháza
			PlayerToPoint(1, playerid, -2384.000000, -585.309448, 132.117187) || // SF Hegy
			PlayerToPoint(1, playerid, -2150.911376, -436.183837, 35.343013) || // SF Stadion 1
			PlayerToPoint(1, playerid, -2145.601318, -425.210449, 35.335937) || // SF Stadion 2
			PlayerToPoint(1, playerid, -2094.984863, -395.715881, 35.531250) || // SF Stadion 3
			PlayerToPoint(1, playerid, -2514.816406, -15.105303, 25.617187) || // SF Tetkós
			PlayerToPoint(1, playerid, -2285.479248, 148.160675, 35.312500) || // SF Park
			PlayerToPoint(1, playerid, -2198.201416, 612.508178, 35.164062) || // SF Yakuza 1
			PlayerToPoint(1, playerid, -2194.080566, 612.336303, 35.164062) || // SF Yakuza 2
			PlayerToPoint(1, playerid, -2193.901123, 606.258056, 35.164062) || // SF Yakuza 3
			PlayerToPoint(1, playerid, -2187.479003, 613.517028, 35.164062) || // SF Yakuza 4
			PlayerToPoint(1, playerid, -2181.962402, 612.755004, 35.164062)) // SF Yakuza 5
				return 1;
	}
	else if(hol == IsAt_Haz)
	{
		new haz = NINCS, belso, VW;
		VW = GetPlayerVirtualWorld(playerid);
		
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(HouseInfo[h][Van] != 1) continue;
			belso = HouseInfo[h][hBelso];
			if(PlayerToPoint(150, playerid, IntInfo[belso][iExitX], IntInfo[belso][iExitY], IntInfo[belso][iExitZ]) && VW == h)
			{
				haz = h;
				break;
			}
		}
		return haz;
	}
	else if(hol == IsAt_HazElott)
	{
		new haz = NINCS;
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(HouseInfo[h][Van] != 1) continue;
			if(PlayerToPoint(2, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
			{
				haz = h;
				break;
			}
		}
		return haz;
	}

	return 0;
}

public Spawnolas()
{
	new p;
	for(p = 0; p < MAX_PLAYERS; p++)
	{
		if(IsPlayerConnected(p))
		{
			if(GetPlayerState(p) == PLAYER_STATE_WASTED && Logged(p) || GetPlayerState(p) == PLAYER_STATE_NONE && Logged(p) == 0)
			{
				/*SpawnPlayer(p);
				SetPlayerInterior(p,0);
				SetPlayerPos(p, 1543.207641, -1757.084716, 13.546875);
				SetPlayerCameraPos(p, 1555.392578, -1749.457031, 30.780603);
				SetPlayerCameraLookAt(p, 1504.327270, -1713.032226, 14.046875);
				TogglePlayerControllable(p, false);*/
				OnPlayerRequestClass(p, GetPlayerSkin(p));
			}
		}
	}
	return 1;
}

stock Logged(playerid)
{
	if(gPlayerLogged[playerid] == 1)
		return 1;

	return 0;
}

stock Registered(playerid)
{
	return PlayerInfo[playerid][pRegistered];
}

stock RegCheck(playerid, method[])
{
	if(egyezik(method, "SQL"))
	{
		new where[32];
		Format(where, "nev='%s'", PlayerName(playerid));
		if(Mysql_Num(SQL_DB_Player, where) > 0)
			return 1;
		else
			return 0;
	}
	/*else if(egyezik(method, "INI"))
	{
		new fajl[64];
		format(fajl, sizeof(fajl), "Jatekosok/%s.ini", PlayerName(playerid));

		if(fexist(fajl))
			return 1;
		else
			return 0;
	}*/

	return 0;
}

stock Locked(vehicleid)
{
	if(gCarLock[vehicleid] == 1)
		return 1;
	return 0;
}

stock IsScripter(id)
{
	if(IsClint(id)) return 1;
	
	new nev[MAX_PLAYER_NAME];
	nev = PlayerName(id);
	for(new i; i < sizeof(Scripter); i++)
	{
		if(!strcmp(nev, Scripter[i])) { return 1; }
	}
	return 0;
}

stock IsFoAdmin(id)
{
	if(IsScripter(id)) return 1;
	return 0;
}

stock VanJoga(id, id2)
{
	if(IsFoAdmin(id2) && !IsFoAdmin(id))
		return 0;
	return 1;
}

stock Jatszottora(playerid, ido)
{
	if(PlayerInfo[playerid][pConnectTime] >= ido)
		return 1;
	return 0;
}

public OnGameModeExit()
{
	for(new x = 0; x < sizeof(Timerek); x++)
	{
		if(Timerek[x] != -1)
			KillTimer(x);
	}
	
	print("Szerver leáll... MySQL kapcsolat bontása...");
	//mysql_close();
	print("MySQL kapcsolat bontva... Leállítás...");
	return 1;
}

stock GetParam(const string[], number)
{
	new kezdes=0, spacevolt=0, szavak=-1, eredmeny[MAX_PLAYER_NAME] = "-1";

	new utolsobetu = strlen(string) - 1;

	for(new x = 0; x < strlen(string); x++)
	{
		if(string[x] <= ' ' || x == utolsobetu)
		{
			if(!spacevolt)
			{
				szavak++;
				if(szavak == number)
				{
					if(x == utolsobetu && string[x] > ' ')
						strmid(eredmeny, string, kezdes, x+1);
					else
						strmid(eredmeny, string, kezdes, x);
				}
			}
			else if(x == utolsobetu)
			{
				if(string[x] > ' ')
				{
					szavak++;
					if(szavak == number)
					{
						strmid(eredmeny, string, x, x+1);
					}
				}
			}

			spacevolt = 1;
		}
		else
		{
			if(spacevolt == 1)
			{
				kezdes = x;
			}
			spacevolt = 0;
		}
	}
	return eredmeny;
}

stock Parameterek(string[])
{
	new volt, szam;
	for(new x = 0; x < strlen(string); x++)
	{
		if(string[x] <= ' ')
		{
			volt = 1;
		}
		else
		{
			if(volt == 1) szam++;
			volt = 0;
		}
	}

	return szam;
}

public Jail(playerid, muvelet[], ido, tipus[], oka[])
{
	if(egyezik(muvelet, "+"))
	{
		if(PlayerInfo[playerid][pJailed] == 0)
			PlayerInfo[playerid][pJailTime] = ido;
		else
			PlayerInfo[playerid][pJailTime] += ido;

		ResetWeapon(playerid);

		if(egyezik(tipus, "lspd"))
		{
			PlayerInfo[playerid][pJailed] = 1;
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid,264.6288,77.5742,1001.0391);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000); //Reset world to player
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "sfpd"))
		{
			PlayerInfo[playerid][pJailed] = 4;
		    SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid,219.4761,110.4732,999.0156);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000); //Reset world to player
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "fbi"))
		{
			PlayerInfo[playerid][pJailed] = 5;
		    SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid,198.2832,162.2480,1003.0300);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000); //Reset world to player
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "fort"))
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pJailed] = 2;
			SetPlayerPos(playerid, 215.038833, 1862.826782, 13.140625);
			SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "ajail"))
		{
			PlayerInfo[playerid][pJailed] = 3;
			SetPlayerPos(playerid, 972.831, 2.768, 1001.148);
			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 8888);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
		}
		else if(egyezik(tipus, "korhaz"))
		{
			new rands = random(sizeof(KorhazSpawn));
			SetPlayerVirtualWorld(playerid, 2);
			SetPlayerPos(playerid, KorhazSpawn[rands][0], KorhazSpawn[rands][1], KorhazSpawn[rands][2]);
			MedicBill[playerid] = 0;
			MedicTime[playerid] = 1;
			SendClientMessage(playerid, COLOR_GREY, "5 másodpercre lefagyasztunk, hogy betöltsön a kórház belsõ!");
			TogglePlayerControllable(playerid, 0);
			Freeze(playerid, 5000);
			NeedMedicTime[playerid] = ido;
		}
		else if(egyezik(tipus, "off"))
		{
			PlayerInfo[playerid][pJailed] = 3;
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
	}
	else if(egyezik(muvelet, "-"))
	{
		if(PlayerInfo[playerid][pJailed] > 0)
		{
			if(ido <= PlayerInfo[playerid][pJailTime])
				PlayerInfo[playerid][pJailTime] -= ido;
			else
				PlayerInfo[playerid][pJailTime] = 0;
		}
	}
	else if(egyezik(muvelet, "set"))
	{
		PlayerInfo[playerid][pJailTime] = ido;

		ResetWeapon(playerid);

		if(egyezik(tipus, "lspd"))
		{
			PlayerInfo[playerid][pJailed] = 1;
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid,264.6288,77.5742,1001.0391);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000); //Reset world to player
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "fort"))
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pJailed] = 2;
			SetPlayerPos(playerid, 215.038833, 1862.826782, 13.140625);
			SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "ajail"))
		{
			PlayerInfo[playerid][pJailed] = 3;
			SetPlayerPos(playerid, 972.831, 2.768, 1001.148);
			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 8888);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
		}
		else if(egyezik(tipus, "korhaz"))
		{
			new rands = random(sizeof(KorhazSpawn));
			SetPlayerVirtualWorld(playerid, 2);			
			SetPlayerPos(playerid, KorhazSpawn[rands][0], KorhazSpawn[rands][1], KorhazSpawn[rands][2]);
			MedicBill[playerid] = 0;
			MedicTime[playerid] = 1;
			SendClientMessage(playerid, COLOR_GREY, "5 másodpercre lefagyasztunk, hogy betöltsön a kórház belsõ!");
			TogglePlayerControllable(playerid, 0);
			Freeze(playerid, 5000);		
			NeedMedicTime[playerid] = ido;
		}
		else if(egyezik(tipus, "off"))
		{
			PlayerInfo[playerid][pJailed] = 3;
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
	}

	return 1;
}

/*public AlapKocsiRespawn(kocsi)
{
	new vs = IsAVsKocsi(kocsi);
	if(vs == NINCS)
	{
		SetVehicleToRespawn(kocsi);
		Locker(kocsi);
	}
	return 1;
}*/

public KocsiRespawn(kocsi)
{
	if(NPCKocsi[kocsi]) return 1;
	
	SetVehicleToRespawn(kocsi);
	if(JarmuValtozasok[kocsi][0]) SetVehicleInterior(kocsi, 0);
	if(JarmuValtozasok[kocsi][1]) SetVehicleVW(kocsi, 0);
	Locker(kocsi);

	new vs = IsAVsKocsi(kocsi);
	if(vs != NINCS)
	{
		new kerek = CarInfo[vs][cKerek];
		if(CarInfo[vs][cPainted] == 1)
		{
			SetVehicleColor(kocsi, CarInfo[vs][cColorOne], CarInfo[vs][cColorTwo]);
		}	
		ChangeVehiclePaintjob(kocsi, CarInfo[vs][cMatrica]);
				
		if(CarInfo[vs][cKerek] > 0)
		{
					AddVehicleComponent(kocsi, kerek);
		}
		if(CarInfo[vs][cTuning] == 1)
		{
				if(CarInfo[vs][cModel] == 560)
				{
					AddVehicleComponent(kocsi, 1026);
					AddVehicleComponent(kocsi, 1027);
					AddVehicleComponent(kocsi, 1032);
					AddVehicleComponent(kocsi, 1169);
					AddVehicleComponent(kocsi, 1138);
					AddVehicleComponent(kocsi, 1141);
					AddVehicleComponent(kocsi, 1028);
				}
				if(CarInfo[vs][cModel] == 562)
				{
					AddVehicleComponent(kocsi, 1034);
					AddVehicleComponent(kocsi, 1038);
					AddVehicleComponent(kocsi,1036);
					AddVehicleComponent(kocsi, 1040);
					AddVehicleComponent(kocsi, 1147);
					AddVehicleComponent(kocsi, 1149);
					AddVehicleComponent(kocsi, 1171);
				}
				if(CarInfo[vs][cModel] == 559)
				{
					AddVehicleComponent(kocsi, 1065);
					AddVehicleComponent(kocsi, 1067);
					AddVehicleComponent(kocsi, 1069);
					AddVehicleComponent(kocsi, 1071);
					AddVehicleComponent(kocsi, 1159);
					AddVehicleComponent(kocsi, 1160);
					AddVehicleComponent(kocsi, 1162);
				}
				if(CarInfo[vs][cModel] == 560)
				{
					AddVehicleComponent(kocsi, 1026);
					AddVehicleComponent(kocsi, 1027);
					AddVehicleComponent(kocsi, 1032);
					AddVehicleComponent(kocsi, 1169);
					AddVehicleComponent(kocsi, 1138);
					AddVehicleComponent(kocsi, 1141);
					AddVehicleComponent(kocsi, 1028);
				}
				if(CarInfo[vs][cModel] == 558)
				{
					AddVehicleComponent(kocsi, 1088);
					AddVehicleComponent(kocsi, 1090);
					AddVehicleComponent(kocsi, 1092);
					AddVehicleComponent(kocsi, 1094);
					AddVehicleComponent(kocsi, 1164);
					AddVehicleComponent(kocsi, 1166);
					AddVehicleComponent(kocsi, 1168);
				}
				if(CarInfo[vs][cModel] == 561)
				{
					AddVehicleComponent(kocsi, 1055);
					AddVehicleComponent(kocsi, 1056);
					AddVehicleComponent(kocsi, 1058);
					AddVehicleComponent(kocsi, 1062);
					AddVehicleComponent(kocsi, 1064);
					AddVehicleComponent(kocsi, 1154);
					AddVehicleComponent(kocsi, 1155);
				}
				if(CarInfo[vs][cModel] == 565)
				{
					AddVehicleComponent(kocsi, 1046);
					AddVehicleComponent(kocsi, 1047);
					AddVehicleComponent(kocsi, 1049);
					AddVehicleComponent(kocsi, 1051);
					AddVehicleComponent(kocsi, 1054);
					AddVehicleComponent(kocsi, 1150);
					AddVehicleComponent(kocsi, 1153);
				}
		}
		if(CarInfo[vs][cTuning] == 2)
		{
				if(CarInfo[vs][cModel] == 560)
				{
					AddVehicleComponent(kocsi, 1029);
					AddVehicleComponent(kocsi, 1030);
					AddVehicleComponent(kocsi, 1031);
					AddVehicleComponent(kocsi, 1133);
					AddVehicleComponent(kocsi, 1139);
					AddVehicleComponent(kocsi, 1140);
					AddVehicleComponent(kocsi, 1170);
				}
				if(CarInfo[vs][cModel] == 562)
				{
					AddVehicleComponent(kocsi, 1035);
					AddVehicleComponent(kocsi, 1037);
					AddVehicleComponent(kocsi, 1039);
					AddVehicleComponent(kocsi, 1041);
					AddVehicleComponent(kocsi, 1146);
					AddVehicleComponent(kocsi, 1148);
					AddVehicleComponent(kocsi, 1172);
				}
				if(CarInfo[vs][cModel] == 559)
				{
					AddVehicleComponent(kocsi, 1066);
					AddVehicleComponent(kocsi, 1068);
					AddVehicleComponent(kocsi, 1070);
					AddVehicleComponent(kocsi, 1072);
					AddVehicleComponent(kocsi, 1158);
					AddVehicleComponent(kocsi, 1161);
					AddVehicleComponent(kocsi, 1173);
				}
				if(CarInfo[vs][cModel] == 558)
				{
					AddVehicleComponent(kocsi, 1089);
					AddVehicleComponent(kocsi, 1091);
					AddVehicleComponent(kocsi, 1093);
					AddVehicleComponent(kocsi, 1095);
					AddVehicleComponent(kocsi, 1163);
					AddVehicleComponent(kocsi, 1165);
					AddVehicleComponent(kocsi, 1167);
				}
				if(CarInfo[vs][cModel] == 561)
				{
					AddVehicleComponent(kocsi, 1057);
					AddVehicleComponent(kocsi, 1059);
					AddVehicleComponent(kocsi, 1050);
					AddVehicleComponent(kocsi, 1061);
					AddVehicleComponent(kocsi, 1063);
					AddVehicleComponent(kocsi, 1156);
					AddVehicleComponent(kocsi, 1157);
				}
				if(CarInfo[vs][cModel] == 565)
				{
					AddVehicleComponent(kocsi, 1045);
					AddVehicleComponent(kocsi, 1048);
					AddVehicleComponent(kocsi, 1050);
					AddVehicleComponent(kocsi, 1052);
					AddVehicleComponent(kocsi, 1053);
					AddVehicleComponent(kocsi, 1151);
					AddVehicleComponent(kocsi, 1152);
				}
		}
	}	

	switch(GetVehicleModel(kocsi))
	{
		case 427, 428, 432: SetVehicleHealth(kocsi, 20000.0);
	}

	return 1;
}

/*public VsTuning(kocsi)
{
	new vs = IsAVsKocsi(kocsi);
	new kerek = CarInfo[vs][cKerek];
	if(vs != NINCS)
	{
		if(CarInfo[vs][cKerek] > 0)
		{
					AddVehicleComponent(kocsi, kerek);
		}
		if(CarInfo[vs][cTuning] == 1)
		{
				if(CarInfo[vs][cModel] == 560)
				{
					AddVehicleComponent(kocsi, 1026);
					AddVehicleComponent(kocsi, 1027);
					AddVehicleComponent(kocsi, 1032);
					AddVehicleComponent(kocsi, 1169);
					AddVehicleComponent(kocsi, 1138);
					AddVehicleComponent(kocsi, 1141);
					AddVehicleComponent(kocsi, 1028);
				}
				if(CarInfo[vs][cModel] == 562)
				{
					AddVehicleComponent(kocsi, 1034);
					AddVehicleComponent(kocsi, 1038);
					AddVehicleComponent(kocsi,1036);
					AddVehicleComponent(kocsi, 1040);
					AddVehicleComponent(kocsi, 1147);
					AddVehicleComponent(kocsi, 1149);
					AddVehicleComponent(kocsi, 1171);
				}
				if(CarInfo[vs][cModel] == 559)
				{
					AddVehicleComponent(kocsi, 1065);
					AddVehicleComponent(kocsi, 1067);
					AddVehicleComponent(kocsi, 1069);
					AddVehicleComponent(kocsi, 1071);
					AddVehicleComponent(kocsi, 1159);
					AddVehicleComponent(kocsi, 1160);
					AddVehicleComponent(kocsi, 1162);
				}
				if(CarInfo[vs][cModel] == 560)
				{
					AddVehicleComponent(kocsi, 1026);
					AddVehicleComponent(kocsi, 1027);
					AddVehicleComponent(kocsi, 1032);
					AddVehicleComponent(kocsi, 1169);
					AddVehicleComponent(kocsi, 1138);
					AddVehicleComponent(kocsi, 1141);
					AddVehicleComponent(kocsi, 1028);
				}
				if(CarInfo[vs][cModel] == 558)
				{
					AddVehicleComponent(kocsi, 1088);
					AddVehicleComponent(kocsi, 1090);
					AddVehicleComponent(kocsi, 1092);
					AddVehicleComponent(kocsi, 1094);
					AddVehicleComponent(kocsi, 1164);
					AddVehicleComponent(kocsi, 1166);
					AddVehicleComponent(kocsi, 1168);
				}
				if(CarInfo[vs][cModel] == 561)
				{
					AddVehicleComponent(kocsi, 1055);
					AddVehicleComponent(kocsi, 1056);
					AddVehicleComponent(kocsi, 1058);
					AddVehicleComponent(kocsi, 1062);
					AddVehicleComponent(kocsi, 1064);
					AddVehicleComponent(kocsi, 1154);
					AddVehicleComponent(kocsi, 1155);
				}
				if(CarInfo[vs][cModel] == 565)
				{
					AddVehicleComponent(kocsi, 1046);
					AddVehicleComponent(kocsi, 1047);
					AddVehicleComponent(kocsi, 1049);
					AddVehicleComponent(kocsi, 1051);
					AddVehicleComponent(kocsi, 1054);
					AddVehicleComponent(kocsi, 1150);
					AddVehicleComponent(kocsi, 1153);
				}
		}
		if(CarInfo[vs][cTuning] == 2)
		{
				if(CarInfo[vs][cModel] == 560)
				{
					AddVehicleComponent(kocsi, 1029);
					AddVehicleComponent(kocsi, 1030);
					AddVehicleComponent(kocsi, 1031);
					AddVehicleComponent(kocsi, 1133);
					AddVehicleComponent(kocsi, 1139);
					AddVehicleComponent(kocsi, 1140);
					AddVehicleComponent(kocsi, 1170);
				}
				if(CarInfo[vs][cModel] == 562)
				{
					AddVehicleComponent(kocsi, 1035);
					AddVehicleComponent(kocsi, 1037);
					AddVehicleComponent(kocsi, 1039);
					AddVehicleComponent(kocsi, 1041);
					AddVehicleComponent(kocsi, 1146);
					AddVehicleComponent(kocsi, 1148);
					AddVehicleComponent(kocsi, 1172);
				}
				if(CarInfo[vs][cModel] == 559)
				{
					AddVehicleComponent(kocsi, 1066);
					AddVehicleComponent(kocsi, 1068);
					AddVehicleComponent(kocsi, 1070);
					AddVehicleComponent(kocsi, 1072);
					AddVehicleComponent(kocsi, 1158);
					AddVehicleComponent(kocsi, 1161);
					AddVehicleComponent(kocsi, 1173);
				}
				if(CarInfo[vs][cModel] == 558)
				{
					AddVehicleComponent(kocsi, 1089);
					AddVehicleComponent(kocsi, 1091);
					AddVehicleComponent(kocsi, 1093);
					AddVehicleComponent(kocsi, 1095);
					AddVehicleComponent(kocsi, 1163);
					AddVehicleComponent(kocsi, 1165);
					AddVehicleComponent(kocsi, 1167);
				}
				if(CarInfo[vs][cModel] == 561)
				{
					AddVehicleComponent(kocsi, 1057);
					AddVehicleComponent(kocsi, 1059);
					AddVehicleComponent(kocsi, 1050);
					AddVehicleComponent(kocsi, 1061);
					AddVehicleComponent(kocsi, 1063);
					AddVehicleComponent(kocsi, 1156);
					AddVehicleComponent(kocsi, 1157);
				}
				if(CarInfo[vs][cModel] == 565)
				{
					AddVehicleComponent(kocsi, 1045);
					AddVehicleComponent(kocsi, 1048);
					AddVehicleComponent(kocsi, 1050);
					AddVehicleComponent(kocsi, 1052);
					AddVehicleComponent(kocsi, 1053);
					AddVehicleComponent(kocsi, 1151);
					AddVehicleComponent(kocsi, 1152);
				}
		}
	}
	return 1;
}*/

/*public KocsiMatrica(kocsi)
{
	new vs = IsAVsKocsi(kocsi);
	new matrica = Matrica[vs];
	if(matrica != 3)
	{
		if(CarInfo[vs][cModel] == 536 || CarInfo[vs][cModel] == 535 || CarInfo[vs][cModel] == 534 || CarInfo[vs][cModel] == 560 || CarInfo[vs][cModel] == 562 || CarInfo[vs][cModel] == 559 || CarInfo[vs][cModel] == 558 || CarInfo[vs][cModel] == 561 || CarInfo[vs][cModel] == 565)
		{
			ChangeVehiclePaintjob(kocsi, matrica);
		}	
	}
}*/		

public VsTuningok()
{
	for(new x = 1; x < MAX_VEHICLES; x++)
	{
		new vs = IsAVsKocsi(x);
		if(vs != NINCS)
		{
			new kerek = CarInfo[vs][cKerek];
			/*new matrica = Matrica[x];
			if(matrica != 3)
			{
				if(CarInfo[vs][cModel] == 536 || CarInfo[vs][cModel] == 535 || CarInfo[vs][cModel] == 534 || CarInfo[vs][cModel] == 560 || CarInfo[vs][cModel] == 562 || CarInfo[vs][cModel] == 559 || CarInfo[vs][cModel] == 558 || CarInfo[vs][cModel] == 561 || CarInfo[vs][cModel] == 565)
				{
					ChangeVehiclePaintjob(x, matrica);
				}
			}*/
			if(kerek > 0)
			{
				AddVehicleComponent(x, kerek);
			}
			if(CarInfo[vs][cTuning] == 1)
			{
					if(CarInfo[vs][cModel] == 560)
					{
						AddVehicleComponent(x, 1026);
						AddVehicleComponent(x, 1027);
						AddVehicleComponent(x, 1032);
						AddVehicleComponent(x, 1169);
						AddVehicleComponent(x, 1138);
						AddVehicleComponent(x, 1141);
						AddVehicleComponent(x, 1028);
					}
					if(CarInfo[vs][cModel] == 562)
					{
						AddVehicleComponent(x, 1034);
						AddVehicleComponent(x, 1038);
						AddVehicleComponent(x, 1036);
						AddVehicleComponent(x, 1040);
						AddVehicleComponent(x, 1147);
						AddVehicleComponent(x, 1149);
						AddVehicleComponent(x, 1171);
					}
					if(CarInfo[vs][cModel] == 559)
					{
						AddVehicleComponent(x, 1065);
						AddVehicleComponent(x, 1067);
						AddVehicleComponent(x, 1069);
						AddVehicleComponent(x, 1071);
						AddVehicleComponent(x, 1159);
						AddVehicleComponent(x, 1160);
						AddVehicleComponent(x, 1162);
					}
					/*if(CarInfo[vs][cModel] == 560)
					{
						AddVehicleComponent(x, 1026);
						AddVehicleComponent(x, 1027);
						AddVehicleComponent(x, 1032);
						AddVehicleComponent(x, 1169);
						AddVehicleComponent(x, 1138);
						AddVehicleComponent(x, 1141);
						AddVehicleComponent(x, 1028);
					}*/
					if(CarInfo[vs][cModel] == 558)
					{
						AddVehicleComponent(x, 1088);
						AddVehicleComponent(x, 1090);
						AddVehicleComponent(x, 1092);
						AddVehicleComponent(x, 1094);
						AddVehicleComponent(x, 1164);
						AddVehicleComponent(x, 1166);
						AddVehicleComponent(x, 1168);
					}
					if(CarInfo[vs][cModel] == 561)
					{
						AddVehicleComponent(x, 1055);
						AddVehicleComponent(x, 1056);
						AddVehicleComponent(x, 1058);
						AddVehicleComponent(x, 1062);
						AddVehicleComponent(x, 1064);
						AddVehicleComponent(x, 1154);
						AddVehicleComponent(x, 1155);
					}
					if(CarInfo[vs][cModel] == 565)
					{
						AddVehicleComponent(x, 1046);
						AddVehicleComponent(x, 1047);
						AddVehicleComponent(x, 1049);
						AddVehicleComponent(x, 1051);
						AddVehicleComponent(x, 1054);
						AddVehicleComponent(x, 1150);
						AddVehicleComponent(x, 1153);
					}
			}
			if(CarInfo[vs][cTuning] == 2)
			{
					if(CarInfo[vs][cModel] == 560)
					{
						AddVehicleComponent(x, 1029);
						AddVehicleComponent(x, 1030);
						AddVehicleComponent(x, 1031);
						AddVehicleComponent(x, 1133);
						AddVehicleComponent(x, 1139);
						AddVehicleComponent(x, 1140);
						AddVehicleComponent(x, 1170);
					}
					if(CarInfo[vs][cModel] == 562)
					{
						AddVehicleComponent(x, 1035);
						AddVehicleComponent(x, 1037);
						AddVehicleComponent(x, 1039);
						AddVehicleComponent(x, 1041);
						AddVehicleComponent(x, 1146);
						AddVehicleComponent(x, 1148);
						AddVehicleComponent(x, 1172);
					}
					if(CarInfo[vs][cModel] == 559)
					{
						AddVehicleComponent(x, 1066);
						AddVehicleComponent(x, 1068);
						AddVehicleComponent(x, 1070);
						AddVehicleComponent(x, 1072);
						AddVehicleComponent(x, 1158);
						AddVehicleComponent(x, 1161);
						AddVehicleComponent(x, 1173);
					}
					if(CarInfo[vs][cModel] == 558)
					{
						AddVehicleComponent(x, 1089);
						AddVehicleComponent(x, 1091);
						AddVehicleComponent(x, 1093);
						AddVehicleComponent(x, 1095);
						AddVehicleComponent(x, 1163);
						AddVehicleComponent(x, 1165);
						AddVehicleComponent(x, 1167);
					}
					if(CarInfo[vs][cModel] == 561)
					{
						AddVehicleComponent(x, 1057);
						AddVehicleComponent(x, 1059);
						AddVehicleComponent(x, 1050);
						AddVehicleComponent(x, 1061);
						AddVehicleComponent(x, 1063);
						AddVehicleComponent(x, 1156);
						AddVehicleComponent(x, 1157);
					}
					if(CarInfo[vs][cModel] == 565)
					{
						AddVehicleComponent(x, 1045);
						AddVehicleComponent(x, 1048);
						AddVehicleComponent(x, 1050);
						AddVehicleComponent(x, 1052);
						AddVehicleComponent(x, 1053);
						AddVehicleComponent(x, 1151);
						AddVehicleComponent(x, 1152);
					}
			}
		}
	}

	return 1;
}

stock Time(mikell[])
{
	new masodperc, perc, ora, nap, honap, ev;
	new string[32];
	if(strcmp(mikell, "mp", true) == 0)
	{
		gettime(ora, perc, masodperc);
		if(masodperc < 10)
			format(string, sizeof(string), "0%d", masodperc);
		else
			format(string, sizeof(string), "%d", masodperc);
	}

	else if(strcmp(mikell, "perc", true) == 0)
	{
		gettime(ora, perc, masodperc);
		if(perc < 10)
			format(string, sizeof(string), "0%d", perc);
		else
			format(string, sizeof(string), "%d", perc);
	}

	else if(strcmp(mikell, "ora", true) == 0)
	{
		gettime(ora, perc, masodperc);
		if(ora < 10)
			format(string, sizeof(string), "0%d", ora);
		else
			format(string, sizeof(string), "%d", ora);
	}

	else if(strcmp(mikell, "nap", true) == 0)
	{
		getdate(ev, honap, nap);
		if(nap < 10)
			format(string, sizeof(string), "0%d", nap);
		else
			format(string, sizeof(string), "%d", nap);
	}

	else if(strcmp(mikell, "honap", true) == 0)
	{
		getdate(ev, honap, nap);
		if(honap < 10)
			format(string, sizeof(string), "0%d", honap);
		else
			format(string, sizeof(string), "%d", honap);
	}

	else if(strcmp(mikell, "ev", true) == 0)
	{
		getdate(ev, honap, nap);
		format(string, sizeof(string), "%d", ev);
	}

	return string;
}

stock IsPlayerName(playerid, nev[])
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	if(!strcmp(nev, name, false)) return 1;
	return 0;
}

stock PlayerName(playerid)
{
	new nev[MAX_PLAYER_NAME];
	strmid(nev, PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), 25);
	return nev;
}

stock PlayerNameEx(playerid)
{
	new nev[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nev, sizeof(nev));
	return nev;
}

stock PlayerNameGet(playerid)
{
	new nev[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nev, sizeof(nev));
	strmid(PlayerInfo[playerid][pNev], nev, 0, strlen(nev), 25);
	return 1;
}

stock PlayerIP(playerid)
{
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

public Restart()
{
	SendRconCommand("gmx");
	return 1;
}

public Stop()
{
	SendRconCommand("exit");
	return 1;
}


public PenzCheck(playerid, uj, regi, penzmozgas, minusz)
{
	if(!IsPlayerConnected(playerid)) return 1;

	if(minusz == 1)
	{
		if((regi - penzmozgas) != uj)
		{
			new nev[MAX_PLAYER_NAME], uzi[128];
			GetPlayerName(playerid, nev, sizeof(nev));
			ABroadCast(COLOR_LIGHTRED, "============== ADMIN FIGYELMEZTETÉS! ==============", 1);
			format(uzi, sizeof(uzi), "%s kivett a számlájára %dFtot, de nem változott a pénzze!", nev, penzmozgas);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
			format(uzi, sizeof(uzi), "%dFtot vett ki, régi pénzze: %dFt, új pénzze %dFt | Ennyinek kellene lenni: %d", penzmozgas, regi, uj);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
		}
	}
	else
	{
		if((regi + penzmozgas) != uj)
		{
			new nev[MAX_PLAYER_NAME], uzi[128];
			GetPlayerName(playerid, nev, sizeof(nev));
			ABroadCast(COLOR_LIGHTRED, "============== ADMIN FIGYELMEZTETÉS! ==============", 1);
			format(uzi, sizeof(uzi), "%s betett a számlájára %dFtot, de nem változott a pénzze!", nev, penzmozgas);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
			format(uzi, sizeof(uzi), "%dFtot rakott be, régi pénzze: %dFt, új pénzze %dFt", penzmozgas, regi, uj);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
		}
	}
	return 1;
}

/*public LoadBandaSzef()
{
	new arrCoords[45][62];
	new strFromFile2[512];
	new File: file = fopen("Config/bandaszef.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		bandaszef[ballaspenz] = strval(arrCoords[0]);
		bandaszef[ballasmati] = strval(arrCoords[1]);
		bandaszef[ballasmarihuana] = strval(arrCoords[2]);
		bandaszef[ballasheroin] = strval(arrCoords[3]);
		bandaszef[ballaskokain] = strval(arrCoords[4]);
        bandaszef[vagospenz] = strval(arrCoords[5]);
		bandaszef[vagosmati] = strval(arrCoords[6]);
		bandaszef[vagosmarihuana] = strval(arrCoords[7]);
		bandaszef[vagosheroin] = strval(arrCoords[8]);
		bandaszef[vagoskokain] = strval(arrCoords[9]);
		bandaszef[scupenz] = strval(arrCoords[10]);
		bandaszef[scumati] = strval(arrCoords[11]);
		bandaszef[scumarihuana] = strval(arrCoords[12]);
		bandaszef[scuheroin] = strval(arrCoords[13]);
		bandaszef[scukokain] = strval(arrCoords[14]);
        bandaszef[jokaspenz] = strval(arrCoords[15]);
		bandaszef[jokasmati] = strval(arrCoords[16]);
		bandaszef[jokasmarihuana] = strval(arrCoords[17]);
		bandaszef[jokasheroin] = strval(arrCoords[18]);
		bandaszef[jokaskokain] = strval(arrCoords[19]);
        bandaszef[aztecaspenz] = strval(arrCoords[20]);
		bandaszef[aztecasmati] = strval(arrCoords[21]);
		bandaszef[aztecasmarihuana] = strval(arrCoords[22]);
		bandaszef[aztecasheroin] = strval(arrCoords[23]);
		bandaszef[aztecaskokain] = strval(arrCoords[24]);
		bandaszef[tggpenz] = strval(arrCoords[25]);
		bandaszef[tggmati] = strval(arrCoords[26]);
		bandaszef[tggmarihuana] = strval(arrCoords[27]);
		bandaszef[tggheroin] = strval(arrCoords[28]);
		bandaszef[tggkokain] = strval(arrCoords[29]);
		bandaszef[yakuzapenz] = strval(arrCoords[30]);
		bandaszef[yakuzamati] = strval(arrCoords[31]);
		bandaszef[yakuzamarihuana] = strval(arrCoords[32]);
		bandaszef[yakuzaheroin] = strval(arrCoords[33]);
		bandaszef[yakuzakokain] = strval(arrCoords[34]);
		bandaszef[dcortezpenz] = strval(arrCoords[35]);
		bandaszef[dcortezmati] = strval(arrCoords[36]);
		bandaszef[dcortezmarihuana] = strval(arrCoords[37]);
		bandaszef[dcortezheroin] = strval(arrCoords[38]);
		bandaszef[dcortezkokain] = strval(arrCoords[39]);
		bandaszef[osfpenz] = strval(arrCoords[40]);
		bandaszef[osfmati] = strval(arrCoords[41]);
		bandaszef[osfmarihuana] = strval(arrCoords[42]);
		bandaszef[osfheroin] = strval(arrCoords[43]);
		bandaszef[osfkokain] = strval(arrCoords[44]);
		fclose(file);
	}
	return 1;
}
public SaveBandaSzef()
{
	new coordsstring[512];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,\n%d,%d,%d,%d,%d,\n%d,%d,%d,%d,%d,\n%d,%d,%d,%d,%d,\n%d,%d,%d,%d,%d,\n%d,%d,%d,%d,%d,\n%d,%d,%d,%d,%d,\n%d,%d,%d,%d,%d,\n%d,%d,%d,%d,%d",
	bandaszef[ballaspenz],
	bandaszef[ballasmati],
	bandaszef[ballasmarihuana],
	bandaszef[ballasheroin],
	bandaszef[ballaskokain],
	bandaszef[vagospenz],
	bandaszef[vagosmati],
	bandaszef[vagosmarihuana],
	bandaszef[vagosheroin],
	bandaszef[vagoskokain],
	bandaszef[scupenz],
	bandaszef[scumati],
	bandaszef[scumarihuana],
	bandaszef[scuheroin],
	bandaszef[scukokain],
	bandaszef[jokaspenz],
	bandaszef[jokasmati],
	bandaszef[jokasmarihuana],
	bandaszef[jokasheroin],
	bandaszef[jokaskokain],
	bandaszef[aztecaspenz],
	bandaszef[aztecasmati],
	bandaszef[aztecasmarihuana],
	bandaszef[aztecasheroin],
	bandaszef[aztecaskokain],
	bandaszef[tggpenz],
	bandaszef[tggmati],
	bandaszef[tggmarihuana],
	bandaszef[tggheroin],
	bandaszef[tggkokain],
	bandaszef[yakuzapenz],
	bandaszef[yakuzamati],
	bandaszef[yakuzamarihuana],
	bandaszef[yakuzaheroin],
	bandaszef[yakuzakokain],
	bandaszef[dcortezpenz],
	bandaszef[dcortezmati],
	bandaszef[dcortezmarihuana],
	bandaszef[dcortezheroin],
	bandaszef[dcortezkokain],
	bandaszef[osfpenz],
	bandaszef[osfmati],
	bandaszef[osfmarihuana],
	bandaszef[osfheroin],
	bandaszef[osfkokain]);
	new File: file2 = fopen("Config/bandaszef.ini", io_write);
	fwrite(file2, coordsstring);

	fclose(file2);
	return 1;
}*/

public MunkaCheckpointCheck(playerid)
{
	if(AMT(playerid, MUNKA_UTTISZTITO) && Munkaban[playerid] == MUNKA_UTTISZTITO)
	{
		if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Uttisztito"))
		{
			new Float:r_x, Float:r_y, Float:r_z;
			new csekkpont = MunkaCheckpoint[playerid];
			r_x = UttisztitoCheckpointok[csekkpont][0];
			r_y = UttisztitoCheckpointok[csekkpont][1];
			r_z = UttisztitoCheckpointok[csekkpont][2];

			if(PlayerToPoint(15, playerid, r_x, r_y, r_z))
			{
				new Float:tavolsag, fizetes, Float:px, Float:py, Float:pz;
				new string[60];

				if(MunkaCheckpoint2[playerid] == NINCS)
				{
					px = MunkaStarthely[playerid][0];
					py = MunkaStarthely[playerid][1];
					pz = MunkaStarthely[playerid][2];
				}
				else
				{
					px = UttisztitoCheckpointok[MunkaCheckpoint2[playerid]][0];
					py = UttisztitoCheckpointok[MunkaCheckpoint2[playerid]][1];
					pz = UttisztitoCheckpointok[MunkaCheckpoint2[playerid]][2];
				}

				tavolsag = GetDistance(r_x, r_y, r_z, px, py, pz);
				new plusz;
				plusz = 1 + PlayerInfo[playerid][pConnectTime] / 100;
				fizetes = floatround(tavolsag * plusz);
				PlayerInfo[playerid][pPayCheck] += fizetes;

				format(string, sizeof(string), "~g~~h~+%dFt", fizetes);
				GameTextForPlayer(playerid, string, 5000, 1);

				MunkaCheckpoint2[playerid] = MunkaCheckpoint[playerid];
				MunkaCheckpoint[playerid] = random(sizeof(UttisztitoCheckpointok));

				while(MunkaCheckpoint2[playerid] == MunkaCheckpoint[playerid])
					MunkaCheckpoint[playerid] = random(sizeof(UttisztitoCheckpointok));

				new Float:x, Float:y, Float:z;
				x = UttisztitoCheckpointok[MunkaCheckpoint[playerid]][0];
				y = UttisztitoCheckpointok[MunkaCheckpoint[playerid]][1];
				z = UttisztitoCheckpointok[MunkaCheckpoint[playerid]][2];

				SetPlayerCheckpoint(playerid, x, y, z, 5);
			}
		}
	}
    else
	if(AMT(playerid, MUNKA_KUKAS) && Munkaban[playerid] == MUNKA_KUKAS)
	{
		if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Kukas"))
		{
			new Float:r_x, Float:r_y, Float:r_z;
			new csekkpont = MunkaCheckpoint[playerid];
			r_x = KukasCheckpointok[csekkpont][0];
			r_y = KukasCheckpointok[csekkpont][1];
			r_z = KukasCheckpointok[csekkpont][2];

			if(PlayerToPoint(15, playerid, r_x, r_y, r_z))
			{
				new Float:tavolsag, fizetes, Float:px, Float:py, Float:pz;
				new string[60];

				if(MunkaCheckpoint2[playerid] == NINCS)
				{
					px = MunkaStarthely[playerid][0];
					py = MunkaStarthely[playerid][1];
					pz = MunkaStarthely[playerid][2];
				}
				else
				{
					px = KukasCheckpointok[MunkaCheckpoint2[playerid]][0];
					py = KukasCheckpointok[MunkaCheckpoint2[playerid]][1];
					pz = KukasCheckpointok[MunkaCheckpoint2[playerid]][2];
				}

				tavolsag = GetDistance(r_x, r_y, r_z, px, py, pz);
				new plusz;
				plusz = 1 + PlayerInfo[playerid][pConnectTime] / 100;
				fizetes = floatround(tavolsag * plusz);
				PlayerInfo[playerid][pPayCheck] += fizetes;

				format(string, sizeof(string), "~g~~h~+%dFt", fizetes);
				GameTextForPlayer(playerid, string, 5000, 1);

				MunkaCheckpoint2[playerid] = MunkaCheckpoint[playerid];
				MunkaCheckpoint[playerid] = random(sizeof(KukasCheckpointok));

				while(MunkaCheckpoint2[playerid] == MunkaCheckpoint[playerid])
					MunkaCheckpoint[playerid] = random(sizeof(KukasCheckpointok));

				new Float:x, Float:y, Float:z;
				x = KukasCheckpointok[MunkaCheckpoint[playerid]][0];
				y = KukasCheckpointok[MunkaCheckpoint[playerid]][1];
				z = KukasCheckpointok[MunkaCheckpoint[playerid]][2];

				SetPlayerCheckpoint(playerid, x, y, z, 5);
			}
		}
	}
	else
	if(AMT(playerid, MUNKA_FUNYIRO) && Munkaban[playerid] == MUNKA_FUNYIRO)
	{
		if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Funyiro"))
		{
			new Float:r_x, Float:r_y, Float:r_z;
			new csekkpont = MunkaCheckpoint[playerid];
			r_x = FunyiroCheckpointok[csekkpont][0];
			r_y = FunyiroCheckpointok[csekkpont][1];
			r_z = FunyiroCheckpointok[csekkpont][2];

			if(PlayerToPoint(15, playerid, r_x, r_y, r_z))
			{
				new Float:tavolsag, fizetes, Float:px, Float:py, Float:pz;
				new string[60];

				if(MunkaCheckpoint2[playerid] == NINCS)
				{
					px = MunkaStarthely[playerid][0];
					py = MunkaStarthely[playerid][1];
					pz = MunkaStarthely[playerid][2];
				}
				else
				{
					px = FunyiroCheckpointok[MunkaCheckpoint2[playerid]][0];
					py = FunyiroCheckpointok[MunkaCheckpoint2[playerid]][1];
					pz = FunyiroCheckpointok[MunkaCheckpoint2[playerid]][2];
				}

				tavolsag = GetDistance(r_x, r_y, r_z, px, py, pz);
				new plusz;
				plusz = 1 + PlayerInfo[playerid][pConnectTime] / 100;
				fizetes = floatround(tavolsag * plusz);
				PlayerInfo[playerid][pPayCheck] += fizetes;

				format(string, sizeof(string), "~g~~h~+%dFt", fizetes);
				GameTextForPlayer(playerid, string, 5000, 1);

				MunkaCheckpoint2[playerid] = MunkaCheckpoint[playerid];
				MunkaCheckpoint[playerid] = random(sizeof(FunyiroCheckpointok));

				while(MunkaCheckpoint2[playerid] == MunkaCheckpoint[playerid])
					MunkaCheckpoint[playerid] = random(sizeof(FunyiroCheckpointok));

				new Float:x, Float:y, Float:z;
				x = FunyiroCheckpointok[MunkaCheckpoint[playerid]][0];
				y = FunyiroCheckpointok[MunkaCheckpoint[playerid]][1];
				z = FunyiroCheckpointok[MunkaCheckpoint[playerid]][2];

				SetPlayerCheckpoint(playerid, x, y, z, 5);
			}
		}
	}
	else
	if(AMT(playerid, MUNKA_FARMER) && Munkaban[playerid] == MUNKA_FARMER)
	{
		if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Farmer"))
		{
			new Float:r_x, Float:r_y, Float:r_z;
			new csekkpont = MunkaCheckpoint[playerid];
			r_x = FarmerCheckpointok[csekkpont][0];
			r_y = FarmerCheckpointok[csekkpont][1];
			r_z = FarmerCheckpointok[csekkpont][2];

			if(PlayerToPoint(15, playerid, r_x, r_y, r_z))
			{
				new Float:tavolsag, fizetes, Float:px, Float:py, Float:pz;
				new string[60];

				if(MunkaCheckpoint2[playerid] == NINCS)
				{
					px = MunkaStarthely[playerid][0];
					py = MunkaStarthely[playerid][1];
					pz = MunkaStarthely[playerid][2];
				}
				else
				{
					px = FarmerCheckpointok[MunkaCheckpoint2[playerid]][0];
					py = FarmerCheckpointok[MunkaCheckpoint2[playerid]][1];
					pz = FarmerCheckpointok[MunkaCheckpoint2[playerid]][2];
				}

				tavolsag = GetDistance(r_x, r_y, r_z, px, py, pz);
				new plusz;
				plusz = 1 + PlayerInfo[playerid][pConnectTime] / 100;
				fizetes = floatround(tavolsag * 2 * plusz);
				PlayerInfo[playerid][pPayCheck] += fizetes;

				format(string, sizeof(string), "~g~~h~+%dFt", fizetes);
				GameTextForPlayer(playerid, string, 5000, 1);

				MunkaCheckpoint2[playerid] = MunkaCheckpoint[playerid];
				MunkaCheckpoint[playerid] = random(sizeof(FarmerCheckpointok));

				while(MunkaCheckpoint2[playerid] == MunkaCheckpoint[playerid])
					MunkaCheckpoint[playerid] = random(sizeof(FarmerCheckpointok));

				new Float:x, Float:y, Float:z;
				x = FarmerCheckpointok[MunkaCheckpoint[playerid]][0];
				y = FarmerCheckpointok[MunkaCheckpoint[playerid]][1];
				z = FarmerCheckpointok[MunkaCheckpoint[playerid]][2];

				SetPlayerCheckpoint(playerid, x, y, z, 5);
			}
		}
	}

}

public PenzUpdate()
{
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if(IsPlayerConnected(playerid) && Conn[playerid] == 1)
		{
			new string[32], penz = GetMoney(playerid);
			if(penz != Money[playerid] && penz != 0)
			{

				if(penz > 0 && penz <= 99999999)
				{
					if(penz < 10)
						format(string, sizeof(string), "~g~0000000%iFt", penz);

					else if(penz <= 99)
						format(string, sizeof(string), "~g~000000%iFt", penz);

					else if(penz <= 999)
						format(string, sizeof(string), "~g~00000%iFt", penz);

					else if(penz <= 9999)
						format(string, sizeof(string), "~g~0000%iFt", penz);

					else if(penz <= 99999)
						format(string, sizeof(string), "~g~000%iFt", penz);

					else if(penz <= 999999)
						format(string, sizeof(string), "~g~00%iFt", penz);

					else if(penz <= 9999999)
						format(string, sizeof(string), "~g~0%iFt", penz);

					else if(penz <= 99999999)
						format(string, sizeof(string), "~g~%iFt", penz);
				}

				else if(penz < 0 && penz >= -99999999)
				{
					new TheNewMoney = penz * -1;

					if(penz > -10)
						format(string, sizeof(string), "~r~-0000000%iFt", TheNewMoney);

					else if(penz >= -99)
						format(string, sizeof(string), "~r~-000000%iFt", TheNewMoney);

					else if(penz >= -999)
						format(string, sizeof(string), "~r~-00000%iFt", TheNewMoney);

					else if(penz >= -9999)
						format(string, sizeof(string), "~r~-0000%iFt", TheNewMoney);

					else if(penz >= -99999)
						format(string, sizeof(string), "~r~-000%iFt", TheNewMoney);

					else if(penz >= -999999)
						format(string, sizeof(string), "~r~-00%iFt", TheNewMoney);

					else if(penz >= -9999999)
						format(string, sizeof(string), "~r~-0%iFt", TheNewMoney);

					else if(penz >= -99999999)
						format(string, sizeof(string), "~r~-%iFt", TheNewMoney);
				}
				TextDrawSetString(MoneyTxt[playerid], string);
			}

			if(CurCol[playerid] != 1 && penz >= 20000) // You can change the default >= and 20000 to whatever you wish.  This means if they have 20000 or greater cash their money will be the color green.
			{
				CurCol[playerid] = 1;
				TextDrawHideForPlayer(playerid,MoneyTxt[playerid]);
				TextDrawColor(MoneyTxt[playerid],COLOR_GreenMoney);
				TextDrawShowForPlayer(playerid,MoneyTxt[playerid]);
			}
			else if(CurCol[playerid] != 3 && penz < 0) // You can change the default < and 0 to whatever you wish.  This means if they have less than 0 cash (negative cash) their money will be the color red.
			{
				CurCol[playerid] = 3;
				TextDrawHideForPlayer(playerid,MoneyTxt[playerid]);
				TextDrawColor(MoneyTxt[playerid],COLOR_RedMoney);
				TextDrawShowForPlayer(playerid,MoneyTxt[playerid]);
			}
			else if(CurCol[playerid] != 2 && penz < 20000 && penz > 0) // You can change the default < and 20000 to whatever you wish.  This means if they have less than 20000 cash their money will be the color yellow.
			{
				CurCol[playerid] = 2;
				TextDrawHideForPlayer(playerid,MoneyTxt[playerid]);
				TextDrawColor(MoneyTxt[playerid],COLOR_YellowMoney);
				TextDrawShowForPlayer(playerid,MoneyTxt[playerid]);
			}
			if(CurCol[playerid] != 4 && penz == 0)
			{
				CurCol[playerid] = 4;
				TextDrawHideForPlayer(playerid,MoneyTxt[playerid]);
				TextDrawColor(MoneyTxt[playerid],COLOR_GreyMoney);
				TextDrawShowForPlayer(playerid,MoneyTxt[playerid]);
				TextDrawSetString(MoneyTxt[playerid], "~g~00000000Ft");
			}
			Money[playerid] = GetMoney(playerid);
		}
	}
}

public Munkaruha(playerid, ruha)
{
	if(ruha == 1)
		SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	else
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
}

public DutyFegyverekBeallitasa(playerid)
{
	if(LMT(playerid, LMUNKA_SCPD))
	{
		new deagle;
		new mp5;
		new m4;
		new shotgun;
		if(FrakcioInfo[LMUNKA_SCPD][fDeagle] != 0) deagle = 1;
		if(FrakcioInfo[LMUNKA_SCPD][fMp5] != 0) mp5 = 1;
		if(FrakcioInfo[LMUNKA_SCPD][fM4] != 0) m4 = 1;
		if(FrakcioInfo[LMUNKA_SCPD][fShotgun] != 0) shotgun = 1;
		if(PlayerInfo[playerid][pRank] == 0)
		{
			if(FrakcioInfo[LMUNKA_SCPD][fDeagle] == 0)
			{
				Msg(playerid, "Nincs deagle raktáron!");
				GiveWeapon(playerid, 3, 1);
				GiveWeapon(playerid, 46, 1000);
				SetPlayerArmour(playerid, 100);
			}
			else
			{
				SetPlayerArmour(playerid, 100);
				GiveWeapon(playerid, 3, 1);
				GiveWeapon(playerid, 46, 1000);
				GiveWeapon(playerid, 24, 70);
			}
		}
		else if(PlayerInfo[playerid][pRank] > 0 && PlayerInfo[playerid][pRank] < 4)
		{
			if(deagle == 1)
				GiveWeapon(playerid, 24, 100);
			if(mp5 == 1)
				GiveWeapon(playerid, 29, 300);
			GiveWeapon(playerid, 3, 1);
			GiveWeapon(playerid, 46, 1000);
			SetPlayerArmour(playerid, 100);
			if(deagle == 0)
				Msg(playerid, "Nincs deagle raktáron!");
			if(mp5 == 0)
				Msg(playerid, "Nincs mp5 raktáron!");

		}
		else if(PlayerInfo[playerid][pRank] > 3 && PlayerInfo[playerid][pRank] < 8)
		{
			if(deagle == 1)
				GiveWeapon(playerid, 24, 100);
			if(mp5 == 1)
				GiveWeapon(playerid, 29, 300);
			if(m4 == 1)
				GiveWeapon(playerid, 31, 200);
			GiveWeapon(playerid, 3, 1);
			GiveWeapon(playerid, 46, 1000);
			SetPlayerArmour(playerid, 100);
			if(deagle == 0)
				Msg(playerid, "Nincs deagle raktáron!");
			if(mp5 == 0)
				Msg(playerid, "Nincs mp5 raktáron!");
			if(m4 == 0)
				Msg(playerid, "Nincs M4 raktáron!");
		}
		else if(PlayerInfo[playerid][pRank] > 7)
		{
			if(deagle == 1)
				GiveWeapon(playerid, 24, 100);
			if(mp5 == 1)
				GiveWeapon(playerid, 29, 300);
			if(m4 == 1)
				GiveWeapon(playerid, 31, 200);
			if(shotgun == 1)
				GiveWeapon(playerid, 25, 100);
			GiveWeapon(playerid, 3, 1);
			GiveWeapon(playerid, 46, 1000);
			SetPlayerArmour(playerid, 100);
			if(deagle == 0)
				Msg(playerid, "Nincs deagle raktáron!");
			if(mp5 == 0)
				Msg(playerid, "Nincs mp5 raktáron!");
			if(m4 == 0)
				Msg(playerid, "Nincs M4 raktáron!");
			if(shotgun == 0)
				Msg(playerid, "Nincs shotgun raktáron!");
		}
		if((PlayerInfo[playerid][pKotszer] + 10) < MAXKOTSZER) PlayerInfo[playerid][pKotszer] += 10;
	}
	else if(LMT(playerid, LMUNKA_FBI))
	{
	    GiveWeapon(playerid, 3, 1);
	    GiveWeapon(playerid, 17, 15);
	    SetPlayerArmour(playerid, 100);
		GiveWeapon(playerid, 24, 300);
	    GiveWeapon(playerid, 29, 400);
	    GiveWeapon(playerid, 31, 350);
	    GiveWeapon(playerid, 41, 2000);
		
		if(PlayerInfo[playerid][pRank] != 0)
			GiveWeapon(playerid, 34, 150);
		
		if(PlayerInfo[playerid][pRank] != 0 && PlayerInfo[playerid][pRank] != 7)
			GiveWeapon(playerid, 27, 100);
			
		if(PlayerInfo[playerid][pRank] == 7)
			GiveWeapon(playerid, 25, 100);
		
	    if((PlayerInfo[playerid][pKotszer] + 10) < MAXKOTSZER) PlayerInfo[playerid][pKotszer] += 10;
	}
	else if(LMT(playerid, LMUNKA_KATONA))
	{
		if(PlayerInfo[playerid][pRank] == 0)
		{
			GiveWeapon(playerid, 3, 1);
			GiveWeapon(playerid, 22, 100);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 1)
		{
			GiveWeapon(playerid, 3, 1);
			GiveWeapon(playerid, 23, 100);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 2)
		{
			GiveWeapon(playerid, 3, 1);
			GiveWeapon(playerid, 23, 100);
			GiveWeapon(playerid, 29, 300);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 3)
		{
			GiveWeapon(playerid, 3, 1);
			GiveWeapon(playerid, 24, 100);
			GiveWeapon(playerid, 29, 400);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 4)
		{
			GiveWeapon(playerid, 3, 1);
			GiveWeapon(playerid, 24, 100);
			GiveWeapon(playerid, 29, 500);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 5)
		{
			GiveWeapon(playerid, 4, 1);
			GiveWeapon(playerid, 24, 100);
			GiveWeapon(playerid, 25, 30);
			GiveWeapon(playerid, 29, 700);
			GiveWeapon(playerid, 30, 300);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 6)
		{
			GiveWeapon(playerid, 4, 1);
			GiveWeapon(playerid, 24, 100);
			GiveWeapon(playerid, 25, 50);
			GiveWeapon(playerid, 29, 700);
			GiveWeapon(playerid, 30, 300);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 7)
		{
			GiveWeapon(playerid, 4, 1);
			GiveWeapon(playerid, 24, 100);
			GiveWeapon(playerid, 25, 100);
			GiveWeapon(playerid, 29, 700);
			GiveWeapon(playerid, 30, 300);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 8)
		{
			GiveWeapon(playerid, 4, 1);
			GiveWeapon(playerid, 17, 10);
			GiveWeapon(playerid, 24, 100);
			GiveWeapon(playerid, 25, 150);
			GiveWeapon(playerid, 29, 700);
			GiveWeapon(playerid, 31, 300);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 9)
		{
			GiveWeapon(playerid, 4, 1);
			GiveWeapon(playerid, 17, 10);
			GiveWeapon(playerid, 24, 100);
			GiveWeapon(playerid, 25, 150);
			GiveWeapon(playerid, 29, 700);
			GiveWeapon(playerid, 31, 300);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 10)
		{
			GiveWeapon(playerid, 4, 1);
			GiveWeapon(playerid, 17, 10);
			GiveWeapon(playerid, 24, 100);
			GiveWeapon(playerid, 27, 50);
			GiveWeapon(playerid, 29, 700);
			GiveWeapon(playerid, 31, 300);
			GiveWeapon(playerid, 33, 30);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 11)
		{
			GiveWeapon(playerid, 4, 1);
			GiveWeapon(playerid, 17, 20);
			GiveWeapon(playerid, 24, 100);
			GiveWeapon(playerid, 27, 75);
			GiveWeapon(playerid, 29, 700);
			GiveWeapon(playerid, 31, 300);
			GiveWeapon(playerid, 34, 40);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] == 12)
		{
			GiveWeapon(playerid, 4, 1);
			GiveWeapon(playerid, 16, 20);
			GiveWeapon(playerid, 24, 100);
			GiveWeapon(playerid, 27, 75);
			GiveWeapon(playerid, 29, 700);
			GiveWeapon(playerid, 31, 300);
			GiveWeapon(playerid, 34, 50);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
	    if((PlayerInfo[playerid][pKotszer] + 10) < MAXKOTSZER) PlayerInfo[playerid][pKotszer] += 10;
	}
	else if(LMT(playerid, LMUNKA_SFPD))
	{
	    GiveWeapon(playerid, 3, 1);
	    GiveWeapon(playerid, 24, 200);
	    if((PlayerInfo[playerid][pKotszer] + 10) < MAXKOTSZER) PlayerInfo[playerid][pKotszer] += 10;
	}
	else if(LMT(playerid, LMUNKA_VPOP))
	{
	    GiveWeapon(playerid, 3, 1);
	    SetPlayerArmour(playerid, 100);
		if(FrakcioInfo[LMUNKA_VPOP][fDeagle] > 0)
			GiveWeapon(playerid, 24, 200);
		GiveWeapon(playerid, 17, 50);
		if(FrakcioInfo[LMUNKA_VPOP][fMp5] > 0)
	    GiveWeapon(playerid, 29, 300);
	    GiveWeapon(playerid, 41, 1000);
	    if((PlayerInfo[playerid][pKotszer] + 10) < MAXKOTSZER) PlayerInfo[playerid][pKotszer] += 10;
	}
	else if(LMT(playerid, LMUNKA_OKTATO))
	{
		SetHealth(playerid, 100);
		if(PlayerInfo[playerid][pRank] == 0)
		{
	      GiveWeapon(playerid, 41, 5000);
		}
	}
	else if(LMT(playerid, LMUNKA_ONKORMANYZAT))
	{
	    GiveWeapon(playerid, 3, 1);
	    SetHealth(playerid, 100);
		SetPlayerArmour(playerid, 100);
		GiveWeapon(playerid, 24, 200);
	    GiveWeapon(playerid, 29, 300);
	    GiveWeapon(playerid, 41, 5000);
	}
	return 1;
}

public RosszValasz(playerid)
{
	RosszValaszok[playerid]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "Rossz válasz!");
	if(RosszValaszok[playerid] >= MAXROSSZVALASZ)
	{
	    new string[128], giveplayer[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
		format(string, sizeof(string), "[Gates]: %s kirúgva a rendszer által | Oka: Sikertelen teszt", giveplayer);
		ABroadCast(COLOR_LIGHTRED, string, 1);
	    SendClientMessage(playerid, COLOR_ORANGE, "Túl sok dolgot nem tudtál! Olvasgass a neten és próbáld meg újra!");
		Kick(playerid);
	}
	return 1;
}

public UjMunka(playerid, munkaszama, munka)
{
	if(munkaszama == 1)
		PlayerInfo[playerid][pJob1] = munka;
	else
    	PlayerInfo[playerid][pJob2] = munka;

	return 1;
}

public MunkaLeader(playerid, munka)
{
	//Leaderes melók
	if(PlayerInfo[playerid][pLeader] == munka)
		return 1;

	return 0;
}

public LMT(playerid, munka)
{
	if(PlayerInfo[playerid][pLeader] == munka || PlayerInfo[playerid][pMember] == munka)
		return 1;

	return 0;
}

public AMT(playerid, munka)
{
	if(PlayerInfo[playerid][pJob1] == munka || PlayerInfo[playerid][pJob2] == munka)
		return 1;

	return 0;
}

public Munkarang(playerid, rang)
{
	if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
	{
	    if(PlayerInfo[playerid][pRank] >= rang)
	        return 1;
	}

	return 0;
}

public SajatKocsi(id, kocsi)
{
	if(IsPlayerConnected(id))
	{
		if(kocsi >= LKocsik[0][0] && kocsi <= LKocsik[23][1])
			return 1;

		if(PlayerInfo[id][pPcarkey] != NINCS)
			if(kocsi == CarInfo[PlayerInfo[id][pPcarkey]][cId])
				return 1;
				
		if(PlayerInfo[id][pPcarkey2] != NINCS)
			if(kocsi == CarInfo[PlayerInfo[id][pPcarkey2]][cId])
				return 1;

		if(kocsi == HireCar[id])
		    return 1;

		if(IsKocsi(kocsi, "prod") || IsKocsi(kocsi, "uttisztito") || IsKocsi(kocsi, "Kamion") || IsKocsi(kocsi, "Farmer")  || IsKocsi(kocsi, "Funyiro") || IsKocsi(kocsi,"Kukas") || IsKocsi(kocsi, "Szerelo") || IsKocsi(kocsi, "Busz") || IsKocsi(kocsi, "Szabad"))
			return 1;

		if(kocsi > UtolsoKocsi)
		    return 1;

		if(Lefoglalt[id] == 1)
			return 1;

		if(JarmuKulcs[id] == kocsi)
			return 1;
	}
	return 0;
}

Nincsbelepve(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(!Logged(playerid))
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Elõbb lépj be! ( /login )");
		    return 1;
  		}
	}
	return 0;
}

stock UjKocsi(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:angle, color1, color2)
{
	new id;
	if(!ModBetoltve)
		id = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 60000);
	else
		id = CreateVehicle(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 60000);
	
	switch(modelid)
	{
		case 427, 428, 432: { SetVehicleHealth(id, 20000.0); printf("ID %d 20000 HP!", id); }
	}
	
	KocsiSzinek[id][0] = color1;
	KocsiSzinek[id][1] = color2;
	KocsiRendszam(id);
	return id;
}

stock UjPickup(pickup, tipus, Float:spawn_x, Float:spawn_y, Float:spawn_z, VirtualWorld = -1)
{
	new id;
	id = CreateDynamicPickup(pickup, tipus, spawn_x, spawn_y, spawn_z, VirtualWorld);
	return id;
}

stock IsVehicleConnected(vehicleid) //By Sacky (edited by Gabriel "Larcius" Cordes)
{
	new Float:x1,Float:y1,Float:z1;
	GetVehiclePos(vehicleid,x1,y1,z1);
	if(x1==0.0 && y1==0.0 && z1==0.0)
	{
		return 0;
	}
	return 1;
}

stock Float:GetDistanceToVehicle(playerid,vehicleid) //By Darkrealm (Edited by Sacky and Gabriel "Larcius" Cordes)
{
	if (IsPlayerConnected(playerid) && IsVehicleConnected(vehicleid))
	{
		new Float:x1,Float:y1,Float:z1;
		GetVehiclePos(vehicleid,x1,y1,z1);
		return GetDistanceToPoint(playerid,x1,y1,z1);
	}
	return INF_FLOAT;
}

stock Float:GetDistanceToCar(playerid,vehicleid) //By Darkrealm (Edited by Sacky and Gabriel "Larcius" Cordes)
{
	return GetDistanceToVehicle(playerid,vehicleid);
}

stock GetClosestVehicle(playerid, benneulcheck = true)
{
	#define ALAPKOCSI 1

	new kocsi = NINCS, kocsibaul;
	if(IsPlayerInAnyVehicle(playerid)) kocsibaul = GetPlayerVehicleID(playerid);
	if(benneulcheck && kocsibaul > 0) kocsi = kocsibaul;
	
	if(kocsi != NINCS)
		return kocsi;
	
	if(IsPlayerConnected(playerid) && IsVehicleConnected(ALAPKOCSI))
	{
		new closestvehicle=ALAPKOCSI;
		new Float:closestdist = 9999.0, Float:dist;
		for(new vehicleid=ALAPKOCSI; vehicleid<MAX_VEHICLES; vehicleid++)
		{
			if(vehicleid == kocsibaul) continue;
			dist = GetDistanceToVehicle(playerid,vehicleid);
			if(dist < closestdist)
			{
				//if(kocsi == -1 || kocsi != -1 && kocsi != vehicleid)
				closestdist = dist;
				closestvehicle = vehicleid;
			}
		}
		return closestvehicle;
	}
	return NINCS;
}

stock GetClosestCar(playerid, asd = false)
{
	return GetClosestVehicle(playerid, asd);
}

public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

public IdojarasValtozas()
{
	new idojaras[128];
	new idojarasok[14] = {
		0,	// Tiszta
		3,	// Felhõs
		4,	// Ködös
		7,	// Borult
		8,	// Vihar
		9,	// Erõs köd
		10,	// Felhõs
		12,	// Borús
		13,	// Felhõs
		14,	// Felhõs
		15,	// Borús
		17,	// Tiszta
		18,	// Tiszta
		20	// Erõsen borús
		//32	// Erõs köd
	};

	if(!IdoJaras[iValtas])
	{
		switch(IdoJaras[iLesz])
		{
			// Tiszta
			case 0, 17, 18: idojaras = "Napos, száraz, meleg idõ várható";
		
			// Felhõs
			case 3, 10, 13, 14: idojaras = "Felhõs idõ várható";
		
			// Borús
			case 7, 12, 15: idojaras = "Borús idõ várható";
		
			// Erõsen borús
			case 20: idojaras = "Erõsen borús idõ várható";
		
			// Vihar
			case 8: idojaras = "Vihar várható";
		
			// Köd
			case 4: idojaras = "Köd várható";
		
			// Erõs köd
			case 9: idojaras = "Erõs köd várható";
		}
		SendFormatMessageToAll(COLOR_NEWS, "<< Idõjárás elõrejelzés: %s >>", idojaras);
	}
	else
	{
		IdoJaras[iMost] = IdoJaras[iLesz];
		switch(IdoJaras[iMost])
		{
			// Tiszta
			case 0, 17, 18: idojaras = "Jelenleg napos, száraz, meleg idõ van";
		
			// Felhõs
			case 3, 10, 13, 14: idojaras = "Jelenleg felhõs idõ van";
		
			// Borús
			case 7, 12, 15: idojaras = "Jelenleg borús idõ van"
		
			// Erõsen borús
			case 20: idojaras = "Erõsen borús idõ van";
		
			// Vihar
			case 8: idojaras = "Vihar van! Vigyázz, mert csúszik az út!";
		
			// Köd
			case 4: idojaras = "Köd van, vigyázz, nehogy neki menj valakinek!";
		
			// Erõs köd
			case 9: idojaras = "Erõs köd van, vigyázz, nehogy neki menj valakinek!";
		}
		SendFormatMessageToAll(COLOR_NEWS, "<< Idõjárás jelentés: %s >>", idojaras);
		SetWeather(IdoJaras[iMost]);
	}

	new lesz;
	if(IdoJaras[iValtas])
	{
		switch(IdoJaras[iMost])
		{
			// Borús idõk
			case 7, 12, 15, 20:
			{
				lesz = 8;
			}
			// Viharos idõk
			case 8:
			{
				switch(random(2))
				{
					case 0: lesz = 4;
					case 1: lesz = 9;
				}
			}
			default:
			{
				lesz = idojarasok[random(sizeof(idojarasok))];
				
				// Ne rakjon be viharos és ködös idõt
				while(lesz == 8 || lesz == 4 || lesz == 9 || (lesz == 7  || lesz == 12 || lesz == 15 || lesz == 20) && random(5) != 1)
					lesz = idojarasok[random(sizeof(idojarasok))];
			}
		}
		IdoJaras[iLesz] = lesz;
		IdoJaras[iValtas] = false;
	}
	else
		IdoJaras[iValtas] = true;

	return 1;
}

public Drog()
{
	new p;
	for(p = 0; p < MAX_PLAYERS; p++)
	{
	    if(PlayerInfo[p][pDrogido] > 0)
	    {
	        PlayerInfo[p][pDrogido]--;
	        if(PlayerInfo[p][pDrogido] <= 0)
	            SetPlayerWeather(p, IdoJaras[iMost]);
	    }
	    if(Drogozott[p] == 1)
	        Drogozott[p] = 0;
	}
}

public IsVehicleOccupied(vehicleid)
{
	foreach(Jatekosok, i)
		if(IsPlayerInVehicle(i,vehicleid)) return 1;
	return 0;
}

public AllCarSpawn()
{
	printf("\n================V-s jarmuvek betoltese es lerakasa folyamatban================\n");
	LoadCar();
	printf("\n================V-s jarmuvek betoltve es lerakva (By Clint)================\n");
	
	printf("\n================V-s tuningok / csomagtartok betoltese folyamatban================\n");
	//MatricaBetoltes();
	VsTuningok();
	CsomagTartoBetoltes();
	printf("\n================V-s tuningok / csomagtartok betoltve================\n");

	//=====================================================================================//
	//================================= Egyéb Jármûvek ====================================//
	//=====================================================================================//

	//=================================== LSPD ============================================//
	LKocsik[0][0] = UjKocsi(596,1602.3052,-1675.6967,5.6112,359.6832,1,0); // 
	UjKocsi(596,1601.9998,-1684.0123,5.6059,269.6444,1,0); // 
	UjKocsi(596,1601.9126,-1692.1075,5.5790,265.7702,1,0); // 
	UjKocsi(596,1602.1571,-1696.1689,5.5986,270.8446,1,0); // 
	UjKocsi(596,1602.0848,-1700.1124,5.6120,271.0181,1,0); // 
	UjKocsi(596,1595.3134,-1710.7205,5.6093,181.4985,1,0); // 
	UjKocsi(596,1587.2686,-1710.9336,5.6023,179.5045,1,0); // 
	UjKocsi(596,1578.3698,-1710.8820,5.6093,179.3170,1,0); // 
	UjKocsi(596,1570.5056,-1711.1061,5.6148,179.5123,1,0); // 
	UjKocsi(596,1564.3640,-1711.2800,5.6231,179.3205,1,0); // 
	UjKocsi(596,1559.0056,-1711.5667,5.6109,180.2966,1,0); // 
	UjKocsi(596,1545.9528,-1684.4366,5.6148,271.1212,1,0); // 
	UjKocsi(596,1544.8669,-1675.9874,5.6004,269.3367,1,0); // 
	UjKocsi(596,1545.1940,-1667.5219,5.6159,267.1052,1,0); // 
	UjKocsi(596,1529.7708,-1687.8934,5.6114,90.1255,1,0); // 
	UjKocsi(427,1538.8588,-1646.5929,6.0226,180.8431,0,1); // 
	UjKocsi(427,1534.7968,-1646.4258,6.0223,180.8020,0,1); // 
	UjKocsi(523,1529.7566,-1646.0579,5.4310,178.1009,0,0); // 
	UjKocsi(523,1527.5222,-1645.7819,5.4544,187.2876,0,0); // 
	UjKocsi(523,1525.7390,-1646.0132,5.4610,178.4654,0,0); // 
	UjKocsi(523,1531.8746,-1646.0334,5.4595,180.5357,0,0); // 
	UjKocsi(541,1545.5648,-1663.0049,5.5156,268.8947,0,1); // 
	UjKocsi(541,1545.4988,-1658.7852,5.5155,271.1679,0,1); // 
	UjKocsi(541,1545.6693,-1654.8855,5.5157,269.6464,0,1); // 
	UjKocsi(541,1545.8370,-1650.9872,5.5156,268.6061,0,1); // 
	UjKocsi(497,1568.3252,-1644.8842,28.5790,90.5148,1,0); // 
	UjKocsi(497,1568.7050,-1652.3156,28.5706,95.4477,1,0); // 
	UjKocsi(560,1584.8157,-1676.5988,5.6139,269.3396,0,0); // LSPD Sultan1
	UjKocsi(560,1584.7223,-1680.2163,5.6203,271.4641,0,0); // LSPD Sultan2
	UjKocsi(599,1585.6072,-1671.6768,6.1080,270.5344,0,1); // lspdranger1
	UjKocsi(599,1585.2128,-1667.5911,6.1098,268.7791,0,1); // lspdranger2
	UjKocsi(523,1597.4968,-1604.7620,12.9972,200.3829,0,1); // motor1
	UjKocsi(523,1595.6451,-1604.8224,12.9679,203.4611,0,1); // motor2
	UjKocsi(523,1593.4718,-1604.7821,12.9598,202.9742,0,0); // motor3
	UjKocsi(523,1591.4973,-1604.6984,12.9404,203.0339,0,1); // motor4
	UjKocsi(523,1589.4994,-1605.0046,12.9486,204.7052,0,0); // motor5*
	UjKocsi(523,1587.4390,-1605.1493,12.9500,208.7697,0,1); // motor6
	LKocsik[0][1] = UjKocsi(563,1566.0349,-1701.2842,29.0934,89.0378,1,0); // 

	//=================================== FBI =============================================//
	LKocsik[1][0] = UjKocsi(411,1198.2700,-1835.2189,13.1273,269.2617,0,0); // 
	UjKocsi(411,1198.3691,-1830.7419,13.1312,268.3860,123,0); // 
	UjKocsi(427,1251.8876,-1835.4811,13.5210,90.7281,0,0); // 
	UjKocsi(427,1240.9753,-1835.6853,13.5205,90.2060,0,0); // 
	UjKocsi(490,1244.3052,-1812.3331,13.5498,206.7203,0,0); // 
	UjKocsi(490,1249.2316,-1810.4034,13.5460,212.1909,0,0); // 
	UjKocsi(490,1239.2115,-1814.7391,13.5568,207.0154,0,0); // 
	UjKocsi(490,1253.2679,-1807.3320,13.5474,215.1649,0,0); // 
	UjKocsi(522,1214.4631,-1819.0662,13.1687,179.4072,0,0); // 
	UjKocsi(522,1216.3284,-1819.3658,13.1667,179.4968,0,0); // 
	UjKocsi(522,1218.0924,-1819.3904,13.1683,180.7272,0,0); // 
	UjKocsi(528,1227.4515,-1835.7189,13.4317,90.2151,0,0); // 
	UjKocsi(541,1279.8883,-1834.2993,13.0093,86.9105,0,0); // 
	UjKocsi(541,1279.8369,-1830.2198,13.0092,89.8823,0,0); // 
	UjKocsi(560,1279.6720,-1825.4725,13.0896,89.0362,0,0); // 
	UjKocsi(560,1279.7375,-1821.8107,13.0899,89.4482,0,0); // 
	UjKocsi(598,1279.2125,-1795.3960,13.1362,89.5434,0,1); // 
	UjKocsi(598,1279.1012,-1799.0962,13.1335,88.0160,0,1); // 
	UjKocsi(598,1278.9445,-1802.3767,13.1308,88.1921,0,1); // 
	UjKocsi(598,1278.9124,-1806.2296,13.1339,86.9738,0,1); // 
	UjKocsi(601,1198.6582,-1826.8972,13.1686,269.0887,0,0); // 
	UjKocsi(405,1279.2860,-1817.7493,13.2593,87.7734,0,0); // 
	UjKocsi(405,1279.2362,-1814.1796,13.2590,86.8287,0,0); // 
	LKocsik[1][1] = UjKocsi(437,1259.0313,-1797.5558,13.5557,146.6527,0,0); // 

	//=================================== Ballas ==========================================//
	LKocsik[2][0]  = UjKocsi(578,2462.7144,-1546.0968,24.6187,268.5633,85,85); // Ballas
	UjKocsi(498,2446.6848,-1555.9603,24.0674,0.0597,85,85); // Ballas
	UjKocsi(567,2488.5457,-1518.6802,23.8671,90.6056,85,85); // Ballas
	UjKocsi(567,2488.9297,-1524.7328,23.8614,90.7169,85,85); // Ballas
	UjKocsi(567,2490.9834,-1530.5756,23.8640,176.0808,85,85); // Ballas
	UjKocsi(567,2490.4375,-1552.0021,23.9294,358.2953,85,85); // Ballas
	UjKocsi(468,2451.7788,-1545.4854,23.6677,176.6946,85,85); // Ballas
	UjKocsi(468,2449.5632,-1545.7850,23.6670,172.5569,85,85); // Ballas
	UjKocsi(468,2447.9055,-1545.3711,23.6652,174.6041,85,85); // Ballas
	UjKocsi(566,2485.8665,-1552.0245,23.8193,0.3378,85,85); // Ballas
	UjKocsi(566,2479.2356,-1556.5253,23.7970,359.1880,85,85); // Ballas
	UjKocsi(566,2473.9644,-1556.7675,23.7931,359.5339,85,85); // Ballas
	LKocsik[2][1] = UjKocsi(566,2469.4990,-1556.2369,23.7888,358.9692,85,85); // Ballas

	//================================ Medic ==============================================//
	LKocsik[3][0] = UjKocsi(487,1130.6460,-1247.6831,25.4787,270.6306,74,35); // helikopter see
	UjKocsi(487,1130.6271,-1240.0284,25.5051,274.9338,74,35); // helikopter see
	UjKocsi(487,1129.7728,-1230.5037,25.4789,273.7580,74,35); // helikopter see
	UjKocsi(487,1129.0223,-1219.3685,25.4793,271.2532,74,35); // helikopter see
	UjKocsi(490,1111.5352,-1217.9811,17.9360,1.3370,1,3); // rancher 1
	UjKocsi(490,1107.6650,-1218.1302,17.9384,0.4386,1,3); // rancher 2
	UjKocsi(490,1104.2424,-1217.9808,17.9340,358.7857,1,3); // rancher 3
	UjKocsi(490,1100.8998,-1218.0536,17.9320,357.2289,1,3); // rancher 4
	UjKocsi(490,1097.5939,-1218.1327,17.9328,359.7872,1,3); // rancher 5
	UjKocsi(416,1109.6417,-1227.5436,15.9708,181.0712,1,3); // dobozos mentõ 1
	UjKocsi(416,1105.3306,-1227.5660,15.9745,181.4881,1,3); // dobozos mentõ 2
	UjKocsi(416,1101.4393,-1227.5177,15.9714,181.7192,1,3); // dobozos mentõ 3
	UjKocsi(416,1097.6078,-1227.5607,15.9695,180.1873,1,3); // dobozos mentõ 4
	UjKocsi(416,1093.3596,-1227.5455,15.9700,179.3123,1,3); // dobozos mentõ 5
	UjKocsi(416,1087.4061,-1248.9332,15.9760,359.3930,1,3); // dobozos mentõ 6
	UjKocsi(416,1091.2720,-1248.8914,15.9766,0.0477,1,3); // dobozos mentõ 7
	UjKocsi(416,1094.9946,-1248.8862,15.9749,359.6205,1,3); // dobozos mentõ 8
	UjKocsi(416,1098.8519,-1249.1348,15.9711,359.0291,1,3); // dobozos mentõ 9
	LKocsik[3][1] = UjKocsi(416,1102.6443,-1249.0984,15.9697,359.1385,1,3); // dobozos mentõ 10
	//sf
	/*LKocsik[20][0] = UjKocsi(416,-2606.6992,608.4917,14.6061,179.9176,1,3);
	UjKocsi(416,-2590.2175,622.0501,14.5771,270.0806,1,3);
	UjKocsi(416,-2589.9275,627.5400,14.6086,270.8912,1,3);
	UjKocsi(416,-2590.0205,632.9716,14.6027,270.9349,1,3);
	UjKocsi(416,-2571.9285,621.9767,14.6024,269.7380,1,3);
 	UjKocsi(487,-2649.9880,607.9617,14.6297,87.6556,1,3);
	LKocsik[20][1] = UjKocsi(416,-2571.8113,627.6144,14.6041,270.3480,1,3);*/
	//================================ Camorra ==============================================//
	LKocsik[4][0] = UjKocsi(559,-2548.8635,20.0938,16.1025,325.0194,1,1); //
	UjKocsi(560,-2548.8616,14.5842,16.1555,318.8938,1,1); //
	UjKocsi(587,-2548.8789,10.0088,16.1640,313.2830,1,1); //
	UjKocsi(562,-2548.9626,4.9765,16.0858,317.2541,1,1); //
	UjKocsi(415,-2549.1343,0.3068,16.1943,314.8842,1,1); //
	UjKocsi(402,-2549.0181,-4.6914,16.0524,319.3538,1,1); //
	UjKocsi(415,-2548.8838,-9.5743,16.1318,318.9436,1,1); //
	UjKocsi(429,-2549.0864,-14.4555,16.0838,312.2124,1,1); //
	UjKocsi(405,-2549.0996,-18.7920,16.3130,318.6512,1,1); //
	UjKocsi(560,-2548.6838,-22.9394,16.1402,311.8605,1,1); //
	UjKocsi(560,-2549.3081,-28.2060,16.1401,314.8630,1,1); //
	UjKocsi(580,-2549.0129,-33.3185,16.2385,315.9967,1,1); //
	UjKocsi(507,-2546.0674,-53.2287,16.3658,0.0965,1,1); //
	UjKocsi(409,-2550.3538,-54.0829,16.2502,359.8049,1,1); //
	UjKocsi(409,-2541.9719,-54.1652,16.3155,358.7999,1,1); //
	UjKocsi(482,-2531.2671,-24.8603,16.5634,55.9394,1,1); //
	UjKocsi(428,-2531.8674,-19.7990,16.5863,90.6425,1,1); //
	UjKocsi(482,-2531.1211,-14.3208,16.5536,122.7333,1,1); //
	UjKocsi(487,-2518.0112,-43.8389,37.5285,70.8552,1,1); //
	UjKocsi(487,-2518.1409,-54.7268,37.5382,65.7007,1,1); //
	UjKocsi(522,-2520.1350,-18.6909,25.1660,7.8142,1,1); //
	UjKocsi(522,-2524.8181,-15.3453,25.1878,95.4646,1,1); //
	UjKocsi(522,-2529.7893,-20.6904,25.1792,171.8348,1,1); // 
	UjKocsi(522,-2523.6650,-25.1634,25.1824,268.5662,1,1); //
	UjKocsi(560,-2555.3301,70.8278,7.2863,93.3548,1,1); //
	LKocsik[4][1] = UjKocsi(560,-2545.0337,71.4434,9.4686,90.7744,1,1); //

	//================================ Yakuza =============================================//
	
	LKocsik[5][0] = UjKocsi(405,-2213.7295,614.7078,35.0391,180.0487,0,0); // Sentinel 
	UjKocsi(409,-2223.2109,605.3633,34.9652,270.0423,0,0); // Strech
	UjKocsi(429,-2174.3425,636.9406,49.1172,357.3747,0,0); // Banshee
	UjKocsi(429,-2178.6724,637.1030,49.1172,358.0220,0,0); // Banshee
	UjKocsi(482,-2180.2234,608.7248,35.2894,90.6732,0,0); // Burrito
	UjKocsi(522,-2185.1206,703.0990,53.4485,269.0812,3,3); // NRG-500
	UjKocsi(522,-2185.1089,700.9426,53.4641,269.4594,3,3); // NRG-500
	UjKocsi(560,-2184.2744,698.4808,53.5959,270.1600,0,0); // Sultan
	UjKocsi(560,-2184.1958,705.9584,53.5954,270.3177,0,0); // Sultan
	UjKocsi(428,-2179.1516,715.4583,54.0143,1.8868,0,0); // Secirucar
	UjKocsi(487,-2200.33105469,696.98242188,74.10093689,0,0,0); //Maverick
	UjKocsi(487,-2192.26074219,696.98242188,74.10093689,0,0,0); //Maverick
	LKocsik[5][1] = UjKocsi(487,-2196.9485,627.9924,65.5673,268.4398,0,0); // Maverick

	//================================ Mayor ==============================================//	
	LKocsik[6][0] = UjKocsi(409,1408.97863770,-1777.91870117,13.47187519,180,1,1); //Stretch
	UjKocsi(421,1400.48242188,-1777.04809570,13.54687500,180,1,1); //Gates
	UjKocsi(421,1400.59973145,-1803.46276855,13.54687500,0,1,1); //Gates
	UjKocsi(409,1408.75256348,-1801.86230469,13.47187519,0,1,1); //Stretch
	UjKocsi(579,1408.04150391,-1790.54577637,13.64551258,90,1,1); //Huntley
	UjKocsi(560,1404.68774414,-1803.40332031,13.35185051,0,1,1); //Sultan
	UjKocsi(560,1404.53369141,-1776.96936035,13.35185051,180,1,1); //Sultan
	LKocsik[6][1] = UjKocsi(487,1427.69873047,-1790.37426758,33.83171082,90,1,1); //Maverick

	//================================ Hitman =============================================//
	/*LKocsik[7][0] = UjKocsi(560,1112.9326,-317.5425,73.6975,179.9709,0,0);
	UjKocsi(560,1055.6556,-296.0212,73.6940,271.1874,0,0);
	UjKocsi(560,1055.7633,-303.8535,73.6974,269.3189,0,0);
	UjKocsi(581,1081.2333,-289.5671,73.5892,350.8458,0,1);
	LKocsik[7][1] = UjKocsi(581,1084.5173,-288.8402,73.5818,355.2795,0,1);*/
	/*LKocsik[7][0] = UjKocsi(560,-383.6606,-1475.4330,25.4316,267.9848,0,0); // Hitmankocsi1
	UjKocsi(522,-384.6684,-1466.9933,25.2953,266.7962,2,2); // Hitmankocsi2
	UjKocsi(521,-384.7430,-1468.7863,25.2966,260.1244,3,3); // Hitmankocsi3
	UjKocsi(482,-383.5025,-1471.4774,25.8457,268.6492,1,1); // Hitmankocsi4
	UjKocsi(559,-373.6188,-1476.7148,25.3801,267.7374,6,6); // Hitmankocsi5
	UjKocsi(562,-373.6114,-1466.4042,25.3862,268.9161,0,0); // Hitmankocsi6
	UjKocsi(596,-424.1295,-1396.2700,22.5963,282.0876,1,0); // LSPD
	UjKocsi(416,-424.2686,-1392.1090,23.0978,281.0319,3,1); // Ambulance
	UjKocsi(427,-425.0418,-1387.4716,23.1309,278.0560,0,0); // Enforcer
	UjKocsi(597,-411.7344,-1393.9111,23.0866,279.2087,0,1); // SFPD
	LKocsik[7][1] = UjKocsi(420,-
	
	414.1089,-1383.2994,23.2594,281.6956,6,6); // Taxi*/
	LKocsik[7][0] = UjKocsi(405,-1446.7476,-1526.1611,101.6328,319.6589,0,0); // Hitman Car1
	UjKocsi(405,-1446.5715,-1518.5195,101.6328,218.1757,0,0); // Hitman Car2
	UjKocsi(579,-1427.3250,-1499.8400,101.6058,216.7275,4,0); // Hitman Car3
	UjKocsi(579,-1419.2351,-1499.2074,101.6031,143.6300,5,0); // Hitman Car4
	UjKocsi(522,-1421.5510,-1503.5895,104.6103,183.6875,0,0); // Hitman Car5
	UjKocsi(522,-1424.4696,-1503.8430,104.6141,182.8143,3,0); // Hitman Car6
	UjKocsi(560,-1434.5614,-1532.9415,101.4604,358.2310,0,0); // Hitman Car7
	UjKocsi(482,-1435.2181,-1538.0924,101.8751,86.9659,7,0); // Hitman Car8
	UjKocsi(580,-1420.3723,-1526.8510,101.5460,50.5447,2,0); // Hitman Car9
	UjKocsi(580,-1429.2581,-1526.5408,101.5449,321.8858,15,0); // Hitman Car10
	UjKocsi(487,-1458.9871,-1554.0144,101.9345,322.1907,9,1); // Hitman Car11
	LKocsik[7][1] = UjKocsi(554,-1433.5336,-1504.6603,101.8121,146.0264,10,1); // Hitman Car12

	//=============================== Riporter ================================================//
	LKocsik[8][0] = UjKocsi(488,-1814.5601,577.7854,235.0690,1.4875,2,29); // 
	UjKocsi(488,-1802.6202,576.1310,235.0671,348.3589,2,29); // 
	UjKocsi(582,-1816.1611,572.8093,35.2354,39.6940,114,118); // 
	UjKocsi(582,-1812.5096,573.1454,35.2321,36.9673,112,116); // 
	UjKocsi(582,-1808.7932,573.6373,35.2248,36.4271,110,113); // 
	UjKocsi(582,-1805.3314,573.3781,35.2204,35.4192,49,11); // 
	UjKocsi(582,-1801.6698,573.3671,35.2238,35.2484,56,123); // 
	LKocsik[8][1] = UjKocsi(582,-1797.6235,573.2581,35.2226,30.2425,41,20); // 

	//=============================== Taxi ================================================//
	LKocsik[9][0] = UjKocsi(420,1803.2336425781,-1904.4206542969,13.199999809265,90,6,6);
	UjKocsi(420,1803.2336425781,-1910.0187988281,13.199999809265,90,6,6);
	UjKocsi(420,1803.2336425781,-1915.4564208984,13.199999809265,90,6,6);
	UjKocsi(420,1803.2336425781,-1921.0563964844,13.199999809265,90,6,6);
	UjKocsi(420,1778.2635498047,-1914.9473876953,13.245566368103,270,6,6);
	UjKocsi(438,1803.2336425781,-1926.4564208984,13.199999809265,90,6,6);
	UjKocsi(438,1803.2336425781,-1932.0563964844,13.199999809265,90,6,6);
	UjKocsi(438,1778.2635498047,-1931.9473876953,13.199999809265,270,6,6);
	UjKocsi(438,1778.2635498047,-1926.4473876953,13.199999809265,270,6,6);
	UjKocsi(438,1778.2635498047,-1920.9473876953,13.199999809265,270,6,6);
	UjKocsi(438,1778.2635498047,-1911.5473632813,13.199999809265,270,6,6);
	UjKocsi(409,1775.4611816406,-1901.4395751953,13.199999809265,0,6,6);
	UjKocsi(458,1782.4444580078,-1886.0688476563,13.373038291931,270,6,6);
	UjKocsi(458,1790.6629638672,-1886.0688476563,13.373038291931,270,6,6);
	UjKocsi(458,1798.6629638672,-1886.0688476563,13.373038291931,270,6,6);
	UjKocsi(418,1785.7553710938,-1938.3941650391,13.699999809265,0,6,6);
	UjKocsi(418,1790.7553710938,-1938.3941650391,13.699999809265,0,6,6);
	LKocsik[9][1] = UjKocsi(418,1795.7553710938,-1938.3941650391,13.699999809265,0,6,6);
	//sf
	LKocsik[19][0] = UjKocsi(420,-2159.4333,293.1563,34.8943,0.0218,1,1);
	UjKocsi(420,-2162.9058,293.3545,34.8967,359.4565,1,1);
	UjKocsi(420,-2167.1926,293.4243,34.8969,359.7125,1,1);
	UjKocsi(420,-2171.4541,293.4927,34.8967,0.1934,1,1);
	UjKocsi(420,-2175.8054,293.4282,34.8959,0.1018,1,1);
	UjKocsi(409,-2184.4634,293.9915,34.9176,359.7162,1,1);
	UjKocsi(409,-2188.5808,293.8604,34.9183,358.7542,1,1);
	UjKocsi(418,-2192.9285,293.5871,35.2103,359.2771,1,1);
	UjKocsi(418,-2197.2703,293.3572,35.2211,0.6746,1,1);
	LKocsik[19][1] = UjKocsi(420,-2180.0303,293.5355,34.8969,359.5673,1,1);


	//============================ VAGOS==========================================//

	LKocsik[10][0] = UjKocsi(567,2336.17871094,-1042.74023438,52.35005188,213.74047852,6,6); //Savanna
	UjKocsi(466,2344.47753906,-1039.92675781,53.18130493,177.99499512,6,6); //Glendale
	UjKocsi(467,2349.10400391,-1057.93859863,53.42637253,11.99157715,6,6); //Oceanic
	UjKocsi(468,2367.42114258,-1052.10205078,53.88343430,0.00000000,6,6); //Sanchez
	UjKocsi(482,2380.15429688,-1033.96875000,54.15044022,132.74230957,6,6); //Burrito
	UjKocsi(578,2393.89843750,-1031.00390625,54.25155640,222.98950195,6,6); //DFT-30
	UjKocsi(567,2361.78710938,-1035.13281250,54.10915375,223.99572754,6,15); //Savanna
	UjKocsi(428,2448.50585938,-942.48730469,80.21141052,180.00000000,6,6); //Securicar
	UjKocsi(468,2382.45141602,-1040.64282227,53.30248260,221.49536133,6,6); //Sanchez
	LKocsik[10][1] = UjKocsi(468,2364.31591797,-1046.01928711,53.81550217,290.00000000,6,6); //Sanchez

	//========================= V.A.S =========================================//
	//============================== Los Aztecas ================================================//
	LKocsik[12][0] =UjKocsi(412,1806.7390,-2025.0215,13.3693,146.1311,7,7); // 
	UjKocsi(468,1768.0618,-2054.3455,13.2485,249.6290,7,7); // 
	UjKocsi(468,1766.5592,-2055.2866,13.2509,212.1199,7,7); // 
	UjKocsi(471,1740.6449,-2063.3210,13.0836,270.2479,7,7); // 
	UjKocsi(471,1740.7220,-2064.8630,13.0896,268.9736,7,7); // 
	UjKocsi(466,1802.3558,-2052.0374,13.3066,88.5109,7,7); // 
	UjKocsi(475,1760.5477,-2056.2905,13.3896,244.7607,7,7); // 
	UjKocsi(482,1771.0583,-2022.0190,14.2631,268.5269,7,7); // 
	UjKocsi(492,1781.4457,-2071.8120,13.3724,0.7830,7,7); // 
	UjKocsi(509,1730.3545,-2059.3794,13.0977,178.1896,7,7); // 
	UjKocsi(534,1758.9766,-2071.8152,13.3422,2.0063,7,7); // 
	UjKocsi(536,1767.6619,-2073.7007,13.3449,328.5658,7,7); // 
	UjKocsi(567,1773.1892,-2073.3054,13.4782,33.7048,7,7); // 
	UjKocsi(600,1767.5031,-2048.3777,13.4879,213.6714,7,7); // 
	UjKocsi(463,1742.5273,-2057.6125,13.1239,212.9962,7,7); // 
	UjKocsi(463,1790.4073,-2022.0973,13.0233,139.6588,7,7); // 
	UjKocsi(463,1791.4689,-2021.9668,13.0274,141.9012,7,7); // 
	UjKocsi(578,1744.8564,-2127.5459,14.1708,359.3968,7,7); // 
	UjKocsi(428,2026.2985,-1288.2914,21.0680,181.1531,7,7); // 
	UjKocsi(468,2033.5157,-1284.7068,20.6272,84.5080,7,7); // 
	LKocsik[12][1] = UjKocsi(468,2033.4758,-1290.2792,20.6121,85.3343,7,7); // 

	//=============================== LSAA / Katona ================================================//
	/*LKocsik[13][0] = UjKocsi(599,1853.5427,-2292.5334,13.7390,268.7050,6,6);
	UjKocsi(599,1853.4811,-2288.2297,13.7395,266.6113,6,6);
	UjKocsi(599,1853.6641,-2284.0100,13.7348,263.9421,6,6);
	UjKocsi(599,1853.9568,-2279.8708,13.7378,266.5015,6,6);
	UjKocsi(528,1876.7223,-2265.7781,13.5914,196.8823,6,6);
	LKocsik[13][1] = UjKocsi(528,1882.6987,-2263.1729,13.5904,198.3260,6,6);*/
	
	/*LKocsik[13][0] = UjKocsi(548,298.7298,2053.9956,19.3339,0.0971,1,1); // 
	UjKocsi(548,317.5844,2053.6445,19.2380,358.2636,1,1); // 
	UjKocsi(425,308.6837,2041.7871,18.2115,0.8457,1,1); // 
	UjKocsi(520,308.6140,2055.4219,18.3638,0.4875,1,1); // 
	UjKocsi(432,279.1742,1950.8779,17.6497,270.2410,1,1); // 
	UjKocsi(432,279.2119,1959.9502,17.6283,269.7574,1,1); // 
	UjKocsi(470,272.4680,1983.4288,17.6331,270.1325,1,1); // 
	UjKocsi(470,272.4540,1988.3976,17.6364,270.2191,1,1); // 
	UjKocsi(470,272.4044,1993.0884,17.6510,269.7780,1,1); // 
	UjKocsi(470,272.5411,1997.4738,17.6354,269.7374,1,1); // 
	UjKocsi(470,283.0801,1978.5033,17.6299,0.0044,1,1); // 
	UjKocsi(433,275.8194,2017.0179,18.0772,270.6387,1,1); // 
	UjKocsi(433,274.4799,2023.5753,18.0773,268.9788,1,1); // 
	UjKocsi(427,275.0162,2029.2550,17.7726,269.4972,104,1); // 
	LKocsik[13][1] = UjKocsi(427,274.7719,2032.4373,17.7725,268.6474,104,1); */
	
	LKocsik[13][0] = UjKocsi(468,2777.8555,-2432.7175,13.3052,89.8002,0,0); // [Gates] sanchez
	fegyverszallitokocsi[0] = UjKocsi(433,2793.3967,-2417.6982,14.1015,90.5831,33,93); // [Gates]-nek
	fegyverszallitokocsi[1] = UjKocsi(433,2781.5881,-2418.0425,14.0718,90.4206,122,124); // [Gates]-nek
	UjKocsi(468,2777.8665,-2431.3313,13.2874,87.2825,0,0); // [Gates] sanchez
	UjKocsi(468,2776.6335,-2441.0400,13.3043,90.8127,0,0); // [Gates] sanchez
	UjKocsi(468,2776.9182,-2442.5017,13.3028,89.1133,0,94); // [Gates] sanchez
	UjKocsi(427,2796.1785,-2456.0930,14.0595,90.5500,0,0); // [Gates] enforcer
	UjKocsi(427,2782.4033,-2456.3198,14.0776,90.3757,0,0); // [Gates] enforcer
	UjKocsi(500,2788.1086,-2502.1782,13.7634,358.8166,0,0); // [Gates] Mesa
	UjKocsi(500,2787.9719,-2485.7100,13.7582,177.9309,0,0); // [Gates] Mesa
	UjKocsi(425,2794.9224,-2538.4082,14.2308,91.5562,99,70); // [Gates] hunter
	UjKocsi(425,2787.9402,-2554.3579,14.1904,87.6719,103,36); // [Gates] hunter
	UjKocsi(432,2741.5950,-2468.4443,13.6542,269.5346,26,0); // [Gates] tank
	UjKocsi(432,2741.7705,-2460.9988,13.6591,268.5716,82,99); // [Gates] tank
	UjKocsi(470,2741.6321,-2448.3191,13.6650,270.1810,43,34); // [Gates] patriot
	UjKocsi(470,2741.7769,-2444.0354,13.6575,270.6050,61,26); // [Gates] patriot
	UjKocsi(470,2741.5559,-2439.7720,13.6573,269.3852,90,120); // [Gates] patriot
	UjKocsi(470,2741.5518,-2431.9009,13.6315,268.8934,82,93); // [Gates] patriot
	UjKocsi(470,2741.6011,-2423.6023,13.6663,271.1149,86,0); // [Gates] patriot
	UjKocsi(470,2741.7651,-2419.5828,13.6608,269.3126,117,0); // [Gates] patriot
	UjKocsi(470,2776.3945,-2434.7532,13.6321,88.5662,49,29); // [Gates] patriot
	UjKocsi(470,2776.2952,-2438.5227,13.6272,89.4250,12,80); // [Gates] patriot
	UjKocsi(457,2735.2815,-2454.9429,13.2752,267.0648,0,0); // [Gates] caddy(golfkocsi)
	UjKocsi(548,2781.5669,-2347.7358,15.3492,357.1011,36,125); // [Gates] cargobob
	UjKocsi(520,2745.1946,-2337.5427,14.6213,355.2342,9,73); // [Gates] hydra
	UjKocsi(520,2713.1516,-2338.8330,14.6214,3.0823,55,49); // [Gates] hydra
	UjKocsi(520,2690.9207,-2336.4980,14.6211,1.3941,65,48); // [Gates] hydra
	UjKocsi(447,2673.1140,-2338.2546,13.6373,1.5111,111,3); // seasparrow
	UjKocsi(447,2660.5859,-2338.9065,13.6372,4.6325,29,123); // seasparrow
	LKocsik[13][1] = UjKocsi(487,2720.8821,-2465.5054,28.6265,178.9362,0,0); // [Gates] maverick

	//=============================== SFPD ================================================//
	LKocsik[14][0] = UjKocsi(599,-1622.0865,649.7513,-5.0495,89.5646,1,79); // 
	UjKocsi(599,-1622.1519,654.0257,-5.0811,89.6176,1,79); // 
	UjKocsi(601,-1639.8389,649.5815,-5.4740,271.7714,1,79); // 
	UjKocsi(522,-1639.5868,653.6250,-5.6813,272.5453,1,79); // 
	UjKocsi(522,-1639.3787,658.2644,-5.6781,278.5525,1,79); // 
	UjKocsi(522,-1639.6217,669.8044,-5.6703,268.2518,1,79); // 
	UjKocsi(522,-1639.3698,661.9741,-5.6736,268.3417,1,79); // 
	UjKocsi(522,-1639.3317,666.1779,-5.6762,267.1459,1,79); // 
	UjKocsi(541,-1640.8313,673.8721,-5.5875,271.1162,1,79); // 
	UjKocsi(541,-1640.8951,678.3587,-5.6220,269.2940,1,79); // 
	UjKocsi(541,-1640.6917,682.0646,-5.5903,270.4119,1,79); // 
	UjKocsi(541,-1640.8274,686.2887,-5.5875,270.7022,1,79); // 
	UjKocsi(597,-1632.7819,693.7990,-5.4788,177.5353,1,79); // 
	UjKocsi(597,-1628.7997,693.7433,-5.5076,179.7036,1,79); // 
 	UjKocsi(597,-1624.5520,693.4087,-5.4797,180.0261,1,79); // 
	UjKocsi(597,-1620.8286,693.5667,-5.4907,179.5724,1,79); // 
	UjKocsi(597,-1616.5037,693.2583,-5.4976,179.8679,1,79); // 
	UjKocsi(597,-1611.7653,693.1631,-5.4811,179.6208,1,79); // 
	UjKocsi(597,-1607.8177,693.0944,-5.4776,178.3217,1,79); // 
	UjKocsi(597,-1604.2723,693.2014,-5.5071,182.0972,1,79); // 
	UjKocsi(597,-1600.0132,693.0121,-5.4622,179.8734,1,79); // 
	UjKocsi(427,-1600.1588,677.0490,-5.1072,358.8851,1,79); // 
	UjKocsi(427,-1596.2632,677.0762,-5.1036,1.0998,1,79); // 
	UjKocsi(523,-1612.6592,732.2693,-5.6709,357.3557,1,79); // 
	UjKocsi(523,-1616.9246,732.1509,-5.6781,2.3314,1,79); // 
	UjKocsi(497, -1681.163, 705.981, 30.790, 270.327, 1, 79);
	LKocsik[14][1] = UjKocsi(431,-1583.6667,751.4672,-5.1398,269.6460,1,79);

	//============================== Oktató Kocsik ==================================================//
	LKocsik[15][0] = UjKocsi(405,1007.0328979492,-1434.8804931641,13.546875, 180,1,1); //
	UjKocsi(405,999.28369140625,-1434.9526367188,13.546875, 180,1,1); //  
	UjKocsi(405,994.47326660156,-1435.0322265625,13.546875, 180,1,1); //
	UjKocsi(551,989.46826171875,-1434.7689208984,13.426875114441, 180,1,1); //
	UjKocsi(551,984.83551025391,-1434.6369628906,13.426875114441, 180,1,1); //
	UjKocsi(551,979.97479248047,-1434.5926513672,13.426875114441, 180,1,1); //
	UjKocsi(487,1044.1857910156,-1435.5081787109,22.796838760376, 270,1,1); //
	UjKocsi(487,1044.2705078125,-1447.2537841797,22.804061889648, 270,1,1); //
	UjKocsi(514,998.28668212891,-1458.0816650391,14.246549606323, 0,1,1); //
	UjKocsi(515,1005.4986572266,-1458.8579101563,14.700595855713, 0,1,1); //
	UjKocsi(522,1011.2602539063,-1433.8452148438,13.207252502441, 180,1,1); //
	UjKocsi(522,1014.2055664063,-1433.9486083984,13.207252502441, 180,1,1); //
	LKocsik[15][1] = UjKocsi(493,719.59619140625,-1636.5830078125,0, 180,1,1); //

	//============================== SWAT Egység Kocsijai ==================================================//
 	LKocsik[17][0] = UjKocsi(427,2151.1714,-1870.3136,13.6835,91.4333,0,25); // 
	UjKocsi(427,2151.0571,-1866.3854,13.7086,91.4390,0,25); // 
	UjKocsi(596,2137.3472,-1871.1833,13.2572,89.9292,0,25); // 
	UjKocsi(596,2137.3418,-1865.8673,13.2693,88.7454,0,25); // 
	UjKocsi(528,2127.5063,-1871.3549,13.5920,90.0033,0,0); // 
	UjKocsi(601,2118.0674,-1871.3113,13.3056,88.9571,0,0); // 
	UjKocsi(603,2128.8804,-1865.8560,13.3848,90.5995,0,25); // 
	UjKocsi(603,2120.7903,-1865.8749,13.3808,89.5658,0,25); // 
	UjKocsi(548,2100.0588,-1878.3013,22.9291,2.4972,0,0); // 	CargoBob
  	LKocsik[17][1] = UjKocsi(497,2152.2207,-1879.1312,19.0579,270.4670,0,25); // 
	//Új
	/*LKocsik[17][0] = UjKocsi(522,306.5450,-1481.7770,24.1640,235.2176,0,0); // 
	UjKocsi(522,303.3013,-1486.0941,24.1615,235.1473,0,0); // 
	UjKocsi(522,299.9973,-1490.4697,24.1517,231.1228,0,0); // 
	UjKocsi(560,303.0465,-1499.0989,24.3089,235.1449,0,0); // 
	UjKocsi(601,300.2761,-1504.0354,24.3588,235.6690,0,0); // 
	UjKocsi(560,296.8144,-1508.2137,24.2942,234.3098,0,0); // 
	UjKocsi(528,293.9668,-1513.0455,24.6397,234.3909,0,0); // 
	UjKocsi(560,290.3264,-1517.1790,24.2995,233.9034,0,0); // 
	UjKocsi(490,287.8524,-1522.3466,24.7214,234.8707,0,0); // 
	UjKocsi(560,284.1673,-1526.1904,24.2899,234.3021,0,0); // 
	UjKocsi(490,281.7646,-1531.3892,24.7244,235.3063,0,0); // 
	UjKocsi(560,277.6362,-1535.3003,24.3054,234.7432,0,0); // 
	UjKocsi(427,291.9168,-1544.9978,24.7244,55.2015,0,0); // 
	UjKocsi(427,295.0988,-1540.8210,24.7196,56.4400,0,0); // 
	LKocsik[17][1] = UjKocsi(427,298.0342,-1536.2363,24.7456,55.9953,0,0); // */

  	//================================ Grove Street Families ==============================================//

	LKocsik[18][0] = UjKocsi(422,2468.6143,-1653.6831,13.3914,91.6772,86,86); // 1
	UjKocsi(535,2482.8054,-1653.7584,13.1549,88.8041,86,86); // 2
	UjKocsi(466,2502.1289,-1655.7555,13.2057,56.0291,86,86); // 3
	UjKocsi(492,2509.8442,-1666.2523,13.2674,14.0619,86,86); // 4
	UjKocsi(445,2516.9839,-1672.5021,13.8873,63.7970,86,86); // 5
	UjKocsi(463,2517.2083,-1667.2159,13.6092,57.7409,86,86); // 6
	UjKocsi(463,2518.0281,-1665.4375,13.6962,52.2462,86,86); // 7
	UjKocsi(567,2505.6865,-1679.1266,13.3301,319.2409,86,86); // 12
	UjKocsi(567,2493.2231,-1684.0834,13.2850,278.6014,86,86); // 13
	UjKocsi(412,2468.6584,-1670.1885,13.2300,11.0367,86,86); // 14
	UjKocsi(475,2473.2866,-1698.2561,13.3248,359.6459,86,86); // 15
	UjKocsi(482,2517.1101,-1682.6432,13.2014,47.6728,86,86); // 16
	UjKocsi(468,2530.0969,-1670.7368,14.7617,92.3667,86,86); // 17
	UjKocsi(468,2526.6711,-1670.7379,14.7506,91.2963,86,86); // 18
	LKocsik[18][1] = UjKocsi(428,2873.5693,-2125.1316,4.3378,272.1238,0,0); // 19

	
	//================================ VPOP ==============================================//
	LKocsik[21][0] =	UjKocsi(599,776.4827,-1347.4946,13.7682,321.2838,1,86); // 
	UjKocsi(599,776.4295,-1353.3696,13.7807,324.9841,1,86); // 
	UjKocsi(599,776.6089,-1358.3683,13.7710,312.4423,1,86); // 
	UjKocsi(599,776.9961,-1362.9285,13.7725,309.5174,1,86); // 
	UjKocsi(560,776.7198,-1367.9977,13.2053,309.4970,1,86); // 
	UjKocsi(411,776.4370,-1372.5940,13.2538,317.4991,1,86); // 
	UjKocsi(427,784.5778,-1336.4199,13.6854,179.3594,1,86); // 
	UjKocsi(437,784.8883,-1378.0159,13.7740,358.8503,86,86); //
	UjKocsi(596,766.2017,-1349.7488,13.2503,123.6982,1,86); // 
	UjKocsi(596,766.4166,-1353.0603,13.2480,125.6717,1,86); // 
	UjKocsi(596,766.3491,-1356.5089,13.2360,127.1252,1,86); // 
	UjKocsi(596,765.9006,-1360.3185,13.2460,126.2848,1,86); // 
	UjKocsi(596,766.4303,-1363.4031,13.2438,130.2660,1,86); // 
	UjKocsi(596,766.5663,-1367.6614,13.2138,134.5410,1,86); // 
	UjKocsi(596,766.6422,-1371.6344,13.2657,140.6332,1,86); // 
	UjKocsi(596,766.5837,-1376.6962,13.3298,140.9782,1,86); // 
	UjKocsi(521,766.8980,-1379.6243,13.2264,130.3648,86,86); // 
	UjKocsi(521,766.9575,-1381.8552,13.2508,136.8569,86,86); // 
	UjKocsi(521,767.4993,-1383.5245,13.2727,145.4108,86,86); // 
	UjKocsi(497,739.7191,-1369.0610,25.8489,270.3734,1,86); // 
	LKocsik[21][1] = UjKocsi(497,745.5941,-1378.9984,25.8459,359.6103,1,86); // 

	//============================== Russian Maffia ==================================================//
 	LKocsik[22][0] =UjKocsi(422,-1308.5579,510.4099,11.1837,178.6121,3,3); // Columbia
	UjKocsi(400,-1312.6102,510.2896,11.2968,179.6597,3,3); // Columbia
	UjKocsi(400,-1316.6781,510.0952,11.2946,177.9500,3,3); // Columbia
	UjKocsi(579,-1300.7474,508.3314,11.1256,89.2311,3,3); // Columbia
	UjKocsi(579,-1299.4678,495.5193,11.1326,89.0351,3,3); // Columbia
	UjKocsi(422,-1345.4337,511.9013,11.1842,271.4673,3,3); // Columbia
	UjKocsi(554,-1308.2561,491.3591,11.2790,90.5498,3,3); // Columbia
	UjKocsi(600,-1357.2744,503.3982,10.9134,270.4328,3,3); // Columbia
	UjKocsi(600,-1378.8224,511.3359,10.9069,272.0220,3,3); // Columbia
	UjKocsi(487,-1455.4949,503.7126,18.4386,89.0819,0,0); // Columbia
	UjKocsi(519,-1442.9745,510.9070,19.1518,270.8227,0,0); // Columbia shamal
	UjKocsi(493,-1440.0337,425.6329,-0.1825,271.7086,0,0); // Columbia
	UjKocsi(493,-1439.4404,390.3430,-0.1110,270.6358,0,0); // Columbia
	UjKocsi(522,-1438.2263,491.1997,10.7663,286.5643,0,0); // Columbia
	UjKocsi(409,-1436.5743,511.7393,10.9952,265.0431,0,0); // Columbia
	UjKocsi(507,-1408.9547,493.8243,11.0214,359.4484,0,0); // Columbia
	UjKocsi(507,-1416.0990,493.9165,11.0205,356.3608,0,0); // Columbia
	UjKocsi(560,-1422.7810,494.2814,10.9003,359.3994,0,0); // Columbia
	UjKocsi(560,-1430.3269,493.8236,10.9002,0.3143,0,0); // Columbia
	UjKocsi(428,-1440.3416,501.1704,11.3177,264.2151,0,0); // Columbia
	LKocsik[22][1] = UjKocsi(522,-1440.2220,495.5619,10.7663,266.6676,0,0); // Columbia

  	
	//============================== D. Cortez Mafia  ==================================================//
 	LKocsik[23][0] = UjKocsi(454,95.8185,-889.7151,0.1479,89.9423,0,113); // 
	UjKocsi(487,-32.6185,-249.9255,33.2118,181.3394,113,113); // 
  	LKocsik[23][1] = UjKocsi(446,82.0769,-909.0089,-0.5344,91.1008,113,3); // 
	//=============================== Úttisztitó kocsik ================================================//
	Kocsik[kUttisztito][0] = UjKocsi(574,1937.5,-2080.1,13.3,270,6,6); // Sárga
	UjKocsi(574,1937.5,-2083.3,13.3,270,3,3); // Piros
	UjKocsi(574,1937.5,-2086.5,13.3,270,0,0); // Fekete
	UjKocsi(574,1937.5,-2089.7,13.3,270,79,79); // Kék
	Kocsik[kUttisztito][1] = UjKocsi(574,1937.5,-2092.9,13.3,270,16,16); // Zöld

	//=============================== Farmer kocsik ================================================//
	Kocsik[kFarmer][0] = UjKocsi(531,-100.8336,21.9836,3.1007,72.4847,0,0); //
	UjKocsi(531,-104.1279,13.7522,3.0791,67.5403,0,0); //
	UjKocsi(607,-106.2814,8.4620,3.0777,71.3698,0,0); //
	UjKocsi(610,-110.4944,-2.9415,3.0813,72.6391,0,0); //
	Kocsik[kFarmer][1] = UjKocsi(531,-108.1380,3.5711,3.0820,70.9490,0,0); //
	
	//=============================== Kukás kocsik================================================//
	Kocsik[kKukas][0] = UjKocsi(408,1594.5927,-1553.6110,14.1413,0.9763,0,0); // 
	UjKocsi(408,1599.4874,-1553.8267,14.1402,0.4258,0,0); // 
	UjKocsi(408,1607.9569,-1553.7161,14.1293,0.0569,0,0); // 
	UjKocsi(408,1618.2479,-1553.2898,14.1399,359.3114,0,0); // 
	UjKocsi(408,1643.8153,-1525.5466,14.1132,181.5488,0,0); // 
	UjKocsi(408,1636.7588,-1526.0073,14.1471,180.3591,0,0); // 
	UjKocsi(408,1608.6321,-1493.5924,14.1105,89.6101,0,0); // 
	Kocsik[kKukas][1] = UjKocsi(408,1612.0316,-1504.1482,14.1026,180.4674,0,0); //


	//=============================== Bus =================================================//
	Buszok[0] = UjKocsi(431,1172.8610,-1793.9568,13.4988,178.8199,1,1);
	Buszok[1] = UjKocsi(431,1181.9176,-1794.1378,13.4974,181.0004,1,1);

	//=============================== Mechanic ============================================//
	/*Kocsik[kSzerelo][0] = UjKocsi(525,1991.8923,-2059.4961,13.2461,181.6538,4,4);
	UjKocsi(525,1987.1592,-2059.6191,13.2484,178.8609,4,4);
 	UjKocsi(525,1980.9518,-2059.0918,13.2535,178.7355,4,4);
	Kocsik[kSzerelo][1] = UjKocsi(525,1974.9824,-2058.8308,13.2602,177.6065,4,4);*/
	
	/*Kocsik[kSzerelo][0] = UjKocsi(525,707.8379,-441.6685,16.2156,179.4401,0,0); // szerelõ kocsi
	UjKocsi(525,703.2114,-441.6081,16.2094,180.2034,0,0); // szerelõ kocsi2
	UjKocsi(525,698.6635,-441.5694,16.2115,179.9118,0,0); // szerelõ kocsi3
	UjKocsi(525,693.9400,-441.4894,16.2193,179.9369,0,0); // szerelõ kocsi4
	UjKocsi(525,667.6635,-458.3829,16.2149,90.1189,0,0); // szerelõ kocsi5
	UjKocsi(525,667.7148,-464.6027,16.2129,90.3913,0,0); // szerelõ kocsi6
	Kocsik[kSzerelo][1] = UjKocsi(525,667.6804,-470.7760,16.2198,90.1363,0,0); // szerelõ kocsi7*/
	Kocsik[kSzerelo][0] = UjKocsi(525,-1922.3987,242.6111,40.9197,0.2328,0,0); // Szerelõ kocsi
	UjKocsi(525,-1927.8578,242.6190,40.9166,0.3134,0,0); // Szerelõ kocsi2
	UjKocsi(525,-1933.6768,242.6625,40.9305,0.3848,0,0); // Szerelõ kocsi3
	UjKocsi(525,-1936.0674,274.3133,40.9281,180.2336,0,0); // Szerelõ kocsi4
	Kocsik[kSzerelo][1] = UjKocsi(525,-1928.6295,274.5887,40.9270,180.8642,0,0); // Szerelõ kocsi5

	//============================== Prodkocsik ==============================================//
	Kocsik[kProd][0] = UjKocsi(499,2477.9087,-2106.4099,13.5386,359.5269,9,9); // Prod1
	UjKocsi(499,2482.6104,-2105.9873,13.5442,0.0966,9,9); // prod1
	UjKocsi(499,2482.6104,-2105.9873,13.5442,0.0964,9,9); // prod2
	UjKocsi(499,2487.3169,-2106.0815,13.5445,1.1575,9,9); // prod3
	UjKocsi(499,2467.4634,-2105.5354,13.5390,2.7397,9,9); // prod4
	UjKocsi(499,2493.5718,-2106.1997,13.5429,358.1802,9,9); // prod5
	UjKocsi(499,2500.0674,-2106.3008,13.5584,0.8564,9,9); // prod6
	Kocsik[kProd][1] = UjKocsi(499,2500.0669,-2106.3008,13.5584,0.8556,9,9); // prod7

	//================================= Planes ============================================//
	Kocsik[kRepulo][0] = UjKocsi(592,1522.1091,-2638.5942,14.7421,178.4927,1,2);
	UjKocsi(592,1447.3655,-2430.3220,14.7486,359.2640,1,2);
	UjKocsi(487,1890.5570,-2622.4946,13.7235,184.8887,1,2);
	UjKocsi(487,1818.1567,-2625.4451,13.7216,181.6589,1,2);
	UjKocsi(519,1728.9448,-2465.4414,14.4767,359.3543,1,2);
	Kocsik[kRepulo][1] = UjKocsi(519,1588.7611,-2464.0154,14.4734,1.0548,1,2);

	//================================= Kamionok ============================================//
	Kocsik[kKamion][0] = UjKocsi(403,-2491.6890,1861.3423,9.0062,358.0032,0,0);
	UjKocsi(403,-2497.2073,1861.3859,9.0057,0.0507,0,0);
 	UjKocsi(403,-2502.9890,1861.5704,9.0063,359.9586,0,0);
 	UjKocsi(403,-2508.0691,1861.8494,9.0065,0.1811,0,0);
 	//
 	UjKocsi(435,-2514.3611,1863.5895,8.0186,359.1520,0,0);
 	UjKocsi(435,-2520.9482,1863.4451,8.0403,0.6739,0,0);
	//benzines trailerek
	UjKocsi(584,-2526.8755,1864.9482,9.5253,0.1745,0,0);
	UjKocsi(584,-2532.7280,1864.9276,9.5892,0.4850,0,0);
	UjKocsi(584,-2537.9958,1864.9663,9.5360,352.6723,0,0);
	UjKocsi(584,-2533.4700,1894.1731,9.5304,270.4120,0,0);
	Kocsik[kKamion][1] = UjKocsi(403,865.2429,-1255.5051,15.4943,271.8335,0,0);

	//================================= Fûnyírók ============================================//
	Kocsik[kFunyiro][0] = UjKocsi(572,1963.4182,-1248.4615,19.6065,96.5755,0,0);
	UjKocsi(572,1962.9946,-1245.0325,19.6082,97.4387,0,0);
 	UjKocsi(572,1962.3868,-1241.1403,19.6037,98.9286,0,0);
 	UjKocsi(572,1961.1436,-1232.8992,19.5483,100.0681,0,0);
	Kocsik[kFunyiro][1] = UjKocsi(572,1960.5262,-1228.4879,19.5452,100.4749,0,0);

	//===================================== Egyéb =========================================//
	Kocsik[kSzabad][0] = UjKocsi(448,2100.2075,-1785.1062,12.9958,358.2572,3,6); // Pizza
	UjKocsi(448,2103.0811,-1785.1355,12.9890,359.9574,3,6); // Pizza
	UjKocsi(448,2106.1257,-1785.1561,12.9862,359.4530,3,6); // Pizza
	UjKocsi(448,2108.9360,-1785.1675,12.9855,2.3489,3,6); // Pizza
	UjKocsi(510,1321.0304,-1561.5343,13.1525,161.9561,86,86); // Póstás
	UjKocsi(588,1478.769165, -1614.463013, 14.178690, 90.000, 1, 1); // HotDog

	//Fagyis hotdogos
	UjKocsi(588,993.0463,-1367.8411,13.2547,0.1765,0,0); //
	UjKocsi(588,999.0174,-1367.5870,13.1935,0.8225,1,1); //
	UjKocsi(588,1004.6067,-1367.7072,13.2041,0.5435,3,3); //
	UjKocsi(588,1009.3896,-1367.7137,13.2426,1.7170,6,6); //
	UjKocsi(588,1014.7714,-1367.5313,13.2741,2.4333,79,79); //
	UjKocsi(423,1016.5765,-1360.5327,13.4262,91.5841,0,0); //
	UjKocsi(423,1016.4218,-1356.4661,13.3982,91.0257,1,1); //
	UjKocsi(423,1016.4166,-1352.2853,13.3994,91.3107,3,3); //
	UjKocsi(423,1016.2906,-1348.4824,13.4006,91.0888,6,6); //
	Kocsik[kSzabad][1] = UjKocsi(423,1016.2755,-1344.5372,13.4008,89.2739,79,79); //

	//================================= Bérelhetõek =====================================//
	//LS
    BerelhetoKocsik[0] = UjKocsi(411,-2458.2668,1899.0200,7.9561,111.7329,0,0);
	UjKocsi(411,-2458.3247,1894.1473,7.9561,112.7939,0,0);
	UjKocsi(411,-2458.0847,1889.4246,7.9561,114.9337,0,0);
	UjKocsi(522,-2448.4316,1902.7054,7.8036,215.1714,0,0);
	UjKocsi(522,-2446.2463,1902.7150,7.7961,220.7225,0,0);
	UjKocsi(522,556.2228,-1291.4266,16.8016,351.5322,0,0);
	UjKocsi(463,-2441.8237,1902.8496,7.7690,151.2061,0,0);
	UjKocsi(463,-2439.9316,1902.6353,7.7673,160.4728,0,0);
	UjKocsi(431,-2452.6458,1895.4976,8.3319,180.5034,0,0);
	UjKocsi(560,-2458.2729,1883.0081,7.9338,114.8194,0,0);
	UjKocsi(560,-2458.1421,1878.7362,7.9345,116.8446,0,0);
	UjKocsi(560,-2458.2808,1874.4230,7.9344,119.9212,0,0);
	
	UjKocsi(542,-2439.5820,1886.9316,7.9724,119.2611,0,0);
	UjKocsi(542,-2439.6516,1881.9771,7.9723,121.5723,0,0);
	UjKocsi(542,-2439.6821,1877.3109,7.9724,123.8201,0,0);
	UjKocsi(413,-2439.7822,1892.0168,8.3152,118.3164,0,0);
	UjKocsi(409,-2452.9055,1880.4027,8.0290,359.8204,0,0);
	BerelhetoKocsik[1] = UjKocsi(481,560.1945,-1291.2655,16.7658,347.5744,0,0);
	
	//SF
	BerelhetoKocsik2[0] = UjKocsi(411,-1969.9403,259.9184,34.8990,62.7634,1,1);
	UjKocsi(411,-1970.0175,274.1110,34.8988,51.9537,1,1);
	UjKocsi(560,-1970.1488,286.3535,34.8772,56.6231,1,1);
	UjKocsi(560,-1969.7852,302.7459,34.8778,123.6915,1,1);
	UjKocsi(522,-1951.6058,302.0791,35.0314,88.1483,1,1);
	UjKocsi(522,-1951.6060,299.6559,35.0398,89.8846,1,1);
	UjKocsi(429,-1944.3376,269.2370,35.1536,65.6764,1,1);
	UjKocsi(429,-1944.2441,263.8683,35.1497,60.2471,1,1);
	BerelhetoKocsik2[1] = UjKocsi(551,-1956.0184,256.7292,35.2693,359.9594,1,1);


	//================================= ADMINKOCSIK =====================================//
	/*AdminKocsik[0] = UjKocsi(417,-2228.3696,2335.4746,7.6367,86.4485,0,0);
 	UjKocsi(417,-2228.0325,2318.4919,7.6171,90.4214,79,79);
	UjKocsi(452,-2224.2930,2399.1841,-0.4440,40.7615,0,0);
	UjKocsi(452,-2232.4529,2393.6548,-0.4742,41.0767,79,79);
	UjKocsi(446,-2254.0032,2430.3342,-0.6181,229.4649,0,0);
	UjKocsi(446,-2262.1563,2422.0168,-0.5655,222.0604,79,79);
	UjKocsi(484,-2198.6038,2420.6792,0.2675,307.2413,0,0);
	UjKocsi(454,-2205.3120,2426.7830,0.1395,317.1335,0,0);
	UjKocsi(446,-2233.6355,2450.2500,-0.5479,224.3948,126,126);
	AdminKocsik[1] = UjKocsi(452,-2241.1997,2442.5391,-0.2945,223.2807,126,126);

	UjKocsi(588,-1716.9987,396.4787,7.0850,315.8690,1,1);
	UjKocsi(588,-2753.9924,353.4545,4.1806,357.5315,1,1);
	UjKocsi(588,1599.0615,-1008.2370,23.8238,188.2971,1,1);
	UjKocsi(423,1676.6423,-1097.5588,23.9288,88.5477,1,1);
    UjKocsi(588,2126.7429,-1098.3855,24.6726,247.3347,1,1);
	
	UjKocsi(428, -1822.361, 1310.796, 59.858, 185.880, 0, 0);
	UjKocsi(428, -1816.449, 1311.398, 59.859, 186.023, 0, 0);
	UjKocsi(428, -1810.579, 1312.016, 59.857, 186.172, 0, 0);*/



	UtolsoKocsi = BerelhetoKocsik2[1];

	return 1;
}

public AllCarRespawn()
{
	new ido = gettime();
	for(new vehicleid=0;vehicleid<MAX_VEHICLES; vehicleid++)
	{
		if(IsVehicleConnected(vehicleid))
		{
			if(!IsVehicleOccupied(vehicleid))
			{
				if(KocsiUtolsoHasznalat[vehicleid] < (ido - 300) && TrailerAttached(vehicleid) == NINCS)
				{
					KocsiRespawn(vehicleid);
					//KocsiMatrica(vehicleid);
				}	 
			}
			if(IsKocsi(vehicleid, "Prod") || IsKocsi(vehicleid, "Uttisztito") || IsKocsi(vehicleid, "Kamion") || IsKocsi(vehicleid, "Funyiro") || IsKocsi(vehicleid, "Farmer") || IsKocsi(vehicleid, "Kukas") || IsKocsi(vehicleid, "Szerelo"))
				Gas[vehicleid] = MaxBenzin(vehicleid);
		}
	}
	SendClientMessageToAll(COLOR_GREEN, "<<< Minden használaton kívüli jármû visszavontatva >>>");
	return 1;
}

public PreparePaintball()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            SendClientMessage(i, COLOR_YELLOW, "A paintball mérkõzés 20 másodpercen belül kezdõdik.");
	        }
		}
	}
 	SetTimer("StartPaintball", 20000, 0);
	return 1;
}

public StartPaintball()
{
	PaintballRound = 1;
	StartingPaintballRound = 0;
	PaintballWinner = 999;
	PaintballWinnerKills = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            ResetWeapon(i);
	            GiveWeapon(i, 24, 999);
				GiveWeapon(i, 29, 999);
	            TogglePlayerControllable(i, 1);
	            SendClientMessage(i, COLOR_YELLOW, "A paintball mérkõzés elkezdõdött, 5 perc van hátra.");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				PlayerPaintballKills[i] = 0;
	        }
	    }
	}
	SetTimer("PaintballFreeze", 295000, 0);
	SetTimer("PaintballEnded", 300000, 0);
	return 1;
}
public Edzes(playerid)
{
	if(IsPlayerConnected(playerid) && Logged(playerid))
	{
		TogglePlayerControllable(playerid, 1);
		Msg(playerid, "Megtanultad a harc stílust!");
		PlayerInfo[playerid][pStilus] = TanultStilus[playerid];
		Cselekves(playerid, "befejezte az edzést...");
		Edzik[playerid] = 0;
		if(TanultStilus[playerid] == 1)
		{
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
		    TanultStilus[playerid] = 0;
		}
		else if(TanultStilus[playerid] == 2)
		{
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		    TanultStilus[playerid] = 0;
	 	}
		else if(TanultStilus[playerid] == 3)
		{
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		    TanultStilus[playerid] = 0;
		}
        /*else if(TanultStilus[playerid] == 4)
        {
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
		    TanultStilus[playerid] = 0;
		}*/
        else if(TanultStilus[playerid] == 5)
        {
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		    TanultStilus[playerid] = 0;
		}
	}
	return 1;
}
public maszas2(playerid)
{
	if(maszas[playerid] == 1)
	{
		TogglePlayerControllable(playerid,1);
        SetPlayerPos(playerid, 366.7386,196.2833,1014.1797);
		return 1;
	}
	else if(maszas[playerid] == 2)
	{
		TogglePlayerControllable(playerid,1);
        SetPlayerPos(playerid, 2543.2458,-1281.4784,1054.6406);
		return 1;
	}
	else if(maszas[playerid] == 3)
	{
		TogglePlayerControllable(playerid,1);
        SetPlayerPos(playerid, 1519.7733,-1016.9778,23.8567);
		return 1;
	}
	else if(maszas[playerid] == 4)
	{
		TogglePlayerControllable(playerid,1);
        SetPlayerPos(playerid, 260.7486,70.1920,1003.2422);
		return 1;
	}
	return 1;
}
/*public c4szereles(playerid)
{
	new string[256];
	if(c4ido[playerid] == 0)
	{
		TogglePlayerControllable(playerid,1);
		SendClientMessage(playerid, COLOR_YELLOW, "Felszerelted a c4-t menny ki a páncélterembõl!");
		c4ready = 1;
	}
	else
	{
	    format(string, sizeof(string), "%d", c4ido[playerid]);
		GameTextForPlayer(playerid, string, 1000, 0);
	    SetTimerEx("c4szereles", 1000, false, "ii", playerid);
	    c4ido[playerid]--;
	}
	return 1;
}*/
public BankLezar()
{
	DestroyDynamicObject(BankAjto);
	BankAjto = CreateDynamicObject(2634, 2144.1845703125, 1627.1131591797, 994.28723144531, 0, 0, 180.63439941406); 
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerToPoint(10, i, 2144.1914,1633.8092,993.6882))
		{
			SetPlayerPos(i, 2144.2673,1620.8644,993.6882);
			Rabol[i] = 0;
			ClearAnimations(i);
			UnFreeze(i);
		}
	}
	MikorRabolhato = 5400;
	BankRobIdo = 0;
	return 1;
}
public BankC4Robban(playerid)
{
	if(BankC4 == 0) return 1;
	CreateExplosion(2144.5300292969, 1626.8874511719, 994.06573486328, 2, 200.0);
	DestroyDynamicObject(BankC4);
	BankC4 = 0;
	DestroyDynamicObject(BankAjto);
	BankAjto = CreateDynamicObject(2634, 2145.56640625, 1632.2729492188, 992.6943359375, 85.355010986328, 292.65710449219, 119.51965332031);
	//SetTimer("BankLezar", 36000, 1);
	BankRobIdo = 900;
	PlayerInfo[playerid][pC4] = 0;
	return 1;
}
public c4szereles(playerid)
{
	if(PlayerToPoint(2, playerid, 2144.5300292969, 1626.8874511719, 994.06573486328))
	{
		PlayerInfo[playerid][pC4] = 0;
		C4Lerakva[playerid] = NINCS;
		BankC4 = CreateDynamicObject(1654, 2144.4560546875, 1626.865234375, 994.27081298828, 0, 0, 0);
		Msg(playerid, "C4 felszerelve a széf ajtajára, hamarosan robban!");
		Cselekves(playerid, "felszerelt egy C4-et a széf ajtajára...");
		//SetTimer("BankC4Robban", 6000, 1);
		SetTimerEx("BankC4Robban",  6000, false, "i", playerid);
		return 1;
	}
	if(C4Kocsiban[playerid] == NINCS)
	{
	    ClearAnimations(playerid);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		C4Lerakva[playerid] = 1;
		C4X[playerid] = x;
		C4Y[playerid] = y;
		C4Z[playerid] = z;
		Msg(playerid, "C4 felszerelve! Robbantás: (/C4 robbant)");
		Cselekves(playerid, "felszerelt egy C4-et...");
		return 1;
	}
	else
	{
	    Msg(playerid, "C4 felszerelve a kocsiba! Robbantás: (/C4 robbant)");
		Cselekves(playerid, "felszerelt egy C4-et a kocsiba...");
		return 1;
	}
}
public fuggoseg(playerid)
{
	SendClientMessage(playerid, COLOR_RED,"Függõ vagy szükséged van a cigire!!!");
	new Float:health;
	health = GetPlayerHealth(playerid ,health);
	SetHealth(playerid, health-15);
	return 1;
}


public PaintballFreeze()
{
	
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	           Freeze(i,5000);
	        }
		}
	}
	
	return 1;
}




public PaintballEnded()
{
	new string[256];
	new name[MAX_PLAYER_NAME];
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            if(IsPlayerConnected(PaintballWinner))
	            {
	                GetPlayerName(PaintballWinner, name, sizeof(name));
	                format(string,sizeof(string), "** %s megnyerte a PaintBall meccset %d öléssel! Jutalma %dFt! **", name, PaintballWinnerKills, PaintballWinnerKills*4000);
	                SendClientMessage(i, COLOR_WHITE, string);
	            }
	            ResetWeapon(i);
	            PlayerPaintballing[i] = 0;
	            SetPlayerPos(i, BizzInfo[BIZ_PB][bEntranceX],BizzInfo[BIZ_PB][bEntranceY],BizzInfo[BIZ_PB][bEntranceZ]);
	        }
		}
	}
	PaintballPlayers = 0;
	GiveMoney(PaintballWinner, PaintballWinnerKills*4000);
	AnnouncedPaintballRound = 0;
    PaintballRound = 0;
	return 1;
}

public PrepareKarting()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 9;
				SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
				SendClientMessage(i, COLOR_YELLOW, "Kart Race will start in 20 seconds, go to the starting line.");
	        }
		}
	}
	SetTimer("StartKarting", 20000, 0);
	return 1;
}

public StartKarting()
{
	KartingRound = 1;
	StartingKartRound = 0;
	EndingKartRound = 0;
	FirstKartWinner = 999;
	SecondKartWinner = 999;
	ThirdKartWinner = 999;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 10;
	            SendClientMessage(i, COLOR_YELLOW, "Green light, go go go !");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	            SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
	        }
	    }
	}
	SetTimer("KartingEnded", 240000, 0);
	return 1;
}

public KartingEnded()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 0;
	            DisablePlayerCheckpoint(i);
	        }
		}
	}
	AnnouncedKartRound = 0;
    KartingRound = 0;
	return 1;
}

public DollahScoreUpdate()
{
	new Score;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
   			Score = PlayerInfo[i][pLevel];
			SetPlayerScore(i, Score);
		}
	}
	return 1;
}

/*stock udb_hash(buf[])
{
	new length=strlen(buf);
	new s1 = 1;
	new s2 = 0;
	new n;
	for (n=0; n<length; n++)
	{
		s1 = (s1 + buf[n]) % 65521;
		s2 = (s2 + s1)     % 65521;
	}
	return (s2 << 16) + s1;
}*/

public Encrypt(string[])
{
	for(new x=0; x < strlen(string); x++)
	{
		string[x] += (3^x) * (x % 15);
		if(string[x] > (0xff))
			string[x] -= 256;
	}
	return 1;
}

stock sscanf(string[], format[], {Float,_}:...)
{
	#if defined isnull
		if (isnull(string))
	#else
		if (string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
		{
			return format[0];
		}
	#pragma tabsize 4
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs(),
		delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if ('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					num = 0,
					ch = string[stringPos];
				do
				{
					stringPos++;
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{
				setarg(paramPos, 0, _:floatstr(string[stringPos]));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\'':
			{
				new
					end = formatPos - 1,
					ch;
				while ((ch = format[++end]) && ch != '\'') {}
				if (!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if ((ch = strfind(string, format[formatPos], false, stringPos)) == -1)
				{
					if (format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\'';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
					end = stringPos - 1,
					id = 0,
					bool:num = true,
					ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if (num)
					{
						if ('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if (num && IsPlayerConnected(id))
				{
					setarg(paramPos, 0, id);
				}
				else
				{
					#if !defined foreach
						#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
						#define __SSCANF_FOREACH__
					#endif
					string[end] = '\0';
					num = false;
					new
						name[MAX_PLAYER_NAME];
					id = end - stringPos;
					foreach (Player, playerid)
					{
						GetPlayerName(playerid, name, sizeof (name));
						if (!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos, 0, playerid);
							num = true;
							break;
						}
					}
					if (!num)
					{
						setarg(paramPos, 0, INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
						#undef foreach
						#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if (!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if ((delim = format[formatPos++]) > ' ')
		{
			if (delim == '\'')
			{
				while ((delim = format[formatPos++]) && delim != '\'') {}
			}
			else if (delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}

stock NumLines(fname[])
{
	new
		File:fHnd = fopen(fname, io_read),
		lines = 0;
	if (fHnd)
	{
		new
			buffer[256]; // Size of the likely longest line / 4
		while (fread(fHnd, buffer, .pack = true))
		{
			lines++;
		}
	}
	return lines;
}

stock right(source[], len)
{
	new retval[256], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, 256);
	return retval;
}

public Spectator()
{
	new string[128];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			//if(GetPlayerPing(i) >= 500 && PlayerInfo[i][pAdmin] < 1) { Kick(i); }
			if(Spectate[i] < 253 && Spectate[i] != 255)
			{
				SetPlayerColor(i,COLOR_SPEC);
				TogglePlayerControllable(i, 0);
				new targetid = Spectate[i];
				if(IsPlayerConnected(targetid))
				{
				    TogglePlayerSpectating(i, 1);
				    if(PlayerInfo[i][pAdmin] >= 1 || TvEngedely[i] == 1)
				    {
				        new Float:health, Float:pajzs;
					    new name[MAX_PLAYER_NAME];
					    GetPlayerName(targetid, name, sizeof(name));
						GetPlayerArmour(targetid, pajzs);
					    GetPlayerHealth(targetid, health);
					    format(string, sizeof(string), "~n~~n~~n~~n~~n~~y~%s(ID:%d)~n~~y~elet:%.1f pajzs:%.1f ",name,targetid,health,pajzs);
					    GameTextForPlayer(i, string, 2500, 3);
				    }
				    if(IsPlayerInAnyVehicle(targetid))
					{
					    new carid = GetPlayerVehicleID(targetid);
					    PlayerSpectateVehicle(i, carid);
					}
					else
					{
					    PlayerSpectatePlayer(i, targetid);
					}
					if(GetPlayerInterior(targetid) == 0)
					{
						SetPlayerInterior(i,0);
					}
					else if(GetPlayerInterior(targetid) > 0)
					{
						SetPlayerInterior(i,GetPlayerInterior(targetid));
					}
				}//Targetid connected
			}
			if(Spectate[i] == 253)
			{
				TogglePlayerControllable(i, 1);
				TogglePlayerSpectating(i, 0);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				Unspec[i][sLocal] = 255;
				SetSpawnInfo(i, SPAWNID, PlayerInfo[i][pModel], Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]-1.0, 1.0, -1, -1, -1, -1, -1, -1);
				SetPlayerToTeamColor(i);
				MedicBill[i] = 0;
				if(PlayerInfo[i][pDonateRank] > 0)
		        {
		            SetSpawnInfo(i, SPAWNID, PlayerInfo[i][pModel], Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(i);
					SetCameraBehindPlayer(i);
		        }
		        else
		        {
					SpawnPlayer(i);
					if(AdminDuty[i])
						SetPlayerColor(i, COLOR_DBLUE);
				}
				Spectate[i] = 255;
			}
			if(Spectate[i] == 254)
			{
				TogglePlayerControllable(i, 1);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				SetPlayerPos(i, Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 256)
			{
				SetPlayerToTeamColor(i);
				if(AdminDuty[i]) SetPlayerColor(i, COLOR_DBLUE);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 257)
			{
				Spectate[i] = 254;
			}
		}
	}
}

//------------------------------------------------------------------------------------------------------

public JatekosBeszallas(playerid, vehicleid)
{
	if(Lefoglalt[playerid] == 1) return 1;

	new Float:x, Float:y, Float:z, nemnekivalo = 0;
	GetPlayerPos(playerid, x, y, z);

	if(vehicleid >= LKocsik[0][0] && vehicleid <= LKocsik[0][1] || vehicleid >= LKocsik[14][0] && vehicleid <= LKocsik[14][1])
	{
	    if(!LMT(playerid, LMUNKA_SCPD) && !LMT(playerid, LMUNKA_FBI))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ez rendõrségi jármû, ebbe nem szállhatsz be!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[1][0] && vehicleid <= LKocsik[1][1])
	{
	    if(!LMT(playerid, LMUNKA_FBI))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ez FBI jármû, csak az FBI tagjai használhatják!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[2][0] && vehicleid <= LKocsik[2][1])
	{
	    if(!LMT(playerid, LMUNKA_BALLAS))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a banda tagja!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[3][0] && vehicleid <= LKocsik[3][1] || vehicleid >= LKocsik[20][0] && vehicleid <= LKocsik[20][1])
	{
	    if(!LMT(playerid, LMUNKA_MENTO))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy mentõs!");
			nemnekivalo = 1;
		}
	}
	/*if(vehicleid >= LKocsik[20][0] && vehicleid <= LKocsik[20][1])
	{
	    if(!LMT(playerid, LMUNKA_SFMENTO))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy SF mentõs!");
			nemnekivalo = 1;
		}
	}*/
	if(vehicleid >= LKocsik[4][0] && vehicleid <= LKocsik[4][1])
	{
	    if(!LMT(playerid, LMUNKA_CAMORRA))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a mafia tagja!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[5][0] && vehicleid <= LKocsik[5][1])
	{
	    if(!LMT(playerid, LMUNKA_YAKUZA))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a család tagja!");
			nemnekivalo = 1;
		}
	}

	if(vehicleid >= LKocsik[6][0] && vehicleid <= LKocsik[6][1])
	{
	    if(!LMT(playerid, LMUNKA_ONKORMANYZAT))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy az önkormányzat tagja!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[7][0] && vehicleid <= LKocsik[7][1])
	{
	    if(!IsHitman(playerid))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ez egy olyan jármû amihez nem értesz... nem tudod hogy kell beindítani...");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[8][0] && vehicleid <= LKocsik[8][1])
	{
	    if(!LMT(playerid, LMUNKA_RIPORTER))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ebbe csak a riporterek szállhatnak be!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[9][0] && vehicleid <= LKocsik[9][1] || vehicleid >= LKocsik[19][0] && vehicleid <= LKocsik[19][1])
	{
	    if(!LMT(playerid, LMUNKA_TAXI))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy taxis!");
			nemnekivalo = 1;
		}
	}
	/*if(vehicleid >= LKocsik[19][0] && vehicleid <= LKocsik[19][1])
	{
	    if(!LMT(playerid, LMUNKA_SFTAXI))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy SF taxis!");
			nemnekivalo = 1;
		}
	}*/
	if(vehicleid >= LKocsik[10][0] && vehicleid <= LKocsik[10][1])
	{
	    if(!LMT(playerid, LMUNKA_VAGOS))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a család tagja!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[11][0] && vehicleid <= LKocsik[11][1])
	{
	    if(!LMT(playerid, LMUNKA_SAMAFIA))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a család tagja!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[12][0] && vehicleid <= LKocsik[12][1])
	{
	    if(!LMT(playerid, LMUNKA_AZTEC))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a banda tagja!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[13][0] && vehicleid <= LKocsik[13][1])
	{
	    if(!LMT(playerid, LMUNKA_KATONA))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a katonaság tagja!");
			nemnekivalo = 1;
		}
	}
 	if(vehicleid >= LKocsik[15][0] && vehicleid <= LKocsik[15][1])
	{
	    if(!IsAnInstructor(playerid) && TakingLesson[playerid] != 1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ezt a jármûvet csak oktatók használhatják!");
			nemnekivalo = 1;
		}
	}
	/*if(vehicleid >= LKocsik[16][0] && vehicleid <= LKocsik[16][1])
	{
	    if(TakingLesson[playerid] != 1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ezt a jármûvet csak azok használhatják, akik épp tanulni vezetnek!");
			nemnekivalo = 1;
		}
	}*/
	if(vehicleid >= LKocsik[17][0] && vehicleid <= LKocsik[17][1])
	{
	    if(PlayerInfo[playerid][pSwattag] != 1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ez SWAT jármû, csak SWAT tagok használhatják!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[18][0] && vehicleid <= LKocsik[18][1])
	{
	    if(!LMT(playerid, LMUNKA_GSF))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a banda tagja!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[21][0] && vehicleid <= LKocsik[21][1])
	{
	    if(!LMT(playerid, LMUNKA_VPOP))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Csak VPOP Tagoknak!");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[22][0] && vehicleid <= LKocsik[22][1])
	{
	    if(!LMT(playerid, LMUNKA_COLUMBIA))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a Russian Maffia Tagja.");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= LKocsik[23][0] && vehicleid <= LKocsik[23][1])
	{
	    if(!LMT(playerid, LMUNKA_HITMAN))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a D. Cortez Mafia Tagja.");
			nemnekivalo = 1;
		}
	}
	if(vehicleid >= AdminKocsik[0] && vehicleid <= AdminKocsik[1])
	{
	    if(!Admin(playerid, 1))
	    {
			nemnekivalo = 1;
		}
	}
	if(IsKocsi(vehicleid, "Uttisztito"))
	{
		if(!AMT(playerid, MUNKA_UTTISZTITO))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy úttisztító!");
			nemnekivalo = 1;
		}
	}
	if(IsKocsi(vehicleid, "Kamion"))
	{
		if(!AMT(playerid, MUNKA_KAMIONOS))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy kamionsofõr!");
			nemnekivalo = 1;
		}
	}
    if(IsKocsi(vehicleid, "Farmer"))
	{
		if(!AMT(playerid, MUNKA_FARMER))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy farmer!");
			nemnekivalo = 1;
		}
	}
	if(IsKocsi(vehicleid, "Szerelo"))
	{
		if(!AMT(playerid, MUNKA_SZERELO))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy szerelõ!");
			nemnekivalo = 1;
		}
	}
	if(IsKocsi(vehicleid, "Funyiro"))
	{
		if(!AMT(playerid, MUNKA_FUNYIRO))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy fûnyírós!");
			nemnekivalo = 1;
		}
	}
	if(IsKocsi(vehicleid, "Kukas"))
	{
		if(!AMT(playerid, MUNKA_KUKAS))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy kukás!");
			nemnekivalo = 1;
		}
	}
	if(IsKocsi(vehicleid, "Busz"))
	{
		if(!AMT(playerid, MUNKA_BUS))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy busz sofõr!");
			nemnekivalo = 1;
		}
	}
	if(nemnekivalo == 1)
	{
	    RemovePlayerFromVehicle(playerid);
		return 0;
	}

	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!ispassenger)
	{
		if(!IsPlayerNPC(playerid) && NPCKocsi[vehicleid])
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);
			Msg(playerid, "Ebbe ne szállj be!");
			return 1;
		}
		new VanVezeto = -1;
		for(new jatekos = 0; jatekos < MAX_PLAYERS; jatekos++)
		{
			if(IsPlayerInVehicle(jatekos, vehicleid))
			{
				if(GetPlayerState(jatekos) == 2)
				{
					VanVezeto = jatekos;
					break;
				}
			}
		}
		if(VanVezeto != -1)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			ClearAnimations(playerid);
			TogglePlayerControllable(VanVezeto, true);
			SetPlayerPos(playerid, x, y, (z+1));

			LopasProbalkozas[playerid]++;
			if(LopasProbalkozas[playerid] < 5)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Ez nonos kocsilopás! Használd a /kiszed-et, mert jailt kapsz!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Mondtam, hogy jailt kapsz!");
				Jail(playerid, "+", 600, "ajail", "Nonos kocsilopás");
				LopasProbalkozas[playerid] = 0;
			}
			return 0;
		}
	}
	/*if(ov[playerid] == 0)
	{
		if(Bikes(vehicleid)) 
			Msg(playerid, "Nincs rajtad bukósisak, felvevéséhez írd be: ('/sisak')");
		else
			Msg(playerid, "Az öved nincs becsatolva, becsatoláshoz írd be: ('/öv')");
	}*/
	/*new Veh = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(Veh == 431 || Veh == 437)
	{
	    new State;
	    State=GetPlayerState(playerid);
     	if(State!=PLAYER_STATE_DRIVER)
      	{
		    new money;
		    money = GetMoney(playerid);
		    if(money >= 320)
		    {
			    GiveMoney(playerid, -320);
			    SendClientMessage(playerid, COLOR_RED, " 320 forintot fizettél a busz jegyért");
			    return 1;
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
			}
		}
	}*/
	return 1;
}

public IsAnInstructor(playerid)
{
	if(LMT(playerid, LMUNKA_OKTATO)) return 1;
	return 0;
}

public IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==5 || member==6 || member==8 || member==11|| member==12|| member==13|| leader==3)
		{
		    return 1;
		}
		if(leader==5 || leader==6 || leader==8 || leader==11|| leader==12|| leader==13|| leader==3)
		{
		    return 1;
		}
	}
	return 0;
}

public IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNKA_FBI) || LMT(playerid, LMUNKA_KATONA) || LMT(playerid, LMUNKA_VPOP) ||  LMT(playerid, LMUNKA_SFPD))
		    return 1;
	}
	return 0;
}
public IsHitman(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pHitman] > 0)
		    return 1;
	}
	return 0;
}
public IsDirector(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pHitman] == 2)
		    return 1;
	}
	return 0;
}

public IsAdmin(playerid)
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	    return 1;
	else
		return 0;
}

public IsAS(playerid)
{
	if(PlayerInfo[playerid][pAS] == 1 || Adminseged[playerid] == 1)
	    return 1;
	else
		return 0;
}

stock Admin(playerid, szint = 1, maxszint = NINCS)
{
	if(IsScripter(playerid) || IsClint(playerid))
		return 1;
	else if(maxszint == NINCS && PlayerInfo[playerid][pAdmin] >= szint || maxszint == 0 && PlayerInfo[playerid][pAdmin] == szint || PlayerInfo[playerid][pAdmin] >= szint && PlayerInfo[playerid][pAdmin] <= maxszint)
	    return 1;
	else
		return 0;
}


public IsKocsi(carid, tipus[])
{
	if(carid <= 0) return 0;

	if(strcmp(tipus, "Uttisztito", true) == 0)
	{
		if(carid >= Kocsik[kUttisztito][0] && carid <= Kocsik[kUttisztito][1])
			return 1;
	}
	else if(strcmp(tipus, "Prod", true) == 0)
	{
		if(carid >= Kocsik[kProd][0] && carid <= Kocsik[kProd][1])
			return 1;
	}
	else if(strcmp(tipus, "Kamion", true) == 0)
	{
		if(carid >= Kocsik[kKamion][0] && carid <= Kocsik[kKamion][1])
			return 1;
	}
	else if(strcmp(tipus, "Farmer", true) == 0)
	{
		if(carid >= Kocsik[kFarmer][0] && carid <= Kocsik[kFarmer][1])
			return 1;
	}
    else if(strcmp(tipus, "Funyiro", true) == 0)
	{
		if(carid >= Kocsik[kFunyiro][0] && carid <= Kocsik[kFunyiro][1])
			return 1;
	}
	else if(strcmp(tipus, "Kukas", true) == 0)
	{
		if(carid >= Kocsik[kKukas][0] && carid <= Kocsik[kKukas][1])
			return 1;
	}
	else if(strcmp(tipus, "Szerelo", true) == 0)
	{
		if(carid >= Kocsik[kSzerelo][0] && carid <= Kocsik[kSzerelo][1])
			return 1;
	}
	else if(strcmp(tipus, "Busz", true) == 0)
	{
		if(carid >= Buszok[0] && carid <= Buszok[1])
			return 1;
	}
    else if(strcmp(tipus, "Szabad", true) == 0)
	{
		if(carid >= Kocsik[kSzabad][0] && carid <= Kocsik[kSzabad][1])
			return 1;
	}

	return 0;
}

public IsAVsKocsi(kocsi)
{
	new x;
	for(x = 0; x < MAXVSKOCSI; x++)
	{
	    if(CarInfo[x][Van] == 1)
	    {
	        if(CarInfo[x][cId] == kocsi)
		        return x;
	    }
	}
	return -1;
}

public IsAtDealership(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(20.0, playerid, 1078.572753, -1756.450561, 16.768434))
			return 1;
	}
	return 0;
}

public IsAtClothShop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(25.0,playerid,207.5627,-103.7291,1005.2578) || PlayerToPoint(25.0,playerid,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
		    return 1;
		}
		else if(PlayerToPoint(30.0,playerid,214.4470,-7.6471,1001.2109) || PlayerToPoint(50.0,playerid,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
		    return 1;
		}
	}
	return 0;
}

public IsAtGasStation(playerid)
{
	for(new b = 0; b < MAX_BENZINKUT; b++)
	{
		if(PlayerToPoint(BenzinKutak[b][bTav], playerid, BenzinKutak[b][bPosX], BenzinKutak[b][bPosY], BenzinKutak[b][bPosZ]))
		{
			return b;
		}
	}
	
	return NINCS;
    
	/*if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(6.0,playerid,1004.0070,-939.3102,42.1797) || PlayerToPoint(6.0,playerid,1944.3260,-1772.9254,13.3906))
		{//LS
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,-90.5515,-1169.4578,2.4079) || PlayerToPoint(6.0,playerid,-1609.7958,-2718.2048,48.5391))
		{//LS
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid, 657.46, -560.05, 16.34) || PlayerToPoint(8.0,playerid, 657.20, -570.18, 16.34))
		{
			return 1;
		}
		else if(PlayerToPoint(6.0,playerid,-2029.4968,156.4366,28.9498) || PlayerToPoint(8.0,playerid,-2408.7590,976.0934,45.4175))
		{//SF
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,-2243.9629,-2560.6477,31.8841) || PlayerToPoint(8.0,playerid,-1676.6323,414.0262,6.9484))
		{//Between LS and SF
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,2202.2349,2474.3494,10.5258) || PlayerToPoint(10.0,playerid,614.9333,1689.7418,6.6968))
		{//LV
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,-1328.8250,2677.2173,49.7665) || PlayerToPoint(6.0,playerid,70.3882,1218.6783,18.5165))
		{//LV
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,2113.7390,920.1079,10.5255) || PlayerToPoint(6.0,playerid,-1327.7218,2678.8723,50.0625))
		{//LV
		    return 1;
		}
	}*/
}

public IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(1.0,playerid,403.8266,-2088.7598,7.8359) || PlayerToPoint(1.0,playerid,398.7553,-2088.7490,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,396.2197,-2088.6692,7.8359) || PlayerToPoint(1.0,playerid,391.1094,-2088.7976,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,383.4157,-2088.7849,7.8359) || PlayerToPoint(1.0,playerid,374.9598,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,369.8107,-2088.7927,7.8359) || PlayerToPoint(1.0,playerid,367.3637,-2088.7925,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,362.2244,-2088.7981,7.8359) || PlayerToPoint(1.0,playerid,354.5382,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
	}
	return 0;
}

public IsAtCookPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
	    {//Cluckin Bell
	        return 1;
	    }
	    else if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
		{//Burgershot
		    return 1;
		}
		else if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
		{//Well Stacked Pizza
		    return 1;
		}
	}
	return 0;
}

public IsAtBar(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(4.0,playerid,495.7801,-76.0305,998.7578) || PlayerToPoint(10.0,playerid,-229.143188, 1401.401611, 27.765625) ||
		PlayerToPoint(4.0,playerid,499.9654,-20.2515,1000.6797)|| PlayerToPoint(7.0,playerid,1257.7136,-791.0314,1084.0078))
		{//In grove street bar (with girlfriend), and in Havanna, mafi hq
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,1215.9480,-13.3519,1000.9219) || PlayerToPoint(10.0,playerid,-2658.9749,1407.4136,906.2734))
		{//PIG Pen
		    return 1;
		}
	}
	return 0;
}

public IsABoat(carid)
{
	new model = GetVehicleModel(carid);
	new hajok[10] = {430, 446, 452, 453, 454, 472, 473, 484, 493, 595};
	for(new u = 0; u < sizeof(hajok); u++)
	{
		if(hajok[u] == model)
			return 1;
	}
	return 0;
}

public IsAPlane(carid)
{
	new model = GetVehicleModel(carid);
	new repcsik[20] = {417,425,447,460,469,476,487,488,497,511,512,513,519,520,548,553,563,577,592,593};
	for(new u = 0; u < sizeof(repcsik); u++)
	{
		if(repcsik[u] == model)
			return 1;
	}
	return 0;
}
public LakoKocsik(carid)
{
	new model = GetVehicleModel(carid);
	new lako[2] = {483, 508};
	for(new u = 0; u < sizeof(lako); u++)
	{
		if(lako[u] == model)
			return 1;
	}
	return 0;
}
public Bikes(carid)
{
	new model = GetVehicleModel(carid);
	new bikes[12] = {448, 461, 462, 463, 468, 521, 522, 581, 586, 481, 509, 510};
	for(new u = 0; u < sizeof(bikes); u++)
	{
		if(bikes[u] == model)
			return 1;
	}
	return 0;
}

public IsAMotor(carid)
{
	new model = GetVehicleModel(carid);
	new bikes[12] = {448, 461, 462, 463, 468, 521, 522, 581, 586};
	for(new u = 0; u < sizeof(bikes); u++)
	{
		if(bikes[u] == model)
			return 1;
	}
	return 0;
}

public IsABicikli(carid)
{
	new model = GetVehicleModel(carid);
	new biciklik[3] = {481, 509, 510};
	for(new u = 0; u < sizeof(biciklik); u++)
	{
		if(biciklik[u] == model)
			return 1;
	}
	return 0;
}

public IsACopCar(carid)
{
	if((carid >= LKocsik[0][0]) && (carid <= LKocsik[0][1]) || (carid >= LKocsik[1][0]) || (carid <= LKocsik[1][1]) || (carid >= LKocsik[14][0]) && (carid <= LKocsik[14][1]) && (carid >= LKocsik[20][0]) && (carid <= LKocsik[20][1]))
	{
     	return 1;
	}
	return 0;
}

public IsAnAmbulance(carid)
{
	if(carid >= LKocsik[3][0] && carid <= LKocsik[3][1] || carid >= LKocsik[20][0] && carid <= LKocsik[20][1])
		return 1;
	return 0;
}

public IsATruck(carid)
{
	new model = GetVehicleModel(carid);
	new jarmuvek[10] = {403, 414, 433, 456, 498, 499, 514, 515, 573, 609};
	for(new u = 0; u < sizeof(jarmuvek); u++)
	{
		if(jarmuvek[u] == model)
			return 1;
	}
	return 0;
}

public IsAPlato(carid)
{
	new model = GetVehicleModel(carid);
	new jarmuvek[4] = {435, 450, 591, 584};
	for(new u = 0; u < sizeof(jarmuvek); u++)
	{
		if(jarmuvek[u] == model)
			return 1;
	}
	return 0;
}

stock IsCarupCar(kocsinev[], carupid)
{

	new Carup0[][] = {
		{"Linerunner"},
		{"Dumper"},
		{"Firetruck"},
		{"Trashmaster"},
		{"Pony"},
		{"Mule"},
		{"Leviathan"},
		{"Whoopee"},
		{"Hunter"},
		{"Rhino"},
		{"Barracks"},
		{"Packer"},
		{"Monster0"},
		{"Seasparrow"},
		{"Flatbed"},
		{"Sparrow"},
		{"Dinghy"},
		{"Rustler"},
		{"BMX"},
		{"Dozer"},
		{"Hotring0"},
		{"Sandking"},
		{"HotringA"},
		{"HotringB"},
		{"Bloodring"},
		{"Bike"},
		{"Mountain"},
		{"Tanker"},
		{"Roadtrain"},
		{"Hydra"},
		{"Cement"},
		{"Forklift"},
		{"Tractor"},
		{"Combine"},
		{"Vortex"},
		{"Cargobob"},
		{"Utility"},
		{"MonsterA"},
		{"MonsterB"},
		{"Raindance"},
		{"Kart"},
		{"Mower"},
		{"Dune"},
		{"DFT30"},
		{"Ranger"},
		{"SWAT"}
	};

	new Carup1[][] = {
		{"Caddy"},
		{"Baggage"},
		{"Tug"}
	};

    new Carup2[][] = {
	    {"Faggio"},
		{"Admiral"},
		{"Bravura"},
		{"Cadrona"},
		{"Camper"},
		{"Clover"},
		{"Esperanto"},
		{"Glendale"},
		{"Greenwood"},
		{"Hermes"},
		{"Intruder"},
		{"Majestic"},
		{"Oceanic"},
		{"Perennial"},
		{"Phoenix"},
		{"Picado"},
		{"Premier"},
		{"Previon"},
		{"Primo"},
		{"Regina"},
		{"Sadler"},
		{"Sunrise"},
		{"Tahoma"},
		{"Tampa"},
		{"Walton"}
	};

	new Carup3[][] = {
	    {"BF400"},
		{"Freeway"},
		{"Sanchez"},
		{"Quad"},
		{"Alpha"},
		{"Bandito"},
		{"Blista"},
		{"Bobcat"},
		{"Buccaner"},
		{"Buffalo"},
		{"Burrito"},
		{"Club"},
		{"Elegant"},
		{"Emperor"},
		{"Euros"},
		{"Fortune"},
		{"Journey"},
		{"Landstalker"},
		{"Mesa"},
		{"Nebula"},
		{"Rancher"},
		{"Sabre"},
		{"Solair"},
		{"Stallion"},
		{"Vincent"},
		{"Virgo"},
		{"Gates"},
		{"Willard"},
		{"Yosemite"},
		{"ZR350"}
	};

	new Carup4[][] = {
	    {"FCR900"},
		{"PCJ600"},
		{"Wayfarer"},
		{"Banshee"},
		{"Bullet"},
		{"Cheetah"},
		{"Comet"},
		{"Feltzer"},
		{"Huntley"},
		{"Hustler"},
		{"Infernus"},
		{"Merit"},
		{"Sentinel"},
		{"SuperGT"},
		{"Turismo"},
		{"Windsor"}
	};

	new Carup5[][] = {
	    {"NRG500"},
		{"Hotknife"},
		{"Patriot"},
		{"Stafford"},
		{"Stretch"},
		{"Maverick"}
	};

	new Carup6[][] = {
	    {"Elegy"},
		{"Flash"},
		{"Jester"},
		{"Stratum"},
		{"Sultan"},
		{"Uranus"}
	};

	new Carup7[][] = {
	    {"Blade"},
		{"Broadway"},
		{"Remington"},
		{"Savanna"},
		{"Slamvan"},
		{"Tornado"},
		{"Voodoo"}
	};

	new darab[8];
	darab[0] = 45;
	darab[1] = 3;
	darab[2] = 25;
	darab[3] = 30;
	darab[4] = 16;
	darab[5] = 6;
	darab[6] = 6;
	darab[7] = 7;

	if(carupid == 0)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (strcmp(Carup0[a], kocsinev, true) == 0)
				return 1;
		}
	}

	if(carupid == 1)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (strcmp(Carup1[a], kocsinev, true) == 0)
				return 1;
		}
	}

	if(carupid == 2)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (strcmp(Carup2[a], kocsinev, true) == 0)
				return 1;
		}
	}

	if(carupid == 3)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (strcmp(Carup3[a], kocsinev, true) == 0)
				return 1;
		}
	}

	if(carupid == 4)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (strcmp(Carup4[a], kocsinev, true) == 0)
				return 1;
		}
	}

	if(carupid == 5)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (strcmp(Carup5[a], kocsinev, true) == 0)
				return 1;
		}
	}

	if(carupid == 6)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (strcmp(Carup6[a], kocsinev, true) == 0)
				return 1;
		}
	}

	if(carupid == 7)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (strcmp(Carup7[a], kocsinev, true) == 0)
				return 1;
		}
	}

	return 0;

}

stock NagyKezdobetusNev(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;

	new nev[MAX_PLAYER_NAME];
	nev = PlayerNameEx(playerid);

	for(new n = 0; n < strlen(nev); n++)
	{
		if(n == 0 && nev[n] == chrtolower(nev[n]))
			return 0;
		if(nev[n] == '_' && n > 0 && nev[n+1] == chrtolower(nev[n+1]))
			return 0;
		//if(n > 0 && nev[n] != '_' && nev[n-1] != '_' && nev[n] != chrtolower(nev[n])) // Hogy a többi betü kisbetü-e
		//	return 0;
	}

	return 1;
}

stock IsValidName(playerid)
{
    if (IsPlayerConnected(playerid))
    {
        new player[24], alahuzasok = 0;
        GetPlayerName(playerid,player,24);

		new cenzura[3][10] = { "buzi", "kocsog", "hulye" };

		for(new x = 0; x < sizeof(cenzura); x++)
		{
			if(strfind(player, cenzura[x], false) != -1)
				return 0;
		}

        for(new n = 0; n < strlen(player); n++)
        {
        	if(player[n] == ']' || player[n] == '[' || player[n] == '_' && n == 0 || player[n] == '_' && n == (strlen(player) - 1))
				return 0;
        	if(player[n] == '_')
			{
				if(player[n-1] == '_' || player[n+1] == '_')
					return 0;
				else
					alahuzasok++;
			}
        }
        if(alahuzasok < 1 || alahuzasok > 2)
            return 0;
    }
    return 1;
}

stock IsValidNameFromString(string[])
{
	new alahuzasok = 0;
	for(new n = 0; n < strlen(string); n++)
	{
		if (string[n] == '_')
			alahuzasok++;
		if (string[n] == ']' || string[n] == '[')
			return 0;
	}

	if(alahuzasok < 1 || alahuzasok > 2)
		return 0;

    return 1;
}

IsValidSkin(skinid)
{
    #define	MAX_BAD_SKINS 22
    new badSkins[MAX_BAD_SKINS] =
    { 3, 4, 5, 6, 8, 42, 65, 74, 86, 119, 149, 208, 268, 273, 289 };
    if (skinid < 0 || skinid > 299) return false;
    for (new i = 0; i < MAX_BAD_SKINS; i++) { if (skinid == badSkins[i]) return false; }
    #undef MAX_BAD_SKINS
    return 1;
}

//------------------------------------------------------------------------------------------------------

public OnPlayerConnect(playerid)
{
	for(new x = 0; x < 100; x++) SendClientMessage(playerid, 0x00000000, " ");
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Betöltés folyamatban... kérlek várj...");

	AC_Figyelmeztetes[playerid] = 0; Fegyver[playerid] = {false, false, false, false, false, false, false, false, false, false, false, false}; Tolteny[playerid] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	Sisak[playerid] = 0; SisakotVesz[playerid] = 0;
	Aukciozik[playerid] = false; Harcol[playerid] = false; HarcolTerulet[playerid] = NINCS; Tamasi[playerid] = false; AJSzokesek[playerid] = 0; KocsitSokkolt[playerid] = 0;
	Rejtett[playerid] = 0; Jelzes[playerid] = 0; JelzesIdo[playerid] = 0; Varosban[playerid] = false; Ugrasok[playerid] = {0,0,0}; TaxiHivas[playerid] = false; MentoHivas[playerid] = false;
	Vizsgafajta[playerid] = 0; AnimIdo[playerid] = 0; SzemBekotve[playerid] = 0; SzajBekotve[playerid] = 0; JatekBetoltve[playerid] = false; Licitalt[playerid] = false;
	OvFlood[playerid] = 0; SebessegKorlat[playerid] = 0; Szunet[playerid] = false; SzunetIdo[playerid] = 0; Fbios[playerid] = NINCS; Hazbanvan[playerid] = 0;
	Nyomozott[playerid] = 0; JarmuKulcs[playerid] = NINCS; HazKulcs[playerid] = NINCS; NPC_ID[playerid] = NINCS;
	Sokkolt[playerid] = 0; Leutott[playerid] = 0; Leutve[playerid] = false; LeutveIdo[playerid] = 0; BelepesIdo[playerid] = 0; TrafiPax[playerid][tAktiv] = false; TrafiPax[playerid][tBuntetheto] = 0; Tankol[playerid][0] = 0; Kilepesek[playerid] = true;
	JatekosZsak[playerid] = NINCS; BenzintSzallit[playerid] = false; PlayerOnline[playerid] = true;
	HolTart[playerid] = NINCS; Tszin[playerid] = NINCS; Tkerek[playerid] = NINCS; Csere[playerid] = NINCS; MitCsere[playerid] = NINCS; AdminSzint[playerid] = 0; SzefEngedely[playerid] = 0;
	RadioHallgatas[playerid] = NINCS; LezartUtat[playerid] = 0; LezartUtZ[playerid] = 0.000000; LezartUtY[playerid] = 0.000000; LezartUtX[playerid] = 0.000000;
	/*MenyiABenzinAra[playerid] = NINCS; MenyitTankol[playerid] = NINCS; Tankol[playerid] = 0;*/ 
	UresUveg[playerid] = 0; KiMergezte[playerid] = NINCS; Mergezve[playerid] = 0; VanSzelvenye[playerid] = 0; talalatok[playerid] = 0;
	PSzam5[playerid] = 0; PSzam6[playerid] = 0; PSzam7[playerid] = 0; PSzam8[playerid] = 0;
	PSzam1[playerid] = 0; PSzam2[playerid] = 0; PSzam3[playerid] = 0; PSzam4[playerid] = 0;
	TudReportolni[playerid] = 0; Locsolas[playerid] = NINCS; Locsolniakar[playerid] = NINCS;
	BViadal[playerid] = 0; Nevek[playerid] = 0; Biztos[playerid] = 0; Belepve[playerid] = 0; Fbicelpont[playerid] = NINCS;
	PrivatEngedely[playerid] = NINCS; PrivatAr[playerid] = NINCS; PrivatAjanlat[playerid] = NINCS; VizsgaAr[playerid] = 0; VizsgaAjanlat[playerid] = NINCS; C4Kocsiban[playerid] = NINCS; C4Z[playerid] = 0.000000; C4Y[playerid] = 0.000000; C4X[playerid] = 0.000000; C4Lerakva[playerid] = 0;
	CsatlakozottSzamla[playerid] = NINCS; Szondaztat[playerid] = NINCS; KereskedoKocsiElad[playerid] = NINCS; KereskedoKocsiVetel[playerid] = NINCS; Rabol[playerid] = 0; //Tankol[playerid] = 0;
	Edzik[playerid] = 0; TanultStilus[playerid] = 0; AdasVeteliNeki[playerid] = NINCS; AdasVeteliTipus[playerid] = NINCS; MostLepettBe[playerid] = 1; AdminJelszoMegadva[playerid] = 0; Fegyvere[playerid] = 0;
	HitmanDuty[playerid] = 0; HibasBelepes[playerid] = 0; tuningolo[playerid] = 0; //ov[playerid] = 0;
	reporttiltva[playerid] = 0; FelujitasElfogadas[playerid] = NINCS; RegEngedely[playerid] = 0; RegAdatok[playerid] = 0;
	ElsoSpawn[playerid] = 1; Dialog[playerid] = -1; AFKIdo[playerid] = 0; AdminDuty[playerid] = 0;
	AFK[playerid] = 0; Visz[playerid] = NINCS; Engedely[playerid] = 0; LopasProbalkozas[playerid] = 0;
	SelectChar[playerid] = 0; HidePM[playerid] = 0; PhoneOnline[playerid] = 0;
	SelectCharID[playerid] = 0; SelectCharPlace[playerid] = 0; ChosenSkin[playerid] = 0;
	GettingJob[playerid] = 0; GuardOffer[playerid] = 999; GuardPrice[playerid] = 0;
    ApprovedLawyer[playerid] = 0; CallLawyer[playerid] = 0; WantLawyer[playerid] = 0;
	KickPlayer[playerid] = 0; CurrentMoney[playerid] = 0; UsedFind[playerid] = 0;
	CP[playerid] = 0; Robbed[playerid] = 0; Autocp[playerid] = 0; Repulocp[playerid] = 0; Hajocp[playerid] = 0; Kamioncp[playerid] = 0; Motorcp[playerid] = 0; Jogsineki[playerid] = NINCS; Tanulofelpenz[playerid] = 0;
	CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; CarCalls[playerid] = 0;
	RobbedTime[playerid] = 0; MoneyMessage[playerid] = 0; Condom[playerid] = 0;
	STDPlayer[playerid] = 0; SexOffer[playerid] = 999; SexPrice[playerid] = 0;
	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0;
	TalkingLive[playerid] = 255; LiveOffer[playerid] = 999; TakingLesson[playerid] = 0;
	RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; MapIconsShown[playerid] = 0;
	DrugOffer[playerid] = 999; PlayerCuffed[playerid] = 0; PlayerCuffedTime[playerid] = 0;
	DrugPrice[playerid] = 0; RegistrationStep[playerid] = 0; OnCK[playerid] = 999;
	DrugGram[playerid] = 0; ConnectedToPC[playerid] = 0; OrderReady[playerid] = 0; HitmanRendeles[playerid] = 0;
	JailPrice[playerid] = 0; MedicTime[playerid] = 0; NeedMedicTime[playerid] = 0; MedicBill[playerid] = 0;
	WantedPoints[playerid] = 0; PlacedNews[playerid] = 0; skine[playerid] = 0; fegyvere[playerid] = 0;
	OnDuty[playerid] = 0; WantedLevel[playerid] = 0; TestFishes[playerid] = 0;
	BoxWaitTime[playerid] = 0; SchoolSpawn[playerid] = 0; ChangePos2[playerid][1] = 0;
	SafeTime[playerid] = 60; TransportDuty[playerid] = 0; PlayerTied[playerid] = 0;
	BusCallTime[playerid] = 0; TaxiCallTime[playerid] = 0; MedicCallTime[playerid] = 0; MechanicCallTime[playerid] = 0;
	FindTimePoints[playerid] = 0; FindTime[playerid] = 0; JobDuty[playerid] = 0;
	Mobile[playerid] = 255; Music[playerid] = 0; BoxOffer[playerid] = 999; PlayerBoxing[playerid] = 0;
	Spectate[playerid] = 255; PlayerDrunk[playerid] = 0; PlayerDrunkTime[playerid] = 0;
	Unspec[playerid][sLocal] = 255; FishCount[playerid] = 0;
	WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999; WritingLine[playerid] = 0; BringingPaper[playerid] = 0; GotPaper[playerid] = 0;
	PaperOffer[playerid] = 999; ConsumingMoney[playerid] = 0;
    gLastCar[playerid] = 0; FirstSpawn[playerid] = 0; gBooc[playerid] = 0; gBoocszidas[playerid] = 0;
	gOoc[playerid] = 0; gNews[playerid] = 0; BigEar[playerid] = 0; gDice[playerid] = 0; gFam[playerid] = 0; gReport[playerid] = 0; gInfo[playerid] = 0;
	gSpeedo[playerid] = 0; gGas[playerid] = 1; roadblock[playerid] = 0; block[playerid] = NINCS;
	gPlayerLogged[playerid] = 0; gPlayerLogTries[playerid] = 0; gPlayerAccount[playerid] = 0;
	gPlayerSpawned[playerid] = 0; PlayerKarting[playerid] = 0; PlayerInKart[playerid] = 0;
	PlayerStoned[playerid] = 0;
	StartTime[playerid] = 0; TicketOffer[playerid] = 999; TicketMoney[playerid] = 0;
	TutTime[playerid] = 0; Drogozott[playerid] = 0; Animban[playerid] = 0; Animbanemrakhato[playerid] = 1; MunkaFelvetel[playerid] = 0;
	NevvaltasiEngedely[playerid] = 0; Skinsel[playerid] = 0; MunkaFolyamatban[playerid] = 0; Adminseged[playerid] = 0;
	
	
	gPlayerMission[playerid] = 0; TaxiAccepted[playerid] = 999; BusAccepted[playerid] = 999;
	PlayerInfo[playerid][pCash] = dollah; NoFuel[playerid] = 0;
	HireCar[playerid] = NINCS; PlayersChannel[playerid] = 999;
	TransportValue[playerid] = 0; TransportMoney[playerid] = 0; TransportTime[playerid] = 0; TransportCost[playerid] = 0; TransportDriver[playerid] = 999;
	Locator[playerid] = 0; PlayerOnMission[playerid] = 0; MissionCheckpoint[playerid] = 0;
	Tevezik[playerid] = NINCS; Tevezve[playerid] = NINCS; PlayerPaintballing[playerid] = 0; PlayerPaintballKills[playerid] = 0;
	Fishes[playerid][pLastFish] = 0; Fishes[playerid][pFishID] = 0;
	ProposeOffer[playerid] = 999; MarryWitness[playerid] = 999; MarryWitnessOffer[playerid] = 999; MarriageCeremoney[playerid] = 0; ProposedTo[playerid] = 999; GotProposedBy[playerid] = 999; DivorceOffer[playerid] = 999;
	PlayerInfo[playerid][pLevel] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pDonateRank] = 0;
	PlayerInfo[playerid][gPupgrade] = 0;
	PlayerInfo[playerid][pConnectTime] = -1;
	PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pOrigin] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pAccount] = 0;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pDeaths] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedDeaths] = 0;
	PlayerInfo[playerid][pPhoneBook] = 0;
	PlayerInfo[playerid][pLottoNr] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pBiggestFish] = 0;
	PlayerInfo[playerid][pJob1] = 0;
	PlayerInfo[playerid][pJob2] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pHeadValue] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pKokain] = 0;
	PlayerInfo[playerid][pHeroin] = 0;
	PlayerInfo[playerid][pMarihuana] = 0;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pFMember] = 255;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pChar] = 0;
	PlayerInfo[playerid][pContractTime] = 0;
	PlayerInfo[playerid][pContractTime2] = 0;
	PlayerInfo[playerid][pDetSkill] = 0;
	PlayerInfo[playerid][pSexSkill] = 0;
	PlayerInfo[playerid][pBoxSkill] = 0;
	PlayerInfo[playerid][pLawSkill] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pJackSkill] = 0;
	PlayerInfo[playerid][pCarSkill] = 0;
	PlayerInfo[playerid][pNewsSkill] = 0;
	PlayerInfo[playerid][pDrugsSkill] = 0;
	PlayerInfo[playerid][pCookSkill] = 0;
	PlayerInfo[playerid][pFishSkill] = 0;
	PlayerInfo[playerid][pRiasztoSkill] = 0;
	PlayerInfo[playerid][pHackingSkill] = 0;
	PlayerInfo[playerid][pSHealth] = 0.0;
	PlayerInfo[playerid][pHealth] = MAXHP;
	PlayerInfo[playerid][pPos_x] = 2246.6;
	PlayerInfo[playerid][pPos_y] = -1161.9;
	PlayerInfo[playerid][pPos_z] = 1029.7;
	PlayerInfo[playerid][pInt] = 15;
	PlayerInfo[playerid][pLocal] = NINCS;
	PlayerInfo[playerid][pModel] = 167;
	//new randphone = 1000 + random(8999);//minimum 1000  max 9999 //giving one at the start
	PlayerInfo[playerid][pPnumber] = 0;
	PlayerInfo[playerid][pPhousekey] = NINCS;
	PlayerInfo[playerid][pPbiskey] = 255;
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pBoatLic] = 0;
	PlayerInfo[playerid][pFishLic] = 0;
	PlayerInfo[playerid][pGunLic] = 0;
	PlayerInfo[playerid][pCarTime] = 0;
	PlayerInfo[playerid][pPayDay] = 0;
	PlayerInfo[playerid][pPayDayHad] = 0;
	PlayerInfo[playerid][pCDPlayer] = 0;
	PlayerInfo[playerid][pWins] = 0;
	PlayerInfo[playerid][pLoses] = 0;
	PlayerInfo[playerid][pAlcoholPerk] = 0;
	PlayerInfo[playerid][pDrugPerk] = 0;
	PlayerInfo[playerid][pMiserPerk] = 0;
	PlayerInfo[playerid][pPainPerk] = 0;
	PlayerInfo[playerid][pTraderPerk] = 0;
	PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pMissionNr] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pKWarns] = 0;
	PlayerInfo[playerid][pFuel] = 0;
	PlayerInfo[playerid][pLokator] = 0;
	PlayerInfo[playerid][pHamisNev] = 0;
	//PlayerInfo[playerid][pNyomkoveto] = 0;
	//PlayerInfo[playerid][pNyomkovetes] = 0;
	PlayerInfo[playerid][pSpawned] = 0;
	PlayerInfo[playerid][pGPS] = 0;
	PlayerInfo[playerid][pMuanyag] = 0;
	PlayerInfo[playerid][pCserje] = 0;
	PlayerInfo[playerid][pMak] = 0;
	PlayerInfo[playerid][pCannabis] = 0;
	PlayerInfo[playerid][pKaja] = 0;
	PlayerInfo[playerid][pDrogido] = 0;
	PlayerInfo[playerid][pAS] = 0;
	PlayerInfo[playerid][pCPosX] = 0.000000;
	PlayerInfo[playerid][pCPosY] = 0.000000;
	PlayerInfo[playerid][pCPosZ] = 0.000000;
	PlayerInfo[playerid][pCInt] = 0;
	PlayerInfo[playerid][pCVW] = 0;
	PlayerInfo[playerid][pCrash] = 0;
	PlayerInfo[playerid][pFegyver] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	PlayerInfo[playerid][pTolteny] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	PlayerInfo[playerid][pCelet] = MAXHP;
	PlayerInfo[playerid][pCpajzs] = 100.0;
	PlayerInfo[playerid][pPcarkey] = NINCS;
	PlayerInfo[playerid][pCigiUsed] = 0;
	PlayerInfo[playerid][pCigiFuggoseg] = 0;
	PlayerInfo[playerid][pCigi] = 0;
	PlayerInfo[playerid][pNikotin] = 0;
	PlayerInfo[playerid][pGyujto] = 0;
	PlayerInfo[playerid][pPia] = 0;
	PlayerInfo[playerid][pSwattag] = 0;
	PlayerInfo[playerid][pSwatRang] = 0;
	PlayerInfo[playerid][pKituntetes] = 0;
	PlayerInfo[playerid][pSzallitott] = 0;
	PlayerInfo[playerid][pSpawnchange] = 0;
	PlayerInfo[playerid][pAdminAlnevBe] = 0;
	PlayerInfo[playerid][pTeloEgyenleg] = 0;
	PlayerInfo[playerid][pUtlevel] = 0;
	PlayerInfo[playerid][pStilus] = 0;
	PlayerInfo[playerid][pBankSzamla] = 0;
	PlayerInfo[playerid][pBankSzamlaSzam] = 0;
	PlayerInfo[playerid][pBankSzamlaJelszo] = 0;
	PlayerInfo[playerid][pC4] = 0;
	PlayerInfo[playerid][pHitman] = 0;
	PlayerInfo[playerid][pHitmanNev][0] = EOS;
	PlayerInfo[playerid][pKey][0] = EOS;
	PlayerInfo[playerid][pPremiumCsomag] = 0;
	PlayerInfo[playerid][pPremiumIdo] = 0;
	PlayerInfo[playerid][pPremiumPont] = 0;
	PlayerInfo[playerid][pPower] = 0;
	PlayerInfo[playerid][pMotorJogsi] = 0;
	PlayerInfo[playerid][pKamionJogsi] = 0;
	PlayerInfo[playerid][pReportChannel] = NINCS;
	PlayerInfo[playerid][pViewReportChannel] = NINCS;
	PlayerInfo[playerid][pAdoHaz] = 0;
	PlayerInfo[playerid][pAdoHazHol] = 0;
	PlayerInfo[playerid][pAdoSzint] = 0;
	PlayerInfo[playerid][pAdoJarmu] = 0;
	PlayerInfo[playerid][pAdoKitoltve] = 0;
	PlayerInfo[playerid][pAdo] = 0;
	PlayerInfo[playerid][pAdoEllenorizve] = 0;

	PlayerRaceInfo[playerid][xVersenyen] = NINCS;
	PlayerRaceInfo[playerid][xEpites] = NINCS;

	ClearCrime(playerid);
	ClearFishes(playerid);
	ClearCooking(playerid);
	ClearGroceries(playerid);
	ClearMarriage(playerid);

	PlayerNameGet(playerid);
	if(egyezik(PlayerName(playerid), "Tamasi_Gabor")) Tamasi[playerid] = true;

	if(IsPlayerNPC(playerid))
	{
		gPlayerLogged[playerid] = 1;
		//SpawnPlayer(playerid);
		NPCCsatlakozas(PlayerName(playerid), playerid);
		return 1;
	}

	if(!IsValidName(playerid))
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ez RP szerver! Csak RP-s névvel jöhetsz! Azaz: Vezetéknév_Keresztnév");
		Kick(playerid);
		return 0;
	}

	if(!NagyKezdobetusNev(playerid))
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "A valóságban sem kisbetüvel írják a nevüket az emberek, kérlek írd át te is...");
		Kick(playerid);
		return 0;
	}
	
	/*if(!strcmp(PlayerName(playerid), "Gary_Roach_Sanderson", true) && strcmp(PlayerIP(playerid), "82.150.46.144"))
	{
		if(strcmp(PlayerIP(playerid), "192.168.0.101"))
		{
			SeeBan(playerid, 0, NINCS, "Urahara karakter", true);
			SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kibannolva Urahara szelleme által | Oka: Ne gyere már fel a karimmal légyszives... Köszi, pápá :)", PlayerIP(playerid));
			Kick(playerid);
		}
	}*/

	new query[512], where[128], ido, mido, gido = gettime();
	Format(query, "SELECT ido FROM %s WHERE %s", SQL_DB_Kocsik, where);
	Format(where, "cim='%s' or cim='%s'", PlayerName(playerid), PlayerIP(playerid));

	if(!IsPlayerNPC(playerid) && Mysql_Num(SQL_DB_Ban, where) >= 1)
	{
		Format(where, "cim='%s' or cim='%s ORDER BY ido DESC'", PlayerName(playerid), PlayerIP(playerid));
		mido = strval(Mysql_Get(SQL_DB_Ban, "ido", where));
		ido = floatround((0.0+mido-gido) / 3600.0, floatround_round);

		new meddig[128];
		if(ido > 0 && ido < 24) Format(meddig, "%d óráig", ido);
		else if(ido >= 24 && ido < (24*7))
		{
			if(ido % 24 == 0)
				Format(meddig, "%d napig", (ido / 24));
			else
				Format(meddig, "%d napig és %d óráig", floatround(ido/24, floatround_floor), (ido%24));
		}
		else if(ido >= (24*7))// && ido < (24*7*4))
		{
			if(ido % (24*7) == 0)
				Format(meddig, "%d hétig", (ido/24/7));
			else
			{
				if(ido % 24 == 0)
					Format(meddig, "%d hétig és %d napig", floatround(ido/24/7, floatround_floor), floatround((ido/24)%7, floatround_floor));
				else
					Format(meddig, "%d hétig, %d napig, és %d óráig", floatround(ido/24/7, floatround_floor), floatround((ido/24)%7, floatround_floor), (ido%24));
			}
		}
		
		if(ido <= 0)
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sajnálom, de te bannolva vagy.");
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sajnálom, de te bannolva vagy");
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Idõ: %s", meddig);
		}

		Kick(playerid);
		return 1;
	}

	numplayers++;
	CheckUtolso();

	if(RegCheck(playerid, "SQL"))
		PlayerInfo[playerid][pRegistered] = 2;
	else
	{
		Msg(playerid, "Nem vagy regisztrálva a szerverre. Regisztrálni a kezelõfelületen tudsz: www.usercp.[Gates].net");
		Kick(playerid);
	}
		//PlayerInfo[playerid][pRegistered] = 0;
		
	MysqlGetPlayerId(playerid);
	if(Registered(playerid) == 2)
		MysqlGetPass(playerid);

	strmid(PlayerInfo[playerid][pIP], PlayerIP(playerid), 0, strlen(PlayerIP(playerid)), 16);

	SetPlayerColor(playerid,COLOR_GRAD2);

	new bekistring[128], ip[20];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(bekistring, sizeof(bekistring), "[IP:%s, ID: %d]%s Csatlakozott", ip, playerid, PlayerName(playerid));
	BeKilepes(bekistring);

	new string[64];
	format(string, sizeof(string), "~g~¬dv~n~~y~rezd j¦l magad!~n~~r~weblapunk:~n~~b~~h~%s", weblap);
	GameTextForPlayer(playerid, string, 5000, 0);
	
	for(new c = 0; c < MAX_VEHICLES; c++)
	{
		if(!IsVehicleConnected(c)) continue;
		if(Locked(c))
			SetVehicleParamsForPlayer(playerid, c, 0, 1);
	}
	SpawnHely[playerid] = random(sizeof(LoginSpawn));
	
	
	//========================== /FISH ÚJRAIRVA [RAYGates]
	//========================== /FISH ÚJRAIRVA [RAYGates]
	halaszvege[playerid] = 0; // ne tiltsa le a horgászást
	new nev[MAX_PLAYER_NAME];
	new szam[100]; 
	GetPlayerName(playerid, nev, sizeof(nev));
    format(szam, sizeof(szam), "Halak/%s.ini",nev); 
    if(!dini_Exists(szam))
	{
		dini_Create(szam);
		
		dini_IntSet(szam, "Horgaszbot",0);
		dini_IntSet(szam,"Csali",0);
		dini_IntSet(szam,"OsszesFogott",0);
		dini_IntSet(szam, "Slot1",0);
		dini_IntSet(szam, "Slot2",0);
		dini_IntSet(szam, "Slot3",0);
		dini_IntSet(szam, "Slot4",0);
		dini_IntSet(szam, "Slot5",0);
		dini_IntSet(szam, "Slot1nev",0);
		dini_IntSet(szam, "Slot2nev",0);
		dini_IntSet(szam, "Slot3nev",0);
		dini_IntSet(szam, "Slot4nev",0);
		dini_IntSet(szam, "Slot5nev",0);
		dini_IntSet(szam, "Aranyhoz",0);
		
		pHalak[playerid][pAranyhoz] = dini_Int(szam, "Aranyhoz");
		pHalak[playerid][pSlot1] = dini_Int(szam, "Slot1");
		//strmid(pHalak[playerid][pSlot2nev], melyikhal, 0, strlen(melyikhal), 255);
		//strmid(pHalak[playerid][pSlot1nev], dini_Get(szam, "Slot1nev"), strlen(dini_Get(szam, "Slot1nev"))
		pHalak[playerid][pSlot1nev] = dini_Int(szam, "Slot1nev");
		pHalak[playerid][pSlot2nev] = dini_Int(szam, "Slot2nev");
		pHalak[playerid][pSlot3nev] = dini_Int(szam, "Slot3nev");
		pHalak[playerid][pSlot4nev] = dini_Int(szam, "Slot4nev");
		pHalak[playerid][pSlot5nev] = dini_Int(szam, "Slot5nev");
		pHalak[playerid][pSlot2] = dini_Int(szam, "Slot2");
		pHalak[playerid][pSlot3] = dini_Int(szam, "Slot3");
		pHalak[playerid][pSlot4] = dini_Int(szam, "Slot4");
		pHalak[playerid][pSlot5] = dini_Int(szam, "Slot5");
		pHalak[playerid][pHorgaszbot] = dini_Int(szam, "Horgaszbot");
		pHalak[playerid][pOsszesFogott] = dini_Int(szam, "OsszesFogott");
		pHalak[playerid][pCsali] = dini_Int(szam, "Csali");
    }
	else
	{
		pHalak[playerid][pAranyhoz] = dini_Int(szam, "Aranyhoz");
		pHalak[playerid][pSlot1] = dini_Int(szam, "Slot1");
		pHalak[playerid][pSlot2] = dini_Int(szam, "Slot2");
		pHalak[playerid][pSlot3] = dini_Int(szam, "Slot3");
		pHalak[playerid][pSlot4] = dini_Int(szam, "Slot4");
		pHalak[playerid][pSlot5] = dini_Int(szam, "Slot5");
		pHalak[playerid][pSlot1nev] = dini_Int(szam, "Slot1nev");
		pHalak[playerid][pSlot2nev] = dini_Int(szam, "Slot2nev");
		pHalak[playerid][pSlot3nev] = dini_Int(szam, "Slot3nev");
		pHalak[playerid][pSlot4nev] = dini_Int(szam, "Slot4nev");
		pHalak[playerid][pSlot5nev] = dini_Int(szam, "Slot5nev");
		pHalak[playerid][pHorgaszbot] = dini_Int(szam, "Horgaszbot");
		pHalak[playerid][pOsszesFogott] = dini_Int(szam, "OsszesFogott");
		pHalak[playerid][pCsali] = dini_Int(szam, "Csali");
    }

	return 1;
}


public JoinChannel(playerid, number, line[])
{
    if(IsPlayerConnected(playerid))
	{
	    if(strcmp(IRCInfo[number][iPassword],line, true ) == 0 )
		{
	        JoinChannelNr(playerid, number);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_GREY, "   Rossz jelszó !");
	    }
	}
	return 1;
}

public JoinChannelNr(playerid, number)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[256];
		new sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayersChannel[playerid] < 999)
	    {
			format(string, sizeof(string), "* %s otthagyta a szobát.", sendername);
			SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
			IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	    }
		new channel; channel = number; channel += 1;
	    PlayersChannel[playerid] = number;
	    IRCInfo[PlayersChannel[playerid]][iPlayers] += 1;

		if(strcmp(IRCInfo[number][iAdmin], PlayerName(playerid), true ) == 0)
		{
		    format(string, sizeof(string), "* You have joined IRC Channel %d as the Administrator.", channel);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else
		{
		    format(string, sizeof(string), "* You have joined IRC Channel %d, Admin: %s.", channel, IRCInfo[number][iAdmin]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		format(string, sizeof(string), "MOTD: %s.", IRCInfo[number][iMOTD]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "* %s has joined the Channel.", sendername);
		SendIRCMessage(number, COLOR_GREEN, string);
	}
	return 1;
}

public ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "No-one");
		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}

public ClearPaper(paper)
{
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "None");
	PaperInfo[paper][PaperUsed] = 0;
	strmid(PaperInfo[paper][PaperMaker], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperTitle], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText1], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText2], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText3], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText4], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText5], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText6], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText7], string, 0, strlen(string), 255);
	SavePapers();
	return 1;
}

public ClearFamily(family)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerInfo[i][pFMember] == family)
	        {
	            SendClientMessage(i, COLOR_LIGHTBLUE, "* The Family you are in got Deleted by the Organisation Leader, you got kicked out automaticly.");
	            PlayerInfo[i][pFMember] = 255;
	        }
	    }
	}
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "None");
	FamilyInfo[family][FamilyTaken] = 0;
	strmid(FamilyInfo[family][FamilyName], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyMOTD], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 255);
	format(string, sizeof(string), "0xFF000069");
	strmid(FamilyInfo[family][FamilyColor], string, 0, strlen(string), 255);
	FamilyInfo[family][FamilyMembers] = 0;
	FamilyInfo[family][FamilySpawn][0] = 0.0;
	FamilyInfo[family][FamilySpawn][1] = 0.0;
	FamilyInfo[family][FamilySpawn][2] = 0.0;
	FamilyInfo[family][FamilySpawn][3] = 0.0;
	FamilyInfo[family][FamilyInterior] = 0;
	SaveFamilies();
	return 1;
}

public ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "********");
		strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	}
	return 1;
}

public FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new cost = 0;
		switch (fish)
		{
		    case 1:
		    {
		        cost = 1;
		    }
		    case 2:
		    {
		        cost = 3;
		    }
		    case 3:
		    {
		        cost = 3;
		    }
		    case 5:
		    {
		        cost = 5;
		    }
		    case 6:
		    {
		        cost = 2;
		    }
		    case 8:
		    {
		        cost = 8;
		    }
		    case 9:
		    {
		        cost = 12;
		    }
		    case 11:
		    {
		        cost = 9;
		    }
		    case 12:
		    {
		        cost = 7;
		    }
		    case 14:
		    {
		        cost = 12;
		    }
		    case 15:
		    {
		        cost = 9;
		    }
		    case 16:
		    {
		        cost = 7;
		    }
		    case 17:
		    {
		        cost = 7;
		    }
		    case 18:
		    {
		        cost = 10;
		    }
		    case 19:
		    {
		        cost = 4;
		    }
		    case 21:
		    {
		        cost = 3;
		    }
		}
		return cost;
	}
	return 0;
}

public ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return 1;
}

public ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		switch (fish)
		{
		    case 1:
		    {
		        strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight1] = 0;
		        Fishes[playerid][pFid1] = 0;
		    }
		    case 2:
		    {
		        strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight2] = 0;
		        Fishes[playerid][pFid2] = 0;
		    }
		    case 3:
		    {
		        strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight3] = 0;
		        Fishes[playerid][pFid3] = 0;
		    }
		    case 4:
		    {
		        strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight4] = 0;
		        Fishes[playerid][pFid4] = 0;
		    }
		    case 5:
		    {
		        strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight5] = 0;
		        Fishes[playerid][pFid5] = 0;
		    }
		}
	}
	return 1;
}

public ClearCooking(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Cooking[playerid][pCookID1] = 0; Cooking[playerid][pCookID2] = 0; Cooking[playerid][pCookID3] = 0;
		Cooking[playerid][pCookID4] = 0; Cooking[playerid][pCookID5] = 0;
		Cooking[playerid][pCWeight1] = 0; Cooking[playerid][pCWeight2] = 0; Cooking[playerid][pCWeight3] = 0;
		Cooking[playerid][pCWeight4] = 0; Cooking[playerid][pCWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nothing");
		strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
	}
	return 1;
}

public ClearCookingID(playerid, cook)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nothing");
		switch (cook)
		{
		    case 1:
		    {
		        strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight1] = 0;
		        Cooking[playerid][pCookID1] = 0;
		    }
		    case 2:
		    {
		        strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight2] = 0;
		        Cooking[playerid][pCookID2] = 0;
		    }
		    case 3:
		    {
		        strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight3] = 0;
		        Cooking[playerid][pCookID3] = 0;
		    }
		    case 4:
		    {
		        strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight4] = 0;
		        Cooking[playerid][pCookID4] = 0;
		    }
		    case 5:
		    {
		        strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight5] = 0;
		        Cooking[playerid][pCookID5] = 0;
		    }
		}
	}
	return 1;
}

public ClearGroceries(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
	    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
	    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
	}
	return 1;
}

public Lotto()
{
	new number;
	number = random(80);
	if(number < 77) number += 3;
	
	new JackpotFallen = 0;
	new string[256];
	new winner[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Lottó: A mai nyerõszám: %d.", number);
    OOCOff(COLOR_WHITE, string);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLottoNr] > 0)
		    {
			    if(PlayerInfo[i][pLottoNr] == number)
			    {
			        JackpotFallen = 1;
			        GetPlayerName(i, winner, sizeof(winner));
					format(string, sizeof(string), "Lottóhírek: %s megnyerte a %dFtos fõnyereményt!", winner, Jackpot);
					OOCOff(COLOR_WHITE, string);
					format(string, sizeof(string), "* Gratulálunk! Megnyerted a fõnyereményt! Ami %dFt", Jackpot);
					SendClientMessage(i, COLOR_YELLOW, string);
					ConsumingMoney[i] = 1;
					GiveMoney(i, Jackpot);
			    }
			    else
			    {
			        SendClientMessage(i, COLOR_LIGHTBLUE, "* Sajnos most nem nyertél a lottón...");
			    }
			}
			PlayerInfo[i][pLottoNr] = 0;
		}
	}
	if(JackpotFallen)
	{
	    Jackpot = 50000;
	    //SaveStuff();
	    format(string, sizeof(string), "Lottóhírek: A lottósorsolás újraindult! Fõnyeremény: %dFt", Jackpot);
		OOCOff(COLOR_WHITE, string);
	}
	else
	{
	    new rand = random(15000); rand += 22473;
	    Jackpot += rand;
	    //SaveStuff();
	    format(string, sizeof(string), "Lottóhírek: A fõnyeremény emelkedett: %dFt", Jackpot);
		OOCOff(COLOR_WHITE, string);
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------
public OnPlayerDisconnect(playerid, reason)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(Logged(playerid)) Iter_Remove(Jatekosok, playerid);
	TaxiHivas[playerid] = false;
	MentoHivas[playerid] = false;
	if(Sisak[playerid] == 1)
	{
		RemovePlayerAttachedObject(playerid, SISAKSLOT);
		Sisak[playerid] = 0;
	}
	if(HarcVan && Harcol[playerid] && TeruletInfo[ HarcolTerulet[playerid] ][tHarc])
		HarcKieses(playerid, "Kilépett");

	if(Szirena[playerid] != NINCS)
	{
		DestroyObject(Szirena[playerid]);
		Szirena[playerid] = NINCS;
		Cselekves(playerid, "levette a szirénát a jármûrõl");
	}
	if(Sokkol[playerid])
	{
		Sokkol[playerid] = false;
		DestroyObject(SokkObject[playerid]);
	}
	
	if(Utzarak[playerid][uVan])
		Utzar(playerid, UTZAR_TOROL_MOST);
	
	if(Aukcio[aLicitalo] == playerid)
	{
		Aukcio[aLicitalo] = INVALID_PLAYER_ID;
		Aukcio[aLicit] = Aukcio[aKezdoLicit]
		
		strmid(Aukcio[aLicitaloVolt], PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), MAX_PLAYER_NAME);
		
		new result[128]; format(result, 128, "A licitáló kilépett: %s - Így a licit megint %dFt", Aukcio[aLicitaloVolt], Aukcio[aLicit]);
		foreach(Jatekosok, x)
		{
			if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
				SendClientMessage(x, COLOR_LIGHTBLUE, result);
		}
	}
	CheckUtolso();

	if(Tevezve[playerid] != NINCS && IsPlayerConnected(Tevezve[playerid]))
	{
		TogglePlayerSpectating(Tevezve[playerid], 0);
		SetPlayerPos(Tevezve[playerid], TVPos[Tevezve[playerid]][0], TVPos[Tevezve[playerid]][1], TVPos[Tevezve[playerid]][2]);
		SetPlayerInterior(Tevezve[playerid], TVInt[Tevezve[playerid]]);
		SetPlayerVirtualWorld(Tevezve[playerid], TVVW[Tevezve[playerid]]);
		Freeze(Tevezve[playerid], 3000);
		Tevezik[Tevezve[playerid]] = NINCS;
	}

	if(MedicTime[playerid] > 1 && MedicTime[playerid] < NeedMedicTime[playerid])
		MedicBill[playerid] = 1;
	
	if(TrafiPax[playerid][tAktiv]) DestroyDynamic3DTextLabel(TrafiPax[playerid][t3D]);
	
	if(AdminDuty[playerid]) DestroyDynamic3DTextLabel(AdminDuty3D[playerid]);
	
	DestroyDynamic3DTextLabel(Swat3D[playerid]);
	
	if(InChannel(playerid, true) != NINCS)
		Channel(playerid, NINCS, true);
	if(InChannel(playerid) != NINCS)
		Channel(playerid, NINCS);
	
	new tav, egyebinfo[128];
	if(PlayerCuffed[playerid] == 1) egyebinfo = "sokkolva";
	else if(PlayerCuffed[playerid] == 2) egyebinfo = "bilincsben";
			
	if(Animban[playerid])
	{
		if(!strlen(egyebinfo)) egyebinfo = "animban";
		else format(egyebinfo, 128, "%s, animban", egyebinfo);
	}
	
	if(Leutve[playerid])
	{
		if(!strlen(egyebinfo)) egyebinfo = "leütve";
		else format(egyebinfo, 128, "%s, leütve", egyebinfo);
	}
	
	if(Jelzes[playerid] == JELZES_NARANCS)
	{
		if(!strlen(egyebinfo)) egyebinfo = "jelezve(narancs)";
		else format(egyebinfo, 128, "%s, jelezve(narancs)", egyebinfo);
		ABroadCastFormat(COLOR_ORANGE, 1, "<< %s kilépett - Jelzés: Sárga >>", PlayerName(playerid));
	}
	
	if(Jelzes[playerid] == JELZES_PIROS)
	{
		if(!strlen(egyebinfo)) egyebinfo = "jelezve(piros)";
		else format(egyebinfo, 128, "%s, jelezve(piros)", egyebinfo);
		ABroadCastFormat(COLOR_RED, 1, "<< %s kilépett - Jelzés: Piros >>", PlayerName(playerid));
	}
	
	if(!strlen(egyebinfo))
		egyebinfo = "nincs";
		
		
	//========================== RAYW HAL ================================
	new nev[MAX_PLAYER_NAME];
	new szam[100];
	GetPlayerName(playerid, nev, sizeof(nev));
    format(szam, sizeof(szam), "Halak/%s.ini",nev);
    if(!dini_Exists(szam))
	{
    }
	else
	{
		dini_IntSet(szam, "Aranyhoz", pHalak[playerid][pAranyhoz]);
		dini_IntSet(szam, "Slot1", pHalak[playerid][pSlot1]);
		dini_IntSet(szam, "Slot2", pHalak[playerid][pSlot2]);
		dini_IntSet(szam, "Slot3", pHalak[playerid][pSlot3]);
		dini_IntSet(szam, "Slot4", pHalak[playerid][pSlot4]);
		dini_IntSet(szam, "Slot5", pHalak[playerid][pSlot5]);
		//strmid(pHalak[playerid][pSlot1nev], dini_Get(szam, "Slot1nev"), 0, strlen(dini_Get(szam, "Slot1nev")), 255);
		//strmid(pHalak[playerid][pSlot2nev], dini_Get(szam, "Slot2nev"), 0, strlen(dini_Get(szam, "Slot2nev")), 255);
		//strmid(pHalak[playerid][pSlot3nev], dini_Get(szam, "Slot3nev"), 0, strlen(dini_Get(szam, "Slot3nev")), 255);
		//strmid(pHalak[playerid][pSlot4nev], dini_Get(szam, "Slot4nev"), 0, strlen(dini_Get(szam, "Slot4nev")), 255);
		//strmid(pHalak[playerid][pSlot5nev], dini_Get(szam, "Slot5nev"), 0, strlen(dini_Get(szam, "Slot5nev")), 255);
		dini_IntSet(szam, "Slot1nev", pHalak[playerid][pSlot1nev]);
		dini_IntSet(szam, "Slot2nev", pHalak[playerid][pSlot2nev]);
		dini_IntSet(szam, "Slot3nev", pHalak[playerid][pSlot3nev]);
		dini_IntSet(szam, "Slot4nev", pHalak[playerid][pSlot4nev]);
		dini_IntSet(szam, "Slot5nev", pHalak[playerid][pSlot5nev]);
		dini_IntSet(szam, "Horgaszbot", pHalak[playerid][pHorgaszbot]);
		dini_IntSet(szam, "Csali", pHalak[playerid][pCsali]);
		dini_IntSet(szam, "OsszesFogott", pHalak[playerid][pOsszesFogott]);
    }
	
	if(!resivan) for(new x = 0; x < MAX_PLAYERS; x++)
	{
		/*if(RendesJatekos(x) && Tevezik[x] == playerid)
		{
			TogglePlayerSpectating(x, 0);
			SetPlayerPos(x, TVPos[x][0], TVPos[x][1], TVPos[x][2]);
			SetPlayerInterior(x, TVInt[x]);
			SetPlayerVirtualWorld(x, TVVW[x]);
			Freeze(x, 3000);
			Tevezik[x] = NINCS;
		}*/
		
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || !Kilepesek[x] || playerid == x) continue;
		tav = floatround(GetDistanceBetweenPlayers(playerid, x));
		if(tav <= 30)
		{			
			switch(reason)
			{
				case 0: SendFormatMessage(x, COLOR_GREY, "Kilépés: %s crashelt a közeledben (táv: %dm, egyéb: %s)", PlayerName(playerid), tav, egyebinfo);
				case 1: SendFormatMessage(x, COLOR_GREY, "Kilépés: %s kilépett a közeledben (táv: %dm, egyéb: %s)", PlayerName(playerid), tav, egyebinfo);
				case 2: SendFormatMessage(x, COLOR_GREY, "Kilépés: %s kickelve/bannolva lett a közeledben (táv: %dm, egyéb: %s)", PlayerName(playerid), tav, egyebinfo);
			}
		}
	}
	
	if(LezartUtat[playerid] != 0)
	{
		DestroyDynamicObject(LezartUtat[playerid]);
		LezartUtZ[playerid] = 0.000000; 
		LezartUtY[playerid] = 0.000000; 
		LezartUtX[playerid] = 0.000000; 
	}	
	
	if(block[playerid] != NINCS)
		DestroyDynamicObject(block[playerid]);

	if(Conn[playerid] == 1)
	{
		//TextDrawHideForAll(MoneyTxt[playerid]);
		//TextDrawHideForAll(InfoTextDraw[playerid]);
		TextDrawHideForPlayer(playerid, MoneyTxt[playerid]);
		TextDrawHideForPlayer(playerid, InfoTextDraw[playerid]);
		TextDrawHideForPlayer(playerid, InfoTextDraw2[playerid]);
		TextDrawSetString(InfoTextDraw[playerid], "Informaciok betoltese...");
		TextDrawSetString(InfoTextDraw2[playerid], "Betoltes...");
		Conn[playerid] = 0;
		CurCol[playerid] = 0;
	}

	for(new x = 0; x < MAX_VEHICLES; x++)
	{
		if(VanBombaBenne[x] == NINCS) continue;
		if(VanBombaBenne[x] == playerid)
		{
			VanBombaBenne[x] = 0;
			break;
		}
	}

	new bekistring[128], tipus[32];
	if(reason == 0) tipus = "crashelt";
	else if (reason == 1) tipus = "kilépett";
	else tipus = "kickelve/bannolva lett";

	format(bekistring, sizeof(bekistring), "%s %s", PlayerName(playerid), tipus);
	BeKilepes(bekistring);

	PlayerInfo[playerid][pDrogido] = 0;
	pajzsnala[playerid] = 0;	

/*	if(PlayerInfo[playerid][pNyomkovetes] == 1)
	{
	    PlayerInfo[playerid][pNyomkoveto] = 0;
	    PlayerInfo[playerid][pNyomkovetes] = 0;
	    PlayerInfo[playerid][pJailed] = 2;
		if(PlayerInfo[playerid][pJailTime] < 600)
		    PlayerInfo[playerid][pJailTime] = 1200;
		else if(PlayerInfo[playerid][pJailTime] >= 600 && PlayerInfo[playerid][pJailTime] < 1800)
		    PlayerInfo[playerid][pJailTime] += 1200;
		else if(PlayerInfo[playerid][pJailTime] >= 1800 && PlayerInfo[playerid][pJailTime] < 3600)
		    PlayerInfo[playerid][pJailTime] += 1800;
		else
		    PlayerInfo[playerid][pJailTime] += 2000;

	    new playername[MAX_PLAYER_NAME], string[128];
	    for(new p = 0; p < MAX_PLAYERS; p++)
	    {
	        if(IsACop(p))
	        {
		        GetPlayerName(playerid, playername, sizeof(playername));
		        format(string, sizeof(string), "(( %s Gyáva módon kilépett üldözés közben! De visszakerül Sona-ba! ))");
	    	    SendClientMessage(p, COLOR_RED, string);
   	    	}
	    }
	}*/

	if(Visz[playerid] != NINCS)
		Visz[playerid] = NINCS;

	if(PlayerCuffed[playerid] == 2)
	{
		Jail(playerid, "+", 10800, "off", "Cuffba kilépés");
		Bilincs(playerid, 0);
	}

	/*if(Animban[playerid] == 1 && reason == 1)
	{
	Jail(playerid, "+", 9000, "off");
	}
	*/
	if(BViadal[playerid] > 0)
	{
        new BV[256];
		format(BV, sizeof(BV), "Viadal: %s kilépett a szerverrõl", PlayerName(playerid));
		SendHitmanRadioMessage(COLOR_YELLOW, BV);
		BVJatekosok--;
	}

	for(new q = 0; q < MAX_PLAYERS; q++)
	{
		if(Visz[q] != NINCS)
		{
			if(Visz[q] == playerid)
				Visz[q] = NINCS;
		}
		if(AdasVeteliNeki[q] != NINCS)
		{
			if(AdasVeteliNeki[q] == playerid)
				AdasVeteliNeki[q] = NINCS;
		}
	}

	numplayers--;

	PlayerOnline[playerid] = false;
	if(IsPlayerConnected(playerid) && Logged(playerid) && resivan != 1)
		AdatMentesSQL(playerid);


	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {

	        if(TaxiAccepted[i] < 999)
	        {
		        if(TaxiAccepted[i] == playerid)
		        {
		            TaxiAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Left the game", 5000, 1);
		            TaxiCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	        else if(BusAccepted[i] < 999)
	        {
		        if(BusAccepted[i] == playerid)
		        {
		            BusAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Bus Caller~n~~r~Left the game", 5000, 1);
		            BusCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	    }
	}
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
	    if(IsPlayerConnected(TransportDriver[playerid]))
		{
		    new string[64];
		    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
		    TransportTime[TransportDriver[playerid]] = 0;
		    TransportCost[TransportDriver[playerid]] = 0;
		    format(string, sizeof(string), "~w~Passenger left~n~~g~Earned %dFT",TransportCost[playerid]);
		    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
		}
	}
	if(PlayerPaintballing[playerid] != 0)
	{
	    PaintballPlayers --;
	}
	if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
	{
	    KartingPlayers --;
	}
	if(PlayersChannel[playerid] < 999)
	{
		IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	}
	if(HireCar[playerid] != NINCS)
	{
		gLastDriver[HireCar[playerid]] = 300;
		UnLockCar(HireCar[playerid]);
	}
	if (gLastCar[playerid] > 0)
	{
		gLastDriver[gLastCar[playerid]] = 300;
	}
	if(PlayerBoxing[playerid] > 0)
	{
	    if(Boxer1 == playerid)
	    {
	        if(IsPlayerConnected(Boxer2))
	        {
	        	PlayerBoxing[Boxer2] = 0;
	        	SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer2, 5);
	        	GameTextForPlayer(Boxer2, "~r~Match interupted", 5000, 1);
			}
	    }
	    else if(Boxer2 == playerid)
	    {
	        if(IsPlayerConnected(Boxer1))
	        {
	        	PlayerBoxing[Boxer1] = 0;
	        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer1, 5);
	        	GameTextForPlayer(Boxer1, "~r~Match interupted", 5000, 1);
			}
	    }
	    InRing = 0;
     	RoundStarted = 0;
		Boxer1 = 255;
		Boxer2 = 255;
		TBoxer = 255;
	}
    if(TransportDuty[playerid] == 1)
	{
		TaxiDrivers -= 1;
	}
    else if(TransportDuty[playerid] == 2)
	{
		BusDrivers -= 1;
	}
	if(LMT(playerid, LMUNKA_MENTO) || LMT(playerid, LMUNKA_SFMENTO))
	{
	    if(OnDuty[playerid] == 1) { Medics--; }
	}
	else if(AMT(playerid, MUNKA_SZERELO))
	{
	    if(JobDuty[playerid] == 1) { Mechanics -= 1; }
	}
	
	return 1;
}

public SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerDrunkLevel(playerid, 0);
		Animbanemrakhato[playerid] = 0;
		Animban[playerid] = 0;
		SetHealth(playerid, MAXHP);
		Bilincs(playerid, 0);
		AJVarakozas[playerid] = 5;
		
	    PlayerInfo[playerid][pSpawned] = 1;
		
		if(PlayerInfo[playerid][pTut] == 0)
		{
		    SetPlayerInterior(playerid, 5);
			SetPlayerVirtualWorld(playerid, playerid);
			SetPlayerPos(playerid, 322.197998,302.497985,999.148437);
			Msg(playerid, "Várj türelemmel, amíg az egyik adminisztrátor jön, és segít neked elkezdeni a játékot :)");
			return 1;
		}
		
		new rand;
		new house = PlayerInfo[playerid][pPhousekey];
		if(PlayerPaintballing[playerid] != 0)
		{
		    ResetWeapon(playerid);
			GiveWeapon(playerid, 24, 999);
      		GiveWeapon(playerid, 29, 999);
		    rand = random(sizeof(PaintballSpawns));
			SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
		    return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 1)
		{
		    SetPlayerInterior(playerid, 6);
			SetPlayerPos(playerid,264.6288,77.5742,1001.0391);
			//SendClientMessage(playerid, COLOR_LIGHTRED, "Incomplete Jail Sentence, back to jail.");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 2)
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 215.038833, 1862.826782, 13.140625);
			SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 3)
		{
		    /*SetPlayerInterior(playerid, 18);
			SetPlayerPos(playerid,1302.519897,-1.787510,1001.028259);
			SetPlayerVirtualWorld(playerid, 100+playerid);*/
			SetPlayerPos(playerid, 972.831, 2.768, 1001.148);
			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 8888);
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 4)
		{
		    SetPlayerInterior(playerid, 10);
			SetPlayerPos(playerid,219.4761,110.4732,999.0156);
			SetPlayerVirtualWorld(playerid, 0);
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 5)
		{
		    SetPlayerInterior(playerid, 3);
			SetPlayerPos(playerid,198.2832,162.2480,1003.0300);
			SetPlayerVirtualWorld(playerid, 0);
			return 1;

	}
		if(MedicBill[playerid] == 1 && PlayerPaintballing[playerid] == 0)
		{
		    //new string[256];
		    //new cut = deathcost; //PlayerInfo[playerid][pLevel]*deathcost;
			//GiveMoney(playerid, -cut);
			//format(string, sizeof(string), "Orvos: Az ellátás díja %dFt volt. További szép napot!", cut);
			//SendClientMessage(playerid, TEAM_CYAN_COLOR, string);
			PlayerInfo[playerid][pDeaths] += 1;
			new rands = random(sizeof(KorhazSpawn));
			SetPlayerVirtualWorld(playerid, 2);				
			SetPlayerPos(playerid, KorhazSpawn[rands][0], KorhazSpawn[rands][1], KorhazSpawn[rands][2]);
			SendClientMessage(playerid, COLOR_GREY, "5 másodpercre lefagyasztunk, hogy betöltsön a kórház belsõ!");
	        TogglePlayerControllable(playerid, 0);
			Freeze(playerid, 5000);

	        GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~y~Eppen gyogyulgatsz...", 5000, 3);

	        MedicBill[playerid] = 0;
			MedicTime[playerid] = 1;
			NeedMedicTime[playerid] = KorhazIdo;

	        PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);
		    return 1;
		}

		if(MostLepettBe[playerid] == 1 && PlayerInfo[playerid][pCPosX] != 0.0)
		{
			SetPlayerPos(playerid, PlayerInfo[playerid][pCPosX], PlayerInfo[playerid][pCPosY], PlayerInfo[playerid][pCPosZ]);
			SetPlayerInterior(playerid, PlayerInfo[playerid][pCInt]);
			SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pCVW]);
			
			if(PlayerInfo[playerid][pCVW] >= 50000 && PlayerInfo[playerid][pCVW] <= (50000 + MAX_PLAYERS))
			{
				if(NPCBuszban(playerid) != NINCS)
					Freeze(playerid, 3000);
			}
			
			if(PlayerInfo[playerid][pCVW] == 9999)
				Freeze(playerid, 5000);

			iPlayerHealth[playerid] = PlayerInfo[playerid][pCelet];
			JatekosElete[playerid] = PlayerInfo[playerid][pCelet];
			SetHealth(playerid, PlayerInfo[playerid][pCelet]);
			SetPlayerArmour(playerid, PlayerInfo[playerid][pCpajzs]);

			Animbanemrakhato[playerid] = 0;
			Animban[playerid] = 0;

			new aktiv;
			for(new x = 0; x < 12; x++)
			{
				if(PlayerInfo[playerid][pTolteny][x] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pFegyver][x], PlayerInfo[playerid][pTolteny][x]); aktiv = PlayerInfo[playerid][pFegyver][x]; }
			}
			
			/*if(PlayerInfo[playerid][pAmmo0] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun0], PlayerInfo[playerid][pAmmo0]);
			if(PlayerInfo[playerid][pAmmo1] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]); aktiv = PlayerInfo[playerid][pGun1]; }
			if(PlayerInfo[playerid][pAmmo2] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]); aktiv = PlayerInfo[playerid][pGun2]; }
			if(PlayerInfo[playerid][pAmmo3] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pGun3], PlayerInfo[playerid][pAmmo3]); aktiv = PlayerInfo[playerid][pGun3]; }
			if(PlayerInfo[playerid][pAmmo4] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pGun4], PlayerInfo[playerid][pAmmo4]); aktiv = PlayerInfo[playerid][pGun4]; }
			if(PlayerInfo[playerid][pAmmo5] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pGun5], PlayerInfo[playerid][pAmmo5]); aktiv = PlayerInfo[playerid][pGun5]; }
			if(PlayerInfo[playerid][pAmmo6] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pGun6], PlayerInfo[playerid][pAmmo6]); aktiv = PlayerInfo[playerid][pGun6]; }
			if(PlayerInfo[playerid][pAmmo7] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pGun7], PlayerInfo[playerid][pAmmo7]); aktiv = PlayerInfo[playerid][pGun7]; }
			if(PlayerInfo[playerid][pAmmo8] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pGun8], PlayerInfo[playerid][pAmmo8]); aktiv = PlayerInfo[playerid][pGun8]; }
			if(PlayerInfo[playerid][pAmmo9] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pGun9], PlayerInfo[playerid][pAmmo9]); aktiv = PlayerInfo[playerid][pGun9]; }
			if(PlayerInfo[playerid][pAmmo10] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pGun10], PlayerInfo[playerid][pAmmo10]); aktiv = PlayerInfo[playerid][pGun10]; }
			if(PlayerInfo[playerid][pAmmo11] != 0) { GiveWeapon(playerid, PlayerInfo[playerid][pGun11], PlayerInfo[playerid][pAmmo11]); aktiv = PlayerInfo[playerid][pGun11]; }*/
			
			Fegyvere[playerid] = aktiv;
			SetPlayerArmedWeapon(playerid, aktiv);
			MostLepettBe[playerid] = 0;

			return 1;
		}
		
		if(house != NINCS)
		{
		    if(PlayerInfo[playerid][pSpawnchange] == 0) //
		    {
				SetPlayerToTeamColor(playerid);
				SetPlayerPos(playerid, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]); // Warp the player
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
				return 1;
			}
		}

	    if(IsAnInstructor(playerid)) //Driving/Flying School spawn
	    {
			if(SchoolSpawn[playerid] == 0)
			{
		        SetPlayerToTeamColor(playerid);
				SetPlayerPos(playerid,1223.9965,-1816.2458,16.5938);
    			SetPlayerFacingAngle(playerid, 275.1114);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;

			}
			else if(SchoolSpawn[playerid] == 1)
			{
				SetPlayerToTeamColor(playerid);
				SetPlayerPos(playerid, 1223.9965,-1816.2458,16.5938);
				SetPlayerFacingAngle(playerid, 4.6505);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;

			}
	        return 1;
     }
        if(PlayerInfo[playerid][pSpawnchange] == 1)
	    {
			if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)//Mayor spawn
			{
			    new szam = PlayerInfo[playerid][pMember];
			    if(szam < 1)
			        szam = PlayerInfo[playerid][pLeader];

			    SetPlayerToTeamColor(playerid);

			    SetPlayerInterior(playerid, SpawnHelyek2[szam][0]);
			    SetPlayerVirtualWorld(playerid, SpawnHelyek2[szam][1]);
			    SetPlayerPos(playerid, SpawnHelyek[szam][0], SpawnHelyek[szam][1], SpawnHelyek[szam][2]);

			    PlayerInfo[playerid][pInt] = SpawnHelyek2[szam][0];
			    return 1;
			}
		}

		if(PlayerInfo[playerid][pFMember] != 255)
		{
		    new family = PlayerInfo[playerid][pFMember];
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, FamilyInfo[family][FamilyInterior]);
		    SetPlayerPos(playerid, FamilyInfo[family][FamilySpawn][0],FamilyInfo[family][FamilySpawn][1],FamilyInfo[family][FamilySpawn][2]);
		    SetPlayerFacingAngle(playerid, FamilyInfo[family][FamilySpawn][3]);

		    return 1;
		}
	    else
	    {
			SetPlayerToTeamColor(playerid);
			if(PlayerInfo[playerid][pOrigin] == 1)//USA
			{
			    SetPlayerPos(playerid,1481.2332,-1750.3499,15.4453);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;

			}
			else if(PlayerInfo[playerid][pOrigin] == 2)//Europe
			{
			    SetPlayerPos(playerid,1481.2332,-1750.3499,15.4453);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;

			}
			else if(PlayerInfo[playerid][pOrigin] == 3)//Asia
			{
			    SetPlayerPos(playerid,1481.2332,-1750.3499,15.4453);
    			SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;

			}
			else
			{
				rand = random(sizeof(gRandomPlayerSpawns));
				SetPlayerPos(playerid, gRandomPlayerSpawns[rand][0], gRandomPlayerSpawns[rand][1], gRandomPlayerSpawns[rand][2]); // Warp the player
				SetPlayerFacingAngle(playerid, 270.0);
				SetPlayerInterior(playerid,15);
				PlayerInfo[playerid][pInt] = 15;
			}
			return 1;
		}
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	#define HOLDING(%0) ((newkeys & (%0)) == (%0))
	#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
	#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
	
	/*if(IsClint(playerid)) // NE TÖRÖLD!!
	{
		new
			fel_le,
			bal_jobb,
			gombok
		;
		GetPlayerKeys(playerid, gombok, fel_le, bal_jobb);
		SendFormatMessage(playerid, COLOR_WHITE, "Newkeys: %d, Oldkeys: %d, Fel_le: %d, Bal_jobb: %d", newkeys, oldkeys, fel_le, bal_jobb);
		
		if(GetPlayerAnimationIndex(playerid) && newkeys != 0)
		{
			new
				animlib[32],
				animname[32],
				msg[128],
				id
			;
			
			id = GetPlayerAnimationIndex(playerid);
			GetAnimationName(id, animlib, 32, animname, 32);
			format(msg, 128, "[Futó animáció] ID: %d Részleg: %s Név: %s", id, animlib, animname);
			SendClientMessage(playerid, 0xFFFFFFFF, msg);
		}
	} // NE TÖRÖLD!! */

	AFKIdo[playerid] = 0;

	if((PRESSED(KEY_FIRE) || PRESSED(KEY_ACTION)) && PlayerRaceTuning[playerid][tNitro] > 0 && PlayerRaceTuning[playerid][tNitroIdo] == 0 && KocsibanVan[playerid])
	{
		switch(PlayerRaceTuning[playerid][tNitro])
		{
			case 1: PlayerRaceTuning[playerid][tNitroIdo] = 38;
			case 2: PlayerRaceTuning[playerid][tNitroIdo] = 30;
		}
	}

	if(HOLDING(KEY_FIRE) || HOLDING(KEY_SECONDARY_ATTACK) && HOLDING(KEY_HANDBRAKE))
	{
		if(PlayerInfo[playerid][pJailed] == 3)
		{
			Cselekves(playerid, "ütöget jailban, így szerzett +2perc börtönidõt", 0, true);
			PlayerInfo[playerid][pJailTime] += 120;
		}
	}
	
	if(PRESSED(KEY_ACTION) && Sokkol[playerid])
	{
		new
			veh,
			Float:x, Float:y, Float:z,
			Float:X, Float:Y, Float:Z,
			Float:tav, Float:tav2 = 99999.9, legkozelebbi = NINCS;
		
		veh = GetPlayerVehicleID(playerid);
		
		GetVehiclePos(veh, x, y, z);
		GetXYInFrontOfVehicle(playerid, x, y, SokkTav[playerid]);
		
		for(new car = 1; car < MAX_VEHICLES; car++)
		{
			if(!IsVehicleConnected(car) || car == veh) continue;
			GetVehiclePos(car, X, Y, Z);
			tav = GetDistanceBetweenPoints(x, y, z, X, Y, Z);
			if(tav < tav2)
			{
				tav2 = tav;
				legkozelebbi = car;
			}
		}
		
		if(tav2 > 5.0)
			return Msg(playerid, "Messze van, próbáld újra");
		
		new
			sebesseg = JatekosSebessege(playerid),
			fail
		;
		
		if(165 > sebesseg >= 150)
		{
			switch(random(100))
			{
				case 1..5: fail = 1;
			}
		}
		else if(180 > sebesseg >= 165)
		{
			switch(random(100))
			{
				case 1..10: fail = 1;
			}
		}
		else if(sebesseg >= 180)
		{
			switch(random(100))
			{
				case 1..15: fail = 1;
			}
		}
		
		new sofor = KocsiSofor(legkozelebbi);
		if(fail != 1 && sofor != NINCS && PlayerRaceInfo[sofor][xVersenyen] != NINCS && PlayerRaceTuning[sofor][tEMP] > 0)
		{
			switch(PlayerRaceTuning[sofor][tEMP])
			{
				case 1:
				{
					switch(random(100))
					{
						case 1..20: fail = 2;
					}
				}
				
				case 2:
				{
					switch(random(100))
					{
						case 1..40: fail = 2;
					}
				}
				
				case 3:
				{
					switch(random(100))
					{
						case 1..75: fail = 2;
					}
				}
			}
		}
		
		if(fail == 1)
		{
			new kocsi = GetPlayerVehicleID(playerid);
			
			Cselekves(playerid, "megpróbáld lesokkolni egy jármûvet, de a nagy sebesség miatt a saját kocsija lett sokkolva");

			KocsitSokkolt[playerid] = 15;
			KocsiSokkolva[kocsi] = 15;
		
			Sokkol[playerid] = false;
			DestroyObject(SokkObject[playerid]);

			engineOn[kocsi] = 0;
			SetJarmu(kocsi, KOCSI_MOTOR, 0);
			
			GameTextForPlayer(playerid,"~n~~n~~n~~r~~h~A jarmuved sokkolva hiba miatt", 5000, 3);
			foreach(Jatekosok, p)
			{
				if(IsPlayerInVehicle(p, legkozelebbi))
					GameTextForPlayer(p,"~n~~n~~n~~r~~h~A jarmuvet majdnem sokkoltak!~n~~g~~h~A rendor kocsija leallt", 5000, 3);
			}
		}
		else if(fail == 2)
		{			
			Cselekves(playerid, "megpróbáld lesokkolni egy jármûvet, mivel a kocsi EMP védelme hárította, így ez nem sikerült");

			KocsitSokkolt[playerid] = 15;
		
			Sokkol[playerid] = false;
			DestroyObject(SokkObject[playerid]);
			
			GameTextForPlayer(playerid,"~n~~n~~n~~r~~h~Sajnos nem sikerult a sokkolas az EMP vedelem miatt!~n~~g~~h~Probald ujra!", 8000, 3);
			foreach(Jatekosok, p)
			{
				if(IsPlayerInVehicle(p, legkozelebbi))
					GameTextForPlayer(p,"~n~~n~~n~~r~~h~Majdnem lesokkoltak!~n~~g~~h~Vigyazz!", 5000, 3);
			}
		}
		else
		{			
			foreach(Jatekosok, p)
			{
				if(IsPlayerInVehicle(p, legkozelebbi))
					GameTextForPlayer(p,"~n~~n~~n~~r~~h~A jarmuvet sokkoltak", 5000, 3);
			}
			
			Cselekves(playerid, "lesokkolt egy jármûvet");

			KocsitSokkolt[playerid] = 15;
			KocsiSokkolva[legkozelebbi] = 120;
		
			Sokkol[playerid] = false;
			DestroyObject(SokkObject[playerid]);

			engineOn[legkozelebbi] = 0;
			SetJarmu(legkozelebbi, KOCSI_MOTOR, 0);
		}
	}
	
	if(PRESSED(KEY_FIRE) || HOLDING(KEY_FIRE))
	{
		if(!IsACop(playerid) && !IsPlayerInAnyVehicle(playerid) && GetPlayerWeapon(playerid) >= 16 && GetPlayerWeapon(playerid) <= 38 && GetPlayerWeapon(playerid) != 34 && GetPlayerWeapon(playerid) != 22 && Varosban[playerid])
		{
			if(Jelzes[playerid] == JELZES_PIROS || Jelzes[playerid] == JELZES_NARANCS)
				JelzesIdo[playerid] += 20;
			/*else if(Jelzes[playerid] == JELZES_SARGA)
			{
				JelzesIdo[playerid] += 10;
				if(JelzesIdo[playerid] >= 60)
					JelzesBeallitas(playerid, JELZES_NARANCS);
			}
			else
			{
				//Msg(playerid, "Nem szép dolog lövöldözni a városban... Most már a rendõrség is keres téged...");
				JelzesBeallitas(playerid, JELZES_SARGA);
				JelzesIdo[playerid] = 30;
			}*/
		}
	}
	
	if(newkeys & KEY_CROUCH && newkeys & KEY_SPRINT)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && IsACop(playerid) && OnDuty[playerid] && !Sokkolt[playerid])
		{
			if(GetPlayerWeapon(playerid) == 24 || GetPlayerWeapon(playerid) == 22)
			{
				new player = GetClosestPlayer(playerid);
				if(GetDistanceBetweenPlayers(playerid, player) > 5.0 || IsPlayerNPC(player))
					Msg(playerid, "Nincs a közeledben senki");
				else if(IsPlayerAimingAtPlayer(playerid, player))
				{
					if(Rabol[player] == 1) Rabol[player] = 0;
					new string[128];
					format(string, sizeof(string), "* Lesokkolt egy rendõr, és 60 másodpercig megbénultál.");
					SendClientMessage(player, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Lesokkoltad 60 másodpercre.");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					Cselekves(playerid, "lõ a sokkolóval, és lesokkolja a célszemélyt", 1);
					GameTextForPlayer(player, "~r~Sokkoltak", 2500, 3);
					Bilincs(player, 1);
					ApplyAnimation(player,"CRACK","crckdeth2",4.1,0,1,1,1,0);
					FegyverElrak(player);
					Sokkolt[playerid] = 15;
				}
				else
				{
					new string[128];
					format(string, sizeof(string), "* Majdnem lesokkolt egy rendõr! Vigyázz!");
					SendClientMessage(player, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Ejj ez nem jött össze...");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					Cselekves(playerid, "lõ a sokkolóval, és lesokkolja a célszemélyt", 1);
					GameTextForPlayer(player, "~r~Majdnem lesokkolt!", 2500, 3);
					Sokkolt[playerid] = 5;
				}
			}
		}
	}
	
	if(newkeys == KEY_HANDBRAKE && oldkeys == 0)
	{
		if(Mobile[playerid] == 255 && !Rabol[playerid] && !PlayerCuffed[playerid] && !Leutve[playerid] && !Animban[playerid])
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	}

	if(newkeys == KEY_SECONDARY_ATTACK)
	{
		if(GetPlayerState(playerid) == 2)
		{
			RemovePlayerFromVehicle(playerid);
			TogglePlayerControllable(playerid, true);
			return 1;
		}
		new vw = GetPlayerVirtualWorld(playerid);
		if(vw >= 50000 && vw <= (50000 + MAX_PLAYERS))
		{
			vw -= 50000;
			if(IsPlayerConnected(vw) && IsPlayerNPC(vw))
			{
				new nid = NPC_ID[vw];
				if(!NPC_Vezetok[nid][nMegallt])
					return Msg(playerid, "A busz még nem állt meg, várj a megállóig!");
				if(!PlayerToPoint(1.5, playerid, 2021.936, 2235.204, 2103.953))
					return Msg(playerid, "Az ajtónál kell leszállni!");
				
				new megallo = NPC_Vezetok[nid][nHolTart]-1;
				
				SetPlayerPos(playerid, NPC_Megallok[nid][megallo][0], NPC_Megallok[nid][megallo][1], NPC_Megallok[nid][megallo][2]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				Cselekves(playerid, "leszállt a buszról");
				if(PlayerInfo[playerid][pJegy] == 1)
				{
					PlayerInfo[playerid][pJegy] = 0;
					Msg(playerid, "A jegyed már nem érvényes");
				}
				JegyBuntetve[playerid] = false;
			}
		}
	}
	if(newkeys == KEY_SPRINT && IsPlayerInAnyVehicle(playerid) && engineOn[GetPlayerVehicleID(playerid)] == 0 && GetPlayerState(playerid) == 2 && !IsABicikli(GetPlayerVehicleID(playerid)) && KocsibanVan[playerid])
	{
		new vkocsi, kocsi;
		vkocsi = IsAVsKocsi(GetPlayerVehicleID(playerid));
		if(vkocsi != -1)
		{
		    if(CarInfo[vkocsi][cOwned] == 0 && !AMT(playerid, MUNKA_AUTOKERESKEDO))
				return 1;
		}

	    kocsi = GetPlayerVehicleID(playerid);
		if(KocsiElet(kocsi) <= 350)
			return Msg(playerid, "A jármû elromlott! Hívj szerelõt!");
		if(Gas[kocsi] <= 0)
			return Msg(playerid, "Nincs benzin!");
		if(KocsiSokkolva[kocsi])
			return Msg(playerid, "A jármû sokkolva van");

	    if(SajatKocsi(playerid, kocsi) || vkocsi != -1 && CarInfo[vkocsi][cOwned] == 0)
	    {
	        if(MunkaFolyamatban[playerid] == 1) return 1;
	        new kocsiserules, ido, Float:kocsielet;
	        GetVehicleHealth(kocsi, kocsielet);
	        kocsiserules = 1000 - floatround(kocsielet);
	        ido = 1000 + (kocsiserules * 5);
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Beindítod a kocsit...");
			SetTimerEx("Munkavege", ido, false, "ddd", playerid, M_MOTOR, 0);
			MunkaFolyamatban[playerid] = 1;
			return 1;
    	}
		else
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kulcsod ehhez a jármûhöz! El kell lopnod. (( /ellop ))");
	}

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(Sisak[playerid] == 1)
	{
		RemovePlayerAttachedObject(playerid, SISAKSLOT);
		Sisak[playerid] = 0;
	}
	if(Szirena[playerid] != NINCS)
	{
		DestroyObject(Szirena[playerid]);
		Szirena[playerid] = NINCS;
		Cselekves(playerid, "levette a szirénát a jármûrõl");
	}
	
	if(MostHalt[playerid])
		return 1;
	else
		MostHalt[playerid] = true;
	
	if(HarcVan && Harcol[playerid] && TeruletInfo[ HarcolTerulet[playerid] ][tHarc])
		HarcKieses(playerid, "Meghalt");
	
	if(Visz[playerid] != NINCS)
		Visz[playerid] = NINCS;
	if(Rabol[playerid] == 1)
		Rabol[playerid] = 0;

	JatekosZsak[playerid] = NINCS;
    Animbanemrakhato[playerid] = 1;
    Animban[playerid] = 0;
	//pajzsnala[playerid] = 0;
	
	new name[MAX_PLAYER_NAME];
	new name2[MAX_PLAYER_NAME];
	new name3[MAX_PLAYER_NAME];
	new string[128];
	//new dmessage[128];
	//new deathreason[20];
	new Float:px,Float:py,Float:pz;
	PlayerInfo[playerid][pSpawned] = 0;

	GetPlayerName(playerid, name, sizeof(name));

	if(killerid >= 0 && killerid < MAX_PLAYERS)
		GetPlayerName(killerid, name2, sizeof(name2));
	else
		name2 = "---";
	
	if(killerid != INVALID_PLAYER_ID)
	{
		if(HitmanDuty[killerid] == 0)
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Megölt %s.", PlayerName(killerid));
	
		if(TilosOlni == 1 && !IsPlayerNPC(killerid))
		{
			Msg(killerid, "Zeró tolerancia érvényben van, és mivel megszegted, 2 óra jail!");
			Jail(killerid, "+", 7200, "ajail", "Zero tolerancia");
		}

		if(!IsACop(killerid) && Varosban[killerid]  && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		{
			if(JelzesIdo[killerid] < 300)
				JelzesIdo[killerid] = 300;
			JelzesBeallitas(killerid, JELZES_PIROS);
		}
	}
	if(Jelzes[playerid] != 0)
		JelzesBeallitas(playerid, 0);

	if(reason == 16 || reason == 38)
	{
		format(string, sizeof(string), "%s megölte %s-t ezzel: %s", name2, name, aWeaponNames[reason]);
	    KillLog(string, 1);
		ABroadCast(COLOR_GREY, string, 1);
	}
	else if(reason >= 0 && reason <= 47 || reason == 51)
	{
		if(reason == 51)
		{
			if(BViadal[killerid] && BViadal[playerid])
				format(string, sizeof(string), "Az egyik viadal játékos felrobbantotta a másikat!");
			else if(IsHitman(killerid) && HitmanDuty[killerid] == 1 && PlayerInfo[playerid][pHeadValue] > 0)
				format(string, sizeof(string), "%s felrobbantotta %s-t", PlayerInfo[killerid][pHitmanNev],  name, aWeaponNames[reason]);
			else
				format(string, sizeof(string), "%s felrobbantotta %s-t", name2, name, aWeaponNames[reason]);
		}
		else
		{
			if(BViadal[killerid] && BViadal[playerid])
				format(string, sizeof(string), "Az egyik viadal játékos megölte a másikat!");
			else if(IsHitman(killerid) && HitmanDuty[killerid] == 1 && PlayerInfo[playerid][pHeadValue] > 0)
				format(string, sizeof(string), "%s megölte %s-t ezzel: %s", PlayerInfo[killerid][pHitmanNev],  name, aWeaponNames[reason]);
			else
				format(string, sizeof(string), "%s megölte %s-t ezzel: %s", name2, name, aWeaponNames[reason]);
		}
	    KillLog(string, 0);
		ABroadCast(COLOR_GREY, string, 1);
	}
	else
	{
		if(reason >= 49 && reason <= 54 && reason != 52)
		{
		    new killer = GetClosestPlayer(playerid);
		    GetPlayerName(killer, name3, sizeof(name3));
			new oka[32];
			if(reason == 49)
			    oka = "Autó";
			else if(reason == 50)
			    oka = "Helikopter";
			else if(reason == 51)
                oka = "Robbanás";
			else if(reason == 53)
                oka = "Megfulladt";
			else if(reason == 54)
                oka = "Leesett";

			if(reason != 54 && reason != 53 && reason != 51)
				format(string, sizeof(string), "%s meghalt (%s), oka: %s | Lehetséges, hogy %s ölte meg, mert a közelben volt", name, name2, oka, name3);
			else
			    format(string, sizeof(string), "%s meghalt (%s), oka: %s", name, name2, oka);
			KillLog(string, 0);
			ABroadCast(COLOR_GREY, string, 1);
		}
	}

	gPlayerSpawned[playerid] = 0;
	GetPlayerName(playerid, name, sizeof(name));
	PlayerInfo[playerid][pLocal] = NINCS;
	GetPlayerPos(playerid, px, py, pz);

	if(reason == 38)
	{
		new kstring[128];
		new kickname[MAX_PLAYER_NAME];
		if(IsPlayerConnected(killerid))
		{
			GetPlayerName(killerid, kickname, sizeof(kickname));
			format(string, 128, "FIGYELMEZTETÉS: [%d]%s minigunnal ölt meg valakit!",killerid,kickname);
			ABroadCast(COLOR_YELLOW,string,1);
			printf("%s\n", kstring);
			MedicBill[playerid] = 0;
		}
	}
	if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}
	new caller = Mobile[playerid];
	if(caller != 255)
	{
		if(caller < 255)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "   Megszakadt a vonal....");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = 255;
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
	}
	ClearCrime(playerid);
	if(PlayerPaintballing[playerid] != 0)
	{
		MedicBill[playerid] = 0;
		if(killerid != INVALID_PLAYER_ID)
		{
			PlayerPaintballKills[killerid] ++;
			if(PlayerPaintballKills[killerid] > PaintballWinnerKills)
			{
				new killer[MAX_PLAYER_NAME];
				PaintballWinner = killerid;
				PaintballWinnerKills = PlayerPaintballKills[killerid];
				GetPlayerName(killerid, killer, sizeof(killer));
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerPaintballing[i] != 0)
						{
							format(string, sizeof(string), "* %s vezet %d öléssel.",killer,PaintballWinnerKills);
							SendClientMessage(i, COLOR_WHITE, string);
						}
					}
				}
			}
		}
	    return 1;
	}

	GameTextForPlayer(playerid, "~r~meghaltl", 2500, 0);
	if(GetMoney(playerid) > 0)
	{
		SetMoney(playerid, 0);
		Msg(playerid, "Mivel meghaltál, ezért minden kézpénzed elvesztetted...");
	}

	if(PlayerInfo[playerid][pHeadValue] > 0)
	{
	    if(killerid != INVALID_PLAYER_ID)
	    {
		    if(IsHitman(killerid) && HitmanDuty[killerid] == 1)
		    {
				SendFormatMessageToAll(COLOR_YELLOW, " <<< A bérgyilkos teljesítette a megbízó kérését - %s kinyírva >>> ", PlayerName(playerid));
				format(string,128,"<< %s teljesítette a megbízást >>", PlayerInfo[killerid][pHitmanNev]);
				SendHitmanRadioMessage(COLOR_YELLOW, string);
				SendFormatMessage(killerid, COLOR_LIGHTBLUE, "A megbízást teljesítetted. A cég átutalta a pénzt a számládra. (%dFt)", PlayerInfo[playerid][pHeadValue]);

				PlayerInfo[killerid][pAccount] += PlayerInfo[playerid][pHeadValue];
				PlayerInfo[playerid][pHeadValue] = 0;
			}
		}
	}
	
    if(killerid != INVALID_PLAYER_ID)
    {
		if(BViadal[playerid] > 0)
		{
		    if(BViadal[killerid] > 0 && BVStart == 1)
		    {
		        new BVuzi[256];
				format(BVuzi, sizeof(BVuzi), "Viadal: %s meghalt! Gyilkosa: %s", PlayerName(playerid), PlayerName(killerid));
				SendHitmanRadioMessage(COLOR_YELLOW, BVuzi);
				SendClientMessage(killerid, COLOR_YELLOW, "SMS: Megöltél egy versenyzõt, gratulálok! | Feladó: Hitman Director");
				BViadal[playerid] = 0;
				BVJatekosok--;
			}
		}
		
		if(!IsHitman(killerid) && HitmanDuty[killerid] != playerid)
		{
			WantedPoints[killerid] += 1;
			if(reason != 49)
			{
				SetPlayerCriminal(killerid,255, "Elsõfokú Gyilkos");
			}
			else if (reason == 49)
			{
				SetPlayerCriminal(killerid,255, "Hit And Run");
			}
		}
	}

    if(killerid != INVALID_PLAYER_ID)
    {
		if(IsAt(killerid, IsAt_Korhaz))
		{
			Format(string, "%s kórház DMelt - Auto 20perc adminjail", PlayerName(killerid));
			ABroadCast(COLOR_LIGHTRED, string, 1);
		
			Msg(killerid, "Tilos a kórház DM!");
			Jail(killerid, "+", 1200, "ajail", "Kórház DM");
		}
		else if(PlayerInfo[killerid][pJailed] > 0)
		{	
			if(IsAt(killerid, IsAt_Fort) || IsAt(killerid, IsAt_LSPDBorton))
			{
				Format(string, "%s börtön DMelt - Auto 20perc adminjail", PlayerName(killerid));
				ABroadCast(COLOR_LIGHTRED, string, 1);
			
				Msg(killerid, "Tilos a börtön DM!");
				Jail(killerid, "+", 1200, "ajail", "Börtön DM");
			}
		}
	}

	SetPlayerColor(playerid,COLOR_GRAD2);
	killerid = INVALID_PLAYER_ID;
	SetHealth(playerid, MAXHP);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(IsPlayerNPC(playerid))
	{
		/*if(egyezik(PlayerName(playerid), "NPC_Arveres"))
		{
			//SetPlayerPos(playerid, -1661.306, 1203.361, 21.156);
			//SetPlayerFacingAngle(playerid, 336.907);
			SetPlayerSkin(playerid, 141);
			//SendClientMessageToAll(COLOR_WHITE, "NPC SPAWNED");
		}
		else if(egyezik(PlayerName(playerid), "NPC_Buszsofor"))
			PutPlayerInVehicle(playerid, Buszok[0], 0);*/
		//SetTimerEx("NPCSpawn", 3000, false, "d", playerid);
		NPCSpawn(playerid);
		return 1;
	}

	if(Logged(playerid) == 0)
		return 1;
	else if(PlayerPaintballing[playerid] != 1)
		SpawnVedelem[playerid] = 5;

	/*if(Skinsel[playerid] == 1)
	{
	    PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
	    Skinsel[playerid] = 0;
	}*/

    //TextDrawShowForPlayer(playerid, Textdraw2);
	STDPlayer[playerid] = 0;
		
	//if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNK_SFPD) || LMT(playerid, LMUNKA_LSMD) || LMT(playerid, LMUNKA_SFMD) || LMT(playerid, LMUNKA_FBI) || LMT(playerid, LMUNKA_KATONA))
	if(PlayerInfo[playerid][pChar] > 0 && OnDuty[playerid] || PlayerInfo[playerid][pChar] > 0 && !LegalisSzervezetTagja(playerid) && !Civil(playerid))
		SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	else
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);

	SetPlayerSpawn(playerid);
	SetPlayerToTeamColor(playerid);
	PlayerFixRadio(playerid);
	for(new i = 0; i < sizeof(Turfs); i++)
	{
	    GangZoneShowForPlayer(playerid, i, TurfInfo[i][zColor]);
	}
	/*if(MapIconsShown[playerid] != 1)
	{
	    MapIconsShown[playerid] = 1;
	    for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			SetPlayerMapIcon(playerid,i + 1,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],36,COLOR_LIGHTRED);
		}
	}*/
	PlayerInfo[playerid][pSpawned] = 1;
	
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 100);
	
	if(!LegalisSzervezetTagja(playerid) && !Civil(playerid) || Admin(playerid, 1337))
		TeruletekMutatasa(playerid);

	return 1;
}

public CKLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Log/ck.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
public LspdmoneyLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%d\n", lspdmoney);
	new File:hFile;
	hFile = fopen("Log/Lspdmoney.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
public LoadLspdmoney()
{
	new arrCoords[1][64];
	new strFromFile2[256];
	new File: file = fopen("Log/LspdmoneyLog.log", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		lspdmoney = strval(arrCoords[0]);
		fclose(file);
	}
	return 1;
}

public KillLog(string[], cheat)
{
	new entry[256], fajl[64];

	if(cheat)
		format(fajl, sizeof(fajl), "Log/Kill/%s-%s-%s(cheat).log", Time("ev"), Time("honap"), Time("nap"));
	else
		format(fajl, sizeof(fajl), "Log/Kill/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public PayLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Pay/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public KickLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Kick/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

/*public ClintLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Log/clint.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}*/

public ChatLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Chat/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public NevLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Nevvaltas/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public CommandLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Parancsok/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public PosLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Log/poziciok.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public BeKilepes(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Connect/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock CheatLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Cheat/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public BanLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Ban/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public EgyebLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Egyeb/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public OnPlayerEnterCheckpoint(playerid)
{
	new string[128];
	new name[MAX_PLAYER_NAME];
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
	    TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] < 999)
	{
	    BusAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		BusCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid]==1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
		    PlayerInfo[playerid][pJackSkill] ++;
			if(PlayerInfo[playerid][pJackSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 2, you will earn more Money and quicker Reload Time."); }
			else if(PlayerInfo[playerid][pJackSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 3, you will earn more Money and quicker Reload Time."); }
			else if(PlayerInfo[playerid][pJackSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 4, you will earn more Money and quicker Reload Time."); }
			else if(PlayerInfo[playerid][pJackSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 5, you will earn more Money and quicker Reload Time."); }
			new level = PlayerInfo[playerid][pJackSkill];
			if(level >= 0 && level <= 50)
			{
			    new rand = random(sizeof(SELLCAR1));
			    format(string, sizeof(string), "You sold a car for %dFt, your reload time is 20 minutes.", SELLCAR1[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GiveMoney(playerid, SELLCAR1[rand]);
			    PlayerInfo[playerid][pCarTime] = 1200;
			}
			else if(level >= 51 && level <= 100)
			{
			    new rand = random(sizeof(SELLCAR2));
			    format(string, sizeof(string), "You sold a car for %dFt, your reload time is 18 minutes.", SELLCAR2[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GiveMoney(playerid, SELLCAR2[rand]);
			    PlayerInfo[playerid][pCarTime] = 1080;
			}
			else if(level >= 101 && level <= 200)
			{
			    new rand = random(sizeof(SELLCAR3));
			    format(string, sizeof(string), "You sold a car for %dFt, your reload time is 16 minutes.", SELLCAR3[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GiveMoney(playerid, SELLCAR3[rand]);
			    PlayerInfo[playerid][pCarTime] = 960;
			}
			else if(level >= 201 && level <= 400)
			{
			    new rand = random(sizeof(SELLCAR4));
			    format(string, sizeof(string), "You sold a car for %dFt, your reload time is 14 minutes.", SELLCAR4[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GiveMoney(playerid, SELLCAR4[rand]);
			    PlayerInfo[playerid][pCarTime] = 840;
			}
			else if(level >= 401)
			{
			    new money = 6000;
			    format(string, sizeof(string), "You sold a car for %dFt, your reload time is 12 minutes.", money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GiveMoney(playerid, money);
			    PlayerInfo[playerid][pCarTime] = 720;
			}
			GameTextForPlayer(playerid, "~y~Sold the car", 2500, 1);
			CP[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    KocsiRespawn(GetPlayerVehicleID(playerid));
		}
		else
		{
		    GameTextForPlayer(playerid, "Not in a car", 5000, 1);
		}
	}
	else if(CP[playerid] == 5)
	{
	    GameTextForPlayer(playerid, "~y~At the Missions Checkpoint", 2500, 1);
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 9)//Karting
	{
		GameTextForPlayer(playerid, "~r~Wait here for more Kart Racers", 4000, 3);
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 10) { CP[playerid] = 11; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2258.7874,-2402.9712,12.7035,8.0); }
	else if(CP[playerid] == 11) { CP[playerid] = 12; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2225.8755,-2461.3875,12.7190,8.0); }
	else if(CP[playerid] == 12) { CP[playerid] = 13; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2276.9983,-2662.8328,12.8580,8.0); }
	else if(CP[playerid] == 13) { CP[playerid] = 14; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2449.1399,-2663.0562,12.8138,8.0); }
	else if(CP[playerid] == 14) { CP[playerid] = 15; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2566.9814,-2504.5686,12.7692,8.0); }
	else if(CP[playerid] == 15) { CP[playerid] = 16; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2719.0520,-2503.5962,12.7706,8.0); }
	else if(CP[playerid] == 16) { CP[playerid] = 17; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2720.7881,-2405.6589,12.7441,8.0); }
	else if(CP[playerid] == 17) { CP[playerid] = 18; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2571.5195,-2401.1531,12.7528,8.0); }
	else if(CP[playerid] == 18) { CP[playerid] = 19; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2406.6995,-2423.1182,12.6641,8.0); }
	else if(CP[playerid] == 19) { CP[playerid] = 20; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2322.9194,-2341.5715,12.6664,8.0); }
	else if(CP[playerid] == 20)//End of Karting
	{
	    CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    GetPlayerName(playerid, name, sizeof(name));
	    if(FirstKartWinner == 999)
	    {
	        FirstKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s finished First in the Kart Race.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(SecondKartWinner == 999)
	    {
	        SecondKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s finished Second in the Kart Race.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(ThirdKartWinner == 999)
	    {
	        ThirdKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s finished Third in the Kart Race.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		                SendClientMessage(i, COLOR_WHITE, "** Karting Race Over **");
		                CP[i] = 0;
		                DisablePlayerCheckpoint(i);
		            }
				}
	        }
	    }
	}
	else if(Hajocp[playerid] == 2) { Hajocp[playerid] = 3; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,53.7223,-1314.2769,-0.1171,5); }
	else if(Hajocp[playerid] == 3) { Hajocp[playerid] = 4; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,32.6353,-1330.8391,-0.0964,5); }
	else if(Hajocp[playerid] == 4) { Hajocp[playerid] = 5; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,385.2141,-2043.6469,-0.2836,5); }
	else if(Hajocp[playerid] == 5) { Hajocp[playerid] = 6; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1143.1094,-2519.0381,0.0469,5); }
	else if(Hajocp[playerid] == 6) { Hajocp[playerid] = 7; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,844.6083,-1971.7008,0.0960,5); }
	else if(Hajocp[playerid] == 7) { Hajocp[playerid] = 8; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,728.3119,-1494.5437,0.0093,5); }
	else if(Hajocp[playerid] == 8) { Hajocp[playerid] = 9; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,719.6855,-1630.5509,-0.3211,5); }
	else if(Hajocp[playerid] == 9)
	{
		if(playerid == Jogsineki[playerid])
		{
			Msg(playerid, "Áthaladtál az összes checkpointon kérem állj félre szabályosan, és állisd le a motort.");
			DisablePlayerCheckpoint(playerid);
			Hajocp[playerid] = 0;
		}
		else
		{
			DisablePlayerCheckpoint(playerid);
			Autocp[playerid] = 22;
			Msg(playerid, "A vizsgának vége, ha a tanuló megfelelt ird be igen, ha nem felelt meg ird be nem.");
		}
	}
	else if(Repulocp[playerid] == 2) { Repulocp[playerid] = 3; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,-1185.5914,24.2073,14.3231,5); }
	else if(Repulocp[playerid] == 3) { Repulocp[playerid] = 4; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1545.3843,-1354.6393,329.6508,5); }
	else if(Repulocp[playerid] == 4)
	{
		if(playerid == Jogsineki[playerid])
		{
			Msg(playerid, "Áthaladtál az összes checkpointon kérem szállj le szabályosan, és állisd le a motort.");
			DisablePlayerCheckpoint(playerid);
			Repulocp[playerid] = 0;
		}
		else
		{
		DisablePlayerCheckpoint(playerid);
		Autocp[playerid] = 22;
		Msg(playerid, "A vizsgának vége, ha a tanuló megfelelt ird be igen, ha nem felelt meg ird be nem.");
		}
	}
	else if(Kamioncp[playerid] == 2) { Kamioncp[playerid] = 3; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1193.7238,-950.5726,43.7015,5); }
	else if(Kamioncp[playerid] == 3) { Kamioncp[playerid] = 4; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1548.4219,-997.8412,44.8683,5); }
	else if(Kamioncp[playerid] == 4) { Kamioncp[playerid] = 5; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1682.4226,-329.1626,46.0532,5); }
	else if(Kamioncp[playerid] == 5) { Kamioncp[playerid] = 6; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1693.9978,850.0909,8.9608,5); }
	else if(Kamioncp[playerid] == 6) { Kamioncp[playerid] = 7; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1363.7054,903.1977,10.3118,5); }
	else if(Kamioncp[playerid] == 7) { Kamioncp[playerid] = 8; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,343.1124,794.2415,9.4443,5); }
	else if(Kamioncp[playerid] == 8) { Kamioncp[playerid] = 9; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,-883.0945,1172.2433,31.0934,5); }
	else if(Kamioncp[playerid] == 9) { Kamioncp[playerid] = 10; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,245.9127,1420.9283,11.5877,5); }
	else if(Kamioncp[playerid] == 10) { Kamioncp[playerid] = 11; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,312.7002,770.1730,13.5116,5);}
	else if(Kamioncp[playerid] == 11) { Kamioncp[playerid] = 12; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,513.7390,190.5141,19.2312,5);}
	else if(Kamioncp[playerid] == 12) { Kamioncp[playerid] = 13; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,453.9910,-601.3905,37.8870,5);}
	else if(Kamioncp[playerid] == 13) { Kamioncp[playerid] = 14; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,856.1134,-1408.0823,14.1414,5);}
	else if(Kamioncp[playerid] == 14) { Kamioncp[playerid] = 15; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1044.2572,-1459.4575,14.6372,5);}
	else if(Kamioncp[playerid] == 15)
	{
		if(playerid == Jogsineki[playerid])
		{
			Msg(playerid, "Áthaladtál az összes checkpointon kérem állj félre szabályosan, parkolj le, és állisd le a jármûvet.");
			DisablePlayerCheckpoint(playerid);
			Kamioncp[playerid] = 0;
		}
		else
		{
		DisablePlayerCheckpoint(playerid);
		Autocp[playerid] = 22;
		Msg(playerid, "A vizsgának vége, ha a tanuló megfelelt ird be igen, ha nem felelt meg ird be nem.");
		}
	}
	else if(Autocp[playerid] == 2) { Autocp[playerid] = 3; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1067.4370,-1148.3915,23.3654, 5); }
	else if(Autocp[playerid] == 3) { Autocp[playerid] = 4; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1377.8282,-1144.4166,23.3606, 5); }
	else if(Autocp[playerid] == 4) { Autocp[playerid] = 5; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1648.9475,-1098.0793,23.6116, 5); }
	else if(Autocp[playerid] == 5) { Autocp[playerid] = 6; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1570.6285,-1086.6868,23.1997, 5); }
	else if(Autocp[playerid] == 6) { Autocp[playerid] = 7; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1356.3395,-1057.4225,26.3447, 5); }
	else if(Autocp[playerid] == 7) { Autocp[playerid] = 8; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1314.9395,-1512.8311,13.0898, 5); }
	else if(Autocp[playerid] == 8) { Autocp[playerid] = 9; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1176.0936,-1708.8267,13.2745, 5); }
	else if(Autocp[playerid] == 9) { Autocp[playerid] = 10; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,1046.2122,-1460.1848,13.3482, 5); }
	else if(Autocp[playerid] == 10)
	{
		if(playerid == Jogsineki[playerid])
		{
			Msg(playerid, "Áthaladtál az összes checkpointon kérem menj be szabályosan, parkolj le, és állisd le a jármûvet.");
			DisablePlayerCheckpoint(playerid);
			Autocp[playerid] = 0;
		}
		else
		{
		DisablePlayerCheckpoint(playerid);
		Autocp[playerid] = 22;
		Msg(playerid, "A vizsgának vége, ha a tanuló megfelelt ird be igen, ha nem felelt meg ird be nem.");
		}
	}
	else if(MissionCheckpoint[playerid] > 0 && PlayMission[kToggle] == 1)//Missions + Checkpoint on toggle
	{
        	RingTone[playerid] = 20;
		    switch(MissionCheckpoint[playerid])
		    {
	        	case 1:
		        {
					format(string, sizeof(string), "%s", PlayMission[kGText1]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText4]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText5]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText6]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP2][0], PlayMission[kCP2][1], PlayMission[kCP2][2], 8);
					MissionCheckpoint[playerid] = 2;
		        }
		        case 2:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText2]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText7]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText8]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText9]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP3][0], PlayMission[kCP3][1], PlayMission[kCP3][2], 8);
					MissionCheckpoint[playerid] = 3;
		        }
		        case 3:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText3]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText10]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText11]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText12]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP4][0], PlayMission[kCP4][1], PlayMission[kCP4][2], 8);
					MissionCheckpoint[playerid] = 4;
		        }
		        case 4:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText4]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText13]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText14]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText15]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP5][0], PlayMission[kCP5][1], PlayMission[kCP5][2], 8);
					MissionCheckpoint[playerid] = 5;
		        }
		        case 5:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText5]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText16]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText17]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText18]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP6][0], PlayMission[kCP6][1], PlayMission[kCP6][2], 8);
					MissionCheckpoint[playerid] = 6;
		        }
		        case 6:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText6]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "..:: Mission Passed : %s | Reward received: %dFt ::..", PlayMission[kTitle], PlayMission[kReward]);
					SendClientMessage(playerid, COLOR_GREEN, string);
					DisablePlayerCheckpoint(playerid);
					GiveMoney(playerid, PlayMission[kReward]);
					PlayerInfo[playerid][pMissionNr] = PlayerOnMission[playerid];
					MissionCheckpoint[playerid] = 0;
					PlayerOnMission[playerid] = 0;
		        }
		    }
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
		    {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				GameTextForPlayer(playerid, "~w~You are~n~~y~Home", 5000, 1);
		    }
		}
	}

	MunkaCheckpointCheck(playerid);

	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    foreach(Jatekosok, utzar)
	{
		if(!Utzarak[utzar][uVan]) continue;
		
    	if(pickupid == Utzarak[utzar][uPickup][0])
		{
		    new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
    	    if(Utzarak[utzar][uTipus] == UTZAR_KICSI)
    	        Utzarak[utzar][uPickup][0] = CreateDynamicPickup(1007, 14, X+(1.5*dis1), Y+(1.5*dis2), Z, 0);
    	    else
				Utzarak[utzar][uPickup][0] = CreateDynamicPickup(1007, 14, X+(4.0*dis1), Y+(4.0*dis2), Z, 0);
				
    	    break;
    	}
    	else if(pickupid == Utzarak[utzar][uPickup][1])
		{
	    	new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
    	    if(Utzarak[utzar][uTipus] == UTZAR_KICSI)
    	        Utzarak[utzar][uPickup][1] = CreateDynamicPickup(1007, 14, X-(1.5*dis1), Y-(1.5*dis2), Z, 0);
    	    else
				Utzarak[utzar][uPickup][1] = CreateDynamicPickup(1007, 14, X+(1.25*dis1), Y+(1.25*dis2), Z, 0);

    	    break;
    	}
    	else if(pickupid == Utzarak[utzar][uPickup][2])
		{
	    	new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
			Utzarak[utzar][uPickup][2] = CreateDynamicPickup(1007, 14, X-(4.0*dis1), Y-(4.0*dis2), Z, 0);
    	    break;
    	}
    	else if(pickupid == Utzarak[utzar][uPickup][3])
		{
	    	new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
			Utzarak[utzar][uPickup][3] = CreateDynamicPickup(1007, 14, X-(1.25*dis1), Y-(1.25*dis2), Z, 0);
    	    break;
    	}
    }
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(IsPlayerNPC(playerid))
	{
		//printf("OnNPCStateChange(npc: %d, newstate: %d, oldstate: %d)", playerid, newstate, oldstate);
		return 1;
	}
	
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		if(Sisak[playerid] == 1)
		{
			RemovePlayerAttachedObject(playerid, SISAKSLOT);
			Sisak[playerid] = 0;
			Cselekves(playerid, "levette a bukósisakot...");
		}
		if(Szirena[playerid] != NINCS)
		{
			DestroyObject(Szirena[playerid]);
			Szirena[playerid] = NINCS;
			Cselekves(playerid, "levette a szirénát a jármûrõl");
		}
		if(Sokkol[playerid])
		{
			Sokkol[playerid] = false;
			DestroyObject(SokkObject[playerid]);
		}
	}
	
	if(TrafiPax[playerid][tAktiv])
	{
		DestroyDynamic3DTextLabel(TrafiPax[playerid][t3D]);
		TrafiPax[playerid][tAktiv] = false;
		Msg(playerid, "Mivel elmentél a helyedrõl, a trafipax törölve");
	}
	
	new string[128];
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(Tevezve[playerid] != NINCS)
			PlayerSpectatePlayer(Tevezve[playerid], playerid);
			
	    if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
		{
		    PlayerInKart[playerid] = 0;
		    KartingPlayers --;
		}
	    if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
			    BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* You are now Off Duty and earned %dFT.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GiveMoney(playerid, TransportMoney[playerid]);
			ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
		}
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
		    if(IsPlayerConnected(TransportDriver[playerid]))
			{
			    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			    TransportTime[TransportDriver[playerid]] = 0;
			    TransportCost[TransportDriver[playerid]] = 0;
			    format(string, sizeof(string), "~w~Fizettel~n~~r~%dFT-t",TransportCost[playerid]);
			    GameTextForPlayer(playerid, string, 5000, 4);
			    format(string, sizeof(string), "~w~Utas fizetett~n~~g~%dFT-t",TransportCost[playerid]);
			    GameTextForPlayer(TransportDriver[playerid], string, 5000, 4);
				GiveMoney(playerid, -TransportCost[playerid]);
				TransportCost[playerid] = 0;
				TransportTime[playerid] = 0;
				TransportDriver[playerid] = 999;
			}
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    new vehicleid = GetPlayerVehicleID(playerid);
		
		if(Tevezve[playerid] != NINCS)
			PlayerSpectateVehicle(Tevezve[playerid], vehicleid);
		
		new sofor = KocsiSofor(vehicleid);
		if(sofor != NINCS && IsPlayerNPC(sofor) && GetVehicleModel(vehicleid) == 437)
		{
			SetPlayerPos(playerid, 2022.0273, 2235.2402, 2103.9536);
			SetPlayerFacingAngle(playerid, 0);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 50000+sofor);
			Freeze(playerid, 3000);
			Cselekves(playerid, "felszállt a buszra");
			if(PlayerInfo[playerid][pJegy] == 0)
				Msg(playerid, "Vigyázz, nincs jegyed, az ellenõr elkaphat!");
		}
		if(Sisak[playerid] == 1)
		{
			RemovePlayerAttachedObject(playerid, SISAKSLOT);
			Sisak[playerid] = 0;
			Cselekves(playerid, "levette a bukósisakot...");
		}
		
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
	            if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
	            {
	                if(GetMoney(playerid) < TransportValue[i])
	                {
	                    format(string, sizeof(string), "* Beszálláshoz %dFt kell minimum.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						RemovePlayerFromVehicle(playerid);
	                }
	                else
	                {
	                    if(TransportDuty[i] == 1)
	                    {
	                        format(string, sizeof(string), "* Beszáltál a taxiba, %dFt / 15 másodperc", TransportValue[i]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s beszállt a taxiba.", name);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
							TransportTime[i] = 1;
	                    	TransportTime[playerid] = 1;
	                    	TransportCost[playerid] = TransportValue[i];
	                    	TransportCost[i] = TransportValue[i];
	                    	TransportDriver[playerid] = i;
	                    }
	                    else if(TransportDuty[i] == 2)
	                    {
	                        format(string, sizeof(string), "* Beszáltál a buszba. %dFt.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s beszállt a buszba.", name);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
	                    }
						GiveMoney(playerid, - TransportValue[i]);
						TransportMoney[i] += TransportValue[i];
	                }
	            }
	        }
	    }
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
		/*if(!Logged(playerid) || Skinsel[playerid] == 1)
		{
			SetTimerEx("SpawnPlayer", 250, false, "d", playerid);
			return 1;
		}*/

		if(WantedLevel[playerid] >= 1)
		{
		    new price = WantedLevel[playerid] * 4000;
			new count;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && !IsPlayerNPC(i) && Logged(i) && IsACop(i))
				{
				    if(CrimInRange(30.0, playerid,i))
				    {
						count = 1;
						format(string, sizeof(string), "~w~Menekult~r~Bunozo~n~Megolese~g~(%dFT)", price);
						GameTextForPlayer(i, string, 5000, 1);
						ConsumingMoney[i] = 1;
						GiveMoney(i, price);
						PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
					}
				}
			}
			if(count == 1)
			{
				GiveMoney(playerid, - price);
				PlayerInfo[playerid][pWantedDeaths] += 1;
				PlayerInfo[playerid][pJailed] = 1;
			    PlayerInfo[playerid][pJailTime] = (WantedLevel[playerid])*(600);
			    format(string, sizeof(string), "* Körözés alatt voltál, a rendõr pedig elkapott.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, string);
			    WantedPoints[playerid] = 0;
				WantedLevel[playerid] = 0;
			}
		}
		MedicBill[playerid] = 1;
	}
	if(newstate == PLAYER_STATE_DRIVER) //buggy dont finnish
	{// 38 / 49 / 56 = SS

		new newcar = GetPlayerVehicleID(playerid);
		KocsiUtolsoHasznalat[newcar] = gettime();

		if(!IsPlayerNPC(playerid) && NPCKocsi[newcar])
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);
			Msg(playerid, "Ebbe ne szállj be!");
			return 1;
		}

		Fegyvere[playerid] = 0;
		SetPlayerArmedWeapon(playerid, 0);

		if(Tevezve[playerid] != NINCS)
			PlayerSpectateVehicle(Tevezve[playerid], newcar);

		if(JatekosBeszallas(playerid, newcar) == 0) return 1;
		Startup(playerid, newcar);
		KocsibanVan[playerid] = true;

		new kocsi = IsAVsKocsi(newcar);

		if(kocsi != -1)
		{
		    if(CarInfo[kocsi][cOwned] == 0)
		    {
				if(!AMT(playerid, MUNKA_AUTOKERESKEDO))
				{
					format(string, sizeof(string), "~n~~n~~n~~b~~h~Autokereskedoi kocsi~n~~r~~h~Nem viheted el!",CarInfo[kocsi][cValue]);
					GameTextForPlayer(playerid, string, 10000, 3);
					engineOn[newcar] = 0;
					SetJarmu(newcar, KOCSI_MOTOR, 0);
				}
		    }
		}

		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		/*if(IsABoat(newcar))
		{
		    if(PlayerInfo[playerid][pBoatLic] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Nem tudod hogy kell vezetni !");
			    RemovePlayerFromVehicle(playerid);
				UnFreeze(playerid);
			}
		}
		else if(IsAPlane(newcar))
		{
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    if(TakingLesson[playerid] != 1) 
				{
					SendClientMessage(playerid, COLOR_GREY, "   Nem tudod hogy kell vezetni !");
					RemovePlayerFromVehicle(playerid);
					UnFreeze(playerid);
				}
			}
		}
		else if(IsAMotor(newcar))
		{
		    if(PlayerInfo[playerid][pMotorJogsi] < 1)
			{
			    if(TakingLesson[playerid] != 1) 
				{
					SendClientMessage(playerid, COLOR_GREY, "   Nem tudod hogy kell vezetni !");
					RemovePlayerFromVehicle(playerid);
					UnFreeze(playerid);
				}
			}
		}
		else if(IsATruck(newcar))
		{
		    if(PlayerInfo[playerid][pKamionJogsi] < 1)
			{
			    if(TakingLesson[playerid] != 1) 
				{
					SendClientMessage(playerid, COLOR_GREY, "   Nem tudod hogy kell vezetni !");
					RemovePlayerFromVehicle(playerid);
					UnFreeze(playerid);
				}
			}
		}
		else
		{
			if(PlayerInfo[playerid][pCarLic] < 1 && !IsABicikli(newcar))
			{
				if(TakingLesson[playerid] == 1) { }
				else 
				{
					SendClientMessage(playerid, COLOR_GREY, "   Nem tudod hogy kell vezetni !");
					RemovePlayerFromVehicle(playerid);
					UnFreeze(playerid);
					//SetPlayerCriminal(playerid,255, "Jogosítvány nélküli vezetés");
                }
			}
			else if(PlayerDrunk[playerid] >= 5)
			{
			    WantedPoints[playerid] += 1;
				SetPlayerCriminal(playerid,255, "Ittas vezetés");
			}
		}*/
		
	    if(PlayerDrunk[playerid] >= 5)
		{
		    WantedPoints[playerid] += 1;
			SetPlayerCriminal(playerid,255, "Ittas vezetés");
		}

		if(IsKocsi(newcar, "Prod"))
		{
			format(string, sizeof(string), "Prodok: %d/%d", MAXPROD, PlayerHaul[newcar][pLoad]);
			SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
			SendClientMessage(playerid, COLOR_WHITE, "INFO: A prodokat el tudod adni a bizniszeknél");
			SendClientMessage(playerid, COLOR_WHITE, "INFO: Parancsok /load /buyprods /sellprods");
		}

		/*if(PlayerKarting[playerid] != 0)
		{
		    new kart = GetPlayerVehicleID(playerid);
		    if(kart==0||kart==0||kart==0||kart==0||kart==0||kart==0)
		    {
		        PlayerInKart[playerid] = 1;
		    	KartingPlayers ++;
			}
		}*/

		if(newcar >= BerelhetoKocsik[0] && newcar <= BerelhetoKocsik[1])
		{
			if (HireCar[playerid] != newcar)
			{
				format(string, sizeof(string), "~w~Ez a kocsi beralheto~n~Ara:~g~%dFT~n~~w~Berles:~g~/rentcar",BizzInfo[BIZ_BERLES1][bEntranceCost]);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, string, 5000, 3);
			}
		}

		if(newcar >= BerelhetoKocsik2[0] && newcar <= BerelhetoKocsik2[1])
		{
			if (HireCar[playerid] != newcar)
			{
				format(string, sizeof(string), "~w~Ez a kocsi beralheto~n~Ara:~g~%dFT~n~~w~Berles:~g~/rentcar",BizzInfo[BIZ_BERLES2][bEntranceCost]);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, string, 5000, 3);
			}
		}

		gLastCar[playerid] = newcar;
		gLastDriver[newcar] = playerid;
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
/*		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || PlayerToPoint(1000.0, playerid, -1041.9,-1868.4,79.1)) //the highest land point in sa = 526.8
		{
			SetPlayerSpawn(playerid);
		}
*/
		if(WantedPoints[playerid] > 0)
		{
		    new dstring[128];
			new wanted = WantedPoints[playerid];
			new diecash = 0;
		    while(WantedPoints[playerid] > 0)
		    {
		        diecash += 500;
		        WantedPoints[playerid] --;
		    }
		    format(dstring, sizeof(dstring), "Vesztettél %dFT-t mert meghaltál(%d körözésed volt).", diecash, wanted);
		    SendClientMessage(playerid, COLOR_YELLOW, dstring);
		    GiveMoney(playerid, - diecash);
		    PlayerInfo[playerid][pWantedDeaths] += 1;
		}
		if(PlayerOnMission[playerid] > 0)
		{
			GameTextForPlayer(playerid, "~r~Mission failed", 5000, 3);
			PlayerOnMission[playerid] = 0;
		    PlayerInfo[playerid][pMissionNr] = 0;
		}
		WantedPoints[playerid] = 0;
		WantedLevel[playerid] = 0;
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
	}
	//new vehicle = GetPlayerVehicleID(playerid);
	//SetTimerEx("Startup", 1, false, "ii", playerid, vehicle);
	//if(GetPlayerState(playerid) == 2)
	//	Startup(playerid, vehicle);
	return 1;
}

public HireCost(carid)
{
	switch (carid)
	{
		case 69:
		{
			return 90000; //bullit
		}
		case 70:
		{
			return 130000; //infurnus
		}
		case 71:
		{
			return 100000; //turismo
		}
		case 72:
		{
			return 80000;
		}
		case 73:
		{
			return 70000;
		}
		case 74:
		{
			return 60000;
		}
	}
	return 0;
}

public Benzinkut(playerid)
{
	for(new b = 0; b < MAX_BENZINKUT; b++)
	{
		if(benzinkutjovedelem[playerid] == 1)
		{
			if(BenzinKutak[b][bSzint] >= 1)
			{
				new bid = IsAtGasStation(playerid);
				
				if(bid != NINCS) // Ha benzinkúton van
				{
					if(benzinkutlogolas[playerid] == 1) // logolás bekapcsolva
					{
						new szorzoja2 = Rand(500, 1000);
						new osszeg2 = BenzinKutak[bid][bSzint]*szorzoja2;
						BenzinKutak[bid][bSzef] += osszeg2;
						//BenzinKutak[b][bBenzin] -= 1;
						
						SendFormatMessage(playerid, COLOR_GREY, "[Benzinkútlog] Benzinkút bevétel: +%dFt", osszeg2);
					}
					else if(benzinkutlogolas[playerid] == 0)
					{
						new szorzoja2 = Rand(500, 1000);
						new osszeg2 = BenzinKutak[bid][bSzint]*szorzoja2;
						BenzinKutak[bid][bSzef] += osszeg2;
						//BenzinKutak[b][bBenzin] -= 1;
					}
				}
				else
				{
					new szorzoja = Rand(500, 1000);
					new osszeg = BenzinKutak[b][bSzint]*szorzoja;
					BenzinKutak[b][bSzef] += osszeg;
					//BenzinKutak[b][bBenzin] -= 1;
				}
				
				if(benzinkuttick != 10)
				{
					benzinkuttick++; 
				}
				else
				{
					BenzinKutak[b][bBenzin] -= 1;
					benzinkuttick = 0;
				}
			}
		}
	}
	return 1;
}
public CarCheck()
{
	new string[256];
	for(new j = 0; j<MAX_PLAYERS; j++)
	{
	    if(IsPlayerConnected(j))
	    {
		    new Float:health;
		    GetPlayerHealth(j, health);
			if(STDPlayer[j]==1)
			{
			    GetPlayerHealth(j, health);
			    SetHealth(j, health - 5.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Lost 4 health due to STD.");
			}
			else if(STDPlayer[j]==2)
			{
			    GetPlayerHealth(j, health);
			    SetHealth(j, health - 12.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Lost 8 health due to STD.");
			}
			else if(STDPlayer[j]==3)
			{
			    GetPlayerHealth(j, health);
			    SetHealth(j, health - 20.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Lost 12 health due to STD.");
			}

			if(GetMoney(j) < 0)
			{
			    if(MoneyMessage[j]==0)
			    {
			        new penz = GetMoney(j);
			        new penzkell = penz - (penz * 2);
				    format(string, sizeof(string), "Tartozásod van! Szerezz %dFT-t vagy ki fognak nyírni!", penzkell);
					SendClientMessage(j, COLOR_LIGHTRED, string);
					MoneyMessage[j] = 1;
				}
			}
			else
			{
			    MoneyMessage[j] = 0;
			}
		}
	}
	return 1;
}

public CarInit()
{
	for(new c = 1; c < 254; c++)
	{
 		gLastDriver[c] = 299;
	}
	gLastDriver[301]=255;
	return 1;
}

public CarRespawn(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid) || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	KocsiRespawn(carid);
	gLastDriver[carid] = 299;
	return 1;
}

public LockCar(carid)
{
	new vs = IsAVsKocsi(carid);
	if(vs != NINCS)
		CarInfo[vs][cLock] = 1;
		
	gCarLock[carid] = 1;
	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(IsPlayerConnected(p))
			SetVehicleParamsForPlayer(carid, p, 0, 1);
	}
	return 1;
}

public UnLockCar(carid)
{
	new vs = IsAVsKocsi(carid);
	if(vs != NINCS)
		CarInfo[vs][cLock] = 0;
		
	gCarLock[carid] = 0;
	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(IsPlayerConnected(p))
			SetVehicleParamsForPlayer(carid, p, 0, 0);
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(PlayerRaceTuning[playerid][tNitro] > 0 && PlayerRaceTuning[playerid][tNitroIdo] == 0 && KocsibanVan[playerid])
		PlayerRaceTuning[playerid][tNitroIdo] = 0;
		
	KocsibanVan[playerid] = false;
	if(Lefoglalt[playerid] == 1) Lefoglalt[playerid] = 0;
	if(ov[playerid] == 1)
	{
		new ules = GetPlayerVehicleSeat(playerid);
		if(OvFlood[playerid] == 0)
		{
			Msg(playerid, "A biztonsági öved bevan csatolva.");
			OvFlood[playerid] = 5;
		}	
		PutPlayerInVehicle(playerid, vehicleid, 0);
		PutPlayerInVehicle(playerid, vehicleid, ules);
		//SendFormatMessage(playerid, COLOR_LIGHTRED, "Ülés szám: %d", ules);	
	}
	
	if(engineOn[vehicleid] == 1 && GetPlayerState(playerid) == 2)
		Msg(playerid, "Figyelmeztetés: A motor nincs leállítva", false, COLOR_LIGHTBLUE);
	
	KocsiUtolsoHasznalat[vehicleid] = gettime();
	
	/*if(GetPlayerState(playerid) == 2)
	{
		if(engineOn[vehicleid] == 1)
		{
			engineOn[vehicleid] = 0;
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid, COLOR_GREEN, "Jármû leállítva!");
			ProxDetector(30.0, playerid, "* Valaki leállította a jármûvét és kiszállt.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}*/

	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid)) return 1;
	
	if(Logged(playerid) || !Logged(playerid) && ElsoSpawn[playerid] == 1)
	{
		switch(random(7))
		{
			case 0: PlayerPlaySound(playerid, 1183, 0.0, 0.0, 0.0);
			case 1: PlayerPlaySound(playerid, 1185, 0.0, 0.0, 0.0);
			case 2: PlayerPlaySound(playerid, 1187, 0.0, 0.0, 0.0);
			case 3: PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);
			case 4: PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
			case 5: PlayerPlaySound(playerid, 1076, 0.0, 0.0, 0.0);
			case 6: PlayerPlaySound(playerid, 1097, 0.0, 0.0, 0.0);
		}
	}

	if(Logged(playerid) == 0)
	{
		SpawnPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid, 0);
		/*SetPlayerPos(playerid, 1543.207641, -1757.084716, 13.546875);
		SetPlayerCameraPos(playerid, 1555.392578, -1749.457031, 30.780603);
		SetPlayerCameraLookAt(playerid, 1504.327270, -1713.032226, 14.046875);*/
		SetPlayerPos(playerid, LoginSpawn[SpawnHely[playerid]][3], LoginSpawn[SpawnHely[playerid]][4], LoginSpawn[SpawnHely[playerid]][5]);
		SetPlayerCameraPos(playerid, LoginSpawn[SpawnHely[playerid]][0], LoginSpawn[SpawnHely[playerid]][1], LoginSpawn[SpawnHely[playerid]][2]);
		SetPlayerCameraLookAt(playerid, LoginSpawn[SpawnHely[playerid]][3], LoginSpawn[SpawnHely[playerid]][4], LoginSpawn[SpawnHely[playerid]][5]);
		TogglePlayerControllable(playerid, false);

		if(ElsoSpawn[playerid] == 1)
		{
			SetTimer("Spawnolas", 3000, false);
			ElsoSpawn[playerid] = 0;
			JatekBetoltve[playerid] = true;

			if(Registered(playerid) != 0)
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Gates]: Üdv. Regisztrálva vagy. Kérlek lépj be. (/login)");
			else
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Gates]: Üdv. Még nem vagy regisztrálva | Karakter regisztráció a kezelõfelületen: www.usercp.[Gates].net");
		}

		return 1;
	}

	SetupPlayerForClassSelection(playerid);
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(Logged(playerid) == 0 && !IsPlayerNPC(playerid))
		return 0;
	return 1;
}

public SetupPlayerForClassSelection(playerid)
{
	/*switch (gTeam[playerid])
	{
		case TEAM_BLUE:
		{
			SetPlayerInterior(playerid,5);
			SetPlayerPos(playerid,323.4,305.6,999.1);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,323.4-1.5-1.0,305.6,999.1+0.7);
			SetPlayerCameraLookAt(playerid,323.4-1.0,305.6,999.1+0.7);

		}
		case TEAM_ADMIN:
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid,-2654.4,1424.2,912.4);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,-2654.4-1.5,1424.2,912.4+0.7);
			SetPlayerCameraLookAt(playerid,-2654.4,1424.2,912.4+0.7);
		}
		default:
		{*/
		    SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,-1657.5237,1207.6644,13.6719);
			SetPlayerFacingAngle(playerid,357.6906);
		    SetPlayerCameraPos(playerid, -1657.4678,1211.2292,13.6781);
		    SetPlayerCameraLookAt(playerid,-1657.5237,1207.6644,13.6719);
		/*}
	}*/
}

//---------------------------------------------------------

public SetPlayerCriminal(playerid,declare,reason[])
{//example: SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle");
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
	    new points = WantedPoints[playerid];
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new wantedmes[128];
		new wlevel;
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if (declare == 255)
		{
			format(turner, sizeof(turner), "CCTV Camera");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		format(turnmes, sizeof(turnmes), "Feljelentettek! Vád: %s. Jelentõ: %s.",reason,turner);
		SendClientMessage(playerid, COLOR_LIGHTRED, turnmes);
		if(points > 0)
		{
		    new yesno;
			if(points == 3) { if(WantedLevel[playerid] != 1) { WantedLevel[playerid] = 1; wlevel = 1; yesno = 1; } }
			else if(points >= 4 && points <= 5) { if(WantedLevel[playerid] != 2) { WantedLevel[playerid] = 2; wlevel = 2; yesno = 1; } }
			else if(points >= 6 && points <= 7) { if(WantedLevel[playerid] != 3) { WantedLevel[playerid] = 3; wlevel = 3; yesno = 1; } }
			else if(points >= 8 && points <= 9) { if(WantedLevel[playerid] != 4) { WantedLevel[playerid] = 4; wlevel = 4; yesno = 1; } }
			else if(points >= 10 && points <= 11) { if(WantedLevel[playerid] != 5) { WantedLevel[playerid] = 5; wlevel = 5; yesno = 1; } }
			else if(points >= 12 && points <= 13) { if(WantedLevel[playerid] != 6) { WantedLevel[playerid] = 6; wlevel = 6; yesno = 1; } }
			else if(points >= 14) { if(WantedLevel[playerid] != 10) { WantedLevel[playerid] = 10; wlevel = 10; yesno = 1; } }
			if(yesno)
			{
				format(wantedmes, sizeof(wantedmes), "Körözési szinted: %d", wlevel);
				SendClientMessage(playerid, COLOR_YELLOW, wantedmes);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 2||PlayerInfo[i][pLeader] == 2 || PlayerInfo[i][pMember] == 14||
						PlayerInfo[i][pLeader] == 14 || PlayerInfo[i][pMember] == 15||PlayerInfo[i][pLeader] == 15)
					    {
							format(cbjstore, sizeof(turnmes), "HQ: Minden egységnek! Jelentõ: %s",turner);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
							format(cbjstore, sizeof(turnmes), "HQ: Vád: %s | Vádlott: %s",reason,turned);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
						}
					}
				}
			}
		}
	}//not connected
}
//---------------------------------------------------------

public SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrime(playerid);
		//new turned[MAX_PLAYER_NAME];
		//new turner[MAX_PLAYER_NAME];
		//new turnmes[128];
		new crbjstore[128];
		/*if (declare == 255)
		{
			format(turner, sizeof(turner), "911");
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}*/
		//GetPlayerName(playerid, turned, sizeof(turned));
		/*format(turnmes, sizeof(turnmes), "SMS: %s, Because you %s, you are no longer a Criminal, Sender: MOLE (555)",turned,reason);
		RingTone[playerid] = 20;
		SendClientMessage(playerid, COLOR_YELLOW, turnmes);*/
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(IsACop(i))
			    {
					format(crbjstore, sizeof(crbjstore), "HQ: %s letartóztatta %s-t",PlayerName(declare), PlayerName(playerid));
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
				}
			}
		}
	}
}

public RingToner()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 6)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 20)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
			}
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return 1;
}

public RingTonerRev()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 5)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 19)
			{
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
				RingTone[i] = 0;
			}
		}
	}
	SetTimer("RingToner", 1000, 0);
	return 1;
}

public CsomagTartoMentes() //Ne nyúljá hozzá(FluckS)
{
	new idx;
	new File: file2;
	idx = 1;
	while (idx < sizeof(CarInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i, %i, %i, %i, %i\n",
		CuccokAKocsiban[idx][4],
		CuccokAKocsiban[idx][5],
		CuccokAKocsiban[idx][6],
		CuccokAKocsiban[idx][7],
		CuccokAKocsiban[idx][8],
		CuccokAKocsiban[idx][9],
		CuccokAKocsiban[idx][1],
		CuccokAKocsiban[idx][2],
		CuccokAKocsiban[idx][3],
		CuccokAKocsiban[idx][0],
		CuccokAKocsiban[idx][12],
		CuccokAKocsiban[idx][13],
		CuccokAKocsiban[idx][14],
		CuccokAKocsiban[idx][15],
		CuccokAKocsiban[idx][16],
		CuccokAKocsiban[idx][17],
		CuccokAKocsiban[idx][18],
		CuccokAKocsiban[idx][19]);
		if(idx == 1)
		{
			file2 = fopen("Config/csomagtarto.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/csomagtarto.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

/*public MatricaMentes()
{
	new idx;
	new File: file2;
	idx = 1;
	while (idx < sizeof(CarInfo))
	{
		new coordsstring[128];
		format(coordsstring, sizeof(coordsstring), "%i\n",
		Matrica[idx]);
		if(idx == 1)
		{
			file2 = fopen("Config/matricak.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/matricak.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public MatricaBetoltes()
{
	new arrCoords[1][64];
	new File: file = fopen("Config/matricak.cfg", io_read);
	new File2[256];
	if (file)
	{
		new idx = 1;
		while (idx < sizeof(CarInfo))
		{
		    fread(file, File2);
		    split(File2, arrCoords, ',');
		    Matrica[idx] = strval(arrCoords[0]);
		    idx++;
		}
	}
	return 1;
}*/

public CsomagTartoBetoltes() //Ne nyúljá hozzá(FluckS)
{
	new arrCoords[18][64];
	new File: file = fopen("Config/csomagtarto.cfg", io_read);
	new File2[256];
	if (file)
	{
		new idx = 1;
		while (idx < sizeof(CarInfo))
		{
		    fread(file, File2);
		    split(File2, arrCoords, ',');
		    CuccokAKocsiban[idx][4] = strval(arrCoords[0]);
		    CuccokAKocsiban[idx][5] = strval(arrCoords[1]);
		    CuccokAKocsiban[idx][6] = strval(arrCoords[2]);
		    CuccokAKocsiban[idx][7] = strval(arrCoords[3]);
		    CuccokAKocsiban[idx][8] = strval(arrCoords[4]);
		    CuccokAKocsiban[idx][9] = strval(arrCoords[5]);
			CuccokAKocsiban[idx][1] = strval(arrCoords[6]);
			CuccokAKocsiban[idx][2] = strval(arrCoords[7]);
			CuccokAKocsiban[idx][3] = strval(arrCoords[8]);
			CuccokAKocsiban[idx][0] = strval(arrCoords[9]);
			CuccokAKocsiban[idx][12] = strval(arrCoords[10]);
			CuccokAKocsiban[idx][13] = strval(arrCoords[11]);
			CuccokAKocsiban[idx][14] = strval(arrCoords[12]);
			CuccokAKocsiban[idx][15] = strval(arrCoords[13]);
			CuccokAKocsiban[idx][16] = strval(arrCoords[14]);
			CuccokAKocsiban[idx][17] = strval(arrCoords[15]);
			CuccokAKocsiban[idx][18] = strval(arrCoords[16]);
			CuccokAKocsiban[idx][19] = strval(arrCoords[17]);

			idx++;
		}
	}
	return 1;
}

public PuttoSorsolas()
{
	if(PSorsolas < 1)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(VanSzelvenye[i] == 1)
			{
					//SendClientMessage(i, COLOR_LIGHTBLUE, "* Puttó Sorsolás elkezdõdött!");
					new Szam1 = Rand(1, 20);
					new Szam2 = Rand(1, 20);
					new Szam3 = Rand(1, 20);
					new Szam4 = Rand(1, 20);
					new Szam5 = Rand(1, 20);
					new Szam6 = Rand(1, 20);
					new Szam7 = Rand(1, 20);
					new Szam8 = Rand(1, 4);
					if(Szam1 == Szam2 || Szam1 == Szam3 ||  Szam1 == Szam4 ||  Szam1 == Szam5 ||  Szam1 == Szam6 ||  Szam1 == Szam7) return PuttoSorsolas();
					if(Szam2 == Szam1 || Szam2 == Szam3 ||  Szam2 == Szam4 ||  Szam2 == Szam5 ||  Szam2 == Szam6 ||  Szam2 == Szam7) return PuttoSorsolas();
					if(Szam3 == Szam1 || Szam3 == Szam2 ||  Szam3 == Szam4 ||  Szam3 == Szam5 ||  Szam3 == Szam6 ||  Szam3 == Szam7) return PuttoSorsolas();
					if(Szam4 == Szam1 || Szam4 == Szam2 ||  Szam4 == Szam3 ||  Szam4 == Szam5 ||  Szam4 == Szam6 ||  Szam4 == Szam7) return PuttoSorsolas();
					if(Szam5 == Szam1 || Szam5 == Szam2 ||  Szam5 == Szam3 ||  Szam5 == Szam3 ||  Szam5 == Szam6 ||  Szam5 == Szam7) return PuttoSorsolas();
					if(Szam6 == Szam1 || Szam6 == Szam2 ||  Szam6 == Szam3 ||  Szam6 == Szam4 ||  Szam6 == Szam5 ||  Szam6 == Szam7) return PuttoSorsolas();
					if(Szam7 == Szam1 || Szam7 == Szam2 ||  Szam7 == Szam3 ||  Szam7 == Szam4 ||  Szam7 == Szam5 ||  Szam7 == Szam6) return PuttoSorsolas();
					
					SendClientMessage(i, COLOR_LIGHTBLUE, "* Puttó Sorsolás elkezdõdött!");
					SendFormatMessage(i, COLOR_LIGHTBLUE, "* Nyerõ számok: %d, %d, %d, %d, %d, %d, %d, B:%d", Szam1, Szam2, Szam3, Szam4, Szam5, Szam6, Szam7, Szam8);
					SendFormatMessage(i, COLOR_LIGHTBLUE, "* Te számaid: %d, %d, %d, %d, %d, %d, %d, B:%d", PSzam1[i], PSzam2[i], PSzam3[i], PSzam4[i], PSzam5[i], PSzam6[i], PSzam7[i], PSzam8[i]);
					if(PSzam1[i] == Szam1 || PSzam1[i] == Szam2 || PSzam1[i] == Szam3 || PSzam1[i] == Szam4 || PSzam1[i] == Szam5 || PSzam1[i] == Szam6 || PSzam1[i] == Szam7) talalatok[i]++;
					if(PSzam2[i] == Szam1 || PSzam2[i] == Szam2 || PSzam2[i] == Szam3 || PSzam2[i] == Szam4 || PSzam2[i] == Szam5 || PSzam2[i] == Szam6 || PSzam2[i] == Szam7) talalatok[i]++;
					if(PSzam3[i] == Szam1 || PSzam3[i] == Szam2 || PSzam3[i] == Szam3 || PSzam3[i] == Szam4 || PSzam3[i] == Szam5 || PSzam3[i] == Szam6 || PSzam3[i] == Szam7) talalatok[i]++;
					if(PSzam4[i] == Szam1 || PSzam4[i] == Szam2 || PSzam4[i] == Szam3 || PSzam4[i] == Szam4 || PSzam4[i] == Szam5 || PSzam4[i] == Szam6 || PSzam4[i] == Szam7) talalatok[i]++;
					if(PSzam5[i] == Szam1 || PSzam5[i] == Szam2 || PSzam5[i] == Szam3 || PSzam5[i] == Szam4 || PSzam5[i] == Szam5 || PSzam5[i] == Szam6 || PSzam5[i] == Szam7) talalatok[i]++;
					if(PSzam6[i] == Szam1 || PSzam6[i] == Szam2 || PSzam6[i] == Szam3 || PSzam6[i] == Szam4 || PSzam6[i] == Szam5 || PSzam6[i] == Szam6 || PSzam6[i] == Szam7) talalatok[i]++;
					if(PSzam7[i] == Szam1 || PSzam7[i] == Szam2 || PSzam7[i] == Szam3 || PSzam7[i] == Szam4 || PSzam7[i] == Szam5 || PSzam7[i] == Szam6 || PSzam7[i] == Szam7) talalatok[i]++;
					if(PSzam8[i] == Szam8) talalatok[i] ++;
					if(talalatok[i] > 0)
					{
						GiveMoney(i, talalatok[i]*500);
						SendFormatMessage(i, COLOR_LIGHTBLUE, "* Találataid száma: %d, Nyertél %dFt-ot.", talalatok[i], talalatok[i]*500);
					}
					else
					{
						SendFormatMessage(i, COLOR_LIGHTBLUE, "* Találataid száma: %d, Sajnos nem nyertél semmit...", talalatok[i]);
					}
					SendClientMessage(i, COLOR_LIGHTBLUE, "* Következõ sorsolás 5 Perc múlva.");
					VanSzelvenye[i] = 0;
					talalatok[i] = 0;
			}
		}	
		PSorsolas = 300;
	}
	return 1;
}

public SecTimer()
{
	if(BejelentkezokSzama > 0) BejelentkezokSzama = 0;
	new string[64];
	if(BankRobIdo > 0)
	{
		BankRobIdo--;
		if(BankRobIdo < 1)
		{
			BankLezar();
		}	
	}
	if(MikorRabolhato > 0)
		MikorRabolhato--;
		
	ResiCounter--;
	if(ResiCounter <= 0)
	{
		TextDrawSetString(resitd, "CarResi!");
		ResiCounter = CARRESIIDO;
		AllCarRespawn();
	}
	else if(ResiCounter < 45)
	{
		Format(string, "CarResi: %dmp", ResiCounter);
		TextDrawSetString(resitd, string);
	}
	else if(ResiCounter == (CARRESIIDO - 1))
		TextDrawHideForAll(resitd);
	else if(ResiCounter == 59)
	{
		TextDrawSetString(resitd, "Hamarosan CarResi!");
		TextDrawShowForAll(resitd);
	}
	RabolasCheck();
	BVIdoCheck();
	if(PSorsolas > 0){ PSorsolas -= 1; }
	if(PSorsolas < 1)
	{
		PuttoSorsolas();
	}
	return 1;
}

/*public Timer()
{
	new string[256];
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(PlayerToPoint(10, x, -2279.7471,2355.9731,5.0082))
		{
			if(IsPlayerInAnyVehicle(x) && GetPlayerState(x) != 2) return 1;
			if(Triadnyitva == 0) 
			{
				format(string, sizeof(string), "Üdv!\n\nKérlek add meg a jelszót!\nJelszavad:");
				ShowPlayerDialog(x, DIALOG_TRIAD, DIALOG_STYLE_INPUT, "Triad belépés", string, "Belépés","Mégse");
			}
		}
		else if(PlayerToPoint(3, x, -2170.1980,639.5535,1052.3750))
		{
			if(Triadnyitva2 != 0) return 1;
			format(string, sizeof(string), "Üdv!\n\nKérlek add meg a jelszót!\nJelszavad:");
			ShowPlayerDialog(x, DIALOG_TRIAD5, DIALOG_STYLE_INPUT, "Triad belépés", string, "Belépés","Mégse");
		}
	}
	return 1;
}*/
public OtherTimer()
{
	new string[128];
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(RendesJatekos(i))
	    {
			if(PlayerRaceInfo[i][xVersenyen] != NINCS && KocsibanVan[i])
			{
				if(PlayerRaceTuning[i][tNitro] > 0 && PlayerRaceTuning[i][tNitroIdo] > 0)
				{
					PlayerRaceTuning[i][tNitroIdo]--;
					if(PlayerRaceTuning[i][tNitro] == 1 && PlayerRaceTuning[i][tNitroIdo] == 18) Msg(i, "Nitro újratöltés 18 másodperc múlva");
					else if(PlayerRaceTuning[i][tNitroIdo] == 10) Msg(i, "Nitro újratöltés 10 másodperc múlva");
					else if(PlayerRaceTuning[i][tNitroIdo] == 3) Msg(i, "Nitro újratöltés 3 másodpercen belül");
					else if(PlayerRaceTuning[i][tNitroIdo] == 0)
					{
						Msg(i, "Nitro újratöltés...");
						AddVehicleComponent(GetPlayerVehicleID(i), 1010);
					}
				}
				
				switch(PlayerRaceTuning[i][tUjito])
				{
					case 1:
					{
						new Float:elet;
						GetVehicleHealth(GetPlayerVehicleID(i), elet);
						if(elet < 990.0)
						{
							elet += 4.875;
							SetVehicleHealth(GetPlayerVehicleID(i), elet);
						}
						else if(elet < 1000.0) RepairVehicle(GetPlayerVehicleID(i));
					}
					case 2:
					{
						new Float:elet;
						GetVehicleHealth(GetPlayerVehicleID(i), elet);
						if(elet < 975.0)
						{
							elet += 13.0;
							SetVehicleHealth(GetPlayerVehicleID(i), elet);
						}
						else if(elet < 1000.0) RepairVehicle(GetPlayerVehicleID(i));
					}
				}
				
				if(PlayerRaceTuning[i][tOrvos])
				{
					new Float:elet;
					GetPlayerHealth(i, elet);
					if(elet <= 149.0) SetPlayerHealth(i, elet+1.0);
				}
			}
			
			if(PlayerRaceTuning[i][tSegitIdo] > 0)
			{
				PlayerRaceTuning[i][tSegitIdo]--;
				if(PlayerRaceTuning[i][tSegitIdo] == 0)
				{
					Animban[i] = 0;
					ClearAnim(i);
					UnFreeze(i);
					SetPlayerDrunkLevel(i, 0);
					Msg(i, "Robot: Sikeresen ellátva", false);
				}
			}
			
			if(AnimIdo[i] > 0)
			{
				AnimIdo[i]--;
				if(AnimIdo[i] == 0)
				{
					Animban[i] = 0;
					SetPlayerDrunkLevel(i, 0);
				}
			}
			
			if(KocsitSokkolt[i] > 0)
			{
				KocsitSokkolt[i]--;
				if(KocsitSokkolt[i] == 0)
					Msg(i, "Újra sokkolhatsz");
			}
			
			if(AJVarakozas[i] > 0)
				AJVarakozas[i]--;

			if(ReportolasIdo[i] > 0)
			{
				ReportolasIdo[i]--;
				if(ReportolasIdo[i] == 0)
					Msg(i, "Újra üzenhetsz");
			}

			/*if(MentoHivas[i] > 0)
			{
				MentoHivas[i]--;
				if(MentoHivas[i] == 0)
				{
					format(string, 128, "Mentõ HQ: %s hívása lejárt, így eltünt a radaron", PlayerName(i));
					foreach(Jatekosok, p)
					{
						if(LMT(p, LMUNKA_MENTO))
						{
							SetPlayerMarkerForPlayer(p, i, COLOR_INVISIBLE);
							SendClientMessage(p, COLOR_LIGHTBLUE, string);
							SendClientMessage(i, COLOR_GREY, "A mentõs hívás lejárt, így már nem látnak téged a radaron. Ha még szükséged lenne mentõre, hívd újra õket!");
						}
					}
				}
			}
			
			if(TaxiHivas[i] > 0)
			{
				TaxiHivas[i]--;
				if(TaxiHivas[i] == 0)
				{
					format(string, 128, "Taxi HQ: %s hívása lejárt, így eltünt a radaron", PlayerName(i));
					foreach(Jatekosok, p)
					{
						if(LMT(p, LMUNKA_TAXI))
						{
							SetPlayerMarkerForPlayer(p, i, COLOR_INVISIBLE);
							SendClientMessage(p, COLOR_LIGHTBLUE, string);
							SendClientMessage(i, COLOR_GREY, "A taxis hívás lejárt, így már nem látnak téged a radaron. Ha még szükséged lenne taxira, hívd újra õket!");
						}
					}
				}
			}*/

			if(OvFlood[i] > 0)
				OvFlood[i]--;

			if(MostHalt[i])
				MostHalt[i] = false;

			if(Ugrasok[i][0] == 1)
				Ugrasok[i][0] = 0;

			if(Ugrasok[i][1] > 0)
			{
				Ugrasok[i][1]--;
				if(Ugrasok[i][1] == 0)
					Ugrasok[i][2] = 0;
			}

			if(Szunet[i] && PlayerInfo[i][pAdmin] == 0)
			{
				SzunetIdo[i]++;
				if(SzunetIdo[i] == 60)
				{
					Msg(i, "A házadban ESCelj ne itt!");
					Kick(i);
					continue;
				}
				else if(SzunetIdo[i] == 1)
					Cselekves(i, "szünetelteti a játékot", 0, true);
			}

			if(JelzesIdo[i] > 0)
			{
				JelzesIdo[i]--;
				if(JelzesIdo[i] == 0)
					JelzesBeallitas(i, 0);
			}

			if(Nyomozott[i] > 0)
			{
				Nyomozott[i]--;
				if(Nyomozott[i] == 0)
					DisablePlayerCheckpoint(i);
			}

			if(HatartAtlepte[i] > 0)
				HatartAtlepte[i]--;

			if(Sokkolt[i] > 0)
			{
				Sokkolt[i]--;
				if(Sokkolt[i] == 0)
					Msg(i, "Sokkoló újratöltve.");
			}

			if(Leutott[i] > 0)
			{
				Leutott[i]--;
				if(Leutott[i] == 0)
					Msg(i, "Mostmár ujra rendbejött a kezed igy ujra letudsz ütni valakit.");
			}

			if(LeutveIdo[i] > 0)
			{
				LeutveIdo[i]--;
				if(LeutveIdo[i] == 0)
				{
					Cselekves(i, "felébredett", 1);
					Msg(i, "Felébredtél");
					UnFreeze(i);
					Feketeseg(i, false);
					Leutve[i] = false;
					ClearAnimations(i);
					for(new p = 0; p < MAX_PLAYERS; p++)
					{
						if(!RendesJatekos(p)) continue;
						if(Visz[p] == i)
							Visz[p] = NINCS;
					}
				}
			}

			if(TrafiPax[i][tBuntetheto] > 0)
			{
				TrafiPax[i][tBuntetheto]--;
				if(TrafiPax[i][tBuntetheto] == 0)
					Msg(i, "Vigyázz! Ha megint gyorsan hajtasz, ismét büntetést fogsz kapni!");
			}

		    if(CellTime[i] > 0)
			{
				if(CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
					if(IsPlayerConnected(Mobile[i]) && Mobile[Mobile[i]] == i)
						CallCost[i] = CallCost[i] + BizzInfo[BIZ_TELEFON][bEntranceCost];
				}
				CellTime[i] = CellTime[i] +1;
				if(IsPlayerConnected(Mobile[i]) && Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
				{
					format(string, sizeof(string), "* Valakinek csörög a telefonja.");
					RingTone[Mobile[i]] = 10;
					ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}

			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
				format(string, sizeof(string), "~w~Hivas dija~n~~r~%dFT",CallCost[i]);
				BizPenz(BIZ_TELEFON, CallCost[i]);
				PlayerInfo[i][pTeloEgyenleg] = PlayerInfo[i][pTeloEgyenleg] - CallCost[i];
				new ujegyenleg = PlayerInfo[i][pTeloEgyenleg];
				new regiegyenleg = PlayerInfo[i][pTeloEgyenleg] + CallCost[i];
				//new Ar = BizzInfo[BIZ_TELEFON][bEntranceCost];
				GameTextForPlayer(i, string, 5000, 1);
                format(string, sizeof(string), "Hivás Díja: %dFt, Régi Egyenleged: %dFt Új Egyenleged: %dFt",CallCost[i], regiegyenleg, ujegyenleg);
                SendClientMessage(i, COLOR_YELLOW, string);
                /*if(ujegyenleg < Ar)
                {
	                format(string, sizeof(string), "[Szolgáltató]SMS: Egyenleged %dFt alá csökkent. Feltöltés: ('/telefonfeltöltés')", Ar);
	                SendClientMessage(i, COLOR_YELLOW, string);
                }*/
				CallCost[i] = 0;
			}
		}
	}

	if(!Aukcio[aElinditva] && Aukcio[aVarakozas] > 0)
	{
		Aukcio[aVarakozas]--;
		if(Aukcio[aVarakozas] == 0)
		{
			new uzenet[128];
			Aukcio[aElinditva] = true;
			switch(Aukcio[aTipus])
			{
				case ARVERES_TIPUS_HAZ: format(uzenet, 128, "Aukciós ház: Árverés indult egy házra. Elhelyezkedés: %s, kikiáltási ár: %dFt", Haztipus(HouseInfo[Aukcio[aID]][hTipus]), Aukcio[aKezdoLicit]);
				case ARVERES_TIPUS_KOCSI: format(uzenet, 128, "Aukciós ház: Árverés indult egy kocsira. Model: %s, kikiáltási ár: %dFt", GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true), Aukcio[aKezdoLicit]);
			}
			foreach(Jatekosok, x)
			{
				if(Szint(x) > 4)
					SendClientMessage(x, COLOR_ORANGE, uzenet);
			}
			NPCArveresUpdate();
		}
		else if(Aukcio[aVarakozas] % 60 == 0)
		{
			new uzenet[128];
			switch(Aukcio[aTipus])
			{
				case ARVERES_TIPUS_HAZ: format(uzenet, 128, "Aukciós ház: Árverés indul %dperc mulva egy házra. Elhelyezkedés: %s, kikiáltási ár: %dFt", (Aukcio[aVarakozas] / 60), Haztipus(HouseInfo[Aukcio[aID]][hTipus]), Aukcio[aKezdoLicit]);
				case ARVERES_TIPUS_KOCSI: format(uzenet, 128, "Aukciós ház: Árverés indul %dperc mulva egy kocsira. Model: %s, kikiáltási ár: %dFt", (Aukcio[aVarakozas] / 60), GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true), Aukcio[aKezdoLicit]);
			}
			foreach(Jatekosok, x)
			{
				if(Szint(x) > 4)
					SendClientMessage(x, COLOR_ORANGE, uzenet);
			}
			NPCArveresUpdate();
		}
		else if(Aukcio[aVarakozas] % 5 == 0)
			NPCArveresUpdate();
	}

	if(Aukcio[aElinditva])
	{
		Aukcio[aIdo]++;
		new result[128];
		if(Aukcio[aLicitalo] != NINCS && Aukcio[aLicitalo] != INVALID_PLAYER_ID)
		{
			if(Aukcio[aIdo] == 9)
			{
				format(result, 128, "Árverés vezetõ: Senki többet?");
				ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);
				
				foreach(Jatekosok, x)
				{
					if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
						SendClientMessage(x, COLOR_LIGHTBLUE, result);
				}
			}
			else if(Aukcio[aIdo] == 12)
			{
				format(result, 128, "Árverés vezetõ: Senki többet másodszor?");
				ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);
				
				foreach(Jatekosok, x)
				{
					if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
						SendClientMessage(x, COLOR_LIGHTBLUE, result);
				}
			}
			else if(Aukcio[aIdo] == 15)
			{
				format(result, 128, "Árverés vezetõ: Senki többet harmadszor?");
				ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);
				
				foreach(Jatekosok, x)
				{
					if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
						SendClientMessage(x, COLOR_LIGHTBLUE, result);
				}
			}
			else if(Aukcio[aIdo] == 20)
			{
				new vevo, osszeg;
				vevo = Aukcio[aLicitalo];
				osszeg = Aukcio[aLicit];
				
				if(PlayerInfo[vevo][pAccount] < Aukcio[aLicit] && GetMoney(vevo) < Aukcio[aLicit])
				{
					vevo = NINCS;
					/*for(new x = 2; x > 0; x--)
					{
						if(Aukcio[aLicitalok][x] == NINCS) continue;
						vevo = x;
						osszeg = Aukcio[aLicitek][x];
						if(PlayerInfo[vevo][pAccount] < Aukcio[aLicitek][x] && GetMoney(vevo) < Aukcio[aLicitek][x])
							vevo = NINCS;
						else
							break;
					}*/
				}
				
				if(vevo != NINCS)
				{
					if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
					{
						HouseInfo[Aukcio[aID]][hOwned] = 1;
						HouseInfo[Aukcio[aID]][hCsak] = 0;						
						strmid(HouseInfo[Aukcio[aID]][hOwner], PlayerName(vevo), 0, strlen(PlayerName(vevo)), MAX_PLAYER_NAME);
						HouseInfo[Aukcio[aID]][hDate] = gettime();
						HazUpdate(Aukcio[aID], HAZ_Owned, HAZ_Csak, HAZ_Owner, HAZ_Date);
						
						CorrectPlayerDatas(vevo);
						Msg(vevo, "Aukció: Gratulálunk. Most már tiéd a ház!", false, COLOR_LIGHTBLUE);
						format(result, 128, "Árverés vezetõ: Eladva! %s megvette a házat %dFtért", PlayerName(vevo), Aukcio[aLicit]);
						
						foreach(Jatekosok, x)
						{
							if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
								SendClientMessage(x, COLOR_LIGHTBLUE, result);
						}
					}
					else if(Aukcio[aTipus] == ARVERES_TIPUS_KOCSI)
					{
						CarInfo[Aukcio[aID]][cOwned] = 1;
						strmid(CarInfo[Aukcio[aID]][cOwner], PlayerName(vevo), 0, strlen(PlayerName(vevo)), MAX_PLAYER_NAME);
						CarInfo[Aukcio[aID]][cDate] = gettime();
						CarUpdate(Aukcio[aID], CAR_Owned, CAR_Owner, CAR_Date);
						
						CorrectPlayerDatas(vevo);
						Msg(vevo, "Aukció: Gratulálunk. A jármûved kint áll a parkolóban!", false, COLOR_LIGHTBLUE);
						format(result, 128, "Árverés vezetõ: Eladva! %s megvette a jármûvet %dFtért", PlayerName(vevo), Aukcio[aLicit]);
						
						foreach(Jatekosok, x)
						{
							if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
								SendClientMessage(x, COLOR_LIGHTBLUE, result);
						}
					}
					if(GetMoney(vevo) > osszeg) GiveMoney(vevo, -osszeg);
					else PlayerInfo[vevo][pAccount] -= osszeg;
					Aukcio[aElinditva] = false;
					Aukcio[aVarakozas] = 0;
					Aukcio[aTipus] = 0;
					
					ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
					SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);
				}
				else
				{
					format(result, 128, "Árverés vezetõ: Az árverésnek vége. Mivel a licitáló nem tudta kifizetni, ezért az árverés újraindul");
				
					Aukcio[aElinditva] = false;
					Aukcio[aVarakozas] = 60;
					Aukcio[aIdo] = 0;
					Aukcio[aLicitalo] = NINCS;
					Aukcio[aLicit] = Aukcio[aKezdoLicit];
				
					ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
					SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);
					
					foreach(Jatekosok, x)
					{
						if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
							SendClientMessage(x, COLOR_LIGHTBLUE, result);
					}
				}
				foreach(Jatekosok, x)
				{
					Licitalt[x] = false;
					Aukciozik[x] = false;
				}
				NPCArveresUpdate();
			}
		}
		else if(Aukcio[aIdo] == 60 && Aukcio[aLicitalo] == NINCS)
		{
			if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
			{
				DestroyDynamicPickup(HazPickup[Aukcio[aID]]);
				
				HouseInfo[Aukcio[aID]][Van] = 0;
				format(result, 128, "DELETE FROM %s WHERE ID='%d'", SQL_DB_Hazak, Aukcio[aID]); mysql_query(result);
				
				format(result, 128, "Árverés vezetõ: Az árverésnek vége. Nem licitált senki, ezért a ház törlõdött");
			}
			else if(Aukcio[aTipus] == ARVERES_TIPUS_KOCSI)
			{
				if(IsVehicleConnected(CarInfo[Aukcio[aID]][cId])) DestroyVehicle(CarInfo[Aukcio[aID]][cId]);
				
				CarInfo[Aukcio[aID]][Van] = 0;
				format(result, 128, "DELETE FROM %s WHERE ID='%d'", SQL_DB_Kocsik, Aukcio[aID]); mysql_query(result);
				
				format(result, 128, "Árverés vezetõ: Az árverésnek vége. Nem licitált senki, ezért a jármû törlõdött");
			}
			ProxDetector(B_Normal, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
			SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);
			
			foreach(Jatekosok, x)
			{
				if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
					SendClientMessage(x, COLOR_LIGHTBLUE, result);
			}
			
			Aukcio[aElinditva] = false;
			Aukcio[aVarakozas] = 0;
			Aukcio[aTipus] = 0;
			
			foreach(Jatekosok, x)
			{
				Licitalt[x] = false;
				Aukciozik[x] = false;
			}
			
			NPCArveresUpdate();
		}
		else if(Aukcio[aIdo] == 60 && Aukcio[aLicitalo] == INVALID_PLAYER_ID)
		{
			format(result, 128, "Árverés vezetõ: Az árverésnek vége. Mivel a licitáló kilépett (neve: %s), ezért az árverés újraindul", Aukcio[aLicitaloVolt]);
				
			Aukcio[aElinditva] = false;
			Aukcio[aVarakozas] = 60;
			Aukcio[aIdo] = 0;
			Aukcio[aLicitalo] = NINCS;
			Aukcio[aLicit] = Aukcio[aKezdoLicit];
				
			ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
			SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);
					
			foreach(Jatekosok, x)
			{
				if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
					SendClientMessage(x, COLOR_LIGHTBLUE, result);
			}
		}
	}

	return 1;
}

public SetPlayerUnjail()
{
	//new plname[MAX_PLAYER_NAME];
	new string[256];
	if(PaintballPlayers >= 2 && PaintballRound != 1 && StartingPaintballRound != 1)
	{
		StartingPaintballRound = 1;
	   	SetTimer("PreparePaintball", 15000, 0);
	}
	if(KartingPlayers >= 2 && KartingRound != 1 && StartingKartRound != 1)
	{
	    StartingKartRound = 1;
	    SetTimer("PrepareKarting", 15000, 0);
	}
	if(KartingRound != 0 && KartingPlayers < 2)
	{
	    StartingKartRound = 0;
	    KartingRound = 0;
	    EndingKartRound = 1;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
		    if(PlayerInfo[i][pJailed] > 0)
		    {
				if(PlayerInfo[i][pJailTime] > 0 && WantLawyer[i] == 0)
				{
					PlayerInfo[i][pJailTime]--;
				}

				if(PlayerInfo[i][pJailTime] <= 0)
				{
				    PlayerInfo[i][pJailTime] = 0;
					if(PlayerInfo[i][pJailed] == 1)
					{
						SetPlayerInterior(i, 0);
						SetPlayerPos(i,1549.1030,-1675.6740,14.8176);
						SetPlayerFacingAngle(i, 90.6791);
					}
					else if(PlayerInfo[i][pJailed] == 2)
					{
					    SetPlayerWorldBounds(i,20000.0000,-20000.0000,20000.0000,-20000.0000); //Reset world to player
						SetPlayerPos(i, 135.055938, 1953.127685, 19.413507);
					}
					else if(PlayerInfo[i][pJailed] == 3)
					{
						SetPlayerInterior(i, 0);
						SetPlayerVirtualWorld(i, 0);
					   	SetPlayerPos(i, 1480.612548, -1743.773803, 13.546875);
					}
					else if(PlayerInfo[i][pJailed] == 4)
					{
						SetPlayerInterior(i, 0);
						SetPlayerVirtualWorld(i, 0);
					   	SetPlayerPos(i, 645.771, -1357.328, 13.570);
					}
					else if(PlayerInfo[i][pJailed] == 5)
					{
						SetPlayerInterior(i, 0);
						SetPlayerVirtualWorld(i, 0);
					   	SetPlayerPos(i, 1239.595, -1860.073, 13.546);
					}
					PlayerInfo[i][pJailed] = 0;
					SendClientMessage(i, COLOR_GRAD1,"Letöltötted a büntetésed!");
					format(string, sizeof(string), "~g~Szabad vagy~n~~w~Lgy j¦ polgr!");
					//SetPlayerPos(i, -1605.507446, 711.250549, 13.365664);
					GameTextForPlayer(i, string, 5000, 1);
					ClearCrime(i);
					SetPlayerToTeamColor(i);
				}
			}
		    if(UsedFind[i] >= 1)
		    {
		        UsedFind[i] += 1;
				if(UsedFind[i] >= 120)
				{
				    UsedFind[i] = 0;
				}
		    }
			if(MedicTime[i] > 0)
			{
			    /*if(MedicTime[i] == 3)
			    {
			        SetPlayerInterior(i, 5);
			        new Float:X, Float:Y, Float:Z;
			        GetPlayerPos(i, X,Y,Z);
			        SetPlayerCameraPos(i, X + 3, Y, Z);
			        SetPlayerCameraLookAt(i,X,Y,Z);
			    }*/
			    MedicTime[i] ++;
			    if(MedicTime[i] >= NeedMedicTime[i])
			    {
			        MedicBill[i] = 0;
			        MedicTime[i] = 0;
			        NeedMedicTime[i] = 0;
			        PlayerInfo[i][pDeaths] += 1;

					if(PlayerInfo[i][pJailed] == 0)
					{
						TogglePlayerControllable(i, 1);
						PlayerFixRadio(i);
						//SpawnPlayer(i);
						SetPlayerPos(i, 1173.3047, -1323.4340, 15.3936);
						SetPlayerInterior(i, 0);
						SetPlayerVirtualWorld(i, 0);
					}
			    }
			}
			if(WantLawyer[i] >= 1)
			{
				if(PlayerInfo[i][pJailed] == 1 || PlayerInfo[i][pJailed] == 4)
				{
					CallLawyer[i] = 111;
					if(WantLawyer[i] == 1)
					{
						SendClientMessage(i, COLOR_LIGHTRED, "Szeretnél ügyvédet? (igen / nem)");
					}
					WantLawyer[i] ++;
					if(WantLawyer[i] == 8)
					{
						SendClientMessage(i, COLOR_LIGHTRED, "Szeretnél ügyvédet? (igen / nem)");
					}
					if(WantLawyer[i] == 15)
					{
						SendClientMessage(i, COLOR_LIGHTRED, "Szeretnél ügyvédet? (igen / nem)");
					}
					if(WantLawyer[i] == 20)
					{
						SendClientMessage(i, COLOR_LIGHTRED, "Most már nem tudsz ügyvédet hívni, lejárt az idõ! Elkezdted a büntetésed letöltését.");
						WantLawyer[i] = 0;
						CallLawyer[i] = 0;
					}
				}	
			}
			if(TutTime[i] >= 1)
			{
			    TutTime[i] += 1;
			    if(TutTime[i] == 2)
			        SendClientMessage(i, COLOR_YELLOW2, "[Gates]: Üdv.");
				else if(TutTime[i] == 3)
			        SendClientMessage(i, COLOR_YELLOW2, "[Gates]: 10 Másodpercedet kérném, szóval kérlek figyelj.");
				else if(TutTime[i] == 5)
			        SendFormatMessage(i, COLOR_YELLOW2, "[Gates]: Ha nem tudod a teljes szabályzatot, olvasd el a weboldalt (%s)", weblap);
				else if(TutTime[i] == 8)
			        SendClientMessage(i, COLOR_YELLOW2, "[Gates]: A szabályzat el nem olvasása nem mentesít a felelõsségek alól!");
			    else if(TutTime[i] == 13)
			        SendClientMessage(i, COLOR_YELLOW2, "[Gates]: Elõre szólok, ha csitelsz, akkor örök bant kapsz!");
			    else if(TutTime[i] == 16)
					SendClientMessage(i, COLOR_YELLOW2, "[Gates]: Már sok ember csitelt, és meg is kapták a büntetésüket...");
				else if(TutTime[i] == 19)
					SendClientMessage(i, COLOR_YELLOW2, "[Gates]: És még valami, tartsd be a következõket, FELTÉTLENÜL!");
				else if(TutTime[i] == 21)
					SendClientMessage(i, COLOR_YELLOW2, "[Gates]: Ne ölj ok nélkül!");
				else if(TutTime[i] == 23)
					SendClientMessage(i, COLOR_YELLOW2, "[Gates]: Vezess úgy, mint a valóságban (IRL)!");
				else if(TutTime[i] == 25)
					SendClientMessage(i, COLOR_YELLOW2, "[Gates]: Ha olyan dologról van szó, amit nem tudhatsz (meghaltál), vagy OOC dolog, azt /b-be írd!");
				else if(TutTime[i] == 30)
				{
			        SendClientMessage(i, COLOR_YELLOW2, "[Gates]: Rendben, mostmár regisztrálhatsz.");
			        SendClientMessage(i, COLOR_YELLOW2, "[Gates]: Sok szerencsét és jó szórakozást.");

					format(string, sizeof(string), "Üdv!\nMivel kitöltötted a tesztet,\nezért regisztrálhatsz.\n\nKérlek add meg a jelszavad.\nJelszavad:");
					ShowPlayerDialog(i, DIALOG_REGISTRATION, DIALOG_STYLE_INPUT, "Regisztráció", string, "Regisztráció","Mégse");

			        TutTime[i] = 0; PlayerInfo[i][pTut] = 1;
					gOoc[i] = 0; gNews[i] = 0; gFam[i] = 0;
				}
			}
			/*if(PlayerDrunk[i] >= 5)
			{
			    PlayerDrunkTime[i] += 1;
			    if(PlayerDrunkTime[i] == 8)
			    {
			        PlayerDrunkTime[i] = 0;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
						}
					}
					else
					{
					    ApplyAnimation(i,"PED", "WALK_DRUNK",4.0,0,1,0,0,0);
					}
			    }
			}*/
			if(PlayerStoned[i] >= 2)
			{
		        PlayerStoned[i] += 1;
			    if(PlayerStoned[i] == 10)
			    {
			        PlayerStoned[i] = 2;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
						}
					}
					else
					{
					    SetPlayerFacingAngle(i, angle + 90);
					}
			    }
			}
			if(PlayerInfo[i][pCarTime] > 0)
			{
			    if(PlayerInfo[i][pCarTime] <= 0)
			    {
			        PlayerInfo[i][pCarTime] = 0;
			    }
			    else
			    {
			        PlayerInfo[i][pCarTime] -= 1;
			    }
			}
			if(BoxWaitTime[i] > 0)
			{
			    if(BoxWaitTime[i] >= BoxDelay)
				{
				    BoxDelay = 0;
					BoxWaitTime[i] = 0;
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
					GameTextForPlayer(i, "~g~Match Started", 5000, 1);
					TogglePlayerControllable(i, 1);
					RoundStarted = 1;
				}
			    else
				{
				    format(string, sizeof(string), "%d", BoxDelay - BoxWaitTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					BoxWaitTime[i] += 1;
				}
			}
			if(RoundStarted > 0)
			{
			    if(PlayerBoxing[i] > 0)
			    {
			        new trigger = 0;
			        new Lost = 0;
		        	new Float:angle;
		            new Float:health;
					GetPlayerHealth(i, health);
		            if(health < 12)
					{
					    if(i == Boxer1) { Lost = 1; trigger = 1; }
			            else if(i == Boxer2) { Lost = 2; trigger = 1; }
					}
			        if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
			        if(trigger)
			        {
			            new winner[MAX_PLAYER_NAME];
			            new loser[MAX_PLAYER_NAME];
			            new titel[MAX_PLAYER_NAME];
			            if(Lost == 1)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
			                	GetPlayerName(Boxer1, loser, sizeof(loser));
			                	GetPlayerName(Boxer2, winner, sizeof(winner));
		                		if(AMT(Boxer1, MUNKA_BOXOLO)) { PlayerInfo[Boxer1][pLoses] += 1; }
								if(AMT(Boxer2, MUNKA_BOXOLO)) { PlayerInfo[Boxer2][pWins] += 1; }
							 	SetPlayerFightingStyle (Boxer1, FIGHT_STYLE_GRABKICK);
							  	SetPlayerFightingStyle (Boxer2, FIGHT_STYLE_GRABKICK);
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer2)
				                	    {
				                	        if(AMT(Boxer2, MUNKA_BOXOLO))
				                	        {
				                	            TBoxer = Boxer2;
				                	            GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Boxing News: %s has Won the fight against Champion %s and is now the new Boxing Champion.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
				                	        }
				                	        else
				                	        {
				                	            SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You would have been the Champion if you had the Boxer Job !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Boxing News: Boxing Champion %s has Won the fight against %s.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer2][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~r~You lost", 3500, 1);
								format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
								    SetHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								    SetHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
							    	SetHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								    SetHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);
								if(AMT(Boxer2, MUNKA_BOXOLO)) { PlayerInfo[Boxer2][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            else if(Lost == 2)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
			                	GetPlayerName(Boxer1, winner, sizeof(winner));
			                	GetPlayerName(Boxer2, loser, sizeof(loser));
		                		if(AMT(Boxer2, MUNKA_BOXOLO)) { PlayerInfo[Boxer2][pLoses] += 1; }
								if(AMT(Boxer1, MUNKA_BOXOLO)) { PlayerInfo[Boxer1][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer1)
				                	    {
				                	        if(AMT(Boxer1, MUNKA_BOXOLO))
				                	        {
					                	        TBoxer = Boxer1;
					                	        GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Boxing News: %s has Won the fight against Champion %s and is now the new Boxing Champion.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
											}
				                	        else
				                	        {
				                	            SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You would have been the Champion if you had the Boxer Job !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Boxing News: Boxing Champion %s has Won the fight against %s.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer1][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~You lost", 3500, 1);
								format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~g~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
								    SetHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								    SetHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
							    	SetHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								    SetHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);
								if(AMT(Boxer1, MUNKA_BOXOLO)) { PlayerInfo[Boxer1][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            InRing = 0;
			            RoundStarted = 0;
			            Boxer1 = 255;
			            Boxer2 = 255;
			            TBoxer = 255;
			            trigger = 0;
			        }
			    }
			}
			if(StartingPaintballRound == 1 && AnnouncedPaintballRound == 0)
			{
			    AnnouncedPaintballRound = 1;
			    if(PlayerPaintballing[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "Paintball Match will be announced in 15 seconds (For getting more Paintball players).");
			    }
			}
			if(StartingKartRound == 1 && AnnouncedKartRound == 0)
			{
			    AnnouncedKartRound = 1;
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "Karting Race will be announced in 15 seconds (For getting more Kart Racers).");
			    }
			}
			if(EndingKartRound == 1)
			{
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        DisablePlayerCheckpoint(i);
			        CP[i] = 0;
			    }
			}
			if(FindTime[i] > 0)
			{
			    if(FindTime[i] == FindTimePoints[i]) { FindTime[i] = 0; FindTimePoints[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Jelzes vege", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					FindTime[i] += 1;
				}
			}
			if(TaxiCallTime[i] > 0)
			{
			    if(TaxiAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(TaxiAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(TaxiAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(BusCallTime[i] > 0)
			{
			    if(BusAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(BusAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(MedicCallTime[i] > 0)
			{
			    if(MedicCallTime[i] == 60) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Jelzes vege", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 60 - MedicCallTime[i]);
					GameTextForPlayer(i, string, 30000, 6);
					MedicCallTime[i] += 1;
				}
			}
			if(MechanicCallTime[i] > 0)
			{
			    if(MechanicCallTime[i] == 30) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Jelzes vege", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MechanicCallTime[i] += 1;
				}
			}
			if(Robbed[i] == 1)
			{
			    if(RobbedTime[i] <= 0)
			    {
			        RobbedTime[i] = 0;
					Robbed[i] = 0;
			    }
			    else
			    {
			        RobbedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 1)
			{
			    if(PlayerCuffedTime[i] <= 0)
					Bilincs(i, 0);
			    else
			        PlayerCuffedTime[i] -= 1;
			}

			if(PlayerCuffed[i] == 2)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        //GameTextForPlayer(i, "~r~Eltorted a bilincset, szabad vagy", 2500, 3);
			        Bilincs(i, 0);
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}

			/*if(PlayerToPoint(20, i,2015.4500,1017.0900,996.8750))
			{//Four Dragons
			    GameTextForPlayer(i, "~r~Closed", 5000, 1);
			    SetPlayerInterior(i, 0);
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}*/

//			else if(PlayerToPoint(20, i,2233.9099,1710.7300,1011.2987))
//			{//Caligula
//			    GameTextForPlayer(i, "~r~Closed", 5000, 1);
//			    SetPlayerInterior(i, 0);
//			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
//			}
//			else if(PlayerToPoint(10, i,2265.7900,1619.5800,1090.4453))
//			{//Caligula Roof 1
//			    GameTextForPlayer(i, "~r~Closed", 5000, 1);
//			    SetPlayerInterior(i, 0);
//			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
//			}
//			else if(PlayerToPoint(10, i,2265.7800,1675.9301,1090.4453))
//			{//Caligula Roof 2
//			    GameTextForPlayer(i, "~r~Closed", 5000, 1);
//			    SetPlayerInterior(i, 0);
//			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
//			}
			else if(PlayerToPoint(20, i,1133.0699,-9.5731,1000.6797))
			{//West Casino place
			    GameTextForPlayer(i, "~r~Closed", 5000, 1);
			    SetPlayerInterior(i, 0);
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			/*else if(PlayerToPoint(20, i,292.0274,-36.0291,1001.5156))
			{//Ammunation 1
			    GameTextForPlayer(i, "~r~Jailed for going to ammunation", 5000, 1);
			    SetPlayerInterior(i, 6);
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,308.2740,-141.2833,999.6016))
			{//Ammunation 2
			    GameTextForPlayer(i, "~r~Jailed for going to ammunation", 5000, 1);
			    SetPlayerInterior(i, 6);
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,294.3212,-108.7869,1001.5156))
			{//Ammunation 3 (small one's)
			    GameTextForPlayer(i, "~r~Jailed for going to ammunation", 5000, 1);
			    SetPlayerInterior(i, 6);
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,288.8592,-80.4535,1001.5156))
			{//Ammunation 4 (small one's)
			    GameTextForPlayer(i, "~r~Jailed for going to ammunation", 5000, 1);
			    SetPlayerInterior(i, 6);
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,316.9583,-165.4707,999.6010))
			{//Ammunation 5 (Unprotected)
			    GameTextForPlayer(i, "~r~Jailed for going to ammunation", 5000, 1);
			    SetPlayerInterior(i, 6);
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}*/
		}
	}
}

/*public CheckGas()
{
	new string[256];
	for(new i=0;i<MAX_PLAYERS;i++)
	{
    	if(IsPlayerConnected(i))
       	{
       	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
       	    {
	       		new vehicle = GetPlayerVehicleID(i);

				if(!IsABicikli(vehicle) && !IsAPlane(vehicle) && !IsABoat(vehicle))
				{
		        	if(Gas[vehicle] >= 1)
			   		{
			   		    if(Gas[vehicle] <= 10) { PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0); }

		   			    if(gGas[i] == 1)
					   	{
				      		format(string, sizeof(string), "~r~~n~~n~~n~~n~~n~~n~~n~~n~~n~Benzin:~w~ %d%",Gas[vehicle]);
				      		GameTextForPlayer(i,string,15500,3);
  						}

						if(engineOn[vehicle] == 1 && !IsAPlane(vehicle) && !IsABoat(vehicle) && !IsABicikli(vehicle))
			              	Gas[vehicle]--;

			   		}
	   				else
	           		{
		              	NoFuel[i] = 1;
		              	TogglePlayerControllable(i, 0);
			        	GameTextForPlayer(i,"~r~~n~~n~~n~~n~~n~~n~~n~~n~Benzin:~w~Kifogyott",1500,3);
					}
				}
			}
    	}
	}
	return 1;
}*/

public CheckGas()
{
	new sofor;
	for(new v = 1; v < MAX_VEHICLES; v++)
	{
		if(!IsVehicleConnected(v) || IsAPlane(v) || IsABoat(v) || IsABicikli(v)) continue;

		sofor = NINCS;
		for(new p = 0; p < MAX_VEHICLES; p++)
		{
			if(!IsPlayerConnected(p) || !Logged(p) || IsPlayerNPC(p) || GetPlayerState(p) != 2) continue;
			if(IsPlayerInVehicle(p, v))
			{
				sofor = p;
				break;
			}
		}

		if(engineOn[v])
		{
			if(Gas[v] > MaxBenzin(v))
				Gas[v] = MaxBenzin(v);
			else if(Gas[v] >= 1)
				Gas[v]--;
			else
			{
				engineOn[v] = 0;
				if(sofor != NINCS)
				{
					Msg(sofor, "A jármûbõl kifogyott a benzin. A motor leállt");
					SetJarmu(v, KOCSI_MOTOR, 0);
				}
			}
		}

		if(sofor != NINCS)
		{
			if(Gas[v] >= 1)
			{
				if(Gas[v] <= 15)
				{
					PlayerPlaySound(sofor, 1085, 0.0, 0.0, 0.0);
					GameTextForPlayer(sofor, "~r~~n~~n~~n~~n~~n~~n~~n~~n~~n~Fogy a benzin", 5000, 3);
				}
			}
			/*else
			{
              	TogglePlayerControllable(sofor, 0);
	        	GameTextForPlayer(sofor,"~r~~n~~n~~n~~n~~n~~n~~n~~n~Benzin:~w~Kifogyott",1500,3);
			}*/
		}
	}
	return 1;
}

public EletTimer()
{
	new k, p;

	new Float:UjElet;
	new Float:UjKocsiElet;
	new Float:Kulonbseg;
	new Float:Elet;

	for(k = 1; k < MAX_VEHICLES; k++)
	{
	    if(IsVehicleConnected(k))
	    {
		    GetVehicleHealth(k, UjKocsiElet);
			Kulonbseg = KocsiElete[k] - UjKocsiElet;
			KocsiElete[k] = UjKocsiElet;

			if(KocsiSokkolva[k] > 0)
				KocsiSokkolva[k]--;

			if(UjKocsiElet < 1000.0 && Kulonbseg > (UtkozesErzekenyseg * 2.8)) //0.8
			{
				for(p = 0; p < MAX_PLAYERS; p++)
				{
				    if(IsPlayerInVehicle(p, k))
			    	{
						GetPlayerHealth(p, UjElet);
						if(GetPlayerState(p) == 2)
						    Elet = UjElet - (Kulonbseg / UtkozesErzekenyseg);
						else if(GetPlayerState(p) == 3)
						    Elet = UjElet - (Kulonbseg / (UtkozesErzekenyseg + 3));
						if(Elet < 1.0)
						{
						    Elet = 1.0;
							AnimbaRak(p);
						}
			            SetHealth(p, Elet);
						//SendFormatMessage(p, COLOR_RED, "Minusz %f hp, uj hp %f, különbség %f", (Kulonbseg / UtkozesErzekenyseg), Elet, Kulonbseg);
				    }
				}
			}
		}
	}

	for(p = 0; p < MAX_PLAYERS; p++)
	{
		if(IsPlayerConnected(p))
		{
			if(SpawnVedelem[p] > 1)
				SpawnVedelem[p]--;
			else if(SpawnVedelem[p] == 1)
			{
				SpawnVedelem[p] = 0;
				Msg(p, "Info: Spawn védelem vége", false, COLOR_GREY);
			}
		    if(GetPlayerState(p) == 7 || SpawnVedelem[p] > 0 || PlayerPaintballing[p] == 1)
		    {
		        //Animbanemrakhato[p] = 1;
		        continue;
      		}

		    //ÉLET CHECKER
		    GetPlayerHealth(p, UjElet);
	    	Kulonbseg = JatekosElete[p] - UjElet;
			JatekosElete[p] = UjElet;

		    if(Kulonbseg > 20.0)
		    {
				if(Animbanemrakhato[p] == 1)
				    Animbanemrakhato[p] = 0;
				else
					AnimbaRak(p);
			}
		}
	}

}
public FszallitasTimer(playerid)
{
	UnFreeze(playerid);
	Msg(playerid, "Kipakoltad a fegyvereket!");
	GiveWeapon(playerid, 24, 200);
	GiveWeapon(playerid, 29, 300);
	GiveWeapon(playerid, 31, 500);
	SetPlayerArmour(playerid, 100);
}
public MunkaTimer()
{
	new playerid;
	for(playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if(!IsPlayerConnected(playerid)) continue;
		//if(!Munkaban[playerid] == NINCS) continue;

		if(AMT(playerid, MUNKA_UTTISZTITO) && Munkaban[playerid] == MUNKA_UTTISZTITO)
		{
			if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Uttisztito"))
			{
				new Float:x, Float:y, Float:z, csekkpont;
				csekkpont = MunkaCheckpoint[playerid];

				x = UttisztitoCheckpointok[csekkpont][0];
				y = UttisztitoCheckpointok[csekkpont][1];
				z = UttisztitoCheckpointok[csekkpont][2];

				SetPlayerCheckpoint(playerid, x, y, z, 5);
			}
			else continue;
		}
		else continue;
        if(AMT(playerid, MUNKA_FARMER) && Munkaban[playerid] == MUNKA_FARMER)
		{
			if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Farmer"))
			{
				new Float:x, Float:y, Float:z, csekkpont;
				csekkpont = MunkaCheckpoint[playerid];

				x = FarmerCheckpointok[csekkpont][0];
				y = FarmerCheckpointok[csekkpont][1];
				z = FarmerCheckpointok[csekkpont][2];

				SetPlayerCheckpoint(playerid, x, y, z, 5);
			}
			else continue;
		}
		else continue;
	}

}

public EgyebTimer()
{
	new p;
	PenzUpdate();

	for(p = 0; p < MAX_PLAYERS; p++)
	{
		if(IsPlayerConnected(p))
		{
		    if(GetPlayerState(p) == 7) continue;
			
			/*if(!Logged(p))
			{
				if(BelepesIdo[p] >= 10)
				{
					if(!PlayerToPoint(5, p, LoginSpawn[SpawnHely[p]][3], LoginSpawn[SpawnHely[p]][4], LoginSpawn[SpawnHely[p]][5]))
					{
						if(GetPlayerState(p) == 1 || GetPlayerState(p) == 2 || GetPlayerState(p) == 3)
						{
							new ok[128];
							format(ok, 128, "[Gates]: %s (%s) ki lett bannolva a rendszer által | Oka: Cheat", PlayerName(p), PlayerIP(p)); BanLog(ok);
							SendClientMessageToAll(COLOR_LIGHTRED, ok);
							SeeBan(p, 0, NINCS, "Spawn Cheat", true);
							Kick(p);
						}
					}
				}
				else
					BelepesIdo[p]++;
				continue;
			}*/

		    //Animba állítása, ha animba van!
		    if(Animban[p] == 1 && !IsPlayerInAnyVehicle(p))
	    	{
	        	ApplyAnimation(p, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
				//if(IsPlayerInAnyVehicle(p))
					//RemovePlayerFromVehicle(p);
		    }

		    //1. meló
		    if(PlayerInfo[p][pJob1] != 0 )
	    	{
	        	if(PlayerInfo[p][pContractTime] < 9000)
			        PlayerInfo[p][pContractTime]++;
		    }

			//2. meló
		    if(PlayerInfo[p][pJob2] != 0 )
		    {
	    	    if(PlayerInfo[p][pContractTime2] < 9000)
			        PlayerInfo[p][pContractTime2]++;
		    }

			new skin = GetPlayerSkin(p);

	        if(skin == 217 && !IsClint(p) || skin == 188 && !IsPlayerName(p, "Tamasi_Gabor") || skin == 292 && !IsPlayerName(p, "Remy_Bonjasky") || skin == 299 && !IsPlayerName(p, "Charlie_Cortez") || skin == 59 && !IsPlayerName(p, "Somy_Zecchin") || skin == 293 && !IsPlayerName(p, "Franco_Zecchin")) 
	        {
		        SetPlayerSkin(p, 10);
				SendClientMessage(p, COLOR_LIGHTBLUE, "Hmm? Ez a skin tiltott ^^");
			}

			if(TransportTime[p] > 0)
			{
				TransportTime[p]++;
			    if(TransportTime[p] >= 16)
				{
					TransportTime[p] = 1;
					
					new driver = TransportDriver[p];
					if(RendesJatekos(driver, false) && driver != p)
					{
      					TransportCost[p] += TransportValue[driver];
					    TransportCost[driver] = TransportCost[p];
					}
				}
				new string[128];
			    format(string, sizeof(string), "~n~~n~~r~15 / %d ~n~~g~%dFT", TransportTime[p], TransportCost[p]);
			    GameTextForPlayer(p, string, 15000, 4);
			}

			new fizetes[3];
			fizetes[0] = floatround(PlayerInfo[p][pConnectTime] / 300);
			fizetes[1] = floatround(PlayerInfo[p][pConnectTime] / 150);
			fizetes[2] = floatround(PlayerInfo[p][pConnectTime] / 120);

			if(fizetes[0] <= 0) fizetes[0] = 1;
			if(fizetes[1] <= 0) fizetes[1] = 1;
			if(fizetes[2] <= 0) fizetes[2] = 1;

			//FIZETÉSHEZ
			if(!AFK[p])
			{
				if(PlayerInfo[p][pJob1] > 0)
					PlayerInfo[p][pPayCheck] += fizetes[1];

				if(PlayerInfo[p][pJob2] > 0)
					PlayerInfo[p][pPayCheck] += fizetes[2];

				if(PlayerInfo[p][pJob1] == 0 && PlayerInfo[p][pJob2] == 0)
					PlayerInfo[p][pPayCheck] += fizetes[0];
			}

			if(Visz[p] != NINCS)
			{
				new Float:X, Float:Y, Float:Z, Int, VW;
				GetPlayerPos(p, X, Y, Z);
				VW = GetPlayerVirtualWorld(p);
				Int = GetPlayerInterior(p);

				SetPlayerPos(Visz[p], (X+0.5), Y, Z);
				SetPlayerInterior(Visz[p], Int);
				SetPlayerVirtualWorld(Visz[p], VW);
			}
			new chn = PlayerInfo[p][pReportChannel];
			if(chn != NINCS && ReportChannel[chn][rTimeOut] != 555)
			{
				TudReportolni[p]++;
				if(TudReportolni[p] > ReportChannel[chn][rTimeOut])
				{
					//for(new x = 0; x < MAX_PLAYERS; x++)
					//{
					//	if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
					//	if(PlayerInfo[x][pViewReportChannel] == chn || PlayerInfo[x][pViewReportChannel] == 555 || PlayerInfo[x][pReportChannel] == chn)
					//		SendFormatMessage(x, COLOR_LIGHTRED, "[Channel %d]%s kirúgva a channelrõl | Oka: Idõtullépés", chn, PlayerName(p));
					//}
					Msg(p, "A rendszer kirúgott a channelrõl idõtullépés miatt");
					Channel(p, NINCS);
				}
			}
			if(AdminDuty[p])
				SetPlayerColor(p, COLOR_DBLUE);
			
			if(PlayerInfo[p][pElozoParancs] > 0)
				PlayerInfo[p][pElozoParancs]--;
		}
	}

	EngineBreak();

	return 1;
}

public TeleTimer()
{
	new Float:x, Float:y, Float:z;
	foreach(Jatekosok, p)
	{
		GetPlayerPos(p, x, y, z);
		
		// AdminJail ellenörzõ
		if(PlayerInfo[p][pJailed] == 3 && (z < 1000.0 || z > 1010.0 || y > 9.0 || y < -19.0 || x > 976.0 || x < 930.0 || GetPlayerVirtualWorld(p) != 8888 || GetPlayerInterior(p) != 3) && AJVarakozas[p] == 0)
		{
			AJSzokesek[p]++;
			if(AJSzokesek[p] >= 3)
			{
				Msg(p, "Én szóltam! +30perc adminjailt kapsz!");
				Jail(p, "+", 1800, "off", "---");
				SeeKick(p, "AdminJailból szökési kísérlet + 30perc adminjail");
				continue;
			}
			SetPlayerPos(p, 953.989, -8.406, 1001.148);
			SetPlayerInterior(p, 3);
			SetPlayerVirtualWorld(p, 8888);
			Msg(p, "Ne próbálkozz");
			continue;
		}
	
		// FBI HQ be
		if(PlayerToPoint(1.5, p, 1359.9688,-1718.0879,8.5525))
	    {
	        if(LMT(p, LMUNKA_FBI) || IsAdmin(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 1359.0596,-1728.1038,8.5949);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 1359.0596,-1728.1038,8.5949);
	        }
	    }
		
		// FBI HQ ki
		if(PlayerToPoint(1.5, p, 1359.0596,-1728.1038,8.5949))
	    {
	        if(LMT(p, LMUNKA_FBI) || IsAdmin(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 1359.9688,-1718.0879,8.5525);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 1359.9688,-1718.0879,8.5525);
	        }
	    }

	    //Fort be tele
		if(PlayerToPoint(1.5, p, 135.465728, 1946.600585, 19.359313))
	    {
	        if(IsACop(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 136.594497, 1928.995483, 19.206199);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 136.594497, 1928.995483, 19.206199);
	        }
	    }

	    //Fort ki tele
	    else if(PlayerToPoint(1.5, p, 135.642883, 1934.607543, 19.258510))
	    {
	        if(IsACop(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 135.055938, 1953.127685, 19.413507);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 135.055938, 1953.127685, 19.413507);
	        }
	    }
		
	    //Fort be tele 2
	    else if(PlayerToPoint(1.5, p, 291.151, 1821.415, 17.640))
	    {
	        if(IsACop(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 271.076, 1821.190, 17.640);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 271.076, 1821.190, 17.640);
	        }
	    }
		
	    //Fort ki tele 2
	    else if(PlayerToPoint(1.5, p, 279.645, 1821.550, 17.640))
	    {
	        if(IsACop(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 295.425, 1821.637, 17.640);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 295.425, 1821.637, 17.640);
	        }
	    }

	    else if(PlayerToPoint(3, p, -2176.9063,658.0779,49.4375))
	    {
	        if(LMT(p, LMUNKA_YAKUZA))
	        {
	            if(IsPlayerInAnyVehicle(p) && GetPlayerState(p) == 2)
	            {
	                new veh = GetPlayerVehicleID(p);
	                SetVehiclePos(veh, -2177.1096,667.4937,51.1095);
	            }
	            else
	                SetPlayerPos(p, -2177.1096,667.4937,51.1095);
	        }
	    }

        else if(PlayerToPoint(3, p, -2177.1096,667.4937,51.1095))
	    {
	        if(LMT(p, LMUNKA_YAKUZA))
	        {
	            if(IsPlayerInAnyVehicle(p) && GetPlayerState(p) == 2)
	            {
	                new veh = GetPlayerVehicleID(p);
	                SetVehiclePos(veh, -2176.9063,658.0779,49.4375);
	            }
	            else
	                SetPlayerPos(p, -2176.9063,658.0779,49.4375);
	        }
	    }
		//Autóparkoló be
	    else if(PlayerToPoint(2, p, 2491.210449, 2773.332519, 10.798006))
	    {
	        if(Admin(p, 1337) || Engedely[p] == 1)
	        {
	            if(IsPlayerInAnyVehicle(p) && GetPlayerState(p) == 2)
	            {
	                new veh = GetPlayerVehicleID(p);
	                SetVehiclePos(veh, 2509.121582, 2771.689941, 10.820312);
	            }
	            else
	                SetPlayerPos(p, 2509.121582, 2771.689941, 10.820312);
	        }
	    }

		//Autóparkoló ki
	    else if(PlayerToPoint(2, p, 2503.887207, 2773.661376, 10.820312))
	    {
			Engedely[p] = 0;
            if(IsPlayerInAnyVehicle(p) && GetPlayerState(p) == 2)
            {
                new veh = GetPlayerVehicleID(p);
                SetVehiclePos(veh, 2482.818847, 2773.210449, 10.759070);
            }
            else
                SetPlayerPos(p, 2482.818847, 2773.210449, 10.759070);
	    }
	}
}

public Hatar()
{
	new p;
	new string[256];
	for(p = 0; p < MAX_PLAYERS; p++)
	{
		if(RendesJatekos(p) && !IsACop(p) && !IsHitman(p))
		{
			if(HatartAtlepte[p] > 0) continue;
			if(PlayerToPoint(10, p, -2681.7976,1275.5908,55.4297))
			{
			    if(hatar > 0)
				{
					format(string, sizeof(string), "** FIGYELEM: %s átlépett egy határt! **", PlayerName(p));
					SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}

			else if(PlayerToPoint(10, p, -1365.1212,862.9720,47.4722))
			{
				if(hatar > 0)
				{
					format(string, sizeof(string), "** FIGYELEM: %s átlépett egy határt! **", PlayerName(p));
					SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}

			else if(PlayerToPoint(10, p, -1376.0016,677.6368,34.5781))
			{
				if(hatar > 0)
				{
					format(string, sizeof(string), "** FIGYELEM: %s átlépett egy határt! **", PlayerName(p));
					SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}

			else if(PlayerToPoint(10, p, -164.3360,380.9377,12.0781))
			{
				if(hatar > 0)
				{
					format(string, sizeof(string), "** FIGYELEM: %s átlépett egy határt! **", PlayerName(p));
					SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}

			else if(PlayerToPoint(10, p, 500.3794,501.2592,18.9220))
			{
				if(hatar > 0)
				{
					format(string, sizeof(string), "** FIGYELEM: %s átlépett egy határt! **", PlayerName(p));
					SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}

			else if(PlayerToPoint(10, p, 1739.4407,524.6778,27.7830))
			{
				if(hatar > 0)
				{
					format(string, sizeof(string), "** FIGYELEM: %s átlépett egy határt! **", PlayerName(p));
					SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}

			else if(PlayerToPoint(10, p, 2767.2012,453.6431,8.2898))
			{
				if(hatar > 0)
				{
					format(string, sizeof(string), "** FIGYELEM: %s átlépett egy határt! **", PlayerName(p));
					SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}

			else if(PlayerToPoint(10, p, 42.9162,-1529.9849,5.3716))
			{
				if(hatar > 0)
				{
					format(string, sizeof(string), "** FIGYELEM: %s átlépett egy határt! **", PlayerName(p));
					SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}

			else if(PlayerToPoint(10, p, 8.8969,-1352.2971,10.3364))
			{
				if(hatar > 0)
				{
					format(string, sizeof(string), "** FIGYELEM: %s átlépett egy határt! **", PlayerName(p));
					SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}

			else if(PlayerToPoint(10, p, -11.6197,-1330.7705,11.0490))
			{
				if(hatar > 0)
				{
					format(string, sizeof(string), "** FIGYELEM: %s átlépett egy határt! **", PlayerName(p));
					SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}
			
			else if(PlayerToPoint(10, p, -971.9191,-364.6200,36.2927))
			{
				if(hatar > 0)
				{
					format(string, sizeof(string), "** FIGYELEM: %s átlépett egy határt! **", PlayerName(p));
					SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
					SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}
		}
	}
}

/*public SonaFigyelo()
{
	new string[256], playername[MAX_PLAYER_NAME];
	for(new i=0;i<MAX_PLAYERS;i++)
	{
    	if(IsPlayerConnected(i) && PlayerInfo[i][pSpawned] == 1)
       	{

			new Float:x, Float:y, Float:z;
			GetPlayerPos(i, x, y, z);

       	    if(PlayerInfo[i][pJailed] == 2)
       	    {
				if(x < 500 || x > 600 || y < -2275 || y > -2150)
				{
				    GetPlayerName(i, playername, sizeof(playername));
				    PlayerInfo[i][pJailed] = 0;
//				    format(string, sizeof(string), "RIADÓÓÓÓÓÓÓÓÓÓÓÓÓÓÓÓÓÓÓÓÓ!!!!!!!!");
//				    ProxDetector2(200.0, string, 554.769287, -2223.505859, 1.501912, COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED);
 				    format(string, sizeof(string), "SZÖKÉSI KÍSÉRLET!!!!! MINDENKI A SONA FEGYENCTELEPRE!!!!!");
				    ProxDetector2(200.0, string, 554.769287, -2223.505859, 1.501912, COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED);
				    format(string, sizeof(string), "A NYOMKÖVETÕ 10PERCIG AKTÍV!!! MINDENKI UTÁNA!!", playername);
				    ProxDetector2(200.0, string, 554.769287, -2223.505859, 1.501912, COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED);
                    for(new p = 0; p < MAX_PLAYERS; p++)
			    	{
			        	if(IsACop(p))
						    SendClientMessage(p, COLOR_LIGHTRED, "SZÖKÉSI KISÉRLET A SONA FEGYENCTELEPEN!! A NYOMKÖVETÕ AKTIV!! SIESS!!");
    			    }
					PlayerInfo[i][pNyomkovetes] = 1;
					PlayerInfo[i][pNyomkoveto] = 600;
// 				    format(string, sizeof(string), "ISMÉTLEM! SZÖKÉSI KÍSÉRLET A SONA FEGYENCTELEPEN!! MINDENKI ODA!!");
//				    ProxDetector2(200.0, string, 554.769287, -2223.505859, 1.501912, COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED);
				}
			}
			if(PlayerInfo[i][pNyomkovetes] == 1 && PlayerInfo[i][pNyomkoveto] > 0)
			{
			    PlayerInfo[i][pNyomkoveto] -= 5;
			    for(new p = 0; p < MAX_PLAYERS; p++)
			    {
			        if(IsACop(p))
				        SetPlayerMarkerForPlayer( p, i, 0xFF0000FF );
			    }
			    format(string, sizeof(string), "~r~A nyomkoveto meg ~g~%d~n~~r~masodpercig aktiv", PlayerInfo[i][pNyomkoveto]);
			    GameTextForPlayer(i, string, 5000, 3);

			}
			else if(PlayerInfo[i][pNyomkovetes] == 1 && PlayerInfo[i][pNyomkoveto] <= 0){
				PlayerInfo[i][pNyomkoveto] = 0;
				PlayerInfo[i][pNyomkovetes] = 0;
				SendClientMessage(i, COLOR_LIGHTGREEN, "A nyomkövetõ eddig bírta, lekapcsolt...");
			    for(new p = 0; p < MAX_PLAYERS; p++)
			    {
			        if(IsACop(p))
			        {
				        GetPlayerName(i, playername, sizeof(playername));
				        SetPlayerMarkerForPlayer( p, i, 0xFFFFFF00 );
				        format(string, sizeof(string), "A nyomkövetõ, ami rajta volt: %s, lekapcsolt...", playername);
				        SendClientMessage(p, COLOR_LIGHTRED, string);
			        }
			    }
			}

			if(x >= 469 && x <= 645)
			{
			    if(y <= -2169 && y >= -2285)
			    {
			        if(z < 0.8)
			            SetPlayerPos(i, x, y, 2);
			    }
			}
    	}
	}
	return 1;
}*/

public DrogPlant(playerid)
{
	if(MunkaFolyamatban[playerid] == 1) return Msg(playerid, "Ültetés folyamatban.. Hova sietsz?!");
	
	new playerpos;
	new Float:dX, Float:dY, Float:dZ;
	playerpos = GetPlayerPos(playerid, dX, dY, dZ);
			
	pdrogja[playerid] = CreateDynamicObject(19473, dX, dY, dZ, 0.0, 0.0, 0.0);
	pdrogjaX[playerid] = dX;
	pdrogjaY[playerid] = dY;
	pdrogjaZ[playerid] = dZ;
	
	ultetett[playerid] = 1;
	MunkaFolyamatban[playerid] = 0;
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Drogtermesztés]: Sikeresen elültetted a veteményeket!");
	SetTimerEx("DrogTakarithato", 60000*5, false, "i", playerid);
	
	return 1;
}

public DrogTakarithato(playerid)
{
	drogbetakarithato[playerid] = 1;
	if(PlayerInfo[playerid][pAdmin] >= 1) return Msg(playerid, "[AdminDrogtermesztés]: Kész vannak az vetemények!");
	return 1;
}

public DrogKesz(playerid)
{
	if(PlayerToPoint(3, playerid, pdrogjaX[playerid], pdrogjaY[playerid], pdrogjaZ[playerid]))
	{
		if(drogbetakarithato[playerid] == 0) return Msg(playerid, "Még nem fejlõdtek ki a veteményeid!");
		if(MunkaFolyamatban[playerid] == 1) return Msg(playerid, "Betakaritás folyamatban.. Hova sietsz?!");
		SetTimerEx("DrogTakarit", 60000, false, "i", playerid);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Drogtermesztés]: Elkezdted betakaritani a veteményeidet!");
		MunkaFolyamatban[playerid] = 1;
	}
	else
	{
		Msg(playerid, "Nem vagy az elültetted veteményed mellett! (Jelölve a térképeden!)");
		SetPlayerCheckpoint(playerid, pdrogjaX[playerid], pdrogjaY[playerid], pdrogjaZ[playerid], 20);
	}
	return 1;
}
public DrogTakarit(playerid)
{
	MunkaFolyamatban[playerid] = 0;

	new randomkoka = Rand(50, 100);
	new randomhero = Rand(50, 100);
	new randommari = Rand(50, 100);
	
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Drogtermesztés]: Sikeresen betakaritottad a veteményedet!");
	SendFormatMessage(playerid, COLOR_WHITE, "[Betakaritás]: Kokain: +%dg, Heroin: +%dg, Marihuana: +%dg", randomkoka, randomhero, randommari);
	PlayerInfo[playerid][pKokain] += randomkoka;
	PlayerInfo[playerid][pHeroin] += randomhero;
	PlayerInfo[playerid][pMarihuana] += randommari;
	drogbetakarithato[playerid] = 0;
	return 1;
}

public HalaszTimer(playerid)
{
	if(halaszvege[playerid] == 1) return;
	
	new skillmiatt = 2000;
	switch(PlayerInfo[playerid][pFishSkill])
	{
		case 1..200: 
		{
			skillmiatt = 3000;
		}
		case 201..500:
		{
			skillmiatt = 5000;
		}
		case 501..700: 
		{
			skillmiatt = 6000;
		}
		case 701..1000:
		{
			skillmiatt = 8000;
		}
		default:
		{
			skillmiatt = 8000;
		}
	}	
	SendClientMessage(playerid, COLOR_YELLOW, "[Horgászat]: Kapásod van! Gyorsan ránts be hogy kifogd a halat! (/horgászat beránt)");
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SetTimerEx("HalaszMulasztas", skillmiatt, false, "i", playerid);
	halaszkapas[playerid] = 1; // jelezzük neki hogy kapás van
}
public HalaszMulasztas(playerid)
{
	if(halaszkapas[playerid] == 1) // ha kapás van és lejár a timer
	{
		halaszkapas[playerid] = 0;
		TogglePlayerControllable(playerid, true);
		MunkaFolyamatban[playerid] = 0;
		SendClientMessage(playerid, COLOR_RED, "[Horgászat]: Nem voltál elég gyors, ezért leakadt a hal a horogról..");
	}
}
public HalaszKapas(playerid)
{
	/*PlayerToPoint(50.0, playerid, 370.3924,-2425.9006,-0.4865) ||
	!PlayerToPoint(50.0, playerid, 3197.8337,-2060.1685,-0.3765) ||
	!PlayerToPoint(50.0, playerid, 2024.0540,-127.1852,-0.5232)) */
	/*pSuger, benne
	pCsattogohal, benne
	pPisztrang, benne
	pBlueMarlin, benne
	pDoboz, benne
	pMakrela, benne
	pVitorlashal, benne
	pTonhal, benne
	pAngolna, benne
	pTeknos, benne
	pKardhal benne*/
//____________________________________________________
//____________________________________________________


	new mennyilegyen = 0;
	switch(PlayerInfo[playerid][pFishSkill])
	{
		case 1..200: 
		{
			mennyilegyen = Rand(1,5);
		}
		case 201..500:
		{
			mennyilegyen = Rand(5, 10);
		}
		case 501..800: 
		{
			mennyilegyen = Rand(10,15);
		}
		case 801..1000:
		{
			mennyilegyen = Rand(15,20);
		}
		default: // ha 1000fölé viszik skilllel. nincs korlátozva folyamat adja! ezért kell a default
		{
			mennyilegyen = Rand(15,20);
		}
	}	
	// FIGYELJ ODA pFishSkill 1000-ig van!!
	new halaszesely = Rand(1, 140);
	new randomkilo1 = Rand(1, 5); // 1-5 kg között
	new vegso = randomkilo1*mennyilegyen; // szorzás
	new melyikhal;
//____________________________________________________
	
	if(PlayerToPoint(150.0, playerid, 370.3924,-2425.9006,-0.4865)) // SKILL 1 terület santa
	{
		if(halaszesely < 50) melyikhal = SUGERID;
		else if(50 <= halaszesely < 75) melyikhal = CSATTOGOHALID;
		else if(75 <= halaszesely <= 100) melyikhal = PISZTRANGID;
		else if(100 < halaszesely <= 130)
		{
			Msg(playerid, "Sajnos nem akadt semmi a horgodra!");
			MunkaFolyamatban[playerid] = 0;
			TogglePlayerControllable(playerid, true);
			return 1;
		}
		else if(130 < halaszesely <= 140) melyikhal = DOBOZID;
	}
	else if(PlayerToPoint(150.0, playerid, 3197.8337,-2060.1685,-0.3765)) // SKILL 1/2 terület
	{
		if(halaszesely < 70) melyikhal = MAKRELAID;
		else if(70 <= halaszesely < 100) melyikhal = BLUEMARLINID;
		else if(100 <= halaszesely <= 130)
		{
			Msg(playerid, "Sajnos nem akadt semmi a horgodra!");
			MunkaFolyamatban[playerid] = 0;
			TogglePlayerControllable(playerid, true);
			return 1;
		}
		else if(130 < halaszesely <= 140) melyikhal = DOBOZID;
	}
	else if(PlayerToPoint(150.0, playerid, 2024.0540,-127.1852,-0.5232)) // Skill 2 terület
	{
		if(halaszesely < 50) melyikhal = SUGERID;
		else if(50 <= halaszesely < 100) melyikhal = VITORLASHALID;
		else if(100 <= halaszesely <= 130) 
		{	
			Msg(playerid, "Sajnos nem akadt semmi a horgodra!");
			MunkaFolyamatban[playerid] = 0;
			TogglePlayerControllable(playerid, true);
			return 1;
		}
		else if(130 < halaszesely <= 140) melyikhal = DOBOZID;
	}
	else if(PlayerToPoint(150.0, playerid, -187.6936,-639.7835,-0.2355)) // skill 3 terület
	{
		if(halaszesely < 50) melyikhal = TONHALID;
		else if(50 <= halaszesely < 100) melyikhal = ANGOLNAID;
		else if(100 <= halaszesely <= 130)
		{
			Msg(playerid, "Sajnos nem akadt semmi a horgodra!");
			MunkaFolyamatban[playerid] = 0;
			TogglePlayerControllable(playerid, true);
			return 1;
		}
		else if(130 < halaszesely <= 140) melyikhal = DOBOZID;
	}
	else if(PlayerToPoint(150.0, playerid, -1747.1085,-2848.0251,-0.744)) // skill 4 terület
	{
		if(halaszesely < 50) melyikhal = AMURID;
		else if(50 <= halaszesely < 100) melyikhal = KARDHALID;
		else if(100 <= halaszesely <= 130)
		{
			Msg(playerid, "Sajnos nem akadt semmi a horgodra!");
			MunkaFolyamatban[playerid] = 0;
			TogglePlayerControllable(playerid, true);
			return 1;
		}
		else if(130 < halaszesely <= 140) melyikhal = DOBOZID;
	}
	else if(PlayerToPoint(150.0, playerid, 178.3143,319.8893,-1.5723))
	{
		if(halaszesely < 40) melyikhal = SULLOID;
		else if(40 <= halaszesely <= 130)
		{
			Msg(playerid, "Sajnos nem akadt semmi a horgodra!");
			MunkaFolyamatban[playerid] = 0;
			TogglePlayerControllable(playerid, true);
			return 1;
		}
		else if(130 < halaszesely <= 140) melyikhal = DOBOZID;
	}
	
	new melyikhalis[32];
	new randomskill = Rand(1, 2);
	PlayerInfo[playerid][pFishSkill] += randomskill;
	if(melyikhal == DOBOZID)
	{
		/*#define DOBOZPENZ 1
		#define DOBOZSKILL 2
		#define DOBOZHAL 3
		*/
		new doboztartalma;
		new dobozeselyek = Rand(1, 100);
		if(dobozeselyek < 50) doboztartalma = DOBOZPENZ;
		else if(50 <= dobozeselyek < 98) doboztartalma = DOBOZSKILL;
		else if(98 <= dobozeselyek <= 100) doboztartalma = DOBOZARANY;
		
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Horgászat]: Fogtál egy dobozt a meritõhálóval!");
		new oravalaranyos;
		switch(doboztartalma)
		{
			case 1:
			{
				if(PlayerInfo[playerid][pConnectTime] >= 500)
				{
					new szorzoja = Rand(5, 40);
					oravalaranyos = PlayerInfo[playerid][pConnectTime]*szorzoja;
				}
				else
				{
					oravalaranyos = Rand(1000, 10000);
				}
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Doboz tartalma: Egy pénztárca amelyben %dForint található.", oravalaranyos);
				GiveMoney(playerid, oravalaranyos);
				MunkaFolyamatban[playerid] = 0;
				TogglePlayerControllable(playerid, true);
				return 1;
			}
			case 2:
			{
				if(PlayerInfo[playerid][pFishSkill] <= 1000)
				{
					new randskill = Rand(1, 25);
					PlayerInfo[playerid][pFishSkill] +=randskill;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Doboz tartalma: Egy horgászati könyv, amit átolvasol és némi tapasztalatra teszel szert. (+%d)", randskill);
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Doboz tartalma: Egy horgászati könyv, amire már nincs szükséged ezért visszadobod.");
				}
				MunkaFolyamatban[playerid] = 0;
				TogglePlayerControllable(playerid, true);
				return 1;
			}
			case 3:
			{
				pHalak[playerid][pAranyhoz]++;
				if(pHalak[playerid][pAranyhoz] == 5)
				{
					//PlayerInfo[playerid][pArany]++;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Doboz tartalma egy arany volt, és összegyûlt az 5db arany! Kaptál egy aranyrúdat!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Doboz tartalma: Egy kis aranyrög, ha ebbõl összegyûjtesz 5dbot akkor kapsz egy aranyrudat.");
				}
				return 1;
			}
		}
	}
	switch(melyikhal)
	{
		case 1: melyikhalis = "Sügér";
		case 2: melyikhalis = "Csattogóhal";
		case 3: melyikhalis = "Pisztráng";
		case 4: melyikhalis = "BlueMarlin";
		case 5: melyikhalis = "Vitorláshal";
		case 6: melyikhalis = "Makréla";
		case 8: melyikhalis = "Tonhal";
		case 9: melyikhalis = "Angolna";
		case 10: melyikhalis = "Amúr";
		case 11: melyikhalis = "Kardhal";
		case 12: melyikhalis = "Süllõ";
	}
	pHalak[playerid][pOsszesFogott]++;
	MunkaFolyamatban[playerid] = 0;
	TogglePlayerControllable(playerid, true);
	SendFormatMessage(playerid, COLOR_GREY, "{F3FF02}[Horgászat]: {00C0FF}Sikeresen fogtál egy %s-t. | Súlya: %dkg", melyikhalis, vegso);
	if(pHalak[playerid][pSlot1] == 0)
	{
		pHalak[playerid][pSlot1] = vegso;
		pHalak[playerid][pSlot1nev] = melyikhal;
		return 1;
	}
	if(pHalak[playerid][pSlot2] == 0)
	{
		pHalak[playerid][pSlot2] = vegso;
		pHalak[playerid][pSlot2nev] = melyikhal;
		return 1;
	}
	if(pHalak[playerid][pSlot3] == 0)
	{
		pHalak[playerid][pSlot3] = vegso;
		pHalak[playerid][pSlot3nev] = melyikhal;
		return 1;
	}
	if(pHalak[playerid][pSlot4] == 0)
	{
		pHalak[playerid][pSlot4] = vegso;
		pHalak[playerid][pSlot4nev] = melyikhal;
		return 1;
	}
	if(pHalak[playerid][pSlot5] == 0)
	{
		pHalak[playerid][pSlot5] = vegso;
		pHalak[playerid][pSlot5nev] = melyikhal;
		return 1;
	}
	
	SaveHalak(playerid);
	return 1;
}

public Kaszinojatek(playerid)
{
		new esely = Rand(1, 1000);
		
		if(esely < 700) // 70% LOSE
		{
			SendFormatMessage(playerid, COLOR_GREY, "Félkarú rabló: You LOST %dFt!", kaszinoosszeg);
		}
		else if(960 <= esely < 1000) // 4% esely nagyobb vagy egyenlõ mint 960 de kisebb mint 1000
		{
			kaszinoplusz = kaszinoosszeg*2;
			SendClientMessage(playerid, COLOR_GREEN, "Szõlõ | Szõlõ | Szõlõ");
			SendFormatMessage(playerid, COLOR_WHITE, "Félkarú rabló: You WON! | Nyereményed: %dFt", kaszinoplusz);
			PlayerInfo[playerid][pAccount] += kaszinoplusz;
		}
		else if(930 <= esely < 960) // 3%
		{
			kaszinoplusz = kaszinoosszeg*3;
			SendClientMessage(playerid, COLOR_YELLOW, "Citrom | Citrom | Citrom");
			SendFormatMessage(playerid, COLOR_WHITE, "Félkarú rabló: You WON! | Nyereményed: %dFt", kaszinoplusz);
			PlayerInfo[playerid][pAccount] += kaszinoplusz;
		}
		else if(905 <= esely < 930) // 2,5%
		{
			kaszinoplusz = kaszinoosszeg*4;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Meggy | Meggy | Meggy");
			SendFormatMessage(playerid, COLOR_WHITE, "Félkarú rabló: You WON! | Nyereményed: %dFt", kaszinoplusz);
			PlayerInfo[playerid][pAccount] += kaszinoplusz;
		}
		else if(885 <= esely < 905) // 2%
		{
			kaszinoplusz = kaszinoosszeg*5;
			SendClientMessage(playerid, COLOR_YELLOW, "Csengõ | Csengõ | Csengõ");
			SendFormatMessage(playerid, COLOR_WHITE, "Félkarú rabló: You WON! | Nyereményed: %dFt", kaszinoplusz);
			PlayerInfo[playerid][pAccount] += kaszinoplusz;
		}
		else if(870 <= esely < 885) // 1,5%
		{
			kaszinoplusz = kaszinoosszeg*7;
			SendClientMessage(playerid, COLOR_RED, "7r | 7r | 7r");
			SendFormatMessage(playerid, COLOR_WHITE, "Félkarú rabló: You WON! | Nyereményed: %dFt", kaszinoplusz);
			PlayerInfo[playerid][pAccount] += kaszinoplusz;
		}
		else if(860 <= esely < 870) // 1%
		{
			kaszinoplusz = kaszinoosszeg*6;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "7b | 7b | 7b");
			SendFormatMessage(playerid, COLOR_WHITE, "Félkarú rabló: You WON! | Nyereményed: %dFt", kaszinoplusz);
			PlayerInfo[playerid][pAccount] += kaszinoplusz;
		}
		else if(830 <= esely < 860) // 3%
		{
			kaszinoplusz = kaszinoosszeg*3;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "7b | 7r | 7b");
			SendFormatMessage(playerid, COLOR_WHITE, "Félkarú rabló: You WON! | Nyereményed: %dFt", kaszinoplusz);
			PlayerInfo[playerid][pAccount] += kaszinoplusz;
		}
		else if(815 <= esely < 830) // 1,5%
		{
			kaszinoplusz = kaszinoosszeg*3;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "7r | 7b| 7r");
			SendFormatMessage(playerid, COLOR_WHITE, "Félkarú rabló: You WON! | Nyereményed: %dFt", kaszinoplusz);
			PlayerInfo[playerid][pAccount] += kaszinoplusz;
		}
		else if(700 <= esely < 815) // 11,5%
		{
			kaszinoplusz = kaszinoosszeg;
			SendClientMessage(playerid, COLOR_ORANGE, "Narancs | Narancs | Narancs");
			SendFormatMessage(playerid, COLOR_WHITE, "Félkarú rabló: You WON! | Visszanyerted az alap tétet! (%dFt)", kaszinoplusz);
			PlayerInfo[playerid][pAccount] += kaszinoplusz;
		}
		
		MunkaFolyamatban[playerid] = 0;
		TogglePlayerControllable(playerid, true);
	}

public Munkavege(playerid, Munka, db)
{
   	if(IsPlayerConnected(playerid))
   	{
		new string2[128];//, MunkaString[32];
//		format(MunkaString, sizeof(MunkaString), "%s", string);

   	    if(Munka == M_CSERJE)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(MaxTalalas[0]);
				if(talalt == 0)
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Sajnos nem találtál egy jó Kokacserjét sem...");
				else
				{
				    if(PlayerInfo[playerid][pCserje] + talalt > MAXCSERJE)
				    {
				        new cserje = PlayerInfo[playerid][pCserje];
					    format(string2, sizeof(string2), "Találtál %ddb jó Kokacserjét, de csak %ddb-ot birsz el, ezért %ddb-ot itthagysz", talalt, MAXCSERJE, ((cserje + talalt) - MAXCSERJE));
					    PlayerInfo[playerid][pCserje] += (MAXCSERJE - cserje);
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Találtál %ddb jó Kokacserjét! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pCserje] + talalt));
					    PlayerInfo[playerid][pCserje] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
	
		else if(Munka == M_MELLENY)
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Sikeresen elKészítettél egy   1 db golyóálló mellényt!");
			MunkaFolyamatban[playerid] = 0;
			SetPlayerArmour(playerid, 100);
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
			TogglePlayerControllable(playerid, true);
		}
   	    else if(Munka == M_MAK)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(MaxTalalas[1]);
				if(talalt == 0)
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Sajnos nem találtál egy jó Máklevelet sem...");
				else
				{
				    if(PlayerInfo[playerid][pMak] + talalt > MAXMAK)
				    {
				        new mak = PlayerInfo[playerid][pMak];
					    format(string2, sizeof(string2), "Találtál %ddb jó Máklevelet, de csak %ddb-ot birsz el, ezért %ddb-ot itthagysz", talalt, MAXMAK, ((mak + talalt) - MAXMAK));
					    PlayerInfo[playerid][pMak] += (MAXMAK - mak);
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Találtál %ddb jó Máklevelet! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pMak] + talalt));
					    PlayerInfo[playerid][pMak] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_CANNABIS)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(MaxTalalas[2]);
				if(talalt == 0)
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Sajnos nem találtál egy jó Cannabist sem...");
				else
				{
				    if(PlayerInfo[playerid][pCannabis] + talalt > MAXCANNABIS)
				    {
				        new cannabis = PlayerInfo[playerid][pCannabis];
					    format(string2, sizeof(string2), "Találtál %ddb jó Cannabist, de csak %ddb-ot birsz el, ezért %ddb-ot itthagysz", talalt, MAXCANNABIS, ((cannabis + talalt) - MAXCANNABIS));
					    PlayerInfo[playerid][pCannabis] += (MAXCANNABIS - cannabis);
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Találtál %ddb jó Cannabist! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pCannabis] + talalt));
					    PlayerInfo[playerid][pCannabis] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_KOKAIN)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(db * MaxTalalas[3]) + 1;

			    if(PlayerInfo[playerid][pKokain] + talalt > MAXKOKAIN)
			    {
			        new drogja = PlayerInfo[playerid][pKokain];
				    format(string2, sizeof(string2), "Sikeresen Készítettél egy   %dg kokaint, de csak %dg-ot birsz el, ezért %dg-ot itthagysz", talalt, MAXKOKAIN, ((drogja + talalt) - MAXKOKAIN));
				    PlayerInfo[playerid][pKokain] += (MAXKOKAIN - drogja);
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen Készítettél egy   %dg kokaint! Összesen %dg-od van", talalt, (PlayerInfo[playerid][pKokain] + talalt));
				    PlayerInfo[playerid][pKokain] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);

				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_HEROIN)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(db * MaxTalalas[4]) + 1;

			    if(PlayerInfo[playerid][pHeroin] + talalt > MAXHEROIN)
			    {
			        new drogja = PlayerInfo[playerid][pHeroin];
				    format(string2, sizeof(string2), "Sikeresen Készítettél egy   %dg heroin, de csak %dg-ot birsz el, ezért %dg-ot itthagysz", talalt, MAXHEROIN, ((drogja + talalt) - MAXHEROIN));
				    PlayerInfo[playerid][pHeroin] += (MAXHEROIN - drogja);
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen Készítettél egy   %dg heroint! Összesen %dg-od van", talalt, (PlayerInfo[playerid][pHeroin] + talalt));
				    PlayerInfo[playerid][pHeroin] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);

				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_MARIHUANA)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(db * MaxTalalas[5]) + 1;

			    if(PlayerInfo[playerid][pMarihuana] + talalt > MAXMARIHUANA)
			    {
			        new drogja = PlayerInfo[playerid][pMarihuana];
				    format(string2, sizeof(string2), "Sikeresen Készítettél egy   %dg marihuánát, de csak %dg-ot birsz el, ezért %dg-ot itthagysz", talalt, MAXMARIHUANA, ((drogja + talalt) - MAXMARIHUANA));
				    PlayerInfo[playerid][pMarihuana] += (MAXMARIHUANA - drogja);
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen Készítettél egy   %dg marihuánát! Összesen %dg-od van", talalt, (PlayerInfo[playerid][pMarihuana] + talalt));
				    PlayerInfo[playerid][pMarihuana] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);

				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_MATERIAL)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(db * MaxTalalas[6]) + 1;

			    if(PlayerInfo[playerid][pMats] + talalt > MAXMATI)
			    {
			        new matija = PlayerInfo[playerid][pMats];
				    format(string2, sizeof(string2), "Sikeresen Készítettél egy   %ddb materialt, de csak %d-t birsz el, ezért %d-t itthagysz", talalt, MAXMATI, ((matija + talalt) - MAXMATI));
				    PlayerInfo[playerid][pMats] += (MAXMATI - matija);
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen Készítettél egy   %ddb materialst! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pMats] + talalt));
				    PlayerInfo[playerid][pMats] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);

				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_SEGIT)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(ProxDetectorS(5, playerid, db))
				{
					TogglePlayerControllable(playerid, true);
					ClearAnimations(playerid);
					
					Animban[db] = 0;
					SetPlayerDrunkLevel(db, 0);
					
					if(!NemMozoghat(db))
					{
						TogglePlayerControllable(db, true);
						ClearAnimations(db);
					}

					MunkaFolyamatban[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Sikeresen elláttad a sebeit, és felsegítetted!");
					SendClientMessage(db, COLOR_GREEN, "Ellátták a sebeidet, és felsegítettek");
					new Float:hp; GetPlayerHealth(db, hp);
					if(hp < 15.0)
						SetHealth(db, 22.0);
					else if(hp < 95.0)
						SetHealth(db, hp+5.0);
				}
				else
				    MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_MSEGIT)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(Animban[playerid])
				{
					TogglePlayerControllable(playerid, true);
					ClearAnimations(playerid);
					Animban[playerid] = 0;
					SetPlayerDrunkLevel(playerid, 0);
					MunkaFolyamatban[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Sikeresen elláttad a sebeidet!");
					Cselekves(playerid, "ellátta a sebeit...");
					new Float:hp; GetPlayerHealth(db, hp);
					if(hp < 15.0)
						SetHealth(db, 22.0);
					else if(hp < 95.0)
						SetHealth(db, hp+5.0);
				}
				else
				    MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_MOTOR)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
		        if(!IsPlayerInAnyVehicle(playerid))
		        {
		            MunkaFolyamatban[playerid] = 0;
		            return 1;
		        }
				new kocsim = GetPlayerVehicleID(playerid);
		        engineOn[GetPlayerVehicleID(playerid)] = 1;
				//TogglePlayerControllable(playerid, true);
				SetJarmu(kocsim, KOCSI_MOTOR, true);
				MunkaFolyamatban[playerid] = 0;
				SendClientMessage(playerid, COLOR_GREEN, "Beindítottad a jármûvedet!");
				ProxDetector(30.0, playerid, "* Valaki beindította a jármû motorját", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				if(VanBombaBenne[kocsim] != NINCS)
				{
					new bombazo = NINCS;
					if(IsPlayerConnected(VanBombaBenne[kocsim]) && IsHitman(VanBombaBenne[kocsim]))
						bombazo = VanBombaBenne[kocsim];
					new Float:x, Float:y, Float:z;
					GetVehiclePos(kocsim, x, y, z);
					CreateExplosion(x, y, z, 2, 500.0);
					for(new jatekos = 0; jatekos < MAX_PLAYERS; jatekos++)
					{
						if(!IsPlayerInVehicle(jatekos, kocsim)) continue;
						SetHealth(jatekos, 0);
						if(bombazo != NINCS && PlayerInfo[jatekos][pHeadValue] > 0)
						{
							new string[128];
							SendFormatMessageToAll(COLOR_YELLOW, " <<< A bérgyilkos teljesítette a megbízó kérését - %s kinyírva >>> ", PlayerName(jatekos));
							format(string,128,"<< %s teljesítette a megbízást >>", PlayerInfo[bombazo][pHitmanNev]);
							SendHitmanRadioMessage(COLOR_YELLOW, string);
							SendFormatMessage(jatekos, COLOR_LIGHTBLUE, "A megbízást teljesítetted. A cég átutalta a pénzt a számládra. (%dFt)", PlayerInfo[bombazo][pHeadValue]);

							PlayerInfo[bombazo][pAccount] += PlayerInfo[jatekos][pHeadValue];
							PlayerInfo[jatekos][pHeadValue] = 0;
							format(string, sizeof(string), "%s felrobbantotta %s-t", PlayerInfo[bombazo][pHitmanNev],  PlayerName(jatekos));
							ABroadCast(COLOR_GREY, string, 1);
						}
					}
					VanBombaBenne[kocsim] = NINCS;
				}
			}
		}
		else if(Munka == M_BELSO)
		{
			if(MunkaFolyamatban[playerid] == 1)
			{
				new haz = HaznalVan(playerid);
				if(PlayerInfo[playerid][pAccount] < BelsoArak[db] || haz == -1)
				{
					MunkaFolyamatban[playerid] = 0;
					return 1;
				}

				new kinek = HouseInfo[haz][hOwner];

				TogglePlayerControllable(playerid, true);
				ClearAnimations(playerid);

				HouseInfo[haz][hBelso] = db;
				//HazUpdate(haz, "Belso='%d'", db);
				HazUpdate(haz, HAZ_Belso);
				PlayerInfo[playerid][pAccount] -= BelsoArak[db];
				Cselekves(playerid, "felújított egy házat");
				FelujitasElfogadas[kinek] = NINCS;
			}
		}

	 	else
	 	    SendFormatMessage(playerid, COLOR_RED, "Error... [%d]", Munka);

		MunkaFolyamatban[playerid] = 0;
	}
	return 1;
}

public Fillup(playerid)
{
	for(new i=0; i<MAX_PLAYERS; i++)
   	{
	   	if(IsPlayerConnected(i))
	   	{
		    new VID;
		    new FillUp;
		    new string[256];
		    VID = GetPlayerVehicleID(i);
		    FillUp = GasMax - Gas[VID];
			if(Refueling[i] == 1)
   			{
   			    if(LMT(i, LMUNKA_SCPD)|| LMT(i, LMUNKA_FBI)|| LMT(i, LMUNKA_VPOP) ||  LMT(i, LMUNKA_SFPD)|| LMT(i, LMUNKA_KATONA)|| LMT(i, LMUNKA_MENTO)|| LMT(i, LMUNKA_ONKORMANYZAT)|| LMT(i, LMUNKA_RIPORTER))
				{
					Gas[VID] += FillUp;
					FillUp = FillUp * BizzInfo[BIZ_OLAJ][bEntranceCost];
					format(string,sizeof(string),"* Köszönjük hogy a %s -t választotta. Jó utat!",BizzInfo[BIZ_OLAJ][bMessage]);
	    			SendClientMessage(i,COLOR_LIGHTBLUE,string);
	    			format(string,sizeof(string),"* Jármû megtankolva.(Ingyen).");
	    			SendClientMessage(i,COLOR_LIGHTBLUE,string);
					Refueling[i] = 0;
				}
				else
				{
	                Gas[VID] += FillUp;
					FillUp = FillUp * BizzInfo[BIZ_OLAJ][bEntranceCost];
					format(string,sizeof(string),"* Köszönjük hogy a %s -t választotta. Jó utat!",BizzInfo[BIZ_OLAJ][bMessage]);
	    			SendClientMessage(i,COLOR_LIGHTBLUE,string);
	    			format(string,sizeof(string),"* Jármû megtankolva.(%dFT -ért).",FillUp);
	    			SendClientMessage(i,COLOR_LIGHTBLUE,string);
					GiveMoney(i, - FillUp);
					BizPenz(BIZ_OLAJ, FillUp);
					Refueling[i] = 0;
				}
			}
		}
	}
	return 1;
}

public Fagyasztas(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

public Kiolvasztas(playerid)
{
	TogglePlayerControllable(playerid, 0);
	return 1;
}

public FegyverElvesz(playerid, weaponid)
{
	new Fegyo[12], FegyverTolteny[12] = 0;
	for(new slot = 0; slot < 12; slot++)
	{
		GetPlayerWeaponData(playerid, slot, Fegyo[slot], FegyverTolteny[slot]);
		
		if(Fegyo[slot] == weaponid)
			Fegyo[slot] = 0;
	}

	ResetWeapon(playerid);
	
	for(new slot = 1; slot < 12; slot++)
		if(Fegyo[slot] != 0 && FegyverTolteny[slot] != 0)
		GiveWeapon(playerid, Fegyo[slot], FegyverTolteny[slot]);
		
	Fegyvere[playerid] = 0;
	SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

public StoppedVehicle()
{
	new Float:x,Float:y,Float:z;
	new Float:distance,value;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInAnyVehicle(i))
			{
				//new VID;
				//VID = GetPlayerVehicleID(i);
				GetPlayerPos(i, x, y, z);
				distance = floatsqroot(floatpower(floatabs(floatsub(x,SavePlayerPos[i][LastX])),2)+floatpower(floatabs(floatsub(y,SavePlayerPos[i][LastY])),2)+floatpower(floatabs(floatsub(z,SavePlayerPos[i][LastZ])),2));
				value = floatround(distance * 3600);
				if(UpdateSeconds > 1)
				{
					value = floatround(value / UpdateSeconds);
				}
				if(SpeedMode)
				{
	            }
//				if(value == 0)
//				{
//					Gas[VID]++;
//				}
				SavePlayerPos[i][LastX] = x;
				SavePlayerPos[i][LastY] = y;
				SavePlayerPos[i][LastZ] = z;
			}
		}
	}
	return 1;
}

public PrintBizInfo(playerid,targetid)
{
    if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s ***",BizzInfo[targetid][bMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Zárva: %d Belépõ: %dFT Széf: %dFT", BizzInfo[targetid][bLocked], BizzInfo[targetid][bEntranceCost], BizzInfo[targetid][bTill]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Prodok(Árú): %d/%d Másodtulaj: %s", BizzInfo[targetid][bProducts],BizzInfo[targetid][bMaxProducts],BizzInfo[targetid][bExtortion]);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}

public ShowDetektivPlayerStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Férfi"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Nõ"; }
  		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "USA"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Európa"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Ázsia"; }
		new ttext[32];


		if(PlayerInfo[targetid][pMember] > 0)
		{
			new szam = PlayerInfo[targetid][pMember] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else if(PlayerInfo[targetid][pLeader] > 0)
		{
			new szam = PlayerInfo[targetid][pLeader] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else
			ttext = "Civil";

		new dtext[20];
		if(STDPlayer[targetid] == 1) { dtext = "Chlamydia"; }
		else if(STDPlayer[targetid] == 2) { dtext = "Gonorrhea"; }
		else if(STDPlayer[targetid] == 3) { dtext = "Syphilis"; }
		else { dtext = "Nincs"; }


		new f2text[20];
	    if(PlayerInfo[targetid][pFMember] < 255) { f2text = FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyName]; }
		else { f2text = "None"; }

		new rtext[32];
	    if(PlayerInfo[targetid][pFMember] < 255)//The 2 Organisations
	    {
        	if(PlayerInfo[targetid][pRank] == 1) { rtext = "Outsider"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Associate"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Soldier"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Capo"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Underboss"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Godfather"; }
			else { rtext = "Outsider"; }
		}
		else if(PlayerInfo[targetid][pMember] >= 1 || PlayerInfo[targetid][pLeader] >= 1)//PD Ranks
		{
			new rang = PlayerInfo[targetid][pRank], munka;
			if(PlayerInfo[targetid][pLeader] != 0)
				munka = PlayerInfo[targetid][pLeader] - 1;
			else
				munka = PlayerInfo[targetid][pMember] - 1;

			if(rang <= 0) rtext = Rangok[munka][0];
			else if(rang >= 1 && rang <= 12) rtext = Rangok[munka][rang];
			else rtext = Rangok[munka][12];
		}
		else
		{
		    rtext = "-";
		}
        new jtext[20], jtext2[20];

        if(PlayerInfo[targetid][pJob1] == MUNKA_DETEKTIV) jtext = "Detektív";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_UGYVED) jtext = "Ügyvéd";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_PROSTI) jtext = "Prostituált";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_DROG) jtext = "Drog Díler";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_AUTOTOLVAJ) jtext = "Autótolvaj";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_SZERELO) jtext = "Autószerelõ";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_TESTOR) jtext = "Testõr";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_FEGYVER) jtext = "Fegyverkereskedõ";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_AUTOKERESKEDO) jtext = "Autókereskedõ";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_BOXOLO) jtext = "Boxoló";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_BUS) jtext = "Buszsofõr";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_UJSAGOS) jtext = "Újságkihordó";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_UTTISZTITO) jtext = "Úttisztító";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_HACKER) jtext = "Hacker";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_KAMIONOS) jtext = "Kamion Sofõr";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_FARMER) jtext = "Farmer";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_FUNYIRO) jtext = "Fûnyíró";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_EPITESZ) jtext = "Építész";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_PANCEL) jtext = "Páncélkészítõ";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_KUKAS) jtext = "Kukás";
        else jtext = "Nincs";

        if(PlayerInfo[targetid][pJob2] == MUNKA_DETEKTIV) jtext2 = "Detektív";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_UGYVED) jtext2 = "Ügyvéd";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_PROSTI) jtext2 = "Prostituált";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_DROG) jtext2 = "Drog Díler";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_AUTOTOLVAJ) jtext2 = "Autótolvaj";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_SZERELO) jtext2 = "Autószerelõ";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_TESTOR) jtext2 = "Testõr";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_FEGYVER) jtext2 = "Fegyverkereskedõ";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_AUTOKERESKEDO) jtext2 = "Autókereskedõ";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_BOXOLO) jtext2 = "Boxoló";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_BUS) jtext2 = "Buszsofõr";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_UJSAGOS) jtext2 = "Újságkihordó";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_UTTISZTITO) jtext2 = "Úttisztító";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_HACKER) jtext2 = "Hacker";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_KAMIONOS) jtext2 = "Kamion Sofõr";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_FARMER) jtext2 = "Farmer";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_FUNYIRO) jtext2 = "Fûnyíró";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_EPITESZ) jtext2 = "Építész";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_PANCEL) jtext2 = "Páncélkészítõ";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_KUKAS) jtext2 = "Kukás";
        else jtext2 = "Nincs";

		new drank[20];
		if(PlayerInfo[targetid][pDonateRank] == 1) { drank = "Power User"; }
		else if(PlayerInfo[targetid][pDonateRank] >= 2) { drank = "Donater"; }
		else { drank = "None"; }
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectTime];
		new arrests = PlayerInfo[targetid][pArrested];
		new wanted = WantedLevel[targetid];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new housekey = PlayerInfo[targetid][pPhousekey];
		new housekey2 = PlayerInfo[targetid][pPhousekey2];

		new coordsstring[256];

		new droghatas = PlayerInfo[targetid][pDrogido];
		new BizniszSzam = PlayerInfo[targetid][pPbiskey];

		new meg = floatround((9000 - PlayerInfo[playerid][pContractTime]) / 60);
		new meg2 = floatround((9000 - PlayerInfo[playerid][pContractTime]) / 60);

		new vkocsi[40], vkocsi2[40], bkocsi[40], id;

		if(PlayerInfo[targetid][pPcarkey] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey]][cId];
			format(vkocsi, sizeof(vkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi = "Nincs";
		
		if(PlayerInfo[targetid][pPcarkey2] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey2]][cId];
			format(vkocsi2, sizeof(vkocsi2), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi2 = "Nincs";

		if(HireCar[targetid] != NINCS)
		{
			id = HireCar[targetid];
			format(bkocsi, sizeof(bkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			bkocsi = "Nincs";

		new fizu = PlayerInfo[targetid][pPayCheck];
		new bcash = PlayerInfo[targetid][pAccount];
		
		new premiuminfo[45];
		if(PlayerInfo[targetid][pPremiumCsomag] != 0)
		{
			new ido, pido, kul;
			pido = PlayerInfo[targetid][pPremiumIdo];
			ido = gettime();
			kul = pido - ido;
			premiuminfo = "Idõ:";
			if(kul >= 604800)
				Format(premiuminfo, "%s %dhét", premiuminfo, floatround((kul / 604800), floatround_ceil));
			else if(kul >= 86400)
				Format(premiuminfo, "%s %dnap", premiuminfo, floatround((kul / 86400), floatround_ceil));
			else
				Format(premiuminfo, "%s %dóra", premiuminfo, floatround((kul / 3600), floatround_ceil));
			
			Format(premiuminfo, "%s - Csomag: %dFt - Pont: %d", premiuminfo, PlayerInfo[targetid][pPremiumCsomag], PlayerInfo[targetid][pPremiumPont]);
		}
		else if(PlayerInfo[playerid][pPremiumPont] > 0)
			Format(premiuminfo, "P. Pont: %d", PlayerInfo[targetid][pPremiumPont]);
		else
			premiuminfo = "Nincs prémiumod";
			
		if(PlayerInfo[playerid][pDetSkill] < 50 && !IsHitman(playerid)) return Msg(playerid, "A detektív skilled túl alacsony(Minimum 2).");
		SendClientMessage(playerid, COLOR_GREEN,"================================[ Adatok ]================================");
		if(PlayerInfo[playerid][pDetSkill] >= 50 || IsHitman(playerid))
		{
			format(coordsstring, sizeof(coordsstring),"*** Név: %s ***", PlayerName(targetid));
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);

			format(coordsstring, sizeof(coordsstring), "Nem: %s | Életkor: %d | Származás: %s | Bank: %dFt | Telefonszám: %d", atext,age,otext, bcash, pnumber);
			SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		}	
		if(PlayerInfo[playerid][pDetSkill] >= 100 || IsHitman(playerid))
		{
			format(coordsstring, sizeof(coordsstring), "Ház: %d/%d | Biznisz: %d | Házastárs: %s | Játszott órák: %d | FõMunka: %s(%dp) | Másodmunka: %s(%dp)", housekey, housekey2, BizniszSzam ,married, ptime, jtext, meg, jtext2, meg2);
			SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		}
		if(PlayerInfo[playerid][pDetSkill] >= 200 || IsHitman(playerid))
		{
			format(coordsstring, sizeof(coordsstring), "Letartóztatások: %d | Üldözési szint: %d | Szervezet: %s | Rang: %s | Betegség: %s | Droghatás: %dmp", arrests,wanted,ttext,rtext,dtext,droghatas);
			SendClientMessage(playerid, COLOR_GRAD3,coordsstring);
		}	
		if(PlayerInfo[playerid][pDetSkill] >= 400 || IsHitman(playerid))
		{
			format(coordsstring, sizeof(coordsstring), "Saját autók: %s/%s | Bérkocsi: %s | Fizetés: %dFt | BankSzámlaSzám: %d ", vkocsi, vkocsi2, bkocsi, fizu, PlayerInfo[targetid][pBankSzamlaSzam]);
			SendClientMessage(playerid, COLOR_GRAD4,coordsstring);
		}	
	}
	return 1;
}

public ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Male"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Female"; }
  		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "USA"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Europe"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Asia"; }
		new ttext[32];


		if(PlayerInfo[targetid][pMember] > 0)
		{
			new szam = PlayerInfo[targetid][pMember] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else if(PlayerInfo[targetid][pLeader] > 0)
		{
			new szam = PlayerInfo[targetid][pLeader] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else
			ttext = "Civil";

		new dtext[20];
		if(STDPlayer[targetid] == 1) { dtext = "Chlamydia"; }
		else if(STDPlayer[targetid] == 2) { dtext = "Gonorrhea"; }
		else if(STDPlayer[targetid] == 3) { dtext = "Syphilis"; }
		else { dtext = "Nincs"; }


		new f2text[20];
	    if(PlayerInfo[targetid][pFMember] < 255) { f2text = FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyName]; }
		else { f2text = "None"; }

		new rtext[32];
	    if(PlayerInfo[targetid][pFMember] < 255)//The 2 Organisations
	    {
        	if(PlayerInfo[targetid][pRank] == 1) { rtext = "Outsider"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Associate"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Soldier"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Capo"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Underboss"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Godfather"; }
			else { rtext = "Outsider"; }
		}
		else if(PlayerInfo[targetid][pMember] >= 1 || PlayerInfo[targetid][pLeader] >= 1)//PD Ranks
		{
			new rang = PlayerInfo[targetid][pRank], munka;
			if(PlayerInfo[targetid][pLeader] >= 1 && PlayerInfo[targetid][pLeader] < 200)
				munka = PlayerInfo[targetid][pLeader] - 1;
			else
				munka = PlayerInfo[targetid][pMember] - 1;

			if(rang <= 0) rtext = Rangok[munka][0];
			else if(rang >= 1 && rang <= 12) rtext = Rangok[munka][rang];
			else rtext = Rangok[munka][12];
		}
		else
		{
		    rtext = "-";
		}
        new jtext[20], jtext2[20];

        if(PlayerInfo[targetid][pJob1] == MUNKA_DETEKTIV) jtext = "Detektív";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_UGYVED) jtext = "Ügyvéd";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_PROSTI) jtext = "Prostituált";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_DROG) jtext = "Drog Díler";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_AUTOTOLVAJ) jtext = "Autótolvaj";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_SZERELO) jtext = "Autószerelõ";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_TESTOR) jtext = "Testõr";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_FEGYVER) jtext = "Fegyverkereskedõ";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_AUTOKERESKEDO) jtext = "Autókereskedõ";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_BOXOLO) jtext = "Boxoló";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_BUS) jtext = "Buszsofõr";
        else if(PlayerInfo[targetid][pJob1] == MUNKA_UJSAGOS) jtext = "Újságkihordó";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_UTTISZTITO) jtext = "Úttisztító";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_HACKER) jtext = "Hacker";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_KAMIONOS) jtext = "Kamion Sofõr";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_FARMER) jtext = "Farmer";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_FUNYIRO) jtext = "Fûnyíró";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_EPITESZ) jtext = "Építész";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_PANCEL) jtext = "Páncélkészítõ";
		else if(PlayerInfo[targetid][pJob1] == MUNKA_KUKAS) jtext = "Kukás";
        else jtext = "Nincs";

        if(PlayerInfo[targetid][pJob2] == MUNKA_DETEKTIV) jtext2 = "Detektív";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_UGYVED) jtext2 = "Ügyvéd";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_PROSTI) jtext2 = "Prostituált";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_DROG) jtext2 = "Drog Díler";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_AUTOTOLVAJ) jtext2 = "Autótolvaj";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_SZERELO) jtext2 = "Autószerelõ";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_TESTOR) jtext2 = "Testõr";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_FEGYVER) jtext2 = "Fegyverkereskedõ";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_AUTOKERESKEDO) jtext2 = "Autókereskedõ";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_BOXOLO) jtext2 = "Boxoló";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_BUS) jtext2 = "Buszsofõr";
        else if(PlayerInfo[targetid][pJob2] == MUNKA_UJSAGOS) jtext2 = "Újságkihordó";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_UTTISZTITO) jtext2 = "Úttisztító";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_HACKER) jtext2 = "Hacker";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_KAMIONOS) jtext2 = "Kamion Sofõr";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_FARMER) jtext2 = "Farmer";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_FUNYIRO) jtext2 = "Fûnyíró";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_EPITESZ) jtext2 = "Építész";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_PANCEL) jtext2 = "Páncélkészítõ";
		else if(PlayerInfo[targetid][pJob2] == MUNKA_KUKAS) jtext2 = "Kukás";
        else jtext2 = "Nincs";

		new drank[20];
		if(PlayerInfo[targetid][pDonateRank] == 1) { drank = "Power User"; }
		else if(PlayerInfo[targetid][pDonateRank] >= 2) { drank = "Donater"; }
		else { drank = "None"; }
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectTime];
		new arrests = PlayerInfo[targetid][pArrested];
		new wanted = WantedLevel[targetid];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new housekey = PlayerInfo[targetid][pPhousekey];
		new housekey2 = PlayerInfo[targetid][pPhousekey2];

		new coordsstring[256];

		new droghatas = PlayerInfo[targetid][pDrogido];
		new BizniszSzam = PlayerInfo[targetid][pPbiskey];

		new meg = floatround((9000 - PlayerInfo[targetid][pContractTime]) / 60);
		new meg2 = floatround((9000 - PlayerInfo[targetid][pContractTime]) / 60);

		new vkocsi[40], vkocsi2[40], bkocsi[40], id;

		if(PlayerInfo[targetid][pPcarkey] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey]][cId];
			format(vkocsi, sizeof(vkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi = "Nincs";
		
		if(PlayerInfo[targetid][pPcarkey2] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey2]][cId];
			format(vkocsi2, sizeof(vkocsi2), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi2 = "Nincs";

		if(HireCar[targetid] != NINCS)
		{
			id = HireCar[targetid];
			format(bkocsi, sizeof(bkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			bkocsi = "Nincs";

		new fizu = PlayerInfo[targetid][pPayCheck];
		new bcash = PlayerInfo[targetid][pAccount];
		
		new premiuminfo[45];
		if(PlayerInfo[targetid][pPremiumCsomag] != 0)
		{
			new ido, pido, kul;
			pido = PlayerInfo[targetid][pPremiumIdo];
			ido = gettime();
			kul = pido - ido;
			premiuminfo = "Idõ:";
			if(kul >= 604800)
				Format(premiuminfo, "%s %dhét", premiuminfo, floatround((kul / 604800), floatround_ceil));
			else if(kul >= 86400)
				Format(premiuminfo, "%s %dnap", premiuminfo, floatround((kul / 86400), floatround_ceil));
			else
				Format(premiuminfo, "%s %dóra", premiuminfo, floatround((kul / 3600), floatround_ceil));
			
			Format(premiuminfo, "%s - Csomag: %dFt - Pont: %d", premiuminfo, PlayerInfo[targetid][pPremiumCsomag], PlayerInfo[targetid][pPremiumPont]);
		}
		else if(PlayerInfo[targetid][pPremiumPont] > 0)
			Format(premiuminfo, "P. Pont: %d", PlayerInfo[targetid][pPremiumPont]);
		else
			premiuminfo = "Nincs prémiumod";

		SendClientMessage(playerid, COLOR_GREEN,"================================[ Adataid ]================================");

		format(coordsstring, sizeof(coordsstring),"*** Név: %s ***", PlayerName(targetid));
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);

		format(coordsstring, sizeof(coordsstring), "Nem: %s | Életkor: %d | Származás: %s | Bank: %dFt | Telefonszám: %d", atext,age,otext, bcash, pnumber);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);

		format(coordsstring, sizeof(coordsstring), "Ház: %d/%d | Biznisz: %d | Házastárs: %s | Játszott órák: %d | FõMunka: %s(%dp) | Másodmunka: %s(%dp)", housekey, housekey2, BizniszSzam ,married, ptime, jtext, meg, jtext2, meg2);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);

		format(coordsstring, sizeof(coordsstring), "Letartóztatások: %d | Üldözési szinted: %d | Szervezet: %s | Rang: %s | Betegség: %s | Droghatás: %dmp", arrests,wanted,ttext,rtext,dtext,droghatas);
		SendClientMessage(playerid, COLOR_GRAD3,coordsstring);

		format(coordsstring, sizeof(coordsstring), "Saját autók: %s/%s | Bérkocsi: %s | Fizetés: %dFt | BankSzámlaSzám: %d | BankSzámlaJelszó: %d", vkocsi, vkocsi2, bkocsi, fizu, PlayerInfo[targetid][pBankSzamlaSzam], PlayerInfo[targetid][pBankSzamlaJelszo]);
		SendClientMessage(playerid, COLOR_GRAD4,coordsstring);

		Format(coordsstring, "Szint: %d | Szintlépés: %dóra | Prémiuminfo: %s", PlayerInfo[targetid][pLevel], ((PlayerInfo[targetid][pLevel]+1)*levelexp) - PlayerInfo[targetid][pExp], premiuminfo);
		SendClientMessage(playerid, COLOR_GRAD5,coordsstring);

		//SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}

public ShowZseb(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new lotto = PlayerInfo[targetid][pLottoNr];

		new coordsstring[256];

		new cash = GetMoney(targetid);
		new mats = PlayerInfo[targetid][pMats];
		new kokain = PlayerInfo[targetid][pKokain];
		new heroin = PlayerInfo[targetid][pHeroin];
		new marihuana = PlayerInfo[targetid][pMarihuana];

		new muanyag = PlayerInfo[targetid][pMuanyag];
		new cserje = PlayerInfo[targetid][pCserje];
		new mak = PlayerInfo[targetid][pMak];
		new cannabis = PlayerInfo[targetid][pCannabis];
		
		new kotszer = PlayerInfo[targetid][pKotszer];
		new cigi = PlayerInfo[targetid][pCigi];
		new kaja = PlayerInfo[targetid][pKaja];
		
		new fegyverek[96], fegyverek2[96], fegyok, fegyo, ammo, ammo2[8];
		for(new x = 0; x < 13; x++)
		{
			GetPlayerWeaponData(targetid, x, fegyo, ammo);
			if(x == 0 && fegyo != 1) continue;
			
			if(ammo > 0) Format(ammo2, "[%d]", ammo);
			else ammo2[0] = EOS;
			
			if(ammo != 0)
			{
				fegyok++;
				if(fegyok < 6)
					if(fegyok == 1)
						Format(fegyverek, "(%d)%s%s", fegyo, aWeaponNames[fegyo], ammo2);
					else
						Format(fegyverek, "%s, (%d)%s%s", fegyverek, fegyo, aWeaponNames[fegyo], ammo2);
				else
					if(fegyok == 6)
						Format(fegyverek2, "Fegyverek: (%d)%s%s", fegyo, aWeaponNames[fegyo], ammo2);
					else
						Format(fegyverek2, "%s, (%d)%s%s", fegyverek2, fegyo, aWeaponNames[fegyo], ammo2);
			}
			//SendFormatMessage(playerid, COLOR_WHITE, "Slot: %d Fegyó: %d Töltény: %d", x, fegyo, ammo);
		}
		
		if(fegyok < 1)
			fegyverek = "Nincs fegyvered";
		
		SendClientMessage(playerid, COLOR_GREEN,"================================[ Zsebed tartalma ]================================");

		format(coordsstring, sizeof(coordsstring), "Kézpénz: %dFt | Lottószelvény: %d | Mûanyag: %d/%d | Kokacserje: %d/%d | Mák: %d/%d | Cannabis: %d/%d ", cash, lotto, MAXMUANYAG, muanyag, MAXCSERJE, cserje, MAXMAK, mak, MAXCANNABIS, cannabis);
		SendClientMessage(playerid, COLOR_GRAD1, coordsstring);

		format(coordsstring, sizeof(coordsstring), "Kokain: %d/%d | Heroin: %d/%d | Marihuana: %d/%d | Material: %d/%d | Kötszer: %ddb | Cigi: %ddb | Kaja: %d/%d", MAXKOKAIN, kokain, MAXHEROIN, heroin, MAXMARIHUANA, marihuana, MAXMATI, mats, kotszer, cigi, MAXKAJA, kaja);
		SendClientMessage(playerid, COLOR_GRAD2, coordsstring);
		
		format(coordsstring, sizeof(coordsstring), "Fegyverek: %s", fegyverek);
		SendClientMessage(playerid, COLOR_GRAD3, coordsstring);
		
		if(fegyok >= 6)
			SendClientMessage(playerid, COLOR_GRAD4, fegyverek2);

		//SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}

//---------------------------------------------------------

public SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
	}
}

//------------------------------------------------------------------------------------------------------
public SaveMission(playerid,name[])
{
	if(IsPlayerConnected(playerid))
	{
	    new coordsstring[256];
	    new missionname[64];
		new var[128];
		new makername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, makername, sizeof(makername));
		new rand = random(999);
		if(rand == 0) { rand = 1; }
		new number = rand;
		if(MissionInfo[mToggle] == 0 || MissionInfo[mToggle] == 1) { }
		else { MissionInfo[mToggle] = 1; }
		format(missionname, sizeof(missionname), "%s.mis",name);
		new File: hFile = fopen(missionname, io_write);
		format(var, 128, "Title=%s\n", MissionInfo[mTitle]);fwrite(hFile, var);
		format(var, 128, "Maker=%s\n", makername);fwrite(hFile, var);
		format(var, 128, "Text1=%s\n", MissionInfo[mText1]);fwrite(hFile, var);
		format(var, 128, "Text2=%s\n", MissionInfo[mText2]);fwrite(hFile, var);
		format(var, 128, "Text3=%s\n", MissionInfo[mText3]);fwrite(hFile, var);
		format(var, 128, "Text4=%s\n", MissionInfo[mText4]);fwrite(hFile, var);
		format(var, 128, "Text5=%s\n", MissionInfo[mText5]);fwrite(hFile, var);
		format(var, 128, "Text6=%s\n", MissionInfo[mText6]);fwrite(hFile, var);
		format(var, 128, "Text7=%s\n", MissionInfo[mText7]);fwrite(hFile, var);
		format(var, 128, "Text8=%s\n", MissionInfo[mText8]);fwrite(hFile, var);
		format(var, 128, "Text9=%s\n", MissionInfo[mText9]);fwrite(hFile, var);
		format(var, 128, "Text10=%s\n", MissionInfo[mText10]);fwrite(hFile, var);
		format(var, 128, "Text11=%s\n", MissionInfo[mText11]);fwrite(hFile, var);
		format(var, 128, "Text12=%s\n", MissionInfo[mText12]);fwrite(hFile, var);
		format(var, 128, "Text13=%s\n", MissionInfo[mText13]);fwrite(hFile, var);
		format(var, 128, "Text14=%s\n", MissionInfo[mText14]);fwrite(hFile, var);
		format(var, 128, "Text15=%s\n", MissionInfo[mText15]);fwrite(hFile, var);
		format(var, 128, "Text16=%s\n", MissionInfo[mText16]);fwrite(hFile, var);
		format(var, 128, "Text17=%s\n", MissionInfo[mText17]);fwrite(hFile, var);
		format(var, 128, "Text18=%s\n", MissionInfo[mText18]);fwrite(hFile, var);
		format(var, 128, "GText1=%s\n", MissionInfo[mGText1]);fwrite(hFile, var);
		format(var, 128, "GText2=%s\n", MissionInfo[mGText2]);fwrite(hFile, var);
		format(var, 128, "GText3=%s\n", MissionInfo[mGText3]);fwrite(hFile, var);
		format(var, 128, "GText4=%s\n", MissionInfo[mGText4]);fwrite(hFile, var);
		format(var, 128, "GText5=%s\n", MissionInfo[mGText5]);fwrite(hFile, var);
		format(var, 128, "GText6=%s\n", MissionInfo[mGText6]);fwrite(hFile, var);
		format(var, 128, "CP1X=%f\n", MissionInfo[mCP1][0]);fwrite(hFile, var);
		format(var, 128, "CP1Y=%f\n", MissionInfo[mCP1][1]);fwrite(hFile, var);
		format(var, 128, "CP1Z=%f\n", MissionInfo[mCP1][2]);fwrite(hFile, var);
		format(var, 128, "CP2X=%f\n", MissionInfo[mCP2][0]);fwrite(hFile, var);
		format(var, 128, "CP2Y=%f\n", MissionInfo[mCP2][1]);fwrite(hFile, var);
		format(var, 128, "CP2Z=%f\n", MissionInfo[mCP2][2]);fwrite(hFile, var);
		format(var, 128, "CP3X=%f\n", MissionInfo[mCP3][0]);fwrite(hFile, var);
		format(var, 128, "CP3Y=%f\n", MissionInfo[mCP3][1]);fwrite(hFile, var);
		format(var, 128, "CP3Z=%f\n", MissionInfo[mCP3][2]);fwrite(hFile, var);
		format(var, 128, "CP4X=%f\n", MissionInfo[mCP4][0]);fwrite(hFile, var);
		format(var, 128, "CP4Y=%f\n", MissionInfo[mCP4][1]);fwrite(hFile, var);
		format(var, 128, "CP4Z=%f\n", MissionInfo[mCP4][2]);fwrite(hFile, var);
		format(var, 128, "CP5X=%f\n", MissionInfo[mCP5][0]);fwrite(hFile, var);
		format(var, 128, "CP5Y=%f\n", MissionInfo[mCP5][1]);fwrite(hFile, var);
		format(var, 128, "CP5Z=%f\n", MissionInfo[mCP5][2]);fwrite(hFile, var);
		format(var, 128, "CP6X=%f\n", MissionInfo[mCP6][0]);fwrite(hFile, var);
		format(var, 128, "CP6Y=%f\n", MissionInfo[mCP6][1]);fwrite(hFile, var);
		format(var, 128, "CP6Z=%f\n", MissionInfo[mCP6][2]);fwrite(hFile, var);
		format(var, 128, "Number=%d\n", number);fwrite(hFile, var);
		format(var, 128, "Reward=%d\n", MissionInfo[mReward]);fwrite(hFile, var);
		format(var, 128, "Toggle=%d\n", MissionInfo[mToggle]);fwrite(hFile, var);
		fclose(hFile);
		format(coordsstring, sizeof(coordsstring), "%s Mission Saved.",name);
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
	}
	return 1;
}

public LoadMission(playerid,name[])
{
	if(IsPlayerConnected(playerid))
	{
		new strFromFile2[128];
		new missionname[64];
		format(missionname, sizeof(missionname), "%s.mis",name);
		new File: file = fopen(missionname, io_read);
		if (file)
		{
		    new key[ 256 ] , val[ 256 ];
		    new Data[ 256 ];
		    while ( fread( file , Data , sizeof( Data ) ) )
			{
				key = ini_GetKey( Data );
				if( strcmp( key , "Title" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kTitle], val, 0, strlen(val), 255); }
				if( strcmp( key , "Maker" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kMaker], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text1" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText1], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText2], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text3" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText3], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text4" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText4], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text5" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText5], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text6" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText6], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text7" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText7], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text8" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText8], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text9" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText9], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text10" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText10], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text11" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText11], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text12" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText12], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text13" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText13], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text14" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText14], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text15" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText15], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text16" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText16], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text17" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText17], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text18" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText18], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText1" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText1], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText2], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText3" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText3], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText4" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText4], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText5" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText5], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText6" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText6], val, 0, strlen(val), 255); }
				if( strcmp( key , "CP1X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP1][0] = floatstr( val ); }
				if( strcmp( key , "CP1Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP1][1] = floatstr( val ); }
				if( strcmp( key , "CP1Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP1][2] = floatstr( val ); }
				if( strcmp( key , "CP2X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP2][0] = floatstr( val ); }
				if( strcmp( key , "CP2Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP2][1] = floatstr( val ); }
				if( strcmp( key , "CP2Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP2][2] = floatstr( val ); }
				if( strcmp( key , "CP3X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP3][0] = floatstr( val ); }
				if( strcmp( key , "CP3Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP3][1] = floatstr( val ); }
				if( strcmp( key , "CP3Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP3][2] = floatstr( val ); }
				if( strcmp( key , "CP4X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP4][0] = floatstr( val ); }
				if( strcmp( key , "CP4Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP4][1] = floatstr( val ); }
				if( strcmp( key , "CP4Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP4][2] = floatstr( val ); }
				if( strcmp( key , "CP5X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP5][0] = floatstr( val ); }
				if( strcmp( key , "CP5Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP5][1] = floatstr( val ); }
				if( strcmp( key , "CP5Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP5][2] = floatstr( val ); }
				if( strcmp( key , "CP6X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP6][0] = floatstr( val ); }
				if( strcmp( key , "CP6Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP6][1] = floatstr( val ); }
				if( strcmp( key , "CP6Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP6][2] = floatstr( val ); }
				if( strcmp( key , "Number" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kNumber] = strval( val ); }
				if( strcmp( key , "Reward" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kReward] = strval( val ); }
				if( strcmp( key , "Toggle" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kToggle] = strval( val ); }
			}
			fclose(file);
			format(strFromFile2, sizeof(strFromFile2), "%s Mission Loaded.",name);
			SendClientMessage(playerid, COLOR_GREEN,strFromFile2);
			format(strFromFile2, sizeof(strFromFile2), "Mission Available: %s, By : %s | Reward: %dFt",PlayMission[kTitle],PlayMission[kMaker],PlayMission[kReward]);
			SendClientMessageToAll(COLOR_GREEN, strFromFile2);
			MissionPlayable = PlayMission[kNumber];
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN,"Mission File not found.");
		}
	}
	return 1;
}

public LoadBoxer()
{
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("Config/boxer.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Titel[TitelWins] = strval(arrCoords[0]);
		strmid(Titel[TitelName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
		Titel[TitelLoses] = strval(arrCoords[2]);
		fclose(file);
	}
	return 1;
}

public SaveBoxer()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%s,%d", Titel[TitelWins],Titel[TitelName],Titel[TitelLoses]);
	new File: file2 = fopen("Config/boxer.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadStuff()
{
	new fajl[32] = "Config/stuff.cfg";

	if(!fexist(fajl))
		dini_Create(fajl);

	if(dini_Isset(fajl, "Jackpot")) Jackpot = dini_Int(fajl, "Jackpot"); else dini_IntSet(fajl, "Jackpot", Jackpot);
	if(dini_Isset(fajl, "Kassza")) Tax = dini_Int(fajl, "Kassza"); else dini_IntSet(fajl, "Kassza", Tax);
	if(dini_Isset(fajl, "Ado")) TaxValue = dini_Int(fajl, "Ado"); else dini_IntSet(fajl, "Ado", TaxValue);
	if(dini_Isset(fajl, "Igenyles")) IgenylesEngedelyezve = dini_Int(fajl, "Igenyles"); else dini_IntSet(fajl, "Igenyles", IgenylesEngedelyezve);

	if(dini_Isset(fajl, "Rendelve")) RendeltKocsik = dini_Int(fajl, "Rendelve"); else dini_IntSet(fajl, "Rendelve", RendeltKocsik);
	if(dini_Isset(fajl, "RendelesIdo")) RendelesDatum = dini_Int(fajl, "RendelesIdo"); else dini_IntSet(fajl, "RendelesIdo", RendelesDatum);
	if(dini_Isset(fajl, "RendelesAlatt")) RendelesAlatt = dini_Int(fajl, "RendelesAlatt"); else dini_IntSet(fajl, "RendelesAlatt", RendelesAlatt);
	if(dini_Isset(fajl, "RendelesPenz")) RendelesPenz = dini_Int(fajl, "RendelesPenz"); else dini_IntSet(fajl, "RendelesPenz", RendelesPenz);
	if(dini_Isset(fajl, "RendelesIdo")) RendelesIdo = dini_Int(fajl, "RendelesIdo"); else dini_IntSet(fajl, "RendelesIdo", RendelesIdo);
	if(dini_Isset(fajl, "RendelesModel")) RendelesModel = dini_Int(fajl, "RendelesModel"); else dini_IntSet(fajl, "RendelesModel", RendelesModel);
	if(dini_Isset(fajl, "FBIKassza")) FBISzef = dini_Int(fajl, "FBIKassza"); else dini_IntSet(fajl, "FBIKassza", FBISzef);
	if(dini_Isset(fajl, "BankSzef")) BankSzef = dini_Int(fajl, "BankSzef"); else dini_IntSet(fajl, "BankSzef", BankSzef);
	/*if(dini_Isset(fajl, "BankTulaj")) BankTulaj = dini_Int(fajl, "BankTulaj"); else dini_IntSet(fajl, "BankTulaj", BankTulaj);
	if(dini_Isset(fajl, "BankMasodTulaj")) BankMasodTulaj = dini_Int(fajl, "BankMasodTulaj"); else dini_IntSet(fajl, "BankMasodTulaj", BankMasodTulaj);*/
	//if(dini_Isset(fajl, "FrakcioSzam")) FrakcioSzam = dini_Int(fajl, "FrakcioSzam"); else dini_IntSet(fajl, "FrakcioSzam", FrakcioSzam);
	if(dini_Isset(fajl, "Autojogsi")) Autojogsi = dini_Int(fajl, "Autojogsi"); else dini_IntSet(fajl, "Autojogsi", Autojogsi);
	if(dini_Isset(fajl, "Motorjogsi")) Motorjogsi = dini_Int(fajl, "Motorjogsi"); else dini_IntSet(fajl, "Motorjogsi", Motorjogsi);
	if(dini_Isset(fajl, "Kamionjogsi")) Kamionjogsi = dini_Int(fajl, "Kamionjogsi"); else dini_IntSet(fajl, "Kamionjogsi", Kamionjogsi);
	if(dini_Isset(fajl, "Repulojogsi")) Repulojogsi = dini_Int(fajl, "Repulojogsi"); else dini_IntSet(fajl, "Repulojogsi", Repulojogsi);
	if(dini_Isset(fajl, "Hajojogsi")) Hajojogsi = dini_Int(fajl, "Hajojogsi"); else dini_IntSet(fajl, "Hajojogsi", Hajojogsi);
	if(dini_Isset(fajl, "Horgaszjogsi")) Horgaszjogsi = dini_Int(fajl, "Horgaszjogsi"); else dini_IntSet(fajl, "Horgaszjogsi", Horgaszjogsi);
	if(dini_Isset(fajl, "Fegyverjogsi")) Fegyverjogsi = dini_Int(fajl, "Fegyverjogsi"); else dini_IntSet(fajl, "Fegyverjogsi", Fegyverjogsi);
	if(dini_Isset(fajl, "SSSSzef")) SSSSzef = dini_Int(fajl, "SSSSzef"); else dini_IntSet(fajl, "SSSSzef", SSSSzef);
	return 1;
}

public SaveStuff()
{
	new fajl[32] = "Config/stuff.cfg";

	if(!fexist(fajl))
		dini_Create(fajl);

	dini_IntSet(fajl, "Jackpot", Jackpot);
	dini_IntSet(fajl, "Kassza", Tax);
	dini_IntSet(fajl, "Ado", TaxValue);
	dini_IntSet(fajl, "Igenyles", IgenylesEngedelyezve);

	dini_IntSet(fajl, "Rendelve", RendeltKocsik);
	dini_IntSet(fajl, "RendelesIdo", RendelesDatum);
	dini_IntSet(fajl, "RendelesAlatt", RendelesAlatt);
	dini_IntSet(fajl, "RendelesPenz", RendelesPenz);
	dini_IntSet(fajl, "RendelesIdo", RendelesIdo);
	dini_IntSet(fajl, "RendelesModel", RendelesModel);
	dini_IntSet(fajl, "FBIKassza", FBISzef);
	dini_IntSet(fajl, "BankSzef", BankSzef);
	/*dini_IntSet(fajl, "BankTulaj", BankTulaj);
	dini_IntSet(fajl, "BankMasodTulaj", BankMasodTulaj);*/
	//dini_IntSet(fajl, "FrakcioSzam", FrakcioSzam);
	dini_IntSet(fajl, "Autojogsi", Autojogsi);
	dini_IntSet(fajl, "Motorjogsi", Motorjogsi);
	dini_IntSet(fajl, "Kamionjogsi", Kamionjogsi);
	dini_IntSet(fajl, "Repulojogsi", Repulojogsi);
	dini_IntSet(fajl, "Hajojogsi", Hajojogsi);
	dini_IntSet(fajl, "Horgaszjogsi", Horgaszjogsi);
	dini_IntSet(fajl, "Fegyverjogsi", Fegyverjogsi);
	dini_IntSet(fajl, "SSSSzef", SSSSzef);
	return 1;
}

public LoadIRC()
{
	new arrCoords[5][64];
	new strFromFile2[256];
	new File: file = fopen("Config/channels.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(IRCInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(IRCInfo[idx][iAdmin], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(IRCInfo[idx][iMOTD], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(IRCInfo[idx][iPassword], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			IRCInfo[idx][iNeedPass] = strval(arrCoords[3]);
			IRCInfo[idx][iLock] = strval(arrCoords[4]);
			printf("IRC:%d Admin:%s MOTD: %s Password: %s NeedPass: %d Lock: %d\n",idx,IRCInfo[idx][iAdmin],IRCInfo[idx][iMOTD],IRCInfo[idx][iPassword],IRCInfo[idx][iNeedPass],IRCInfo[idx][iLock]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveIRC()
{
	new idx;
	new File: file2;
	while (idx < sizeof(IRCInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%s|%d|%d\n",
		IRCInfo[idx][iAdmin],
		IRCInfo[idx][iMOTD],
		IRCInfo[idx][iPassword],
		IRCInfo[idx][iNeedPass],
		IRCInfo[idx][iLock]);
		if(idx == 0)
		{
			file2 = fopen("Config/channels.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/channels.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadTurfs()
{
	new arrCoords[6][64];
	new strFromFile2[256];
	new File: file = fopen("Config/turfs.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(TurfInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(TurfInfo[idx][zOwner], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(TurfInfo[idx][zColor], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			TurfInfo[idx][zMinX] = floatstr(arrCoords[2]);
			TurfInfo[idx][zMinY] = floatstr(arrCoords[3]);
			TurfInfo[idx][zMaxX] = floatstr(arrCoords[4]);
			TurfInfo[idx][zMaxY] = floatstr(arrCoords[5]);
			//printf("Turf:%d Name: %s Owner:%s MinX:%f MinY:%f MinZ:%f MaxX:%f MaxY:%f MaxZ:%f\n",
			//idx,TurfInfo[idx][zName],TurfInfo[idx][zOwner],TurfInfo[idx][zMinX],TurfInfo[idx][zMinY],TurfInfo[idx][zMinZ],TurfInfo[idx][zMaxX],TurfInfo[idx][zMaxY],TurfInfo[idx][zMaxZ]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveTurfs()
{
	new idx;
	new File: file2;
	while (idx < sizeof(TurfInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%f|%f|%f|%f|%f|%f\n",
		TurfInfo[idx][zOwner],
		TurfInfo[idx][zColor],
		TurfInfo[idx][zMinX],
		TurfInfo[idx][zMinY],
		TurfInfo[idx][zMaxX],
		TurfInfo[idx][zMaxY]);
		if(idx == 0)
		{
			file2 = fopen("Config/turfs.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/turfs.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadFamilies()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("Config/families.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(FamilyInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			FamilyInfo[idx][FamilyTaken] = strval(arrCoords[0]);
			strmid(FamilyInfo[idx][FamilyName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(FamilyInfo[idx][FamilyMOTD], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(FamilyInfo[idx][FamilyColor], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			strmid(FamilyInfo[idx][FamilyLeader], arrCoords[4], 0, strlen(arrCoords[4]), 255);
			FamilyInfo[idx][FamilyMembers] = strval(arrCoords[5]);
			FamilyInfo[idx][FamilySpawn][0] = floatstr(arrCoords[6]);
			FamilyInfo[idx][FamilySpawn][1] = floatstr(arrCoords[7]);
			FamilyInfo[idx][FamilySpawn][2] = floatstr(arrCoords[8]);
			FamilyInfo[idx][FamilySpawn][3] = floatstr(arrCoords[9]);
			FamilyInfo[idx][FamilyInterior] = strval(arrCoords[10]);
			printf("Family:%d Taken: %d Name:%s MOTD:%s Leader:%s Members:%d SpawnX:%f SpawnY:%f SpawnZ:%f Int:%d\n",
			idx,FamilyInfo[idx][FamilyTaken],FamilyInfo[idx][FamilyName],FamilyInfo[idx][FamilyMOTD],FamilyInfo[idx][FamilyLeader],FamilyInfo[idx][FamilyMembers],
			FamilyInfo[idx][FamilySpawn][0],FamilyInfo[idx][FamilySpawn][1],FamilyInfo[idx][FamilySpawn][2],FamilyInfo[idx][FamilyInterior]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveFamilies()
{
	new idx;
	new File: file2;
	while (idx < sizeof(FamilyInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%s|%d|%f|%f|%f|%f|%d\n",
		FamilyInfo[idx][FamilyTaken],
		FamilyInfo[idx][FamilyName],
		FamilyInfo[idx][FamilyMOTD],
		FamilyInfo[idx][FamilyColor],
		FamilyInfo[idx][FamilyLeader],
		FamilyInfo[idx][FamilyMembers],
		FamilyInfo[idx][FamilySpawn][0],
		FamilyInfo[idx][FamilySpawn][1],
		FamilyInfo[idx][FamilySpawn][2],
		FamilyInfo[idx][FamilySpawn][3],
		FamilyInfo[idx][FamilyInterior]);
		if(idx == 0)
		{
			file2 = fopen("Config/families.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/families.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

/*public LoadBan()
{
	new arrCoords[4][64];
	new strFromFile2[256];
	new File: file = fopen("Config/bannok.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(BanInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');

			if(strfind(arrCoords[0], "-", true) != -1)
			    BanInfo[idx][Van] = 0;
			else
			    BanInfo[idx][Van] = 1;

			strmid(BanInfo[idx][bNev], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(BanInfo[idx][bBannolo], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(BanInfo[idx][bMikor], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(BanInfo[idx][bOka], arrCoords[3], 0, strlen(arrCoords[3]), 255);


			idx++;
		}
	}

	file = fopen("Config/ipbannok.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(IpBanInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');

			if(strfind(arrCoords[0], "-", true) != -1)
			    IpBanInfo[idx][Van] = 0;
			else
			    IpBanInfo[idx][Van] = 1;

			strmid(IpBanInfo[idx][ibIp], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(IpBanInfo[idx][ibBannolo], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(IpBanInfo[idx][ibMikor], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(IpBanInfo[idx][ibOka], arrCoords[3], 0, strlen(arrCoords[3]), 255);


			idx++;
		}
	}

	return 1;
}*/

public LoadPapers()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("Config/papers.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(PaperInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			PaperInfo[idx][PaperUsed] = strval(arrCoords[0]);
			strmid(PaperInfo[idx][PaperMaker], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(PaperInfo[idx][PaperTitle], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(PaperInfo[idx][PaperText1], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			strmid(PaperInfo[idx][PaperText2], arrCoords[4], 0, strlen(arrCoords[4]), 255);
			strmid(PaperInfo[idx][PaperText3], arrCoords[5], 0, strlen(arrCoords[5]), 255);
			strmid(PaperInfo[idx][PaperText4], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(PaperInfo[idx][PaperText5], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			strmid(PaperInfo[idx][PaperText6], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			strmid(PaperInfo[idx][PaperText7], arrCoords[9], 0, strlen(arrCoords[9]), 255);
			PaperInfo[idx][SafeSaving] = strval(arrCoords[10]);
			//printf("Paper:%d Used: %d Maker:%s Title: %s Text1: %s Text2: %s Text3: %s Text4: %s Text5: %s Text6: %s Text7: %s",
			//idx,PaperInfo[idx][PaperUsed],PaperInfo[idx][PaperMaker],PaperInfo[idx][PaperTitle],PaperInfo[idx][PaperText1],
			//PaperInfo[idx][PaperText2],PaperInfo[idx][PaperText3],PaperInfo[idx][PaperText4],PaperInfo[idx][PaperText5],PaperInfo[idx][PaperText6],PaperInfo[idx][PaperText7]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SavePapers()
{
	new idx;
	new File: file2;
	while (idx < sizeof(IRCInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%s|%s|%s|%s|%s|%s|%d\n",
		PaperInfo[idx][PaperUsed],
		PaperInfo[idx][PaperMaker],
		PaperInfo[idx][PaperTitle],
		PaperInfo[idx][PaperText1],
		PaperInfo[idx][PaperText2],
		PaperInfo[idx][PaperText3],
		PaperInfo[idx][PaperText4],
		PaperInfo[idx][PaperText5],
		PaperInfo[idx][PaperText6],
		PaperInfo[idx][PaperText7],
		PaperInfo[idx][SafeSaving]);
		if(idx == 0)
		{
			file2 = fopen("Config/papers.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/papers.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadInts()
{
	new arrCoords[5][64];
	new strFromFile2[256];
	new File: file = fopen("Config/interiors.cfg", io_read);
	new ennyi = IntekSzama();
	if (file)
	{
		new idx = ALAPINTERIORSZAM;
		printf("\n==============Interiorok betoltese folyamatban==============\n");
		while (idx <= ennyi)
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			//IntInfo[idx][iType] = strval(arrCoords[0]);
			strmid(IntInfo[idx][iType], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			IntInfo[idx][iNumber] = strval(arrCoords[1]);
			IntInfo[idx][iExitX] = floatstr(arrCoords[2]);
			IntInfo[idx][iExitY] = floatstr(arrCoords[3]);
			IntInfo[idx][iExitZ] = floatstr(arrCoords[4]);
			printf("Interior %d betoltve!",idx);
			idx++;
		}
		printf("\n==============Interiorok betoltve==============\n");
		fclose(file);
	}
	return 1;
}

stock UresHazKereses()
{
	new haz = -1;
	for(new t = 0; t < sizeof(HouseInfo); t++)
	{
	    if(HouseInfo[t][Van] == 0)
		{
			haz = t;
			break;
		}
	}
    return haz;
}

stock IsPlayerAiming(playerid, aimid)
{
	// Not my function, can't remember who made it though.
	new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
	GetPlayerPos(playerid, X1, Y1, Z1);
	GetPlayerPos(aimid, X2, Y2, Z2);
	new Float:Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	if(Distance < 100)
	{
		new Float:A;
	 	GetPlayerFacingAngle(playerid, A);
	 	X1 += (Distance * floatsin(-A, degrees));
	 	Y1 += (Distance * floatcos(-A, degrees));
	 	Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
		if(Distance < 0.5)
		{
		    return true;
		}
	}
	return false;
}

public IntekSzama()
{
	return NumLines("Config/interiors.cfg");
}

public LoadIgenylesek()
{
	new arrCoords[5][128];
	new strFromFile2[256];
	new File: file = fopen("Config/hazigenylesek.cfg", io_read);
	new idx = 0;
	printf("\n================Igenylesek betoltese folyamatban================\n");
	if (file)
	{
		while (idx < MAXIGENYLES)
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');

			if(floatstr(arrCoords[2]) == 0.000000)
			    HazIgenylesek[idx][Van] = 0;
			else
			    HazIgenylesek[idx][Van] = 1;

			strmid(HazIgenylesek[idx][Nev], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			HazIgenylesek[idx][Belso] = strval(arrCoords[1]);
			HazIgenylesek[idx][iX] = floatstr(arrCoords[2]);
			HazIgenylesek[idx][iY] = floatstr(arrCoords[3]);
			HazIgenylesek[idx][iZ] = floatstr(arrCoords[4]);

			printf("Igenyles %d betoltve! Igenylo:%s Belso:%d",idx,HazIgenylesek[idx][Nev],HazIgenylesek[idx][Belso]);
			idx++;
		}
		fclose(file);
		printf("\n================Minden igenyles betoltve================\n");
	}
	return 1;
}

public LoadCar()
{
	new idx;
	while (idx < sizeof(CarInfo))
	{
		new where[32], query[128], mezoadatok[256], mezo[18][MAX_PLAYER_NAME];
		Format(where, "id='%d'", idx);

		if(Mysql_Num(SQL_DB_Kocsik, where) == 1)
			CarInfo[idx][Van] = 1;
		else
			CarInfo[idx][Van] = 0;

		if(CarInfo[idx][Van] == 1)
		{
			Format(query, "SELECT * FROM %s WHERE %s", SQL_DB_Kocsik, where);
			mysql_query(query);

			mysql_store_result();
			mysql_fetch_row(mezoadatok, "|");
			mysql_free_result();

			split(mezoadatok, mezo, '|');

			CarInfo[idx][cOwned] = strval(mezo[1]);
			CarInfo[idx][cOwner] = mezo[2];
			CarInfo[idx][cModel] = strval(mezo[3]);
			CarInfo[idx][cValue] = strval(mezo[4]);
			CarInfo[idx][cLocationx] = floatstr(mezo[5]);
			CarInfo[idx][cLocationy] = floatstr(mezo[6]);
			CarInfo[idx][cLocationz] = floatstr(mezo[7]);
			CarInfo[idx][cAngle] = floatstr(mezo[8]);
			CarInfo[idx][cColorOne] = strval(mezo[9]);
			CarInfo[idx][cColorTwo] = strval(mezo[10]);
			CarInfo[idx][cLock] = strval(mezo[11]);
			CarInfo[idx][cDate] = strval(mezo[12]);
			CarInfo[idx][cTuning] = strval(mezo[13]);
			CarInfo[idx][cKerek] = strval(mezo[14]);
			CarInfo[idx][cMatrica] = strval(mezo[15]);

			if(CarInfo[idx][cDate] < 500)
			{
				CarInfo[idx][cDate] = gettime();
				//CarUpdate(idx, "UtolsoBelepes='%d'", gettime());
				CarUpdate(idx, CAR_Date);
			}
		}

		if(CarInfo[idx][Van] == 1)
		{
			CarInfo[idx][cId] = UjKocsi(CarInfo[idx][cModel], CarInfo[idx][cLocationx], CarInfo[idx][cLocationy], CarInfo[idx][cLocationz], CarInfo[idx][cAngle], CarInfo[idx][cColorOne], CarInfo[idx][cColorTwo]);
			printf("Kocsi:%d[%d] Tulaj:%s",idx,CarInfo[idx][cId],CarInfo[idx][cOwner]);
			gCarLock[CarInfo[idx][cId]] = CarInfo[idx][cLock];
			ChangeVehiclePaintjob(CarInfo[idx][cId], CarInfo[idx][cMatrica]);
		}
		else
		    CarInfo[idx][cId] = NINCS;

		idx++;
	}
	return 1;
}

public LoadHouse()
{
	new idx = 0;
	printf("\n================Hazak betoltese folyamatban================\n");
	while(idx < sizeof(HouseInfo))
	{
		new where[32], query[128], mezoadatok[512], mezo[27][50];
		Format(where, "id='%d'", idx);

		if(Mysql_Num(SQL_DB_Hazak, where) == 1)
			HouseInfo[idx][Van] = 1;
		else
			HouseInfo[idx][Van] = 0;

		if(HouseInfo[idx][Van] == 1)
		{
			HazakSzamaOsszesen++;
			Format(query, "SELECT * FROM %s WHERE %s", SQL_DB_Hazak, where);
			mysql_query(query);

			mysql_store_result();

			mysql_fetch_row(mezoadatok, "|");
			mysql_free_result();

			split(mezoadatok, mezo, '|');

			HouseInfo[idx][Uj] = 0;
			HouseInfo[idx][hOwned] = strval(mezo[1]);
			strmid(HouseInfo[idx][hOwner], mezo[2], 0, strlen(mezo[2]), MAX_PLAYER_NAME);
			HouseInfo[idx][hCsak] = strval(mezo[3]);
			strmid(HouseInfo[idx][hCsakneki], mezo[4], 0, strlen(mezo[4]), MAX_PLAYER_NAME);
			HouseInfo[idx][hEntrancex] = floatstr(mezo[5]);
			HouseInfo[idx][hEntrancey] = floatstr(mezo[6]);
			HouseInfo[idx][hEntrancez] = floatstr(mezo[7]);
			HouseInfo[idx][hValue] = strval(mezo[8]);
			HouseInfo[idx][hRentabil] = strval(mezo[9]);
			HouseInfo[idx][hRent] = strval(mezo[10]);
			HouseInfo[idx][hBelso] = strval(mezo[11]);
			HouseInfo[idx][hHel] = strval(mezo[12]);
			HouseInfo[idx][hArmour] = strval(mezo[13]);
			HouseInfo[idx][hTakings] = strval(mezo[14]);
			HouseInfo[idx][hCigi] = strval(mezo[15]);
			HouseInfo[idx][hKaja] = strval(mezo[16]);
			HouseInfo[idx][hKokain] = strval(mezo[17]);
			HouseInfo[idx][hHeroin] = strval(mezo[18]);
			HouseInfo[idx][hMarihuana] = strval(mezo[19]);
			HouseInfo[idx][hMati] = strval(mezo[20]);
			HouseInfo[idx][hLock] = strval(mezo[21]);
			HouseInfo[idx][hDate] = strval(mezo[22]);
			HouseInfo[idx][hTipus] = strval(mezo[23]);
			new cuccok[10][5], x;
			split(mezo[24], cuccok, ','); for(x = 0; x < 10; x++) HouseInfo[idx][hFegyverek][x] = strval(cuccok[x]);
			split(mezo[25], cuccok, ','); for(x = 0; x < 10; x++) HouseInfo[idx][hToltenyek][x] = strval(cuccok[x]);
			split(mezo[26], cuccok, ','); for(x = 0; x < 10; x++) HouseInfo[idx][hMellenyek][x] = strval(cuccok[x]);
			//Mezõ 26 jön!

			if(HouseInfo[idx][hCsak] == 1)
				printf("Haz %d betoltve! Tulaj:%s Hazpenz:%d Csakneki:%s",idx,HouseInfo[idx][hOwner],HouseInfo[idx][hTakings], HouseInfo[idx][hCsakneki]);
			else
			    printf("Haz %d betoltve! Tulaj:%s Hazpenz:%d ",idx,HouseInfo[idx][hOwner],HouseInfo[idx][hTakings]);

		}

		idx++;
	}
	printf("\n================Minden haz betoltve================\n");
}

public LoadBizz()
{
	new idx = 0;
	printf("\n================Bizniszek betoltese folyamatban================\n");
	while(idx < sizeof(BizzInfo))
	{
		new where[32], query[128], mezoadatok[512], mezo[25][100];
		Format(where, "id='%d'", idx);

		if(Mysql_Num(SQL_DB_Bizek, where) == 1)
		{
			Format(query, "SELECT * FROM %s WHERE %s", SQL_DB_Bizek, where);
			mysql_query(query);

			mysql_store_result();

			mysql_fetch_row(mezoadatok, "|");
			mysql_free_result();

			split(mezoadatok, mezo, '|');


			strmid(BizzInfo[idx][bMessage], mezo[2], 0, strlen(mezo[2]), 128);
			BizzInfo[idx][bOwned] = strval(mezo[3]);
			strmid(BizzInfo[idx][bOwner], mezo[4], 0, strlen(mezo[4]), 25);
			strmid(BizzInfo[idx][bExtortion], mezo[5], 0, strlen(mezo[5]), 25);
			BizzInfo[idx][bEntranceX] = floatstr(mezo[6]);
			BizzInfo[idx][bEntranceY] = floatstr(mezo[7]);
			BizzInfo[idx][bEntranceZ] = floatstr(mezo[8]);
			BizzInfo[idx][bExitX] = floatstr(mezo[9]);
			BizzInfo[idx][bExitY] = floatstr(mezo[10]);
			BizzInfo[idx][bExitZ] = floatstr(mezo[11]);
			BizzInfo[idx][bLevelNeeded] = strval(mezo[12]);
			BizzInfo[idx][bBuyPrice] = strval(mezo[13]);
			BizzInfo[idx][bEntranceCost] = strval(mezo[14]);
			BizzInfo[idx][bTill] = strval(mezo[15]);
			BizzInfo[idx][bLocked] = strval(mezo[16]);
			BizzInfo[idx][bInterior] = strval(mezo[17]);
			BizzInfo[idx][bVanBelso] = strval(mezo[18]);
			BizzInfo[idx][bProducts] = strval(mezo[19]);
			BizzInfo[idx][bMaxProducts] = strval(mezo[20]);
			BizzInfo[idx][bPriceProd] = strval(mezo[21]);

			bizpick0 = CreateDynamicMapIcon(BizzInfo[0][bEntranceX],  BizzInfo[0][bEntranceY], BizzInfo[0][bEntranceZ], 18, 0, NINCS, NINCS, NINCS, 300.0); //FEGYVERBOLT 1
			bizpick2 = CreateDynamicMapIcon(BizzInfo[2][bEntranceX],  BizzInfo[2][bEntranceY], BizzInfo[2][bEntranceZ], 50, 0, NINCS, NINCS, NINCS, 300.0);  //ÉTTEREM
			bizpick3 = CreateDynamicMapIcon(BizzInfo[3][bEntranceX],  BizzInfo[3][bEntranceY], BizzInfo[3][bEntranceZ], 27, 0, NINCS, NINCS, NINCS, 300.0); // TUNING
			bizpick4 = CreateDynamicMapIcon(BizzInfo[4][bEntranceX],  BizzInfo[4][bEntranceY], BizzInfo[4][bEntranceZ], 43, 0, NINCS, NINCS, NINCS, 300.0); // AUTÓBÉRLÕ 1
			bizpick6 = CreateDynamicMapIcon(BizzInfo[6][bEntranceX],  BizzInfo[6][bEntranceY], BizzInfo[6][bEntranceZ], 13, 0, NINCS, NINCS, NINCS, 300.0); // TELEFON
			bizpick7 = CreateDynamicMapIcon(BizzInfo[7][bEntranceX],  BizzInfo[7][bEntranceY], BizzInfo[7][bEntranceZ], 40, 0, NINCS, NINCS, NINCS, 300.0); // OLAJ
			bizpick8 = CreateDynamicMapIcon(BizzInfo[8][bEntranceX],  BizzInfo[8][bEntranceY], BizzInfo[8][bEntranceZ], 35, 0, NINCS, NINCS, NINCS, 300.0); // REZSI
			bizpick9 = CreateDynamicMapIcon(BizzInfo[9][bEntranceX],  BizzInfo[9][bEntranceY], BizzInfo[9][bEntranceZ], 36, 0, NINCS, NINCS, NINCS, 300.0); // IMPORT CSERE
			bizpick10 = CreateDynamicMapIcon(BizzInfo[10][bEntranceX],  BizzInfo[10][bEntranceY], BizzInfo[10][bEntranceZ], 31, 0, NINCS, NINCS, NINCS, 300.0); // HAZ
			bizpick11 = CreateDynamicMapIcon(BizzInfo[11][bEntranceX],  BizzInfo[11][bEntranceY], BizzInfo[11][bEntranceZ], 46, 0, NINCS, NINCS, NINCS, 300.0); // HIRDETES
			bizpick12 = CreateDynamicMapIcon(BizzInfo[12][bEntranceX],  BizzInfo[12][bEntranceY], BizzInfo[12][bEntranceZ], 63, 0, NINCS, NINCS, NINCS, 300.0); // JAVITÓ
			bizpick13 = CreateDynamicMapIcon(BizzInfo[13][bEntranceX],  BizzInfo[13][bEntranceY], BizzInfo[13][bEntranceZ], 47, 0, NINCS, NINCS, NINCS, 300.0); // 24/7
			bizpick14 = CreateDynamicMapIcon(BizzInfo[14][bEntranceX],  BizzInfo[14][bEntranceY], BizzInfo[14][bEntranceZ], 56, 0, NINCS, NINCS, NINCS, 300.0); // PB
			bizpick16 = CreateDynamicMapIcon(BizzInfo[16][bEntranceX],  BizzInfo[16][bEntranceY], BizzInfo[16][bEntranceZ], 17, 0, NINCS, NINCS, NINCS, 300.0); // MCDONALD
			bizpick17 = CreateDynamicMapIcon(BizzInfo[17][bEntranceX],  BizzInfo[17][bEntranceY], BizzInfo[17][bEntranceZ], 14, 0, NINCS, NINCS, NINCS, 300.0); // CSIRKE
			bizpick18 = CreateDynamicMapIcon(BizzInfo[18][bEntranceX],  BizzInfo[18][bEntranceY], BizzInfo[18][bEntranceZ], 29, 0, NINCS, NINCS, NINCS, 300.0); // PIZZA
			bizpick19 = CreateDynamicMapIcon(BizzInfo[19][bEntranceX],  BizzInfo[19][bEntranceY], BizzInfo[19][bEntranceZ], 49, 0, NINCS, NINCS, NINCS, 300.0); // KOCSMA

			printf("BizzInfo:%d Owner:%s Message:%s Entfee:%d Till:%d Products:%d/%d Interior:%d.",
			idx,
			BizzInfo[idx][bOwner],
			BizzInfo[idx][bMessage],
			BizzInfo[idx][bEntranceCost],
			BizzInfo[idx][bTill],
			BizzInfo[idx][bProducts],
			BizzInfo[idx][bMaxProducts],
			BizzInfo[idx][bInterior]);
		}
		idx++;
	}
	printf("\n================Bizniszek betoltve================\n");
	return 1;
}

stock TeruletekBetoltese()
{
	new idx = 0;
	printf("\n================Területek betöltése folyamatban================\n");
	while(idx < sizeof(TeruletInfo))
	{
		new where[32], query[128], mezoadatok[512], mezo[10][50];
		Format(where, "id='%d'", idx);

		TeruletInfo[idx][Van] = 0;
		if(Mysql_Num(SQL_DB_Terulet, where) == 1)
		{
			TeruletInfo[idx][Van] = 1;
			Format(query, "SELECT * FROM %s WHERE %s", SQL_DB_Terulet, where);
			mysql_query(query);

			mysql_store_result();

			mysql_fetch_row(mezoadatok, "|");
			mysql_free_result();

			split(mezoadatok, mezo, '|');

			strmid(TeruletInfo[idx][tNev], mezo[1], 0, strlen(mezo[1]), 64);
			TeruletInfo[idx][tMinX] = floatstr(mezo[2]);
			TeruletInfo[idx][tMinY] = floatstr(mezo[3]);
			TeruletInfo[idx][tMaxX] = floatstr(mezo[4]);
			TeruletInfo[idx][tMaxY] = floatstr(mezo[5]);
			TeruletInfo[idx][tTulaj] = strval(mezo[6]);
			TeruletInfo[idx][tHaszon] = strval(mezo[7]);
			TeruletInfo[idx][tHaszonMennyi] = strval(mezo[8]);
			TeruletInfo[idx][tFoglalva] = strval(mezo[9]);
			
			TeruletInfo[idx][tZone] = GangZoneCreate(TeruletInfo[idx][tMinX], TeruletInfo[idx][tMinY], TeruletInfo[idx][tMaxX], TeruletInfo[idx][tMaxY]);
			TeruletInfo[idx][tArea] = CreateDynamicRectangle(TeruletInfo[idx][tMinX], TeruletInfo[idx][tMinY], TeruletInfo[idx][tMaxX], TeruletInfo[idx][tMaxY]);

			printf("Terület:%d | Név: %s | Frakció: %s",
			idx,
			TeruletInfo[idx][tNev],
			Szervezetneve[TeruletInfo[idx][tTulaj]-1][0]
			);
		}
		idx++;
	}
	printf("\n================Területek betöltve================\n");
	return 1;
}

public LoadAjtok()
{
	new adatok[13][128];
	new strFromFile2[256];
	new File: file = fopen("Config/ajtok.cfg", io_read);
	new idx = 0;
	printf("\n================Ajtok betoltese folyamatban================\n");
	if (file)
	{
		while (idx < MAXAJTO)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			if(floatstr(adatok[2]) == 0.000000)
			    Ajtok[idx][Van] = 0;
			else
			    Ajtok[idx][Van] = 1;


			strmid(Ajtok[idx][Csak], adatok[0], 0, strlen(adatok[0]), 32);
			strmid(Ajtok[idx][Nev], adatok[1], 0, strlen(adatok[1]), 32);
			Ajtok[idx][BeX] = floatstr(adatok[2]);
			Ajtok[idx][BeY] = floatstr(adatok[3]);
			Ajtok[idx][BeZ] = floatstr(adatok[4]);
			Ajtok[idx][BeInt] = strval(adatok[5]);
			Ajtok[idx][BeVW] = strval(adatok[6]);
			Ajtok[idx][KiX] = floatstr(adatok[7]);
			Ajtok[idx][KiY] = floatstr(adatok[8]);
			Ajtok[idx][KiZ] = floatstr(adatok[9]);
			Ajtok[idx][KiInt] = strval(adatok[10]);
			Ajtok[idx][KiVW] = strval(adatok[11]);
			Ajtok[idx][Zarva] = strval(adatok[12]);

			DestroyDynamic3DTextLabel(ajtobetext[idx])
			DestroyDynamic3DTextLabel(ajtokitext[idx])
			new ajtobe[64];
			format(ajtobe, sizeof(ajtobe), "[Bejárat]%s", Ajtok[idx][Nev]);
			new ajtoki[64];
			format(ajtoki, sizeof(ajtoki), "[Kijárat]%s", Ajtok[idx][Nev]);
			ajtobetext[idx] = CreateDynamic3DTextLabel(ajtobe, 0x22AAFFFF, Ajtok[idx][BeX], Ajtok[idx][BeY], Ajtok[idx][BeZ]+0.5, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Ajtok[idx][BeVW], Ajtok[idx][BeInt], NINCS, 25.0);
			ajtokitext[idx]  = CreateDynamic3DTextLabel(ajtoki, 0x22AAFFFF, Ajtok[idx][KiX], Ajtok[idx][KiY], Ajtok[idx][KiZ]+0.5, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Ajtok[idx][KiVW], Ajtok[idx][KiInt], NINCS, 25.0);
	
	
			if(Ajtok[idx][Van] == 1){
				#if defined KELLAJTOPICKUP
				AjtoPickup[idx] = UjPickup(1318, 23, Ajtok[idx][BeX], Ajtok[idx][BeY], Ajtok[idx][BeZ]);
				#endif
				printf("Ajto %d betoltve! Nev:%s Csak:%s Zarva:%d", idx, Ajtok[idx][Nev], Ajtok[idx][Csak], Ajtok[idx][Zarva]);
			}

			idx++;
		}
		SendClientMessageToAll(COLOR_GREY, " // SzerverInfo // Ajtók újratöltve! ");
		fclose(file);
		printf("\n================Minden ajto betoltve================\n");
	}
	return 1;
}

public SaveBankAdatok()
{
	new File: file2;
	
	new coordsstring[50];
	format(coordsstring, sizeof(coordsstring), "%s,%s", BankTulaj, BankMasodTulaj);
			
	file2 = fopen("Config/bank.cfg", io_write);

	fwrite(file2, coordsstring);
	
	fclose(file2);
	return 1;
}

public LoadBankAdatok()
{
	print("Bank betöltése...");
	new adatok[2][30];
	new strFromFile2[256];
	new File: file = fopen("Config/bank.cfg");
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, adatok, ',');
		strmid(BankTulaj, adatok[0], 0, strlen(adatok[0]), 255);
		strmid(BankMasodTulaj, adatok[1], 0, strlen(adatok[1]), 255);
		fclose(file);
		print("Bank betöltése...");
	}	
	return 1;
}

public SaveHalak(playerid)
{
	new nev[MAX_PLAYER_NAME];
	new szam[100];
	GetPlayerName(playerid, nev, sizeof(nev));
    format(szam, sizeof(szam), "Halak/%s.ini",nev);
	{
		dini_IntSet(szam, "Slot1", pHalak[playerid][pSlot1]);
		dini_IntSet(szam, "Slot2", pHalak[playerid][pSlot2]);
		dini_IntSet(szam, "Slot3", pHalak[playerid][pSlot3]);
		dini_IntSet(szam, "Slot4", pHalak[playerid][pSlot4]);
		dini_IntSet(szam, "Slot5", pHalak[playerid][pSlot5]);
		/*strmid(dini_Set(szam, "Slot1nev"), pHalak[playerid][pSlot1nev], 0, strlen(pHalak[playerid][pSlot1nev]), 255);
		strmid(pHalak[playerid][pSlot2nev], dini_Get(szam, "Slot2nev"), 0, strlen(dini_Get(szam, "Slot2nev")), 255);
		strmid(pHalak[playerid][pSlot3nev], dini_Get(szam, "Slot3nev"), 0, strlen(dini_Get(szam, "Slot3nev")), 255);
		strmid(pHalak[playerid][pSlot4nev], dini_Get(szam, "Slot4nev"), 0, strlen(dini_Get(szam, "Slot4nev")), 255);
		strmid(pHalak[playerid][pSlot5nev], dini_Get(szam, "Slot5nev"), 0, strlen(dini_Get(szam, "Slot5nev")), 255);*/
		dini_Set(szam, "Slot1nev", pHalak[playerid][pSlot1nev]);
		dini_Set(szam, "Slot2nev", pHalak[playerid][pSlot2nev]);
		dini_Set(szam, "Slot3nev", pHalak[playerid][pSlot3nev]);
		dini_Set(szam, "Slot4nev", pHalak[playerid][pSlot4nev]);
		dini_Set(szam, "Slot5nev", pHalak[playerid][pSlot5nev]);
		dini_IntSet(szam, "Horgaszbot", pHalak[playerid][pHorgaszbot]);
		dini_IntSet(szam, "Csali", pHalak[playerid][pCsali]);
    }
	//SendClientMessageToAll(COLOR_GREY, "[Adminlog]: (( Halak lementve. ))"); kivettem, mert csak floodolná az achatet.
	return 1;
}

public SaveBenzinKutak()
{
		new idx;
		new File: file2 = fopen("Config/benzinkutak.cfg", io_write);
		
		while (idx < MAX_BENZINKUT)
		{
			new coordsstring[256];
			format(coordsstring, sizeof(coordsstring), "%s,%s,%f,%f,%f,%f,%d,%d,%d,%d,%d || \n",
			BenzinKutak[idx][bNev],
			BenzinKutak[idx][bBerlo],
			BenzinKutak[idx][bPosX], 
			BenzinKutak[idx][bPosY], 
			BenzinKutak[idx][bPosZ],
			BenzinKutak[idx][bTav],
			BenzinKutak[idx][bMaxBenzin],
			BenzinKutak[idx][bBenzin],
			BenzinKutak[idx][bBenzinAra],
			BenzinKutak[idx][bSzef],
			BenzinKutak[idx][bSzint]
			);
			
			DestroyDynamicMapIcon(benyakutpickup[idx]);
			Delete3DTextLabel(benyakuttextek[idx]);
			new benyairas[1024];
			format(benyairas, sizeof(benyairas), "[%d] %s\nBenzin mennyiség: %d/%d\nBenzin ára: %d Forint\nBérlõ: %s", BenzinKutak[idx][bSzint], BenzinKutak[idx][bNev], BenzinKutak[idx][bMaxBenzin], BenzinKutak[idx][bBenzin], BenzinKutak[idx][bBenzinAra], BenzinKutak[idx][bBerlo]);
			benyakuttextek[idx] = Create3DTextLabel(benyairas, COLOR_LIGHTBLUE, BenzinKutak[idx][bPosX], BenzinKutak[idx][bPosY], BenzinKutak[idx][bPosZ]+1, 25.0, 0, 0);
			benyakutpickup[idx] = CreateDynamicMapIcon(BenzinKutak[idx][bPosX], BenzinKutak[idx][bPosY], BenzinKutak[idx][bPosZ], 55, 0, NINCS, NINCS, NINCS, 300.0);

			fwrite(file2, coordsstring);
			idx++;
		}
		fclose(file2);
		return 1;
}

public LoadKincsek()
{
	print("Kincsek betöltése...");
	new adatok[6][1024];
	new strFromFile2[1024];
	new File: file = fopen("Config/kincs.cfg", io_read);
	new idx = 0;
	if(file)
	{
		while (idx < 400)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');
			
			Kincs[idx][kPosX] = floatstr(adatok[0]);
			Kincs[idx][kPosY] = floatstr(adatok[1]);
			Kincs[idx][kPosZ] = floatstr(adatok[2]);
			
			//kincstextek[idx] = Create3DTextLabel("KINCS", COLOR_PIROS, Kincs[idx][kPosX], Kincs[idx][kPosY], Kincs[idx][kPosZ]+0.5, 10.0, 0);
			kincstextek[idx] = CreateDynamic3DTextLabel("KINCS", COLOR_PIROS, Kincs[idx][kPosX], Kincs[idx][kPosY], Kincs[idx][kPosZ] + 0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, NINCS, NINCS, NINCS, 30.0);
			kincspickup[idx] = CreateDynamicMapIcon(Kincs[idx][kPosX], Kincs[idx][kPosY], Kincs[idx][kPosZ], 55, 0, NINCS, NINCS, NINCS, 300.0);
			idx++;
		}
		fclose(file);
		print("kincsek betöltve.");
		SendClientMessageToAll(COLOR_GREY, " // SzerverInfo // Kincsek betöltve.. ");
	}
	return 1;
}

public LoadBenzinKutak()
{
	print("Benzinkutak betöltése...");
	new adatok[11][256];
	new strFromFile2[256];
	new File: file = fopen("Config/benzinkutak.cfg", io_read);
	new idx = 0;
	if (file)
	{
		while (idx < MAX_BENZINKUT)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			strmid(BenzinKutak[idx][bNev], adatok[0], 0, strlen(adatok[0]), 255);
			strmid(BenzinKutak[idx][bBerlo], adatok[1], 0, strlen(adatok[1]), 255);
			BenzinKutak[idx][bPosX] = floatstr(adatok[2]);
			BenzinKutak[idx][bPosY] = floatstr(adatok[3]);
			BenzinKutak[idx][bPosZ] = floatstr(adatok[4]);
			BenzinKutak[idx][bTav] = floatstr(adatok[5]);
			BenzinKutak[idx][bMaxBenzin] = strval(adatok[6]);
			BenzinKutak[idx][bBenzin] = strval(adatok[7]);
			BenzinKutak[idx][bBenzinAra] = strval(adatok[8]);
			BenzinKutak[idx][bSzef] = strval(adatok[9]);
			BenzinKutak[idx][bSzint] = strval(adatok[10]);
			
			new benyairas[1024];
			format(benyairas, sizeof(benyairas), "[%d] %s\nBenzin mennyiség: %d/%d\nBenzin ára: %d Forint\nBérlõ: %s", BenzinKutak[idx][bSzint], BenzinKutak[idx][bNev], BenzinKutak[idx][bMaxBenzin], BenzinKutak[idx][bBenzin], BenzinKutak[idx][bBenzinAra], BenzinKutak[idx][bBerlo]);
			//benyakuttextek[idx] = Create3DTextLabel(benyairas, COLOR_YELLOW, BenzinKutak[idx][bPosX], BenzinKutak[idx][bPosY], BenzinKutak[idx][bPosZ]+1, 25.0, 0, 0);
			benyakuttextek[idx] = Create3DTextLabel(benyairas, COLOR_LIGHTBLUE, BenzinKutak[idx][bPosX], BenzinKutak[idx][bPosY], BenzinKutak[idx][bPosZ]+1, 25.0, 0, 0);
			
			benyakutpickup[idx] = CreateDynamicMapIcon(BenzinKutak[idx][bPosX], BenzinKutak[idx][bPosY], BenzinKutak[idx][bPosZ], 55, 0, NINCS, NINCS, NINCS, 300.0);
			idx++;
		}
		fclose(file);
		print("Benzinkutak betöltve...");
		SendClientMessageToAll(COLOR_GREY, " // SzerverInfo // Benzinkutak újratöltve! ");
	}
	return 1;
}




public LoadFrakcio()
{
	print("Frakció széfek betöltése...");
	new adatok[45][32], x;
	new strFromFile2[256];
	new File: file = fopen("Config/frakcio.cfg", io_read);
	new idx = 0;
	if (file)
	{
		while (idx < MAX_FRAKCIO)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			FrakcioInfo[idx][fPosX] = floatstr(adatok[0]);
			FrakcioInfo[idx][fPosY] = floatstr(adatok[1]);
			FrakcioInfo[idx][fPosZ] = floatstr(adatok[2]);
			FrakcioInfo[idx][fPenz] = strval(adatok[3]);
			FrakcioInfo[idx][fMati] = strval(adatok[4]);
			FrakcioInfo[idx][fHeroin] = strval(adatok[5]);
			FrakcioInfo[idx][fKokain] = strval(adatok[6]);
			FrakcioInfo[idx][fMarihuana] = strval(adatok[7]);
			FrakcioInfo[idx][fKaja] = strval(adatok[8]);
			FrakcioInfo[idx][fMinrang] = strval(adatok[9]);
			FrakcioInfo[idx][fObject] = strval(adatok[10]);
			FrakcioInfo[idx][fPosA] = floatstr(adatok[11]);
			FrakcioInfo[idx][fObjectID] = strval(adatok[12]);
			FrakcioInfo[idx][fJelszo] = strval(adatok[13]);
			FrakcioInfo[idx][fDeagle] = strval(adatok[14]);
			FrakcioInfo[idx][fSilenced] = strval(adatok[15]);
			FrakcioInfo[idx][fMp5] = strval(adatok[17]);
			FrakcioInfo[idx][fM4] = strval(adatok[17]);
			FrakcioInfo[idx][fShotgun] = strval(adatok[18]);
			FrakcioInfo[idx][fUtolsoTamadas] = strval(adatok[19]);
			for(x = 0; x < 13; x++)
				FrakcioInfo[idx][fFizetes][x] = strval(adatok[x+20]);
			idx++;
		}
		fclose(file);
		print("Frakció széfek betöltve");
	}
	return 1;
}

public LoadRaktar()
{
	print("Frakció széfek betöltése...");
	new adatok[305][5];
	new strFromFile2[512];
	new File: file = fopen("Config/raktar.cfg", io_read);
	if(file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, adatok, ',');
		for(new x = 1; x < 51; x++)
		{
			FrakcioInfo[LMUNKA_CAMORRA][fFegyver][x] = strval(adatok[x]);
			FrakcioInfo[LMUNKA_CAMORRA][fTolteny][x] = strval(adatok[x+50]);
			FrakcioInfo[LMUNKA_YAKUZA][fFegyver][x] = strval(adatok[x+100]);
			FrakcioInfo[LMUNKA_YAKUZA][fTolteny][x] = strval(adatok[x+150]);
			FrakcioInfo[LMUNKA_COLUMBIA][fFegyver][x] = strval(adatok[x+200]);
			FrakcioInfo[LMUNKA_COLUMBIA][fTolteny][x] = strval(adatok[x+250]);
		}
	}
	fclose(file);
	print("Frakció széfek betöltve");
	return 1;
}
		
public LoadCeg()
{
	new cegadat[7][256];
	new strFromFile2[256];
	new File: file = fopen("Config/ceg.cfg", io_read);
	new idx = 0;
	if (file)
	{
		while (idx < MAX_CEG)
		{
			//Delete3DTextLabel(atmtextek[idx]);
			//DestroyDynamicMapIcon(atmpickup[idx]);
			fread(file, strFromFile2);
			split(strFromFile2, cegadat, ',');
			
			strmid(Ceg[idx][cNev], cegadat[0], 0, strlen(cegadat[0]), 255);
			strmid(Ceg[idx][cTulaj], cegadat[1], 0, strlen(cegadat[1]), 255);
			Ceg[idx][cSzint] = strval(cegadat[2]);
			Ceg[idx][cPosX] = floatstr(cegadat[3]);
			Ceg[idx][cPosY] = floatstr(cegadat[4]);
			Ceg[idx][cPosZ] = floatstr(cegadat[5]);
			Ceg[idx][cSzef] =  strval(cegadat[6]);
		
			new cegiras[512];
			format(cegiras, sizeof(cegiras), "%s\nTulajdonos: %s\nFejlesztségi szintje: %d", Ceg[idx][cNev], Ceg[idx][cTulaj], Ceg[idx][cSzint]);
			cegtextek[idx] = Create3DTextLabel(cegiras, 0x22AAFFFF, Ceg[idx][cPosX], Ceg[idx][cPosY], Ceg[idx][cPosZ]+0.5, 25.0, 0, 0);
			cegpickup[idx] = CreateDynamicMapIcon(Ceg[idx][cPosX], Ceg[idx][cPosY], Ceg[idx][cPosZ], 41, 0, NINCS, NINCS, NINCS, 300.0);
		
			idx++;
		}
		fclose(file);
		SendClientMessageToAll(COLOR_GREY, " // SzerverInfo // CÉG-ek újratöltve! ");
	}
	return 1;
}
public LoadATM()
{
	new adatok[5][128];
	new strFromFile2[256];
	new File: file = fopen("Config/atm.cfg", io_read);
	new idx = 0;
	if (file)
	{
		while (idx < MAX_ATM)
		{
			Delete3DTextLabel(atmtextek[idx]);
			DestroyDynamicMapIcon(atmpickup[idx]);
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			ATM[idx][aPosX] = floatstr(adatok[0]);
			ATM[idx][aPosY] = floatstr(adatok[1]);
			ATM[idx][aPosZ] = floatstr(adatok[2]);
			ATM[idx][aPosA] = floatstr(adatok[3]);
			ATM[idx][aObjectID] = strval(adatok[4]);
			
			atmtextek[idx] = Create3DTextLabel("Bankautomata", 0x22AAFFFF, ATM[idx][aPosX], ATM[idx][aPosY], ATM[idx][aPosZ]+0.5, 25.0, 0, 0);
			atmpickup[idx] = CreateDynamicMapIcon(ATM[idx][aPosX], ATM[idx][aPosY], ATM[idx][aPosZ], 52, 0, NINCS, NINCS, NINCS, 300.0);
			
			idx++;
		}
		fclose(file);
		SendClientMessageToAll(COLOR_GREY, " // SzerverInfo // ATM-ek újratöltve! ");
	}
	return 1;
}

public SzefToltes()
{
	for(new x = 0; x < MAX_FRAKCIO; x++)
	{
		if(FrakcioInfo[x][fObject])
		{
			if(FrakcioInfo[x][fObjectID] != 0) 
			{
				DestroyDynamicObject(FrakcioInfo[x][fObjectID]); 
				FrakcioInfo[x][fObjectID] = 0;
			}	
			FrakcioInfo[x][fObjectID] = CreateDynamicObject(2332, FrakcioInfo[x][fPosX], FrakcioInfo[x][fPosY], FrakcioInfo[x][fPosZ]-0.6, 0.0, 0.0, FrakcioInfo[x][fPosA]);
		}	
	}
	return 1;
}

public ATMToltes()
{
	for(new x = 0; x < MAX_ATM; x++)
	{
		ATM[x][aObjectID] = CreateDynamicObject(2942, ATM[x][aPosX], ATM[x][aPosY], ATM[x][aPosZ]-0.4, 0.0, 0.0, ATM[x][aPosA]);
	}
	return 1;
}


//------------------------------------------------------------------------------------------------------
public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnGameModeInit()
{
	ManualVehicleEngineAndLights();
	Streamer_TickRate(200);
	print("Játékmód betöltése folyamatban...");
	GetServerVarAsString("bind", server_ip, sizeof(server_ip));
	if(HamisSzerver())
	{
		FatalServerStopping();
		GameModeExit();
		return 1;
	}
	port = GetServerVarAsInt("port");
	printf("== Port: %d ==", port);
	//SetPDistance(0);
    DisableInteriorEnterExits();
	EnableStuntBonusForAll(false);
	ShowNameTags(true);
	SetNameTagDrawDistance(250.0);
	DisableNameTagLOS();

	print("Szerver indul...");	
	print("MySQL kapcsolódás...");
	mysql_init(LOG_ALL);
	MysqlKapcsolodas(true);
	print("MySQL kapcsolódás sikeres");

	mysql_query("UPDATE playerek SET Online='0'");

    new string[MAX_PLAYER_NAME];
    new string1[MAX_PLAYER_NAME];
	for(new c = 0; c < sizeof(Gas); c++)
	{
		Gas[c] = 60;
	}
	
	LoadBankAdatok();
	LoadFrakcio();
	SzefToltes();
	LoadIRC();
	LoadFamilies();
	LoadBoxer();
	LoadTurfs();
	LoadPapers();
	LoadInts();
	LoadIgenylesek();
	LoadAjtok();

	LoadBizz();
	LoadHouse();
	AllCarSpawn();
	LoadBenzinKutak();
	LoadATM();
	ATMToltes();
	LoadRaktar();
	LoadStuff();
	TeruletekBetoltese();
	
	for(new b = 0; b < MAX_BENZINKUT; b++)
	{
		if(BenzinKutak[b][bMaxBenzin] != 10000)
		{
			BenzinKutak[b][bMaxBenzin] = 10000;
			BenzinKutak[b][bBenzin] = 500;
			BenzinKutak[b][bBenzinAra] = BizzInfo[BIZ_OLAJ][bEntranceCost];
		}
		if(strlen(BenzinKutak[b][bNev]) < 2)
		{
			strmid(BenzinKutak[b][bNev], BizzInfo[BIZ_OLAJ][bMessage], 0, strlen(BizzInfo[BIZ_OLAJ][bMessage]), 255);
		}
	}
	

	IRCInfo[0][iPlayers] = 0; IRCInfo[1][iPlayers] = 0; IRCInfo[2][iPlayers] = 0;
	IRCInfo[3][iPlayers] = 0; IRCInfo[4][iPlayers] = 0; IRCInfo[5][iPlayers] = 0;
	IRCInfo[6][iPlayers] = 0; IRCInfo[7][iPlayers] = 0; IRCInfo[8][iPlayers] = 0;
	IRCInfo[9][iPlayers] = 0;
	News[hTaken1] = 0; News[hTaken2] = 0; News[hTaken3] = 0; News[hTaken4] = 0; News[hTaken5] = 0;
	format(string, sizeof(string), "Nothing");
	strmid(News[hAdd1], string, 0, strlen(string), 255);
	strmid(News[hAdd2], string, 0, strlen(string), 255);
	strmid(News[hAdd3], string, 0, strlen(string), 255);
	strmid(News[hAdd4], string, 0, strlen(string), 255);
	strmid(News[hAdd5], string, 0, strlen(string), 255);
	format(string1, sizeof(string1), "No-one");
	strmid(News[hContact1], string1, 0, strlen(string1), 255);
	strmid(News[hContact2], string1, 0, strlen(string1), 255);
	strmid(News[hContact3], string1, 0, strlen(string1), 255);
	strmid(News[hContact4], string1, 0, strlen(string1), 255);
	strmid(News[hContact5], string1, 0, strlen(string1), 255);
	SetGameModeText(modnev);
	SetMapName(mapnev);
	
	format(motd, sizeof(motd), "Szerver: Üdvözöllek a szerveren..");
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime)
	{
		SetWorldTime(wtime);
	}
	//EnableZoneNames(1);
	AllowInteriorWeapons(1);
	AllowAdminTeleport(1);
	//UsePlayerPedAnims();
	SetNameTagDrawDistance(50);
	for(new k = 0; k < MAX_VEHICLES; k++)
	{
	    VanBombaBenne[k] = NINCS;
	}
	for(new v = 0; v < MAXVSKOCSI; v++)
	{
		Matrica[v] = 3;
	}
	// CreatedCars check
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
	    CreatedCars[i] = 0;
	}
	// Zones
	for(new i = 0; i < sizeof(TurfInfo); i++)
	{
	    Turfs[i] = GangZoneCreate(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY]);
	}
	// Player Class's
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425, 0, 0, 0, 0, 0, 0);
	}
	for(new i = 0; i < sizeof(NPCKocsi); i++)
		NPCKocsi[i] = false;

	//================================= Kapuk ===========================//
	
	vhkapu1 = CreateDynamicObject(5020, 363.53530883789, 158.75035095215, 1026.2210693359, 0, 0, 270.67565917969);
	vhkapu2 = CreateDynamicObject(5020, 361.93688964844, 158.76313781738, 1026.2210693359, 0, 0, 270.67565917969);
	
	
	
	LSPDKapu = CreateDynamicObject(980,1588.239868,-1638.272827,14.609522,0.000000,0.000000,180);
	LSPDKapu2 = CreateDynamicObject(980, 1539.5, -1627.6, 15, 0.000000, 0.000000, 90);
	LSPDAjto = CreateDynamicObject(980,251.2796, 72.751, 1002.396, 0.000000,0.000000,0);
	LSPDAjto2 = CreateDynamicObject(980,248.136093, 77.698326, 999.508544, 0.000000,90.000000,270);
	LSPDAjto3 = CreateDynamicObject(980,244.844192, 77.636260, 999.737487, 0.000000,90.000000,270);
	LSPDAjto4 = CreateDynamicObject(980,262.344085, 89, 1001.04, 0.000000,90.000000,90.000);
	cella1 = CreateDynamicObject(2930, 266.3984375, 88.337036132813, 1002.6759033203, 0, 0, 0);
	cella2 = CreateDynamicObject(2930, 266.3984375, 83.844039916992, 1002.6759033203, 0, 0, 0);
	
	ujkatonakapu1 = CreateDynamicObject(980, 310.51953125, 1786.7412109375, 26.949998855591, 0.5987548828125, 0, 180.45043945313);
	ujkatonakapu2 = CreateDynamicObject(968, 315.8291015625, 1824.1689453125, 25.987161636353, 0, 267.99499511719, 0.4998779296875);
	//ujkatonakapu3 = CreateDynamicObject(2957, 226.51953125, 1872.5595703125, 14.354160308838, 0, 0, 90);
	ujkatonakapu3 = CreateDynamicObject(980, 226.51953125, 1872.5595703125, 12.1, 0, 0, 90);
	//ujkatonakapu4 = CreateDynamicObject(2938, 213.46047973633, 1875.8570556641, 13.81852722168, 0, 0, 270.22509765625);
	ujkatonakapu4 = CreateDynamicObject(980, 213.46047973633, 1875.8570556641, 13.81852722168, 0, 0, 180.22509765625);
	
	sfpdkapu = CreateDynamicObject(8378, -1627.539185, 688.910339, 15.875875, 0.9630, 0.0000, 0.0000); // SFPD kapu
	swatkapu1 = CreateDynamicObject(985, 2091.7912597656, -1867.4818115234, 14.046875, 0, 0, 270.31530761719); // CreateDynamicObject(971, 365.07421875, -1469.46484375, 31.278694152832, 0, 0, 217.07336425781);
 	CreateDynamicObject(973, -1695.534424, 689.405762, 24.730844, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(973, -1686.182373, 689.409790, 24.730844, 0.0000, 0.0000, 0.0000);
	
	//Egyéb kapuk
	katonakapu1 =CreateDynamicObject(971, 2720.014160, -2405.310791, 14.208189, 0.0000, 0.0000, 90.0000);
	katonakapu2 =CreateDynamicObject(971, 2720.101074, -2503.901611, 14.019474, 180.4818, 0.0000, 90.0000);
	
	//VPOP
	VPOPkapu1 = CreateDynamicObject(971, 777.7919921875, -1384.720703125, 13.066568374634, 0, 0, 0);
	VPOPkapu2 = CreateDynamicObject(971, 777.6494140625, -1330.0947265625, 12.966569900513, 0, 0, 358.24768066406);

//SWATPAJZS
	//spajzs1 = CreateDynamicObject(1555,0,0,-100,0,0,0);
	//spajzs2 = CreateDynamicObject(1555,0,0,-100,0,0,0);
	//spajzs3 = CreateDynamicObject(1555,0,0,-100,0,0,0);

    //MS13 kapu/lezáró
	/*ms13kapu = CreateDynamicObject(975, 973.650879, -1295.328491, 14.221565, 0.0000, 0.0000, 180.0000);
	ms13kapu2 = CreateDynamicObject(975, 962.422668, -1274.239624, 15.975883, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(974, 992.395386, -1233.207520, 18.709026, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(992, 1035.673706, -1231.088745, 17.449991, 0.0000, 0.0000, 0.0000);*/

	//Hitman & Yakuza
	/*hitmankapu = CreateDynamicObject(974, -362.834961, -1473.366821, 27.504303, 0.0000, 0.0000, 90.0000); // Hitman Kapu
	hitmankapu2 = CreateDynamicObject(974, -362.901794, -1467.799927, 27.504303, 0.0000, 0.0000, 90.0000); // Hitman Kapu
	hitmankapu3 = CreateDynamicObject(974, -404.705658, -1388.603760, 25.391323, 0.0000, 0.0000, 101.2500); // Hitman Kapu
	hitmankapu4 = CreateDynamicObject(974, -405.440094, -1384.505981, 25.460585, 0.0000, 0.0000, 281.2500); // Hitman Kapu*/ 
	AutoSzereloKapu = CreateDynamicObject(974, -1917.303833, 301.403687, 40.874542, 0.0000, 0.0000, 0.0000);

	//TGG TGG nek nincs kapuja kivetette az összeset
	/*tggkapu2 = CreateDynamicObject(980, 2264.115234, -2254.797852, 15.320267, 0.0000, 0.0000, 315.0000);
	tggkapu3 = CreateDynamicObject(980, 2176.530518, -2256.397217, 16.543396, 0.0000, 0.0000, 225.0000);
	tggkapu4 = CreateDynamicObject(1498,2119.631,-2275.212,19.531,0.0,0.0,135.000);
	tggkapu5 = CreateDynamicObject(971,2135.261,-2285.507,14.825,0.0,0.0,-135.000);*/
	
	//Camorra
	Camorrakapu[0] = CreateDynamicObject(1337, 141.2569732666, 156.84545898438, 486.60430908203, 0, 0, 0);
	Camorrakapu[1] = CreateDynamicObject(1337, 149.73329162598, 148.13616943359, 511.96417236328, 0, 0, 0);
	Camorrakapu[2] = CreateDynamicObject(980, -2546.2900390625, 30.683788299561, 17.626516342163, 0, 0, 0);
	Camorrakapu[3] = CreateDynamicObject(980, -2539.265625, 52.763828277588, 7.5905790328979, 0, 90, 90);
	Camorrakapu[4] = CreateDynamicObject(988, -2594.1003417969, -40.896503448486, 2.7281250953674, 0, 0, 270);
	Camorrakapu[5] = CreateDynamicObject(988, -2594.142578125, 9.3017578125, 2.7192001342773, 0, 0, 270);
	Camorrakapu[6] = CreateDynamicObject(976, 1772.1275634766, -1503.2954101563, -81.762428283691, 0, 0, 180);

	//Columbia

	//Fort
	FortKapu = CreateDynamicObject(988, 96.694069, 1920.418091, 17.354036, 0.0000, 0.0000, 270.0000);

	//Kereskedõ
	KereskedoKapu = CreateDynamicObject(980, -1697.0, 23.0, 5.328079, 0.000000, 0.000000, 314.829987);
	KereskedoKapuHQn = CreateDynamicObject(980, -2017.732178, -261.280273, 37.093704, 0.0000, 0.0000, 0.0000);

	GSFajto = CreateDynamicObject(971, 2222.7507324219, -1651.8168945313, -40.909103393555, 0, 0, 270);
	GSFajto2 = CreateDynamicObject(971, 2221.3486328125, -1660.6892089844, -41.472351074219, 0, 0, 0);
	//Ajto0 = CreateDynamicObject(968, 2942.634765, -2054.258056, 3.549163, 0.000000, 91.000000, 90.000000);

	/*FbiKapu1 = CreateDynamicObject(980,777.988098,-1384.805908,13.971389,0.000000,0.000000,0.213290);
	FbiKapu2 = CreateDynamicObject(980,778.199890,-1330.333374,13.546875,0.000000,0.000000,178.574600);*/
 	AirGate = CreateDynamicObject(980,1961.443481,-2189.781494,13.546875,0.000000,0.000000,0.015977);

	
	// Ez az igazi Vagos kapu:
	
	VagosKapu1 = CreateDynamicObject(980, 1012.3286132813, -1544.8048095703, 14.925149917603, 0, 359.25, 269.75);
	VagosKapu2 = CreateDynamicObject(2679, 958.87548828125, -1542.7796630859, 16.413042068481, 0, 0, 90);
	
	//LsTaxiHQ
	LSTaxiKapu =	CreateDynamicObject(980, 1811.6462402344, -1890.2261962891, 15.180500030518, 0, 0, 270);
	
	//RSM
	Columbiakapu[0] = CreateDynamicObject(2933, -1530.2779541016, 482.50927734375, 7.895302772522, 0, 0, 0);
	Columbiakapu[1] = CreateDynamicObject(971, -1333.9532470703, 487.49685668945, 10.850687980652, 0, 0, 0);
	Columbiakapu[2] = CreateDynamicObject(980, -1422.2196044922, 494.63500976563, 4.8124537467957, 0, 0, 90);
	Columbiakapu[3] = CreateDynamicObject(2634, -1347.8837890625, 499.35293579102, 18.581729888916, 0, 0, 0);

	//Leonnak az a kapu
	/*LeonKapu = CreateDynamicObject(971, 322.01321411133, -1187.7904052734, 77.659317016602, 0, 0, 37.71484375);
	LeonKapu2 = CreateDynamicObject(971, 1688.2650146484, -1450.921875, 16.06679725647, 0, 0, 180.04040527344);*/
	hatar1 = CreateDynamicObject(968, 41.4873046875, -1532.8486328125, 5.3060297966003, 359.033203125, 3.2991638183594, 261.32629394531);
	hatar2 = CreateDynamicObject(968, 61.2470703125, -1530.4189453125, 5.0277938842773, 359.033203125, 7.2691650390625, 80.4638671875);
	SetDynamicObjectRot(hatar1, 0, 0, 173.04718017578); // 173.04718017578	
	SetDynamicObjectRot(hatar2, 0, 0, 173.04718017578); // 173.04718017578
	

	YakuzaKapu = CreateDynamicObject(986, -2212.0959472656, 580.44555664063, 35.4140625, 0, 0, 180);
	YakuzaKapu2 = CreateDynamicObject(986, -2241.6164550781, 643.78747558594, 50.198616027832, 0, 0, 90);

	Ronkapu=CreateDynamicObject(971, 321.66430664063, -1188.0876464844, 76.294494628906, 0, 0, 38);
	DeanObject[0] = CreateDynamicObject(986, -670.34442138672, 966.6923828125, 12.099822998047, 0, 0, 88.75);
	DeanObject[1] = CreateDynamicObject(980, -693.38104248047, 966.09802246094, 14.001571655273, 0, 0, 269.5);
	OktatoKapu = CreateDynamicObject(971, 1041.4748535156, -1459.7044677734, 15, 0, 0, 90);
	//UjOktatoKapu = CreateDynamicObject(976, -2051.4443359375, -79.9228515625, 34.5, 0, 0, 0);
	//FBI kapuk
	FbiTitokKapu1 = CreateDynamicObject(3115, 1389.2653808594, -1892.9382324219, 22.941055297852, 0, 0, 269.73913574219);
  	FbiTitokKapu2 = CreateDynamicObject(10184, 1349.7514648438, -1879.2152099609, 8.0681505203247, 0, 0, 270);
	FbiTitokKapu3 = CreateDynamicObject(3037, 1359.1774902344, -1838.5638427734, 9.3379783630371, 0, 0, 270);
	Fbibelso = CreateDynamicObject(2634, 228.2333984375, 151.2314453125, 1003.3428344727, 0, 0, 270.24719238281);
	Fbilezaro1 =CreateDynamicObject(987, 234.6328125, 169.4833984375, 994.68664550781, 0, 0, 0);
	Fbilezaro2 = CreateDynamicObject(987, 246.5712890625, 169.4853515625, 994.68664550781, 0, 0, 0);
	Fbilezaro3 = CreateDynamicObject(971, 238.7548828125, 139.3955078125, 995.11334228516, 0, 0, 0);
	Fbiparkolo1 = CreateDynamicObject(980, 1268.9294433594, -1844.1071777344, 15.120470046997, 0, 0, 0);
	Fbiparkolo2 = CreateDynamicObject(980, 1214.0107421875, -1844.5538330078, 15.120470046997, 0, 0, 0);
	
	//Mentõsöknek
	Mentokapu[0] = CreateDynamicObject(980, 1141.0126953125, -1292.4871826172, 15.356519699097, 0, 0, 0.75);
	Mentokapu[1] = CreateDynamicObject(980, 1144.2947998047, -1369.1510009766, 15.535444259644, 0, 0, 180.5);
	Mentokapu[2] = CreateDynamicObject(969, 1074.0250244141, -1211.1706542969, 15.914323806763, 0, 350, 86);
	Mentokapu[3] = CreateDynamicObject(969, 1114.6129150391, -1159.3142089844, 22.853527069092, 0, 0, 0);
	
	// MUNKA 3D TEXT LABELEK
	Create3DTextLabel("Kamionos állásinterjú\n((/munka))", COLOR_YELLOW, -2498.4946,1853.9814,8.4000+0.5, 25.0, 0, 0);
	
	CreateDynamicObject(6959,-2360.6062000,2309.6179200,1.9860000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1223,-2425.8864700,2299.5148900,1.8300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1223,-2340.5500500,2328.9499500,1.8300000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(1223,-2341.0627400,2299.4582500,1.8300000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(5153,6545.2700200,251.5099900,-4151.4799800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13604,-2355.0000000,5776.0000000,2311.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13604,-2363.0000000,4060.0000000,2308.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13604,-2368.0000000,1357.0000000,2306.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13604,-10064.7597700,831.2899800,-6478.8798800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13604,-2377.0000000,3386.0000000,2297.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13604,-2374.0000000,4475.0000000,2297.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(16367,-2359.0000000,7095.0000000,2310.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(16367,-2356.0000000,8403.0000000,2314.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13604,3431.8100600,3389.8200700,-8142.8999000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13593,-23920000.0000000,0.0000000,63450000.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13593,-2396.0000000,9619.0000000,2303.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3819,-2424.2700200,2304.0200200,2.8400000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3819,-2424.1899400,2294.2600100,2.8400000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3819,-2342.5300300,2294.3798800,2.7200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3819,-2342.6298800,2303.9099100,2.7200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(4227,-2405.9799800,2322.6999500,2.7600000,0.0000000,0.0000000,12.0000000); //
	CreateDynamicObject(18664,-2361.4199200,2329.4799800,3.0400000,28.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18659,-2365.6499000,2329.4899900,2.9700000,-28.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(5297,-2615.2900400,2223.5400400,12.9500000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19381,-2629.8898900,2270.6499000,7.3400000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19381,-2629.8898900,2260.1499000,7.3400000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19381,-2629.8898900,2249.6599100,7.3400000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19381,-2639.5200200,2270.6499000,7.3400000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19381,-2629.8898900,2239.1599100,7.3400000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(17033,-2603.8200700,2271.4199200,6.0000000,0.0000000,0.0000000,-127.0000000); //
	CreateDynamicObject(17033,-2598.0100100,2268.5200200,6.0000000,0.0000000,0.0000000,40.0000000); //
	CreateDynamicObject(17033,-2603.3200700,2257.8100600,6.0000000,0.0000000,0.0000000,-127.0000000); //
	CreateDynamicObject(17033,-2599.8400900,2252.3701200,6.0000000,0.0000000,0.0000000,40.0000000); //
	CreateDynamicObject(17033,-2597.8000500,2248.8501000,3.0500000,0.0000000,0.0000000,-185.0000000); //
	CreateDynamicObject(17033,-2605.5000000,2244.0900900,-0.9800000,0.0000000,0.0000000,-149.0000000); //
	CreateDynamicObject(19377,-2605.4599600,2249.0600600,3.2600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,-2605.4899900,2239.7099600,3.2600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,-2610.2199700,2234.8400900,3.2600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19377,-2619.8601100,2234.8400900,3.2600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2605.7600100,2222.5100100,-5.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.7600100,2210.5100100,-5.0300000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(5297,-2615.2900400,2113.6599100,12.9500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2605.7600100,2114.6899400,-5.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.7600100,2126.6899400,-5.0300000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2643.7399900,2126.6999500,-5.0300000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2668.7600100,2126.6899400,-5.0300000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2624.8100600,2114.6899400,-5.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19425,-2611.7099600,2278.6201200,7.2000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19425,-2615.0200200,2278.6201200,7.2000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19425,-2618.3200700,2278.6201200,7.2000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2622.7099600,2280.2600100,7.3440000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2622.7099600,2276.7600100,7.3440000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2620.7600100,2276.7600100,7.3400000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2620.7600100,2280.2600100,7.3400000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2621.5300300,2274.9099100,7.2700000,0.0000000,90.0000000,45.0000000); //
	CreateDynamicObject(19362,-2609.5200200,2276.7600100,7.3400000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2606.8200700,2276.7600100,7.3440000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2606.8200700,2280.2600100,7.3440000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2609.5200200,2280.2600100,7.3400000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2608.7500000,2275.1298800,7.2700000,0.0000000,90.0000000,45.0000000); //
	CreateDynamicObject(1223,-2609.5800800,2256.8400900,7.4500000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1223,-2621.0100100,2232.3601100,9.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1223,-2609.5800800,2208.1398900,14.2400000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1223,-2621.0100100,2186.0800800,16.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1223,-2609.5800800,2166.6201200,17.5100000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(16564,-2229.6230500,2325.6377000,3.9900000,0.0000000,0.0000000,90.1000000); //
	CreateDynamicObject(1258,-2237.0600600,2324.2500000,4.7800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2942,-2243.8000500,2316.6899400,4.7000000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(1280,-2236.9799800,2321.5500500,4.4700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1280,-2243.8000500,2312.5000000,4.4700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1280,-2243.8300800,2309.9699700,4.4700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1258,-2237.0800800,2324.8898900,4.7800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(983,-2241.1201200,2342.9099100,4.6580000,0.0000000,0.0000000,89.8000000); //
	CreateDynamicObject(983,-2234.6999500,2342.9299300,4.6580000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(8947,-2217.2600100,2317.0400400,1.4900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8947,-2236.8100600,2317.0100100,0.9900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8947,-2236.8200700,2330.6999500,0.9800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8947,-2218.7099600,2330.5900900,0.9800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8947,-2231.8798800,2297.6499000,1.5000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(5409,-2533.8898900,2351.1599100,8.5000000,0.2500000,0.2500000,0.4000000); //
	CreateDynamicObject(3465,-2511.1001000,2359.6001000,5.5010000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3465,-2511.1001000,2356.3999000,5.5000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3465,-2511.1001000,2352.8000500,5.5000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3465,-2511.1999500,2349.5000000,5.5000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1412,-2523.4299300,2341.1298800,4.0400000,0.0000000,0.0000000,358.9200100); //
	CreateDynamicObject(1412,-2544.5000000,2348.8999000,5.3000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1318,-2506.4199200,2343.6398900,4.0843900,0.0000000,90.0000000,270.8400000); //
	CreateDynamicObject(1318,-2514.8898900,2343.6398900,4.0844000,0.0000000,90.0000000,270.8400000); //
	CreateDynamicObject(1318,-2548.5200200,2343.6398900,4.0844000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(1412,-2544.5000000,2343.6999500,5.3000000,0.0000000,0.0000000,89.5000000); //
	CreateDynamicObject(1412,-2518.7700200,2343.6799300,4.0400000,0.0000000,0.0000000,89.5000000); //
	CreateDynamicObject(9192,-2511.1694300,2342.6074200,8.5000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2942,-2524.1899400,2353.4799800,4.6200000,0.0000000,0.0000000,87.8300000); //
	CreateDynamicObject(1280,-2524.1799300,2343.4099100,4.5000000,0.0000000,0.0000000,181.0000000); //
	CreateDynamicObject(1280,-2524.2099600,2345.5100100,4.5010000,0.0000000,0.0000000,181.0000000); //
	CreateDynamicObject(1216,-2524.2299800,2348.7299800,4.6500000,0.0000000,0.0000000,91.0000000); //
	CreateDynamicObject(1258,-2521.8864700,2341.5302700,4.7000000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1341,-2523.2500000,2356.5500500,4.9800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1340,-2522.9599600,2359.9899900,5.1600000,0.0000000,0.0000000,360.0000000); //
	CreateDynamicObject(1318,-2541.3000500,2343.6398900,4.0844000,0.0000000,90.0000000,-90.0000000); //
	CreateDynamicObject(2714,-2524.4199200,2348.4499500,6.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(16360,-2531.5100100,2345.2500000,4.8800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8947,-2499.8501000,2363.7600100,0.7300000,90.0000000,90.0000000,180.0000000); //
	CreateDynamicObject(1223,-2492.6799300,2370.2800300,9.1400000,0.0000000,0.0000000,359.3200100); //
	CreateDynamicObject(1223,-2492.8000500,2356.1599100,9.1400000,0.0000000,0.0000000,359.3200100); //
	CreateDynamicObject(1280,-2492.5900900,2357.7399900,9.5600000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1280,-2492.5500500,2368.6599100,9.5600000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1280,-2492.5800800,2360.2900400,9.5600000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1280,-2492.5700700,2366.1298800,9.5600000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2942,-2492.5100100,2371.0900900,9.7700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1216,-2490.0100100,2371.9199200,9.7300000,0.0000000,0.0000000,5.0000000); //
	CreateDynamicObject(1223,-2485.6799300,2341.4499500,3.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1223,-2476.2500000,2341.4499500,3.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2942,-2443.6179200,2268.4572800,4.6000000,0.0000000,0.0000000,272.0000000); //
	CreateDynamicObject(1258,-2443.5178200,2265.6804200,4.6000000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(3851,-2477.6201200,2315.5000000,5.5800000,90.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(3851,-2481.7199700,2319.6001000,5.5800000,90.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(3851,-2484.9799800,2320.9099100,5.5800000,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3851,-2488.9399400,2320.9099100,5.5800000,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1274,-2479.4399400,2317.6499000,7.2800000,0.0000000,0.0000000,135.0000000); //
	CreateDynamicObject(5844,-2461.9899900,2253.9199200,3.7400000,0.0000000,0.0000000,359.8999900); //
	CreateDynamicObject(6295,-2377.6799300,2216.1499000,27.2500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(16008,-2615.2900400,2168.3200700,8.0600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3286,-2272.8747600,2370.0825200,9.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9915,-2510.1191400,2051.3295900,7.3700000,0.0000000,0.0000000,-25.0000000); //
	CreateDynamicObject(9345,-2505.1301300,2046.3042000,7.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(7312,-2541.3100600,2351.5700700,6.1800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3501,-2590.6799300,2083.6101100,10.4800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18241,-2471.6362300,2082.5349100,7.3700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(12843,-2540.2341300,1988.6456300,7.4058000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(12844,-2540.2338900,1991.6230500,9.3769000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(4021,-2577.6472200,2005.7934600,13.4880000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(16067,-2331.4243200,2052.3984400,7.3800000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(11454,-2528.9243200,2033.0954600,7.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(18474,-2257.7299800,2398.8898900,6.2800000,0.0000000,0.0000000,351.3200100); //
	CreateDynamicObject(9259,-2475.3549800,2052.3786600,12.6184000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(10457,-2583.8901400,2134.8640100,7.3200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2637.8100600,2139.6899400,6.9700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2662.8100600,2139.6899400,6.9700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(17034,-2666.9299300,2166.8898900,3.0500000,0.0000000,0.0000000,-185.0000000); //
	CreateDynamicObject(17034,-2683.4299300,2156.0800800,3.0500000,0.0000000,0.0000000,-185.0000000); //
	CreateDynamicObject(17034,-2672.3100600,2166.2500000,3.0500000,0.0000000,0.0000000,-185.0000000); //
	CreateDynamicObject(17034,-2697.5900900,2148.6101100,-4.8800000,0.0000000,0.0000000,-184.9400000); //
	CreateDynamicObject(17034,-2695.2600100,2155.6699200,-4.8800000,0.0000000,0.0000000,-184.9400000); //
	CreateDynamicObject(18981,-2637.8100600,2141.9899900,6.9600000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2662.8100600,2141.9899900,6.9600000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2625.7600100,2139.6899400,-5.3300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2625.7600100,2141.9899900,-5.3300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(7893,-2641.2299800,2164.4399400,7.8000000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(18981,-2637.8100600,2113.6899400,6.9700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2637.8100600,2088.6899400,6.9700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2662.8100600,2088.6899400,6.9700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2662.8100600,2113.6899400,6.9700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2625.5918000,2062.6894500,-5.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2637.7585400,2075.6894500,-5.0300000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(17034,-2652.8601100,2175.3898900,3.0500000,24.0000000,0.0000000,-314.0000000); //
	CreateDynamicObject(17034,-2660.8200700,2169.1001000,3.0500000,24.0000000,0.0000000,-314.0000000); //
	CreateDynamicObject(18981,-2617.8000500,2125.1101100,6.9400000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2617.8000500,2138.1101100,-5.0600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(8947,-2235.8100600,2304.6699200,1.4800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8947,-2537.1074200,2033.1615000,12.3700000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1408,-2496.2932100,2040.3321500,7.8550000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(11453,-2494.4384800,2034.5808100,7.7400000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1223,-2260.2399900,2398.5800800,4.1000000,0.0000000,0.0000000,44.0000000); //
	CreateDynamicObject(8947,-2255.5100100,2297.6499000,-0.9900000,-12.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2615.2900400,2154.8300800,-4.7500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2615.2900400,2153.8300800,-4.7500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2615.2900400,2152.8300800,-4.7500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2615.2900400,2173.9399400,-4.7500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2615.2900400,2174.9399400,-4.7500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2615.2900400,2175.9399400,-4.7500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2640.2800300,2174.7900400,-5.0100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2604.8000500,2142.6799300,-5.0600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2604.8000500,2121.5300300,-5.0700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2577.6340300,2096.0312500,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2577.6340300,2071.0500500,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(16767,-2523.9655800,2180.2456100,13.3824000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2600,-2092.1298800,2309.9299300,25.6200000,0.0000000,0.0000000,-14.0000000); //
	CreateDynamicObject(2600,-2089.1101100,2310.8400900,25.6200000,0.0000000,0.0000000,40.0000000); //
	CreateDynamicObject(2600,-2094.8501000,2311.6001000,25.6200000,0.0000000,0.0000000,-66.0000000); //
	CreateDynamicObject(2600,-2095.3000500,2314.6799300,25.6200000,0.0000000,0.0000000,-91.0000000); //
	CreateDynamicObject(2600,-2093.3701200,2317.0700700,25.6200000,0.0000000,0.0000000,-149.0000000); //
	CreateDynamicObject(3763,-2061.9199200,2247.5400400,42.8400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(16001,-2050.6999500,2249.2099600,16.5700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(12945,-2571.8161600,2023.6900600,6.9440000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(12946,-2570.7771000,2121.0117200,7.2100000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(12947,-2457.8759800,2099.7036100,7.3720000,0.0000000,0.0000000,213.2834900); //
	CreateDynamicObject(12951,-2538.7885700,2142.1262200,7.3840000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(12953,-2597.6108400,2004.1546600,11.6530000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(18244,-2565.9052700,2038.9942600,15.5800000,90.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(18243,-2566.1213400,2040.6709000,7.1700000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(12959,-2500.0590800,2064.6765100,6.9992000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11453,-2542.0197800,2021.2719700,15.6190000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4563000,2003.4552000,7.3500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1250,-2497.0346700,2032.0753200,7.9880000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1251,-2496.6674800,2028.6409900,8.4009000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1319,-2496.8168900,2032.1195100,7.9038000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(967,-2497.1218300,2034.2585400,7.5900000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1368,-2495.3024900,2059.9375000,8.1240000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1308,-2606.7290000,2262.9729000,6.9700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8083,-2587.4199200,2284.7299800,15.2900000,0.0000000,2.0000000,63.0000000); //
	CreateDynamicObject(1308,-2607.0830100,2204.3862300,13.0700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8083,-2607.0500500,2233.5500500,19.2800000,0.0000000,6.0000000,104.0000000); //
	CreateDynamicObject(1308,-2607.6687000,2145.3129900,14.8700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1308,-2607.8193400,2086.5217300,7.6412500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2591.8000500,2141.0500500,6.9400000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2591.8000500,2116.0500500,6.9400000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2577.6340300,2116.0500500,6.9100000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18765,-2574.3000500,2133.5400400,4.9400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2572.7600100,2142.3000500,4.9300000,0.0000000,0.0000000,34.0000000); //
	CreateDynamicObject(18764,-2574.8400900,2148.4399400,4.9400000,0.0000000,0.0000000,58.0000000); //
	CreateDynamicObject(18764,-2580.0437000,2151.0893600,4.9300000,0.0000000,0.0000000,75.0000000); //
	CreateDynamicObject(18765,-2578.2800300,2143.3701200,4.9300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2570.1154800,2133.3405800,4.9500000,0.0000000,0.0000000,2.0000000); //
	CreateDynamicObject(18764,-2567.8725600,2138.1293900,4.9400000,0.0000000,0.0000000,8.0000000); //
	CreateDynamicObject(18765,-2597.9899900,2149.5500500,4.9300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2587.9899900,2149.5600600,4.9300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18764,-2581.3898900,2151.4199200,4.9300000,0.0000000,0.0000000,72.0000000); //
	CreateDynamicObject(8083,-2607.4799800,2174.5600600,23.3200000,0.0000000,2.0000000,104.0000000); //
	CreateDynamicObject(3532,-2509.5625000,2048.2312000,7.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3520,-2499.1115700,2044.6240200,7.7700000,0.0000000,0.0000000,-98.0000000); //
	CreateDynamicObject(3520,-2502.2653800,2044.5958300,7.7700000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3520,-2507.0214800,2045.0826400,7.7700000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3532,-2497.8337400,2045.7843000,7.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3532,-2504.8151900,2047.9658200,7.7700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(8530,-2372.2106900,2053.2541500,12.2700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(16012,-2634.0871600,2034.1793200,7.4060000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(16067,-2353.6066900,2033.0220900,7.3800000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3876,-2537.9899900,2046.6743200,-19.9200000,0.0000000,0.0000000,259.2500000); //
	CreateDynamicObject(1694,-2537.7954100,2037.6379400,24.1200000,0.0000000,0.0000000,225.0000000); //
	CreateDynamicObject(9093,-2497.6699200,2341.1899400,5.7400000,0.0000000,0.0000000,90.7100000); //
	CreateDynamicObject(19377,-2494.0000000,2345.9599600,2.3000000,0.0000000,0.0000000,0.7100000); //
	CreateDynamicObject(19377,-2501.4099100,2345.8999000,2.3000000,0.0000000,0.0000000,0.7100000); //
	CreateDynamicObject(19377,-2496.5700700,2345.8999000,7.4900000,0.0000000,90.0000000,0.7100000); //
	CreateDynamicObject(1535,-2493.4199200,2341.7500000,3.9500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19425,-2508.7199700,2346.9099100,4.0844000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19425,-2505.4199200,2346.9099100,4.0844000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19425,-2502.1101100,2346.9099100,4.0844000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19425,-2513.4499500,2346.9099100,4.0844000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19425,-2516.7500000,2346.9099100,4.0844000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,-2493.3200700,2355.7900400,7.7600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1566,-2492.5100100,2355.9099100,10.5700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1566,-2489.3300800,2355.9099100,10.5700000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(8085,-2477.7177700,2033.7154500,16.6488500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(7950,-2879.1677200,2108.6467300,38.4385000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(7662,-2471.3933100,2019.6519800,8.1145000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(7337,-2615.2180200,2078.6293900,7.3800000,0.0720000,0.0000000,0.0000000); //
	CreateDynamicObject(7337,-2475.2272900,1958.6335400,7.3280000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(7327,-2464.5283200,2058.6403800,7.3500000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(7313,-2544.8203100,1992.9591100,8.7079000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(7337,-2555.2404800,1938.6455100,7.3280000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2577.6340300,2046.0517600,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2592.8012700,2046.0360100,6.9140000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18243,-2604.0874000,2040.6709000,7.1700000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(18244,-2603.9028300,2038.9942600,15.5800000,90.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(7950,-2868.6887200,2108.6467300,38.4385000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(7950,-2858.2299800,2108.6467300,38.4385000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(7950,-2842.8581500,2108.6272000,-148.9051100,0.0000000,180.0000000,180.0000000); //
	CreateDynamicObject(7950,-2853.3181200,2108.6272000,-148.9051100,0.0000000,180.0000000,180.0000000); //
	CreateDynamicObject(7950,-2863.7924800,2108.6272000,-148.9051100,0.0000000,180.0000000,180.0000000); //
	CreateDynamicObject(16089,-2854.0268600,2094.9592300,33.8872700,0.0000000,-45.0000000,90.0000000); //
	CreateDynamicObject(16089,-2867.5283200,2094.9333500,33.8872700,0.0000000,-45.0000000,90.0000000); //
	CreateDynamicObject(18764,-2576.3767100,2149.4658200,4.9420000,0.0000000,0.0000000,56.0000000); //
	CreateDynamicObject(1308,-2448.9829100,2005.9842500,7.3785000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(8083,-2607.6774900,2115.4228500,20.7351000,0.0000000,-7.0000000,104.0000000); //
	CreateDynamicObject(8947,-2592.9772900,2018.5943600,10.4391000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(8948,-2604.7148400,2018.5943600,9.2059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2592.7888200,2021.0540800,6.9140000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2577.6340300,2021.0540800,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2592.7888200,2011.1200000,6.9940000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1308,-2507.1606400,2001.7292500,7.3785000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1308,-2562.9948700,2020.2985800,7.3785000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8083,-2535.0752000,2011.3869600,17.0589000,0.0000000,0.0000000,-4.0000000); //
	CreateDynamicObject(1308,-2548.5310100,1961.8189700,7.3785000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8083,-2555.6899400,1991.4602100,16.8589000,0.0000000,0.0000000,-62.0000000); //
	CreateDynamicObject(8083,-2555.1958000,1932.9979200,16.8579000,0.0000000,0.0000000,-88.0000000); //
	CreateDynamicObject(1308,-2561.7165500,1903.2995600,7.3785000,0.0000000,0.0000000,-18.0000000); //
	CreateDynamicObject(1308,-2482.3200700,1946.7777100,7.3785000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8083,-2423.1030300,2080.1450200,17.0589000,0.0000000,0.0000000,-134.0000000); //
	CreateDynamicObject(1308,-2447.9052700,2065.2622100,7.3785000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1308,-2398.0639600,2095.9443400,7.3785000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8083,-2369.3542500,2088.7807600,17.0589000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1308,-2339.7519500,2081.2563500,7.3785000,0.0000000,0.0000000,-38.0000000); //
	CreateDynamicObject(4808,-2385.8981900,2073.8898900,7.3120000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(7893,-2329.7495100,2088.7609900,7.8000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1308,-2548.1472200,2078.0717800,7.3785000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8083,-2555.5156300,2049.7358400,16.8589000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(8083,-2547.9990200,2108.5883800,16.8579000,0.0000000,0.0000000,-76.0000000); //
	CreateDynamicObject(1308,-2547.6562500,2138.1845700,7.3785000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8083,-2572.7836900,2154.9006300,16.7569000,0.0000000,0.0000000,-19.0000000); //
	CreateDynamicObject(1308,-2597.2453600,2171.0312500,7.3785000,0.0000000,0.0000000,-0.3000000); //
	CreateDynamicObject(1308,-2608.3418000,2026.8167700,7.6412500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8083,-2607.9677700,2056.4411600,16.8830200,0.0000000,0.0000000,104.0000000); //
	CreateDynamicObject(1306,-2548.7856400,2026.8388700,14.4700000,0.0000000,0.0000000,-91.0000000); //
	CreateDynamicObject(8083,-2579.2243700,2027.1031500,16.8830000,0.0000000,0.0000000,14.0000000); //
	CreateDynamicObject(8083,-2518.0354000,2022.7138700,16.8830000,0.0000000,0.0000000,8.0000000); //
	CreateDynamicObject(1308,-2487.7739300,2019.5742200,7.3785000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(7662,-2487.4777800,2019.5606700,8.1145000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(7662,-2503.2514600,2019.6767600,8.1085000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3520,-2504.3537600,2045.8267800,7.7700000,0.0000000,0.0000000,-98.0000000); //
	CreateDynamicObject(3532,-2499.6645500,2046.3211700,7.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3532,-2507.9316400,2047.9198000,7.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2478.9492200,2028.6562500,4.7214000,0.0000000,2.0000000,0.0000000); //
	CreateDynamicObject(18981,-2532.8015100,2031.1090100,6.9156000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2532.8015100,2051.3505900,6.9076000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(6959,-2504.5336900,2038.6247600,7.4189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8947,-2537.1074200,2033.1615000,6.2654000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(8947,-2537.0124500,2038.6910400,12.3580000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8947,-2537.0124500,2038.6910400,6.2654000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2496.3476600,2023.2126500,7.8550200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2509.7421900,2054.3183600,7.8550000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2509.7456100,2059.8439900,7.8550000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1368,-2524.1457500,2040.2244900,8.0600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1368,-2524.1457500,2043.6051000,8.0600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1368,-2524.1457500,2046.9677700,8.0600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1368,-2524.1457500,2030.9062500,8.0600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1368,-2524.1457500,2027.4221200,8.0600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1368,-2524.1457500,2024.1613800,8.0600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2506.6640600,2060.7280300,9.4241000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2506.6640600,2060.7280300,8.0213100,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2506.6640600,2060.7280300,10.8250000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1553,-2495.3024900,2060.5529800,9.7557400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1553,-2500.6647900,2060.5529800,9.7557000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1553,-2507.1435500,2060.5529800,9.7557000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2532.2258300,2060.7624500,8.0213100,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2532.2258300,2060.7624500,10.8250000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2532.2258300,2060.7624500,9.4241000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2544.1958000,2047.6672400,8.0213000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2544.1958000,2047.6672400,10.8250000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2544.1958000,2047.6672400,9.4241000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19381,-2498.8649900,2063.4414100,7.3940000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2504.4506800,2063.4292000,7.4000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1368,-2500.6647900,2059.9375000,8.1240000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1368,-2507.1435500,2059.9375000,8.1240000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2496.3286100,2034.8133500,7.8550000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(5520,-2582.6940900,1966.2341300,12.4727000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1973.7919900,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2577.7048300,1966.1627200,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2577.7048300,1941.1634500,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2577.7048300,1916.1645500,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(3640,-2584.2707500,1941.5340600,11.7636500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3639,-2584.2231400,1921.1411100,11.7576000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9321,-2586.5676300,1907.6262200,8.8481000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1967.4700900,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1954.2264400,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1953.6068100,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1939.9848600,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1930.3525400,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1920.7188700,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1915.6683300,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9931600,1967.4700900,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9931600,1973.7919900,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9939000,1954.2264400,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9939000,1953.6068100,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9939000,1939.9848600,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9939000,1930.3525400,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9939000,1920.7188700,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9939000,1915.6683300,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2584.4804700,1902.8004200,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2580.9812000,1902.8004200,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2577.4819300,1902.8004200,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2573.9821800,1902.8004200,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2570.4826700,1902.8004200,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2566.9829100,1902.8004200,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1973.7919900,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1964.1573500,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1954.5234400,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1944.8891600,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1935.2541500,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1925.6208500,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1915.9860800,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1906.3492400,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4738800,1906.0118400,7.3560000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(4199,-2581.5700700,2124.2971200,9.5233000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(12982,-2538.8425300,2076.1523400,11.8816000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18981,-2432.7707500,2066.5351600,6.9096000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2407.7712400,2066.5351600,6.9096000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2398.7072800,2066.5351600,6.9216000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2432.7707500,2041.5373500,6.9216000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2407.7712400,2041.5373500,6.9216000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2398.7072800,2041.5373500,6.9096000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2354.4689900,2066.5351600,6.9216000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2354.4689900,2041.5373500,6.9096000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2339.0786100,2066.5351600,6.9096000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2339.0786100,2041.5373500,6.9216000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2377.0881300,2041.5373500,6.9216000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(16067,-2350.9836400,2074.5009800,7.3800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8530,-2380.8193400,2053.2541500,12.2700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(6137,-2438.8327600,2265.3593800,8.3504000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(13647,-2359.4179700,2289.9565400,1.8669900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13647,-2395.3493700,2289.9899900,1.8669900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13647,-2409.5676300,2290.0700700,1.8669900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(4227,-2411.2409700,2290.3579100,2.7600000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(4227,-2371.8630400,2290.2424300,2.7600000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1944.8891600,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1944.8891600,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1954.5234400,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1964.1573500,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1973.7919900,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1954.5234400,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1964.1573500,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1973.7919900,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1906.3492400,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1915.9860800,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1925.6208500,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1935.2541500,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1906.3492400,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1915.9860800,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1925.6208500,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1935.2541500,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19373,-2485.6005900,2021.9322500,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1408,-2486.2377900,2023.5440700,7.1336000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19373,-2489.1018100,2021.9322500,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2492.6015600,2021.9322500,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2494.5432100,2021.9322500,7.4120000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1408,-2493.4963400,2023.5440700,7.1336000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1408,-2489.8657200,2023.5400400,7.1336000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19371,-2494.0000000,4646.0000000,2033.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19373,-2494.5432100,2033.6969000,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2494.5432100,2036.9068600,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2494.5432100,2040.1169400,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2494.5432100,2043.3269000,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2494.5432100,2046.5384500,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19366,-2494.5432100,2032.0206300,5.9222000,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19366,-2492.8588900,2033.6969000,5.7882000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19366,-2492.8588900,2036.9068600,5.7882000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19366,-2492.8588900,2040.1169400,5.7882000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19366,-2492.8588900,2046.5384500,5.7882000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19366,-2492.8588900,2043.3269000,5.7882000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19366,-2494.5432100,2048.0715300,5.9222000,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19381,-2478.7360800,2043.4165000,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2470.3002900,2043.4165000,7.4100000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2470.3002900,2053.0500500,7.4100000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2470.3002900,2062.6821300,7.4100000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2478.7360800,2062.6821300,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(5848,-2421.2651400,2106.0385700,12.8831000,0.0000000,0.0000000,351.4744600); //
	CreateDynamicObject(5729,-2536.2802700,2113.4638700,10.9962000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1553,-2532.4162600,2020.8519300,11.9576000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1553,-2542.0686000,2020.8519300,11.9576000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1553,-2537.2705100,2020.8519300,11.9576000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1553,-2544.5148900,2023.8819600,11.9576000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1553,-2544.5148900,2029.2219200,11.9576000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1553,-2544.5148900,2035.0512700,11.9576000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1553,-2544.5148900,2041.4027100,11.9576000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1553,-2544.4890100,2047.6649200,11.9576000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1553,-2532.4162600,2050.9838900,11.9576000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1553,-2537.2705100,2050.9838900,11.9576000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1553,-2542.0686000,2050.9838900,11.9576000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2662.7578100,2075.6894500,-5.0300000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18765,-2631.0861800,2050.2312000,4.9660000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2641.0844700,2050.2312000,4.9660000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2630.0354000,2020.3875700,4.9660000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2640.0354000,2020.3875700,4.9660000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2476.3706100,2028.6562500,4.8044000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2470.1694300,2028.6562500,4.7964000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2494.5432100,2038.1289100,7.7028000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2494.5432100,2045.9388400,7.7028000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2494.5432100,2021.9322500,7.7028000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2486.0231900,2021.9322500,7.7028000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2513.3029800,2019.6995800,7.6028000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3824,-2499.0065900,1944.5255100,10.6220000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3823,-2451.4123500,1993.3171400,13.8983700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3825,-2534.3715800,1921.0155000,12.0065200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3826,-2532.9089400,1909.4840100,12.1827000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3827,-2534.0805700,1978.6408700,11.6817000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3828,-2533.2863800,1967.5241700,10.4438500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3829,-2533.6665000,1956.0992400,10.8508700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3830,-2533.7307100,1944.5549300,12.0075800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3822,-2533.7522000,1932.5257600,11.9303200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3820,-2451.4909700,1981.0808100,11.8303000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2532.8051800,1986.1868900,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2532.8051800,1961.1897000,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2532.8051800,1936.1940900,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2532.8051800,1911.1977500,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2497.6586900,1986.1868900,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2519.6948200,1986.1868900,6.8920000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2497.6586900,1936.1940900,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2497.6586900,1961.1897000,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2521.8947800,1911.1977500,6.8920000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2519.6948200,1936.1940900,6.8920000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2519.6948200,1961.1897000,6.8920000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(3827,-2497.2983400,1978.4068600,11.6817000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3829,-2497.8530300,1991.0033000,10.8509000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3830,-2497.4096700,1967.1709000,12.0076000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3825,-2496.8168900,1956.3548600,12.0065000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1986.1868900,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1936.1940900,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1961.1897000,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(9321,-2536.8364300,1910.3835400,8.8481000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(9321,-2457.7995600,1994.1943400,8.8481000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3823,-2451.4123500,1968.8453400,13.8984000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3823,-2451.4123500,1943.8276400,13.8984000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9321,-2457.7995600,1969.7016600,8.8481000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3820,-2451.4909700,1956.4583700,11.8303000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9321,-2457.7995600,1944.8415500,8.8481000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1923.1972700,-5.0980000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2517.8005400,2071.0246600,6.9476000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2492.8037100,2071.0246600,6.9076000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2477.5639600,2071.0246600,6.9476000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8947,-2517.7788100,2080.8808600,10.4391000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2493.0617700,2075.7607400,6.9296000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8948,-2505.6076700,2080.8808600,9.2059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2477.5639600,2075.7607400,6.9256000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18764,-2465.6738300,2086.0119600,4.9420000,0.0000000,0.0000000,76.0000000); //
	CreateDynamicObject(18764,-2466.8837900,2081.1630900,4.9420000,0.0000000,0.0000000,76.0000000); //
	CreateDynamicObject(18981,-2479.9965800,2088.5341800,-5.0640000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2504.9951200,2088.5341800,-5.0640000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2526.4633800,2088.5297900,-5.0780000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19373,-2466.6335400,2081.6584500,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2466.6335400,2078.4516600,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2466.6335400,2077.0236800,7.4140000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2470.1320800,2077.0236800,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2473.6320800,2077.0236800,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2475.3713400,2077.0236800,7.4120000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8083,-2495.0793500,1974.8088400,17.0589000,0.0000000,0.0000000,-51.0000000); //
	CreateDynamicObject(19381,-2478.7360800,2053.0500500,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2478.7060500,2053.0239300,7.5260000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2478.7060500,2051.9282200,7.5180000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2484.0424800,2053.0239300,2.3647000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,-2484.0324700,2051.9282200,2.3587000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(746,-2481.6938500,2043.2419400,7.6045000,0.0000000,0.0000000,-84.0000000); //
	CreateDynamicObject(748,-2481.6936000,2060.4856000,7.5014900,0.0000000,0.0000000,275.8999900); //
	CreateDynamicObject(749,-2481.6296400,2064.7407200,6.0418100,0.0000000,0.0000000,275.8999900); //
	CreateDynamicObject(18762,-2544.8850100,2091.3024900,7.3489000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(18762,-2544.8320300,2089.3190900,5.5049000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18762,-2544.8627900,2093.6652800,7.3489000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(18765,-2286.6726100,2290.9086900,1.5442600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2296.6726100,2290.9086900,1.5443000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2286.6726100,2300.9072300,1.5443000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2286.6726100,2310.9055200,1.5443000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2286.6726100,2320.9040500,1.5443000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2286.6726100,2330.9016100,1.5443000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2286.6726100,2336.3994100,1.5443000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2296.6726100,2336.3994100,1.5443000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2296.6726100,2330.9016100,1.5443000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2296.6726100,2320.9040500,1.5443000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2296.6726100,2310.9055200,1.5443000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2296.6726100,2300.9072300,1.5443000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(6959,-2401.9509300,2309.6179200,1.9860000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(6959,-2443.2988300,2309.6179200,1.9860000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18981,-2443.9746100,2309.2922400,3.5219000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2443.9746100,2284.2949200,3.5219000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2443.9746100,2263.0942400,3.5099000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18765,-2445.2475600,2317.7597700,1.5103000,0.0000000,0.0000000,10.1656000); //
	CreateDynamicObject(18765,-2437.3332500,2319.1862800,1.5023000,0.0000000,0.0000000,10.1656000); //
	CreateDynamicObject(3447,-2445.0068400,2253.4350600,11.1292000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2444.6381800,2289.0498000,4.6651000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9361,-2239.3195800,2466.1452600,6.5313000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9362,-2240.8618200,2465.2385300,4.9063000,0.0000000,0.0000000,224.9458900); //
	CreateDynamicObject(19373,-2543.5319800,1977.9613000,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5319800,1972.8394800,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1966.7839400,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5319800,1963.5781300,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1962.7396200,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1957.9752200,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1956.3161600,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1950.0725100,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1943.8962400,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1938.6337900,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1932.6107200,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1930.6634500,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1926.2627000,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1920.2757600,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1915.3940400,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1900.3283700,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2543.5312500,1903.5397900,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2540.0327100,1900.3283700,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2536.5356400,1900.3283700,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2533.0366200,1900.3283700,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2529.5380900,1900.3283700,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2525.7365700,1903.5229500,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2525.7365700,1913.1495400,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(9339,-2453.4314000,1922.9392100,7.8751000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19381,-2525.7365700,1932.4227300,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2525.7365700,1942.0561500,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2525.7365700,1951.6894500,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2525.7365700,1961.3238500,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2525.7365700,1970.9577600,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2525.7365700,1980.5905800,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2530.0874000,1980.5905800,7.3500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2504.3891600,1932.4227300,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2504.3891600,1942.0561500,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2504.3891600,1951.6894500,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2504.3891600,1961.3238500,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2504.3891600,1970.9577600,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2504.3891600,1980.5905800,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2504.3891600,1990.2230200,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2504.3891600,1993.8420400,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2498.2395000,1993.8420400,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(3826,-2498.4406700,1931.8509500,12.1827000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(9321,-2494.4497100,1930.9249300,8.8481000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19364,-2531.5979000,1985.3656000,7.3540000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2520.4511700,1994.3481400,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2520.4331100,1980.6071800,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2525.1760300,1985.3656000,7.3540000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,-2520.4331100,1900.5225800,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19437,-2534.0061000,1985.3656000,7.3540000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19437,-2534.6110800,1985.3575400,7.3480000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2525.1801800,1998.4591100,7.3540000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2534.8137200,1998.4591100,7.3540000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2520.4331100,1968.3741500,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2520.4331100,1956.0534700,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2520.4331100,1943.9731400,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2520.4331100,1932.7531700,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2520.4331100,1921.0727500,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2520.4331100,1909.7127700,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1906.3492400,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1915.9860800,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1925.6208500,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1935.2541500,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1944.8891600,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1954.5234400,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1964.1573500,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1973.7919900,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,1936.1940900,-5.1140000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,1961.1897000,-5.1140000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,1986.1868900,-5.1140000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,2011.1859100,-5.1140000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,2036.1789600,-5.1140000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2432.7707500,2029.5870400,-5.1140000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2407.7712400,2029.5870400,-5.1140000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2377.0881300,2029.5870400,-5.1140000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2339.0944800,2029.5870400,-5.1140000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2398.7072800,2029.6268300,-5.1140000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2354.4689900,2029.6268300,-5.1140000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2327.1030300,2041.5390600,-5.1140000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2327.1030300,2066.5351600,-5.1140000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2327.0000000,2091.5100100,-5.1180000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2339.0786100,2103.4589800,-5.1140000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2387.1604000,2109.6135300,-5.1140000,0.0000000,0.0000000,60.0000000); //
	CreateDynamicObject(18981,-2364.0727500,2103.4589800,-5.1140000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2410.2211900,2115.7790500,-5.1140000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2435.2197300,2115.7790500,-5.1140000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2457.7793000,2108.8950200,-5.1140000,0.0000000,0.0000000,-56.0000000); //
	CreateDynamicObject(18981,-2478.4939000,2094.9223600,-5.1140000,0.0000000,0.0000000,-56.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2101.3171400,-5.0640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2126.3093300,-5.0640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2151.3029800,-5.0640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2176.3020000,-5.0640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2538.4702100,2188.2026400,-5.0640000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2559.4480000,2179.5268600,-5.0640000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(18981,-2577.2646500,2173.9399400,-5.0640000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2595.5053700,2174.0102500,-5.0700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2498.3432600,1924.2622100,-5.1220000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2509.9331100,1911.2277800,-5.1220000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2521.9475100,1899.2981000,-5.1220000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18766,-2564.7434100,1901.0927700,2.3828000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(18981,-2577.7048300,1901.6690700,-5.1220000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2584.2485400,1901.6403800,-5.1220000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2602.4960900,1902.0112300,-9.3156900,64.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2604.1669900,1901.9975600,-10.5548000,76.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2618.8886700,1913.9383500,-13.8225600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.8877000,1938.9351800,-13.8226000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.8877000,1963.9339600,-13.8226000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.8877000,1988.9339600,-13.8226000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2601.5029300,1978.1575900,-5.1040000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2622.4868200,1986.8508300,-5.1080000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(18981,-2631.1806600,2007.8347200,-5.1040000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2482.7365700,1919.1546600,2.3828000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18766,-2477.7334000,1919.1546600,2.2348000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18766,-2472.7292500,1919.1546600,2.2348000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18766,-2467.7436500,1919.1546600,2.3828000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2615.2900400,2174.9399400,-29.7492000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2595.5053700,2174.0102500,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2577.2646500,2173.9399400,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2559.4480000,2179.5268600,-30.0682000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(18981,-2538.4702100,2188.2026400,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2176.3020000,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2151.3029800,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2126.3093300,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2101.3171400,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2504.9951200,2088.5341800,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2526.4633800,2088.5297900,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2479.9965800,2088.5341800,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2478.4939000,2094.9223600,-30.0682000,0.0000000,0.0000000,-56.0000000); //
	CreateDynamicObject(18981,-2457.7793000,2108.8950200,-30.0682000,0.0000000,0.0000000,-56.0000000); //
	CreateDynamicObject(18981,-2435.2197300,2115.7790500,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2410.2211900,2115.7790500,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2387.1604000,2109.6135300,-30.0682000,0.0000000,0.0000000,60.0000000); //
	CreateDynamicObject(18981,-2364.0727500,2103.4589800,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2339.0786100,2103.4589800,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2327.0000000,2091.5100100,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2327.1030300,2066.5351600,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2327.1030300,2041.5390600,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2339.0944800,2029.5870400,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2354.4689900,2029.6268300,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2377.0881300,2029.5870400,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2398.7072800,2029.6268300,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2407.7712400,2029.5870400,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2432.7707500,2029.5870400,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2440.8569300,2036.1789600,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,2011.1859100,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,1986.1868900,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,1961.1897000,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,1936.1940900,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1922.2012900,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1921.2012900,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1923.1972700,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2464.7697800,1931.1700400,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2485.6787100,1931.1639400,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2498.3432600,1924.2622100,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2509.9331100,1911.2277800,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2521.9475100,1899.2981000,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2546.9458000,1899.1461200,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2577.7048300,1901.6690700,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2584.2485400,1901.6403800,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2601.5957000,1901.8203100,-12.7215700,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2601.5957000,1901.7983400,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2606.9018600,1901.9925500,-14.3035000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2606.9018600,1901.8083500,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2618.8986800,1913.9383500,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.8986800,1938.9351800,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.8986800,1963.9339600,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.8986800,1988.9339600,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2631.1982400,2007.8444800,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2622.4868200,1986.8508300,-30.0682000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(18981,-2625.5918000,2062.6894500,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2637.7585400,2075.6894500,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2662.7578100,2075.6894500,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2632.5737300,2015.6914100,-7.9283200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2637.6577100,2016.3898900,-7.9283000,0.0000000,0.0000000,100.0000000); //
	CreateDynamicObject(18981,-2648.0144000,2026.0008500,-7.9283000,0.0000000,0.0000000,351.2682800); //
	CreateDynamicObject(18981,-2645.5202600,2041.9898700,-7.9283000,0.0000000,0.0000000,351.2682800); //
	CreateDynamicObject(18981,-2646.0781300,2042.8601100,-7.9283000,0.0000000,0.0000000,359.2852800); //
	CreateDynamicObject(18981,-2645.2080100,2042.7318100,-7.9283000,0.0000000,0.0000000,359.2852800); //
	CreateDynamicObject(18981,-2633.9406700,2054.9030800,-7.9283000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2646.8606000,2026.9600800,-7.9283000,0.0000000,0.0000000,351.2682800); //
	CreateDynamicObject(18981,-2648.0144000,2026.0008500,-30.0682000,0.0000000,0.0000000,351.2683100); //
	CreateDynamicObject(18981,-2637.6577100,2016.3898900,-30.0682000,0.0000000,0.0000000,100.0000000); //
	CreateDynamicObject(18981,-2632.5737300,2015.6914100,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2646.0781300,2042.8601100,-30.0682000,0.0000000,0.0000000,359.2853100); //
	CreateDynamicObject(18981,-2633.9406700,2054.9030800,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1983.4150400,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(18981,-2475.1135300,1919.1367200,-14.8804000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2475.1135300,1919.1546600,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2615.2900400,2174.9399400,-54.7454000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2595.5053700,2174.0102500,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2577.2646500,2173.9399400,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2559.4480000,2179.5268600,-55.0677000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(18981,-2538.4702100,2188.2026400,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2176.3020000,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2151.3029800,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2126.3093300,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2525.5800800,2101.3171400,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2526.4633800,2088.5297900,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2504.9951200,2088.5341800,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2479.9965800,2088.5341800,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2478.4939000,2094.9223600,-55.0677000,0.0000000,0.0000000,-56.0000000); //
	CreateDynamicObject(18981,-2457.7793000,2108.8950200,-55.0677000,0.0000000,0.0000000,-56.0000000); //
	CreateDynamicObject(18981,-2435.2197300,2115.7790500,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2410.2211900,2115.7790500,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2387.1604000,2109.6135300,-55.0677000,0.0000000,0.0000000,60.0000000); //
	CreateDynamicObject(18981,-2364.0727500,2103.4589800,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2339.0786100,2103.4589800,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2327.0000000,2091.5100100,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2327.1030300,2066.5351600,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2327.1030300,2041.5390600,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2339.0944800,2029.5870400,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2354.4689900,2029.6268300,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2377.0881300,2029.5870400,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2407.7712400,2029.5870400,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2432.7707500,2029.5870400,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2398.7072800,2029.6268300,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2440.8569300,2036.1789600,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,2011.1859100,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,1986.1868900,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,1961.1897000,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2440.8569300,1936.1940900,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1921.2012900,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1922.2012900,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1923.1972700,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2475.1135300,1919.1546600,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2464.7697800,1931.1700400,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2485.6787100,1931.1639400,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2498.3432600,1924.2622100,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2509.9331100,1911.2277800,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2521.9475100,1899.2981000,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2546.9458000,1899.1461200,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2577.7048300,1901.6690700,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2584.2485400,1901.6403800,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2601.5957000,1901.7983400,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2618.8986800,1963.9339600,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.8986800,1938.9351800,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.8986800,1988.9339600,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2622.4868200,1986.8508300,-55.0677000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(18981,-2631.1982400,2007.8444800,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2632.5737300,2015.6914100,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2637.6577100,2016.3898900,-55.0677000,0.0000000,0.0000000,100.0000000); //
	CreateDynamicObject(18981,-2648.0144000,2026.0008500,-55.0677000,0.0000000,0.0000000,351.2683100); //
	CreateDynamicObject(18981,-2646.0781300,2042.8601100,-55.0677000,0.0000000,0.0000000,359.2853100); //
	CreateDynamicObject(18981,-2633.9406700,2054.9030800,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2625.5918000,2062.6894500,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2637.7585400,2075.6894500,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2662.7578100,2075.6894500,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2521.9475100,1899.2981000,-80.0603000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2509.9331100,1911.2277800,-80.0603000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2498.3432600,1924.2622100,-80.0603000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2475.1135300,1919.1546600,-80.0603000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2485.6787100,1931.1639400,-80.0603000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2464.7697800,1931.1700400,-80.0603000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1921.2012900,-80.0603000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2440.8569300,1936.1940900,-80.0603000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1923.1972700,-80.0603000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2452.8410600,1922.2012900,-80.0603000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2709.2912600,2153.6506300,3.0629700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2709.2912600,2153.6506300,-21.9351000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2709.2912600,2153.6506300,-46.9347000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(7991,-2535.2648900,2018.5799600,7.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2331.7502400,2101.2146000,6.9084000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2341.7492700,2101.2146000,6.9084000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2351.7495100,2101.2146000,6.9084000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2361.7475600,2101.2146000,6.9084000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2371.7443800,2101.2146000,6.9084000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2381.7343800,2101.2146000,6.9084000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2391.7294900,2101.2146000,6.9084000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2401.7285200,2101.2146000,6.9084000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2395.6936000,2108.6489300,6.8964000,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18765,-2391.3857400,2106.7981000,4.8943000,0.0000000,0.0000000,60.0000000); //
	CreateDynamicObject(18765,-2382.7246100,2101.7995600,4.8943000,0.0000000,0.0000000,60.0000000); //
	CreateDynamicObject(18765,-2402.1516100,2110.5512700,4.8943000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2412.1425800,2110.5512700,4.8943000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2422.1442900,2110.5512700,4.8943000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2432.1438000,2110.5512700,4.8943000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2442.1403800,2110.5512700,4.8943000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2431.4274900,2099.0942400,-5.0140000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18765,-2449.0629900,2102.7138700,4.9833000,0.0000000,0.0000000,10.0000000); //
	CreateDynamicObject(18765,-2464.2419400,2094.2712400,4.9833000,0.0000000,0.0000000,56.1153600); //
	CreateDynamicObject(18765,-2468.5251500,2092.8259300,4.8833000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2480.2934600,2088.1059600,4.8833000,0.0000000,0.0000000,-56.0000000); //
	CreateDynamicObject(18765,-2473.9880400,2092.4155300,4.8733000,0.0000000,0.0000000,-56.0000000); //
	CreateDynamicObject(18765,-2465.2148400,2097.2924800,4.8733000,0.0000000,0.0000000,-56.0000000); //
	CreateDynamicObject(18765,-2456.9348100,2102.8798800,4.8733000,0.0000000,0.0000000,-56.0000000); //
	CreateDynamicObject(18765,-2448.6669900,2108.4914600,4.8733000,0.0000000,0.0000000,-56.0000000); //
	CreateDynamicObject(18765,-2442.5185500,2110.6191400,4.8803000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19373,-2470.1320800,2088.0161100,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2473.6320800,2088.0161100,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2475.3713400,2088.0161100,7.4120000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2466.6335400,2088.0161100,7.4140000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2466.6335400,2086.6757800,7.4200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2538.4709500,2176.3220200,6.9736000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18764,-2564.4931600,2170.7910200,4.9420000,0.0000000,0.0000000,56.0000000); //
	CreateDynamicObject(18765,-2550.9929200,2180.3352100,4.9540000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(18765,-2558.0637200,2173.2648900,4.9540000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(18765,-2557.0510300,2168.8566900,4.9620000,0.0000000,0.0000000,-33.0000000); //
	CreateDynamicObject(18765,-2530.9721700,2158.8303200,4.9620000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2530.9721700,2148.8308100,4.9620000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2530.9721700,2138.8305700,4.9620000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2540.9716800,2148.8308100,4.9620000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2540.9716800,2158.8303200,4.9620000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2540.9716800,2140.8105500,4.9460000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18764,-2543.1547900,2133.7016600,4.8920000,0.0000000,0.0000000,8.0000000); //
	CreateDynamicObject(18764,-2542.4572800,2128.7561000,4.8920000,0.0000000,0.0000000,8.0000000); //
	CreateDynamicObject(18981,-2544.1757800,2164.3632800,6.9576000,0.0000000,90.0000000,33.3848000); //
	CreateDynamicObject(18765,-2542.2033700,2144.0012200,4.9520000,0.0000000,0.0000000,12.8370200); //
	CreateDynamicObject(18981,-2577.0710400,2173.7114300,-5.0740000,0.0000000,0.0000000,86.0000000); //
	CreateDynamicObject(18981,-2577.0498000,2173.0432100,-5.0780000,0.0000000,0.0000000,84.0000000); //
	CreateDynamicObject(18981,-2577.0981400,2172.0542000,-5.0780000,0.0000000,0.0000000,84.0000000); //
	CreateDynamicObject(18763,-2568.3664600,2172.2016600,4.9420000,0.0000000,0.0000000,56.0000000); //
	CreateDynamicObject(18981,-2601.9992700,2174.5786100,-4.7700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2601.5778800,2174.6423300,-5.0880000,0.0000000,0.0000000,84.0000000); //
	CreateDynamicObject(18981,-2605.7600100,2222.5100100,-30.0262000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.7600100,2210.5100100,-30.0262000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2618.7600100,2210.5100100,-54.7454000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2605.7600100,2222.5100100,-54.7454000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2615.7856400,2142.8630400,-16.6845100,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19456,-2525.2268100,1971.4902300,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2525.2331500,1960.7509800,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2525.1662600,1948.5548100,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2525.3310500,1937.2319300,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2525.2094700,1925.0784900,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2525.1980000,1914.2315700,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2581.0773900,2033.4674100,8.2859000,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19455,-2600.3479000,2033.4674100,8.2859000,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19455,-2590.7138700,2033.4674100,8.2859000,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19436,-2575.4589800,2033.4674100,8.2859000,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19425,-2618.5983900,2078.4523900,7.3000000,-16.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2608.1516100,2073.3752400,7.4410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2622.4831500,2076.8732900,7.4410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19425,-2615.3000500,2078.4523900,7.3000000,-16.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19425,-2611.9939000,2078.4523900,7.3000000,-16.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2622.4831500,2073.3752400,7.4410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2621.8933100,2073.3752400,7.4110000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2621.8933100,2076.8732900,7.4110000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2608.1516100,2076.8732900,7.4410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2608.6215800,2076.8732900,7.4110000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2608.6215800,2073.3752400,7.4110000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19454,-2608.1516100,2066.8110400,7.4410000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2622.4831500,2066.8110400,7.4410000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2608.4816900,2066.8110400,7.4110000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2622.0332000,2066.8110400,7.4110000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19362,-2622.4831500,2060.2495100,7.4410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2608.1516100,2060.2495100,7.4410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2621.8933100,2060.2495100,7.4110000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2608.6215800,2060.2495100,7.4110000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19454,-2623.4321300,2066.8110400,7.4110000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19362,-2623.5720200,2060.2495100,7.4110000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,-2606.9836400,2060.2495100,7.4110000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19454,-2607.1235400,2066.8110400,7.4110000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19425,-2615.3000500,2058.7731900,7.3000000,16.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19425,-2618.5983900,2058.7731900,7.3000000,16.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19425,-2611.9939000,2058.7731900,7.3000000,16.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2615.3000500,2063.9775400,4.9024000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2615.2990700,2073.3508300,4.9104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3578,-2615.3000500,2073.1682100,6.6384000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3578,-2615.3000500,2064.1254900,6.6304000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3264,-2608.9809600,2053.3720700,7.3126500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3264,-2621.2302200,2085.7600100,7.6167000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(9339,-2432.9567900,2275.8447300,4.6651000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2456.2797900,2269.5656700,4.6651000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2444.3352100,2256.3593800,4.6651000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1624,-2444.9765600,2252.6640600,12.7188000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1624,-2444.9765600,2252.6640600,12.7188000,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(1258,-2477.3984400,2274.1875000,4.6016000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(1258,-2352.9375000,2372.5546900,5.1172000,0.0000000,0.0000000,57.0000000); //
	CreateDynamicObject(984,-2237.3591300,2290.4814500,5.1110000,0.0000000,0.0000000,89.8000000); //
	CreateDynamicObject(1297,-2245.4089400,2315.7241200,7.3047000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(984,-2226.1474600,2290.4418900,5.1110000,0.0000000,0.0000000,89.8000000); //
	CreateDynamicObject(984,-2219.7504900,2296.8327600,5.1110000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(983,-2219.7251000,2301.6347700,5.1110000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(983,-2216.5271000,2304.8230000,5.1110000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(983,-2213.3391100,2304.8317900,5.1110000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(984,-2210.1096200,2311.2287600,5.1110000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1532,-2259.0212400,2379.9421400,3.9301000,0.0000000,0.0000000,312.6973900); //
	CreateDynamicObject(1297,-2255.2551300,2350.9560500,7.3047000,0.0000000,0.0000000,326.1913800); //
	CreateDynamicObject(18766,-2627.5310100,2010.4445800,6.9274700,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2630.1845700,2007.8347200,-5.1040000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2627.5310100,2000.4538600,6.9275000,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2621.2819800,1987.0662800,-5.0920000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(18763,-2625.9909700,1994.9017300,5.9708000,90.0000000,0.0000000,11.4022900); //
	CreateDynamicObject(18981,-2620.4541000,1987.6342800,-5.0920000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(18762,-2624.4245600,1992.1787100,4.9187000,0.0000000,0.0000000,11.4023000); //
	CreateDynamicObject(18762,-2609.4724100,1979.0415000,6.8987600,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18762,-2610.4116200,1979.5026900,6.9048000,90.0000000,0.0000000,80.0000000); //
	CreateDynamicObject(18762,-2604.6066900,1978.6159700,6.9048000,90.0000000,0.0000000,80.0000000); //
	CreateDynamicObject(18765,-2446.1779800,1999.4687500,4.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18766,-2442.7780800,2024.0664100,6.9126000,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18766,-2442.7780800,2014.0723900,6.9126000,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18766,-2442.7780800,2004.0826400,6.9126000,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18766,-2447.0647000,2006.2576900,6.9006000,90.0000000,0.0000000,56.0000000); //
	CreateDynamicObject(18766,-2453.7529300,1999.7450000,6.8886000,90.0000000,0.0000000,34.0000000); //
	CreateDynamicObject(18766,-2459.8850100,1997.2548800,6.8966000,90.0000000,0.0000000,12.0000000); //
	CreateDynamicObject(18766,-2444.0051300,2013.9683800,6.8946000,90.0000000,0.0000000,76.0000000); //
	CreateDynamicObject(1624,-2549.0793500,2026.3450900,16.3767000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1624,-2549.0793500,2026.3450900,16.3767000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1624,-2547.6423300,2025.7506100,15.5481300,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1624,-2547.6423300,2025.7506100,15.5481000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1624,-2548.4443400,2025.6346400,19.3975400,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1624,-2548.4487300,2027.2398700,19.3975400,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1624,-2548.4443400,2025.6346400,19.3975000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1624,-2548.4487300,2027.2398700,19.3975000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1624,-2563.0000000,2020.3732900,15.5481300,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1624,-2563.0000000,2020.3732900,15.5481000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1624,-2568.1762700,2306.8886700,13.5644500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1624,-2568.1569800,2306.9094200,13.5645000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1624,-2449.0871600,2005.9067400,15.6830100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1624,-2449.0871600,2005.9067400,15.6830000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1624,-2507.2185100,2001.8698700,15.7748000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1624,-2507.2185100,2001.8698700,15.7748000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19373,-2491.2417000,1997.0553000,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1997.0553000,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1997.0553000,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1990.7941900,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1990.7941900,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1989.1539300,7.3420000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1989.1539300,7.3360000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1984.2479200,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1984.2479200,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1978.9875500,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9541000,1979.0028100,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1972.3243400,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1972.3243400,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1967.8637700,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1967.8637700,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1961.7026400,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1961.7026400,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1957.0404100,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1957.0404100,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1950.9804700,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1950.9804700,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1946.2806400,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1946.2806400,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1944.5333300,7.3420000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1944.5333300,7.3360000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1938.4965800,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1938.4965800,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2487.7429200,1925.7579300,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2486.9411600,1925.7579300,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2462.5358900,1986.7448700,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(3820,-2451.4909700,1931.2137500,11.8303000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19373,-2462.5358900,1983.5363800,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2463.5690900,1983.5363800,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2463.5690900,1986.7448700,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2462.5358900,1974.9361600,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2463.5690900,1974.9361600,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2462.5358900,1962.3446000,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2462.5358900,1959.1392800,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2462.7197300,1950.0863000,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2462.7197300,1937.1152300,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2462.7197300,1933.9036900,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2462.7197300,1924.6424600,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2463.5690900,1959.1392800,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2463.5690900,1962.3446000,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2463.5690900,1950.0863000,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2463.5690900,1937.1152300,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2463.5690900,1933.9036900,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2463.5690900,1924.6424600,7.3440000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2445.6438000,1927.8629200,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2445.6438000,1942.0561500,7.3600000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2445.6438000,1932.4227300,7.3600000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2445.6438000,1951.6894500,7.3600000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2445.6438000,1961.3238500,7.3600000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2445.6438000,1970.9577600,7.3600000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2445.6438000,1980.5905800,7.3600000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2445.6438000,1990.2230200,7.3600000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2445.6438000,1993.2760000,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19456,-2509.5871600,1994.3481400,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2509.5871600,1978.0145300,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2509.5871600,1966.8372800,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2509.5871600,1955.2340100,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2509.5871600,1943.4096700,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2509.5871600,1932.0269800,7.3540000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2440.5192900,1935.8981900,7.8691000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2440.5192900,1962.0217300,7.8691000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2440.5192900,1988.1455100,7.8691000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2445.2780800,1998.0269800,7.3540000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2445.4741200,1985.7368200,7.3540000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2445.4548300,1973.4744900,7.3540000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2445.4565400,1961.2194800,7.3540000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2445.4550800,1948.4785200,7.3540000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2445.4665500,1935.9013700,7.3540000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2440.5192900,1988.1455100,9.2683000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2440.5192900,1962.0217300,9.2683000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2440.5192900,1935.8981900,9.2683000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2504.7841800,1939.7471900,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2504.7624500,1952.3801300,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2504.8459500,1963.2010500,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2504.6940900,1973.6834700,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2504.8398400,1986.4123500,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19437,-2509.5871600,1985.5522500,7.3480000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19437,-2509.5871600,1987.1551500,7.3480000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2504.7251000,1998.6439200,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2495.0900900,1998.6439200,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2460.4936500,1997.9180900,7.3460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2440.5192900,2014.2691700,7.8691000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2440.4838900,2017.5273400,7.8631000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2438.5363800,2030.6505100,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2443.3869600,2035.3590100,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2443.3869600,2044.9946300,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2443.3869600,2054.6308600,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2443.3869600,2064.2648900,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2443.3869600,2073.8979500,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(984,-2566.5134300,2039.9539800,7.7335000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(4100,-2408.6047400,2078.6975100,9.1040000,0.0000000,0.0000000,320.4523600); //
	CreateDynamicObject(4100,-2394.7924800,2078.7634300,9.1040000,0.0000000,0.0000000,320.4523600); //
	CreateDynamicObject(4100,-2388.3259300,2071.6416000,9.1040000,0.0000000,0.0000000,229.2125200); //
	CreateDynamicObject(4100,-2388.5336900,2049.0905800,9.1040000,0.0000000,0.0000000,229.2124900); //
	CreateDynamicObject(4100,-2388.6980000,2037.3404500,9.1040000,0.0000000,0.0000000,229.2124900); //
	CreateDynamicObject(19455,-2389.0219700,2030.6505100,6.9774000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2379.4165000,2030.6505100,6.9774000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2369.7844200,2030.6505100,6.9774000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2360.1506300,2030.6505100,6.9774000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2350.5200200,2030.6505100,6.9774000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2340.8894000,2030.6505100,6.9774000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2331.5290500,2030.6505100,6.9734000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2326.7453600,2033.9787600,6.9774000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2326.7453600,2043.6108400,6.9774000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2326.7453600,2053.2424300,6.9774000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2326.7453600,2062.8747600,6.9774000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2326.7453600,2072.5063500,6.9774000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2331.4848600,2077.2600100,6.9734000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2341.1196300,2077.2600100,6.9734000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2350.7534200,2077.2600100,6.9734000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2360.3864700,2077.2600100,6.9734000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19436,-2366.0068400,2077.2600100,6.9734000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2366.7463400,2058.1660200,6.9774000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2366.7463400,2067.7973600,6.9774000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19363,-2366.7463400,2074.2175300,6.9774000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19436,-2366.7463400,2076.6252400,6.9774000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(984,-2605.1145000,2039.9539800,7.7334900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(984,-2605.1145000,2059.2224100,7.7335000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(984,-2566.5134300,2059.2224100,7.7335000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(982,-2566.5134300,2078.4411600,7.7335000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(984,-2566.5134300,2104.2634300,7.7335000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1319,-2566.5134300,2091.3359400,7.9243000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1319,-2566.5134300,2097.7558600,7.9243000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1319,-2566.5134300,2052.7177700,7.9243000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1319,-2566.5134300,2046.4674100,7.9243000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1319,-2605.1145000,2052.7177700,7.9243000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1319,-2605.1145000,2046.4674100,7.9243000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2521.5944800,1982.4591100,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2521.6345200,1970.2063000,6.7659500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2521.7434100,1958.2468300,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2521.0061000,1947.0011000,6.7659500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2521.3586400,1935.7629400,6.7659500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2521.5952100,1923.7258300,6.7659500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2521.8515600,1912.1727300,6.7659500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2508.8796400,1991.8820800,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2508.8796400,1975.1774900,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2508.7119100,1965.5228300,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2508.8796400,1954.4852300,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2508.8796400,1925.7016600,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2508.8796400,1947.9802200,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2508.8796400,1938.9010000,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2522.1440400,1900.0511500,6.7659500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2568.8054200,1912.9846200,6.7659500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2570.7661100,1921.9834000,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2571.8154300,1938.1210900,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2567.6599100,1954.4818100,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2566.7541500,1974.5451700,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2594.6247600,1953.4931600,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2595.1655300,1930.8042000,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2592.1245100,1906.9171100,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(737,-2595.2605000,1970.5983900,6.7659000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2573.5183100,1977.4866900,8.0523200,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1408,-2568.0808100,1977.4866900,8.0523000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1408,-2565.4172400,1974.7724600,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4172400,1969.3112800,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4519000,1965.7302200,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4172400,1956.2102100,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4382300,1951.8098100,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4172400,1936.3247100,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4172400,1941.8294700,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4172400,1930.8345900,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4172400,1925.3542500,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4172400,1919.8746300,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4167500,1914.3536400,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2567.9775400,1901.3870800,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2573.4555700,1901.3870800,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2578.9345700,1901.3870800,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2584.4370100,1901.3870800,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2589.9397000,1901.3870800,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2593.9187000,1901.3978300,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2568.1679700,1949.1408700,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2573.6325700,1949.1408700,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2579.0949700,1949.1408700,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2592.9343300,1949.1408700,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2592.9343300,1928.9511700,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2568.1743200,1928.2171600,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2573.6801800,1928.2171600,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2579.1538100,1928.2171600,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2590.9890100,1978.4110100,8.0523200,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1408,-2596.4931600,1978.4110100,8.0523000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1227,-2519.6848100,1992.7878400,8.2175000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1440,-2522.0559100,1997.5162400,7.8083100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1441,-2521.1599100,1995.5087900,8.0383000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1446,-2542.9472700,1971.3975800,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2538.2846700,1971.3975800,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2542.9543500,1961.1131600,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2538.3010300,1961.1131600,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2542.9238300,1948.4863300,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2538.2365700,1948.4863300,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2542.9755900,1937.1803000,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2538.2793000,1937.1803000,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2542.9555700,1924.9709500,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2538.2866200,1924.9709500,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2542.9814500,1914.1123000,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2538.2724600,1914.1123000,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2487.9770500,1998.6329300,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2492.1970200,1983.0504200,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2487.5261200,1983.0504200,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2487.4982900,1971.1151100,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2492.1662600,1971.1151100,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2492.2148400,1960.3443600,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2487.5522500,1960.3443600,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2487.5200200,1949.6400100,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2492.1804200,1949.6400100,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2487.5095200,1936.9586200,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2492.1850600,1936.9586200,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2496.8457000,1936.9586200,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2463.0581100,1985.5628700,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2458.3945300,1985.5628700,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2463.0151400,1973.4185800,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2458.3579100,1973.4185800,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2463.0058600,1961.0942400,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2458.3420400,1961.0942400,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2462.9963400,1948.5091600,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2458.3254400,1948.5091600,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2463.0124500,1935.8168900,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2458.3295900,1935.8168900,8.0383000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1227,-2519.6657700,1979.3013900,8.2175000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1227,-2510.3252000,1969.1110800,8.2175000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1227,-2519.7285200,1953.7592800,8.2175000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1227,-2510.3610800,1943.1978800,8.2175000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1227,-2519.6909200,1930.8928200,8.2175000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1227,-2519.7055700,1908.6872600,8.2175000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1227,-2510.4829100,1922.5773900,8.2175000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1440,-2519.5883800,1968.4043000,7.8083000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1227,-2510.3967300,1994.1038800,8.2175000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1440,-2510.4299300,1977.0957000,7.8083000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1440,-2510.4023400,1957.5338100,7.8083000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1440,-2510.3791500,1932.3820800,7.8083000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1440,-2510.5083000,1911.6145000,7.8083000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1441,-2519.7102100,1900.5329600,8.0283000,0.0000000,0.0000000,92.0000000); //
	CreateDynamicObject(1440,-2519.5642100,1920.0815400,7.8083000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1440,-2519.5664100,1942.7869900,7.8083000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(16281,-2376.5510300,2053.2541500,10.8893900,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(16281,-2376.5410200,2053.2541500,5.2442000,0.0000000,180.0000000,180.0000000); //
	CreateDynamicObject(19454,-2353.6066900,2052.3984400,7.4883000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(1232,-2357.6311000,2052.3984400,10.1524000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1232,-2349.3059100,2052.3984400,10.1524000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1446,-2544.8542500,1901.2528100,7.8383000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(18981,-2552.5085400,1899.2460900,-14.7514800,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2564.5454100,1911.2816200,-14.7515000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2564.5454100,1911.2816200,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2552.5085400,1899.2460900,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2564.5454100,1911.2816200,-55.0677000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2552.5085400,1899.2460900,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2555.0961900,1901.7103300,-55.0677000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2555.0961900,1901.7103300,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2555.0961900,1901.7103300,-14.7515000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2601.9736300,1978.4110100,8.0523000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1408,-2607.4733900,1978.4110100,8.0523000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1408,-2611.4733900,1978.4029500,8.0523000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1408,-2616.1511200,1980.3326400,8.0523000,0.0000000,0.0000000,135.0000000); //
	CreateDynamicObject(1408,-2620.0300300,1984.2049600,8.0523000,0.0000000,0.0000000,135.0000000); //
	CreateDynamicObject(1408,-2623.9038100,1988.1160900,8.0523000,0.0000000,0.0000000,135.0000000); //
	CreateDynamicObject(1408,-2627.7707500,1992.0056200,8.0523000,0.0000000,0.0000000,135.0000000); //
	CreateDynamicObject(1408,-2629.1855500,1993.4191900,8.0523000,0.0000000,0.0000000,135.0000000); //
	CreateDynamicObject(1408,-2631.1176800,1998.1461200,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2631.1196300,2003.6519800,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2631.1196300,2009.1523400,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2631.1284200,2012.7644000,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2633.7661100,2015.5791000,8.0523000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1408,-2628.1574700,2055.1220700,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2633.6513700,2055.1220700,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(973,-2625.5918000,2059.8342300,8.2854000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(973,-2625.5918000,2069.2168000,8.2854000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(973,-2630.0700700,2074.2893100,8.2854000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2637.7585400,2074.6897000,-5.0300000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2662.7578100,2074.6897000,-5.0300000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(973,-2639.4511700,2074.2893100,8.2854000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(973,-2648.8371600,2074.2893100,8.2854000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(973,-2623.9216300,2153.8300800,8.5714000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(973,-2616.9392100,2153.8220200,8.5714000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(973,-2607.9770500,2153.8300800,8.5714000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(973,-2623.9216300,2174.9399400,8.5714000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2616.9392100,2174.9499500,8.5714000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2607.9770500,2174.9399400,8.5714000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2632.6391600,2174.7900400,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2598.5002400,2174.9399400,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18981,-2601.9992700,2174.5786100,-4.7700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2601.9992700,2174.5786100,-4.7700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2601.9992700,2174.5786100,-4.7700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(973,-2589.1486800,2174.4716800,8.3312000,0.0000000,0.0000000,174.0000000); //
	CreateDynamicObject(973,-2579.8156700,2173.6672400,8.3312000,0.0000000,0.0000000,176.0000000); //
	CreateDynamicObject(973,-2570.4790000,2173.3320300,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2562.6040000,2176.6174300,8.3312000,0.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(973,-2555.9809600,2183.2329100,8.3312000,0.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(973,-2548.0297900,2187.1320800,8.3312000,0.0000000,0.0000000,-173.0000000); //
	CreateDynamicObject(973,-2538.7334000,2187.7014200,8.3312000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(973,-2526.4116200,2164.9946300,8.3312000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(973,-2526.4399400,2155.6137700,8.3312000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(973,-2526.4536100,2146.2299800,8.3312000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(973,-2526.4511700,2136.8474100,8.3312000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(973,-2500.8779300,2088.5341800,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2491.4956100,2088.5341800,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2483.0908200,2091.2199700,8.3312000,0.0000000,0.0000000,214.8999900); //
	CreateDynamicObject(973,-2475.3957500,2096.5837400,8.3312000,0.0000000,0.0000000,214.8999900); //
	CreateDynamicObject(973,-2467.6999500,2101.8750000,8.3312000,0.0000000,0.0000000,213.9631300); //
	CreateDynamicObject(973,-2459.9428700,2107.1120600,8.3312000,0.0000000,0.0000000,213.9631300); //
	CreateDynamicObject(973,-2452.1794400,2112.3452100,8.3312000,0.0000000,0.0000000,213.9631300); //
	CreateDynamicObject(973,-2442.4018600,2115.7790500,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2450.6430700,2113.4021000,8.3312000,0.0000000,0.0000000,213.9631300); //
	CreateDynamicObject(973,-2433.0175800,2115.7790500,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2423.6386700,2115.7790500,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2414.2592800,2115.7790500,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2404.8972200,2115.7790500,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18766,-2397.9270000,2109.8132300,6.8844000,90.0000000,0.0000000,60.0000000); //
	CreateDynamicObject(973,-2402.3945300,2115.8024900,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2393.6377000,2113.4611800,8.3312000,0.0000000,0.0000000,150.0000000); //
	CreateDynamicObject(973,-2385.5112300,2108.7751500,8.3312000,0.0000000,0.0000000,150.0000000); //
	CreateDynamicObject(973,-2380.4165000,2105.8383800,8.3312000,0.0000000,0.0000000,150.0000000); //
	CreateDynamicObject(973,-2371.7912600,2103.5366200,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2362.4118700,2103.5366200,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2353.0310100,2103.5366200,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2343.6501500,2103.5366200,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2334.2893100,2103.5366200,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2331.4416500,2103.5471200,8.3312000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2326.7585400,2098.8422900,8.3312000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1438,-2442.0583500,2029.4875500,7.4207500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1256,-2441.1064500,2024.9522700,8.0665000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1256,-2441.1064500,2019.5125700,8.0665000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1256,-2441.1064500,2014.2528100,8.0665000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1256,-2441.1064500,2008.7323000,8.0665000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1256,-2441.1064500,2003.3922100,8.0665000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1256,-2443.8452100,1998.7589100,8.0665000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1256,-2450.5576200,1998.7697800,8.0665000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1256,-2456.9992700,1998.7697800,8.0665000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1280,-2371.7912600,2103.0146500,7.8050000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1280,-2362.4118700,2103.0146500,7.8050000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1280,-2353.0310100,2103.0146500,7.8050000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1280,-2343.6501500,2103.0146500,7.8050000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1280,-2334.2893100,2103.0146500,7.8050000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1594,-2394.4897500,2110.0827600,7.8663000,0.0000000,0.0000000,76.0000000); //
	CreateDynamicObject(1594,-2394.4382300,2105.7360800,7.8663000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1594,-2394.4060100,2101.4731400,7.8663000,0.0000000,0.0000000,26.0000000); //
	CreateDynamicObject(1594,-2389.7915000,2105.9602100,7.8663000,0.0000000,0.0000000,-215.0000000); //
	CreateDynamicObject(1594,-2384.7712400,2105.8989300,7.8663000,0.0000000,0.0000000,-98.0000000); //
	CreateDynamicObject(1594,-2384.7514600,2101.6533200,7.8663000,0.0000000,0.0000000,120.0000000); //
	CreateDynamicObject(1594,-2389.7431600,2101.6154800,7.8663000,0.0000000,0.0000000,-251.0000000); //
	CreateDynamicObject(1338,-2463.7971200,2096.5986300,8.1589000,0.0000000,0.0000000,62.0000000); //
	CreateDynamicObject(1415,-2529.4392100,2072.4560500,7.5445000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2677,-2528.9792500,2070.4323700,7.7338000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2674,-2528.0820300,2072.4309100,7.4648000,0.0000000,0.0000000,98.0000000); //
	CreateDynamicObject(1331,-2604.1723600,2111.7934600,8.3156000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1332,-2604.3078600,2114.0075700,8.3156000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1333,-2604.2871100,2116.3596200,8.3156000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1334,-2604.4658200,2118.8908700,8.3156000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(923,-2604.6235400,2121.3493700,8.3057000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19447,-2586.7702600,2144.7966300,9.1284200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1297,-2621.0585900,2137.2873500,18.5967000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1297,-2609.2382800,2109.7089800,13.8010700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1297,-2621.1301300,2080.2607400,10.8429700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1297,-2608.7373000,2043.6289100,10.7460600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1297,-2622.2368200,2008.9300500,10.7461000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1297,-2594.9218800,1982.1263400,10.7461000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1297,-2563.0119600,1996.2628200,10.7461000,0.0000000,0.0000000,135.0000000); //
	CreateDynamicObject(1297,-2562.2807600,1938.9400600,10.7461000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1297,-2549.3444800,1962.3769500,10.7461000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1297,-2548.6377000,1915.9471400,10.7461000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1297,-2547.1960400,2016.0910600,10.7461000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(1297,-2561.8454600,2043.6582000,10.7461000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1297,-2548.8772000,2077.6403800,10.7461000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1297,-2562.1098600,2108.5752000,10.7461000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1297,-2549.9113800,2141.9223600,10.7461000,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(1297,-2586.7602500,2156.1259800,10.7461000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1297,-2615.0898400,2171.1035200,10.7461000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1297,-2643.5708000,2157.6110800,10.7461000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1297,-2508.4826700,2002.2517100,10.7461000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1297,-2475.0166000,2015.6500200,10.7461000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1297,-2482.0434600,1978.9097900,10.7461000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1297,-2468.2888200,1949.6127900,10.7461000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1297,-2481.8391100,1925.4836400,10.7461000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1297,-2449.3315400,2006.8741500,10.7461000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(1297,-2462.3188500,2043.8856200,10.7461000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1297,-2448.5744600,2068.3252000,10.7461000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1297,-2435.0210000,2094.8325200,10.7461000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1297,-2403.5947300,2081.8659700,10.7461000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1297,-2369.5690900,2095.2002000,10.7461000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1297,-2341.4409200,2082.0163600,10.7461000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1359,-2548.5334500,1961.1897000,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2563.1833500,2020.9620400,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2548.2963900,2078.8261700,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2550.4404300,2167.7968800,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2541.7482900,2183.2453600,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2532.3815900,2138.6386700,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2617.9809600,2171.9528800,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2521.0583500,1999.0155000,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2495.5844700,2024.1572300,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2509.1806600,2058.0361300,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2444.1193800,2031.0960700,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2459.2324200,1998.9862100,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2461.0334500,2090.9626500,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2397.6821300,2100.0529800,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2387.2502400,2078.4440900,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2366.1330600,2078.1386700,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2328.9121100,2102.8244600,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2567.0627400,2034.5412600,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2604.3840300,2034.3133500,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2565.7341300,2107.3522900,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2624.7304700,2071.0625000,8.1645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2630.4306600,1995.6116900,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2590.4719200,1998.0249000,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2482.7568400,1948.2546400,8.0645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1359,-2606.6218300,2340.7756300,8.0246000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1280,-2614.8112800,1979.6451400,7.7233000,0.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(1280,-2619.4838900,1984.2973600,7.7233000,0.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(1280,-2624.4665500,1989.3161600,7.7233000,0.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(1280,-2629.1667500,1994.0542000,7.7233000,0.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(1280,-2630.7168000,1998.4665500,7.7233000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(1280,-2630.7168000,2005.6656500,7.7233000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(1280,-2630.7168000,2012.9860800,7.7233000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(1432,-2647.2627000,2037.0889900,8.2678000,0.0000000,0.0000000,47.0000000); //
	CreateDynamicObject(1432,-2646.1789600,2043.4007600,8.2678000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1432,-2648.4697300,2026.5899700,8.2678000,0.0000000,0.0000000,-25.0000000); //
	CreateDynamicObject(1432,-2647.8618200,2031.7630600,8.2678000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1432,-2643.5852100,2026.1796900,8.2678000,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(1432,-2643.0168500,2031.6955600,8.2678000,0.0000000,0.0000000,-62.0000000); //
	CreateDynamicObject(1432,-2642.7658700,2036.9102800,8.2678000,0.0000000,0.0000000,-142.0000000); //
	CreateDynamicObject(1432,-2642.0336900,2043.1584500,8.2678000,0.0000000,0.0000000,-127.0000000); //
	CreateDynamicObject(1432,-2643.4941400,2047.3243400,8.2678000,0.0000000,0.0000000,-191.0000000); //
	CreateDynamicObject(1532,-2540.9438500,2184.1135300,7.4634000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1532,-2540.9748500,2187.1281700,7.4634000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1281,-2548.0681200,2184.1882300,8.2690000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1281,-2548.0681200,2178.9729000,8.2690000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1281,-2548.0681200,2173.0061000,8.2690000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(984,-2550.9550800,2180.1355000,7.7335000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(983,-2550.9550800,2170.5024400,7.7795000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1441,-2576.4677700,2031.8802500,8.0323000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1227,-2578.3032200,2014.2077600,8.2175000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1280,-2603.6857900,2008.4875500,7.8373000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1280,-2603.6857900,2003.4512900,7.8373000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3380,-2622.4650900,2018.9469000,7.3636000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3380,-2585.5026900,1995.7893100,7.3636000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3380,-2548.9521500,2112.6704100,7.3636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3380,-2603.6315900,2158.1179200,7.3636000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3380,-2485.4694800,2002.0618900,7.3636000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3380,-2461.9665500,2043.8154300,7.3636000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3380,-2448.3439900,2058.3254400,7.3636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3380,-2427.2597700,2095.0808100,7.3636000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1320,-2409.0610400,2082.3710900,8.8050900,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1320,-2461.5627400,2058.9672900,8.8051000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1321,-2451.8193400,2010.4421400,8.8051000,0.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(1323,-2468.7551300,1975.5865500,8.8051000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1320,-2500.6618700,2002.0805700,8.8051000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1323,-2525.0312500,2015.2797900,8.8051000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1321,-2548.8383800,1958.3840300,8.8051000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1320,-2548.6208500,1978.3961200,8.8051000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1323,-2584.9252900,1981.9707000,8.8051000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1321,-2561.6408700,2043.7354700,8.8051000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1320,-2561.7927200,2019.2529300,8.8051000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(11451,-2658.9843800,2125.8789100,7.4428000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(17577,-2442.4831500,2297.5481000,8.7469200,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(17578,-2443.1328100,2303.1135300,10.2416000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(17579,-2443.1328100,2303.1135300,10.2416000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19381,-2406.1726100,2356.5695800,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2396.8056600,2358.7941900,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2399.2189900,2369.0136700,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2389.8432600,2371.2280300,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2380.4726600,2373.4460400,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2371.0983900,2375.6618700,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2373.5124500,2385.8801300,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2364.1352500,2388.0930200,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2375.9248000,2396.0979000,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2366.5495600,2398.3122600,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2361.7214400,2377.8759800,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2408.5864300,2366.7895500,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2387.4321300,2361.0144000,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2401.6328100,2379.2316900,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19380,-2392.2585400,2381.4462900,3.9507000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2411.0000000,2377.0092800,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2413.4126000,2387.2294900,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2415.8259300,2397.4497100,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2404.0361300,2389.4428700,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2394.6606400,2391.6543000,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2406.4509300,2399.6626000,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2397.0742200,2401.8737800,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2382.8859900,2383.6586900,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2385.2968800,2393.8759800,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2387.7099600,2404.0930200,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2378.3325200,2406.3054200,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2368.9560500,2408.5210000,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(715,-2367.6738300,2360.9948700,12.1328000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19381,-2357.1765100,2400.5251500,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2354.7641600,2390.3064000,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2352.3513200,2380.0869100,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2342.9753400,2382.3024900,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2345.3879400,2392.5210000,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2378.0573700,2363.2280300,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2368.6821300,2365.4431200,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2359.3066400,2367.6569800,3.9867000,0.0000000,90.0000000,103.2848000); //
	CreateDynamicObject(19381,-2356.4751000,2373.4172400,3.9767000,0.0000000,90.0000000,53.8243100); //
	CreateDynamicObject(19381,-2382.2094700,2361.1311000,3.9767000,0.0000000,90.0000000,189.0000000); //
	CreateDynamicObject(19381,-2367.2412100,2364.4226100,3.9767000,0.0000000,90.0000000,205.0000000); //
	CreateDynamicObject(19381,-2375.7421900,2361.9882800,3.9667000,0.0000000,90.0000000,187.0000000); //
	CreateDynamicObject(19381,-2362.5944800,2400.9511700,3.9767000,0.0000000,90.0000000,149.0000000); //
	CreateDynamicObject(19381,-2379.2089800,2396.3073700,3.9767000,0.0000000,90.0000000,47.0000000); //
	CreateDynamicObject(19381,-2371.5861800,2401.9494600,3.9647000,0.0000000,90.0000000,193.2848100); //
	CreateDynamicObject(19381,-2388.3916000,2384.3254400,3.9767000,0.0000000,90.0000000,149.0000000); //
	CreateDynamicObject(19381,-2408.1106000,2382.7807600,3.9767000,0.0000000,90.0000000,47.0000000); //
	CreateDynamicObject(19381,-2398.4108900,2387.2729500,3.9647000,0.0000000,90.0000000,183.0000000); //
	CreateDynamicObject(9327,-2411.8818400,2387.1455100,5.4691100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9328,-2407.2211900,2363.7580600,5.7701000,0.0000000,0.0000000,190.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3170,-2384.4445800,2385.0092800,4.0155000,0.0000000,0.0000000,-16.0000000); //
	CreateDynamicObject(3173,-2375.7651400,2400.2321800,4.0155000,0.0000000,0.0000000,-48.0000000); //
	CreateDynamicObject(3241,-2353.1970200,2386.5217300,4.5954300,0.0000000,0.0000000,6.0000000); //
	CreateDynamicObject(3174,-2388.2922400,2360.9196800,4.0155000,0.0000000,0.0000000,11.0000000); //
	CreateDynamicObject(3172,-2378.9707000,2362.4270000,4.0155000,0.0000000,0.0000000,-69.0000000); //
	CreateDynamicObject(3171,-2362.9121100,2369.7631800,4.0155000,0.0000000,0.0000000,-47.0000000); //
	CreateDynamicObject(3878,-2464.6235400,2399.0717800,14.4803000,-2.0000000,0.0000000,120.0000000); //
	CreateDynamicObject(3878,-2464.5979000,2399.0918000,13.4760000,-2.0000000,180.0000000,120.0000000); //
	CreateDynamicObject(19377,-2412.7844200,2365.1474600,0.0524400,0.0000000,0.0000000,193.4888000); //
	CreateDynamicObject(19377,-2415.0913100,2374.8505900,0.7294000,-8.0000000,0.0000000,193.0000000); //
	CreateDynamicObject(19377,-2416.5932600,2381.8537600,1.6343000,-6.0000000,0.0000000,191.0000000); //
	CreateDynamicObject(19377,-2418.6633300,2391.2148400,3.9524000,-20.0000000,0.0000000,194.0000000); //
	CreateDynamicObject(19377,-2415.8725600,2394.4140600,3.9524000,-4.0000000,0.0000000,276.5932600); //
	CreateDynamicObject(19377,-2406.3308100,2395.5156300,3.2673000,-4.0000000,0.0000000,276.5932900); //
	CreateDynamicObject(19377,-2401.5310100,2394.8767100,2.9663000,-4.0000000,0.0000000,253.3121900); //
	CreateDynamicObject(19377,-2392.3730500,2391.9895000,2.2653000,-4.0000000,0.0000000,251.3349000); //
	CreateDynamicObject(19377,-2390.2277800,2391.3325200,2.2653000,2.0000000,0.0000000,249.9858900); //
	CreateDynamicObject(19377,-2383.8850100,2394.4187000,2.7683000,4.0000000,0.0000000,335.9631300); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(3242,-2395.4348100,2388.3762200,5.9819000,0.0000000,0.0000000,-26.0000000); //
	CreateDynamicObject(19377,-2380.5378400,2401.5695800,3.3835000,4.0000000,0.0000000,334.8825700); //
	CreateDynamicObject(19377,-2377.3837900,2407.3640100,3.7936000,4.0000000,0.0000000,325.6973600); //
	CreateDynamicObject(19377,-2371.3942900,2408.2348600,3.8068000,-4.0000000,0.0000000,235.0000000); //
	CreateDynamicObject(19377,-2363.5415000,2402.7277800,3.1332000,-4.0000000,0.0000000,235.0000000); //
	CreateDynamicObject(19377,-2355.6755400,2397.2082500,2.4626000,-4.0000000,0.0000000,235.0000000); //
	CreateDynamicObject(19377,-2347.7790500,2391.7356000,1.8535500,-4.0000000,0.0000000,235.0000000); //
	CreateDynamicObject(19377,-2346.7690400,2391.0415000,1.7525500,-4.0000000,0.0000000,235.0000000); //
	CreateDynamicObject(19377,-2345.3220200,2384.6748000,0.1696000,2.0000000,0.0000000,324.0000000); //
	CreateDynamicObject(19377,-2350.9572800,2376.9445800,-0.1654000,2.0000000,0.0000000,324.0000000); //
	CreateDynamicObject(19377,-2356.4990200,2369.3454600,-0.6604900,4.0000000,0.0000000,323.5969500); //
	CreateDynamicObject(18981,-2540.0935100,2353.6777300,3.6099000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2515.0947300,2353.6777300,3.6099000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2540.0935100,2378.6779800,3.6099000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2515.0947300,2378.6779800,3.6099000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1440,-2503.3388700,2342.7573200,4.5531000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1440,-2506.7128900,2370.1831100,4.5531000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2511.1694300,2346.9389600,4.1809000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19435,-2511.1694300,2350.4377400,4.1809000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19435,-2511.1694300,2353.9345700,4.1809000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19435,-2511.1694300,2357.4343300,4.1809000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19435,-2511.1694300,2360.9335900,4.1809000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19435,-2511.1794400,2361.6938500,4.1709000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(18765,-2548.4914600,2346.1904300,1.5923000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18765,-2549.7382800,2356.1840800,1.5923000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(715,-2408.4152800,2394.1235400,12.1328000,0.0000000,0.0000000,-280.0000000); //
	CreateDynamicObject(767,-2368.3713400,2403.4870600,3.6170000,0.0000000,0.0000000,-236.0000000); //
	CreateDynamicObject(737,-2386.0747100,2378.1782200,3.7535300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1297,-2400.1096200,2353.0022000,7.3750000,0.0000000,0.0000000,190.0000000); //
	CreateDynamicObject(1297,-2405.6181600,2376.3483900,7.3750000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1297,-2387.1726100,2366.7856400,7.3750000,0.0000000,0.0000000,-78.0000000); //
	CreateDynamicObject(1297,-2375.8571800,2392.9006300,7.3750000,0.0000000,0.0000000,134.0000000); //
	CreateDynamicObject(1297,-2358.0385700,2380.1867700,7.3750000,0.0000000,0.0000000,-44.0000000); //
	CreateDynamicObject(1413,-2407.8281300,2350.9038100,5.3000000,0.0000000,0.0000000,13.2848000); //
	CreateDynamicObject(1412,-2402.7915000,2352.1630900,5.3000000,0.0000000,0.0000000,193.2848100); //
	CreateDynamicObject(1414,-2403.6731000,2351.8596200,5.3000000,0.0000000,0.0000000,13.2848000); //
	CreateDynamicObject(1414,-2402.0261200,2352.2399900,5.3000000,0.0000000,0.0000000,13.2848000); //
	CreateDynamicObject(1440,-2391.5898400,2356.0031700,4.4906000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1442,-2392.8200700,2364.7307100,4.4906000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1442,-2385.1169400,2378.2617200,4.4906000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1442,-2357.0388200,2380.8510700,4.4906000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1438,-2382.7158200,2379.6936000,4.4906000,0.0000000,0.0000000,69.0000000); //
	CreateDynamicObject(1437,-2352.7656300,2379.2119100,3.4339200,0.0000000,0.0000000,6.5011000); //
	CreateDynamicObject(3594,-2405.7502400,2354.9453100,4.4715400,0.0000000,0.0000000,91.0000000); //
	CreateDynamicObject(2671,-2403.7526900,2356.7619600,4.0856000,0.0000000,0.0000000,-25.0000000); //
	CreateDynamicObject(1369,-2392.5695800,2383.0800800,4.6571000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1327,-2379.7356000,2394.0910600,4.0512900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1327,-2381.1916500,2393.3789100,4.0513000,0.0000000,0.0000000,-40.0000000); //
	CreateDynamicObject(1327,-2367.6711400,2362.3161600,4.8919000,-6.0000000,15.0000000,-40.0000000); //
	CreateDynamicObject(1358,-2404.8850100,2359.9270000,5.2702000,0.0000000,0.0000000,103.2848000); //
	CreateDynamicObject(849,-2415.0776400,2380.1367200,4.3250000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(850,-2398.9233400,2384.7170400,4.1570000,0.0000000,0.0000000,40.0000000); //
	CreateDynamicObject(851,-2385.1511200,2362.2036100,4.3250000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(852,-2350.9958500,2379.5280800,4.0010000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(853,-2367.8557100,2401.7580600,4.4235600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(854,-2380.3869600,2391.5481000,4.2626000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2420.4912100,2515.2922400,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2407.5256300,2515.0898400,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2396.7893100,2515.1958000,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2417.5273400,2532.1699200,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2429.3952600,2535.1232900,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2439.9172400,2536.3593800,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2448.5351600,2536.3154300,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2457.0573700,2535.8701200,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2465.6267100,2535.7822300,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2474.5158700,2535.5737300,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3419,-2504.3066400,2518.7605000,17.5508000,2.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3417,-2496.0786100,2507.4360400,17.4487900,0.0000000,-4.0000000,180.0000000); //
	CreateDynamicObject(18568,-2505.0910600,2510.7243700,18.6048900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18609,-2474.9965800,2513.4611800,17.6388900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18609,-2477.0476100,2513.6950700,17.6388900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18609,-2475.0600600,2513.3232400,17.6389000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2469.6840800,2513.0161100,17.6389000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2474.9611800,2511.4780300,17.6389000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2474.9135700,2509.7265600,17.6389000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2469.6718800,2511.3601100,17.6389000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2469.5710400,2509.5153800,17.6389000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2472.9670400,2507.6215800,17.6389000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2446.1267100,2517.4792500,15.2445600,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2446.0083000,2515.6826200,15.2445600,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2443.6108400,2514.0820300,15.2445600,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2446.2270500,2514.2268100,15.2445600,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2446.4948700,2512.5195300,15.2445600,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2446.2717300,2510.8825700,15.2445600,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2446.1716300,2508.9829100,15.2445600,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2446.0634800,2507.3855000,15.2445600,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18609,-2446.3330100,2507.0366200,15.2446000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19380,-2475.6948200,2510.7895500,15.9737600,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19380,-2475.7439000,2516.6049800,16.0875700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19380,-2448.0446800,2517.1367200,13.7190900,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19380,-2448.0412600,2511.0830100,13.8552300,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18568,-2506.2722200,2510.7226600,18.6048900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18568,-2509.6691900,2510.7778300,18.6048900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18568,-2510.8147000,2510.8354500,18.6048900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19380,-2477.8369100,2490.5730000,16.6577000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19380,-2477.6088900,2487.2810100,16.6697000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18862,-1856.4077100,117.8244200,18.6383100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18862,-1844.2774700,116.8426100,17.4816200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18862,-1855.6914100,129.2365100,17.7587600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18862,-1857.4194300,146.9815200,18.6383100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18862,-1854.3261700,160.1931600,17.3700500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18862,-1847.8060300,133.7623300,18.6383100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18862,-1850.9353000,148.9474300,17.0286100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(5291,-1847.9808300,172.8588900,15.5507000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18660,-2418.0922900,2389.5197800,6.1301500,0.0000000,0.0000000,194.0000000); //
	CreateDynamicObject(18660,-2363.9763200,2402.8850100,6.1302000,18.0000000,0.0000000,55.0000000); //
	CreateDynamicObject(18663,-2357.6918900,2398.4536100,6.1302000,-8.0000000,0.0000000,55.0000000); //
	CreateDynamicObject(18661,-2383.9677700,2393.9101600,6.1302000,0.0000000,0.0000000,155.9631000); //
	CreateDynamicObject(4227,-2405.7846700,2395.5632300,5.4864500,0.0000000,0.0000000,366.5932900); //
	CreateDynamicObject(6959,-2401.9509300,2289.5837400,-18.0477000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(6959,-2443.2988300,2289.5837400,-18.0477000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(6959,-2360.6062000,2289.5837400,-18.0477000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(6959,-2360.6062000,2289.5837400,-58.0472000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(6959,-2401.9509300,2289.5837400,-58.0472000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(6959,-2443.2988300,2289.5837400,-58.0472000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3260,-2404.8654800,2718.8933100,88.8726200,0.0000000,90.0000000,-90.0000000); //
	CreateDynamicObject(3498,-2404.6655300,2719.8615700,86.3940000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3498,-2404.6655300,2716.9082000,86.3940000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3498,-2401.6403800,2716.9082000,86.3940000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3260,-2403.6560100,2716.7097200,88.8726000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(3498,-2401.6403800,2719.8615700,86.3940000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3260,-2402.6574700,2720.0634800,88.8726000,0.0000000,90.0000000,180.0000000); //
	CreateDynamicObject(19366,-2403.1386700,2718.3806200,88.2849000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19366,-2403.1386700,2718.3806200,90.6534000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1437,-2400.5612800,2717.4660600,83.6848000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1437,-2815.7812500,2674.8364300,219.5262000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3260,-2814.8247100,2677.0402800,224.6789100,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(3498,-2815.1018100,2678.9001500,222.3270600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3498,-2818.0517600,2678.9001500,222.3271000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19366,-2816.5837400,2677.4243200,224.1593900,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(3498,-2818.0517600,2676.0173300,222.3271000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3498,-2815.1018100,2676.0173300,213.2977000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3260,-2816.0383300,2679.1682100,224.6788900,0.0000000,90.0000000,180.0000000); //
	CreateDynamicObject(3260,-2818.3618200,2678.0419900,224.6788900,0.0000000,90.0000000,-90.0000000); //
	CreateDynamicObject(19366,-2816.5837400,2677.4243200,226.6003000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(1437,-2815.7805200,2673.8198200,213.7645000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19366,-2770.6511200,2257.7893100,81.5551000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(3498,-2772.2104500,2259.2688000,77.3016500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3260,-2770.1589400,2259.5505400,79.5132800,0.0000000,90.0000000,180.0000000); //
	CreateDynamicObject(1437,-2769.8042000,2255.1845700,74.2333200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3498,-2769.0849600,2259.2688000,68.2743000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19366,-2770.6511200,2257.7893100,78.9957700,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(3498,-2769.0849600,2256.2504900,68.2716000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3260,-2768.7868700,2257.2522000,79.5133000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(3498,-2772.2104500,2256.2504900,77.3017000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3260,-2772.4628900,2258.2819800,79.5133000,0.0000000,90.0000000,-90.0000000); //
	CreateDynamicObject(658,-2765.7011700,2261.5717800,66.8141900,0.0000000,0.0000000,-47.0000000); //
	CreateDynamicObject(1315,-2565.3923300,1983.8742700,10.5949100,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1315,-2550.6035200,1978.3502200,10.5949000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1315,-2544.7981000,2013.3840300,10.5949000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1315,-2559.8303200,2019.3446000,10.5949000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1315,-2470.8564500,1998.2468300,10.5949000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1315,-2485.7006800,2003.9326200,10.5949000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1315,-2465.6237800,2023.6746800,10.5949000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1315,-2459.6469700,2039.0048800,10.5949000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1315,-2372.1215800,2078.5512700,10.5949000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1315,-2365.8449700,2093.2954100,10.5949000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1315,-2386.7211900,2084.0878900,10.5949000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1320,-2609.9829100,2306.6384300,8.7460000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1321,-2620.6586900,2355.6189000,8.7460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1323,-2589.6342800,2337.2282700,6.8792500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1324,-2589.7673300,2324.9919400,6.8792000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1324,-2554.6884800,2302.5803200,5.2372000,0.0000000,0.0000000,-70.0000000); //
	CreateDynamicObject(1324,-2568.6794400,2358.6240200,7.9295000,0.0000000,0.0000000,80.0000000); //
	CreateDynamicObject(1321,-2551.7658700,2376.1430700,13.1912000,0.0000000,0.0000000,-122.0000000); //
	CreateDynamicObject(1321,-2566.8254400,2410.5061000,15.2094600,0.0000000,0.0000000,-224.0000000); //
	CreateDynamicObject(3380,-2580.0205100,2430.5148900,13.8668000,0.0000000,0.0000000,62.0000000); //
	CreateDynamicObject(3380,-2606.2365700,2407.8623000,11.7074000,0.0000000,0.0000000,-10.0000000); //
	CreateDynamicObject(1320,-2530.9960900,2412.9941400,16.5182000,0.0000000,0.0000000,32.0000000); //
	CreateDynamicObject(1324,-2525.0673800,2402.6398900,16.3182000,0.0000000,0.0000000,214.0000000); //
	CreateDynamicObject(1324,-2530.2399900,2441.0715300,18.2141000,0.0000000,0.0000000,139.0000000); //
	CreateDynamicObject(1322,-2521.1359900,2452.0900900,18.2001000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(1324,-2482.1301300,2436.9521500,16.5273000,0.0000000,0.0000000,11.0000000); //
	CreateDynamicObject(1324,-2486.9409200,2403.1652800,16.4717000,0.0000000,0.0000000,-55.0000000); //
	CreateDynamicObject(1324,-2477.4321300,2361.1660200,8.9471000,0.0000000,0.0000000,116.0000000); //
	CreateDynamicObject(1324,-2491.8437500,2325.0898400,5.3566600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1324,-2460.1047400,2308.0844700,5.3487000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1324,-2434.9035600,2340.7573200,5.3367000,0.0000000,0.0000000,10.0000000); //
	CreateDynamicObject(1323,-2342.5354000,2360.8835400,5.7468000,0.0000000,0.0000000,231.0000000); //
	CreateDynamicObject(1321,-2299.1530800,2377.6599100,5.7468000,0.0000000,0.0000000,-35.0000000); //
	CreateDynamicObject(1297,-2277.2570800,2321.9863300,7.1729000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1321,-2355.1926300,2401.8291000,6.9504000,0.0000000,0.0000000,144.0000000); //
	CreateDynamicObject(3380,-2472.6303700,2290.1401400,3.8831700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3380,-2496.6020500,2255.3962400,3.8832000,0.0000000,0.0000000,-98.0000000); //
	CreateDynamicObject(3380,-2523.3889200,2279.4816900,3.8832000,0.0000000,0.0000000,66.0000000); //
	CreateDynamicObject(3380,-2569.3005400,2313.1479500,3.8712000,0.0000000,0.0000000,184.0000000); //
	CreateDynamicObject(1315,-2611.6630900,2319.7773400,10.6074000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1315,-2618.6460000,2342.2973600,10.6074000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1315,-2604.9294400,2335.6035200,10.5054000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(17564,-2654.5097700,2127.6259800,8.6689400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(973,-2626.9375000,2148.5148900,8.2754000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(973,-2626.9375000,2139.1298800,8.2754000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(973,-2626.9375000,2129.7439000,8.2754000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(973,-2622.4563000,2125.2651400,8.2754000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(8229,-2647.1352500,2153.6257300,10.1079500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1237,-2626.0314900,2123.9702100,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2627.7793000,2123.9702100,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2629.5449200,2123.9702100,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2631.4064900,2123.9702100,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2626.0314900,2119.5532200,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2631.4064900,2119.5532200,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2629.5449200,2119.5532200,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2627.7793000,2119.5532200,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2626.0314900,2109.0566400,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2627.7793000,2109.0566400,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2627.7793000,2111.0217300,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2627.7793000,2100.8269000,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2627.7793000,2098.7251000,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2626.0314900,2100.8269000,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2628.2854000,2080.7944300,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2627.7793000,2083.5075700,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2627.7793000,2086.4880400,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2630.3735400,2078.9392100,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2633.2961400,2078.1796900,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2636.3107900,2078.0012200,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2634.1347700,2083.7170400,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2633.1071800,2085.5852100,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1237,-2635.8928200,2083.2456100,7.4304000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3578,-2658.0122100,2077.5393100,6.7425000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3578,-2658.0122100,2082.9663100,6.7425000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3578,-2659.6215800,2087.4992700,6.7425000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3578,-2659.6279300,2091.9453100,6.7425000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3578,-2663.6645500,2096.8488800,6.7425000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2708.2919900,2153.5366200,3.0629700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2707.3032200,2153.4951200,3.0629700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2706.3078600,2153.2692900,3.0629700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2705.3210400,2152.8454600,3.0629700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2704.3369100,2153.0732400,3.0629700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2703.3508300,2153.0402800,3.0629700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(984,-2605.1145000,2072.0275900,7.7335000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13714,-2440.0676300,2272.7963900,4.0932000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1280,-2481.3222700,2319.8669400,4.3909700,0.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(1280,-2477.3989300,2315.9382300,4.3909700,0.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(973,-2604.8764600,2148.5148900,8.2754000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(973,-2604.8764600,2139.1298800,8.2754000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(973,-2604.8764600,2129.7439000,8.2754000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(973,-2609.3552200,2125.2651400,8.2754000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2609.3552200,2137.7299800,8.2754000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2622.4563000,2137.7299800,8.2754000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(973,-2616.9392100,2137.7446300,8.2754000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3498,-2769.0849600,2256.2504900,77.3017000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3498,-2769.0849600,2259.2688000,77.3017000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3498,-2815.1018100,2676.0173300,222.3271000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(715,-2512.0290500,2507.1345200,25.5484000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1227,-2519.0830100,2295.0307600,4.7578100,356.8584000,0.0000000,-3.1415900); //
	CreateDynamicObject(18660,-2586.6323200,2146.6296400,9.1716700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18663,-2586.6440400,2143.0964400,9.1717000,25.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18662,-2528.4978000,2060.9553200,9.3420000,-33.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(18664,-2510.0947300,2065.2177700,8.6268600,11.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(4227,-2525.0708000,2060.8501000,8.8798000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2677,-2511.4321300,2062.1694300,7.7338000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2677,-2511.6049800,2062.9860800,7.7338000,0.0000000,0.0000000,-127.0000000); //
	CreateDynamicObject(12845,-2539.9318800,1991.5310100,9.3769000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1514,-2538.9431200,1988.9692400,8.4384000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(901,-2266.5752000,2571.5222200,7.3703000,13.0000000,-40.0000000,84.0000000); //
	CreateDynamicObject(898,-2248.7375500,2569.8796400,6.5217700,-10.0000000,0.0000000,62.0000000); //
	CreateDynamicObject(898,-2261.7856400,2574.5629900,8.2303800,12.0000000,14.0000000,0.0000000); //
	CreateDynamicObject(901,-2258.8266600,2565.2600100,0.2555100,13.0000000,-40.0000000,84.0000000); //
	CreateDynamicObject(901,-2256.4611800,2569.3840300,1.3870900,13.0000000,-40.0000000,84.0000000); //
	CreateDynamicObject(901,-2242.6911600,2568.8913600,7.3703000,13.0000000,-40.0000000,84.0000000); //
	CreateDynamicObject(901,-2239.2653800,2571.3161600,7.3703000,13.0000000,-40.0000000,127.0000000); //
	CreateDynamicObject(896,-2251.6303700,2580.7724600,11.4433000,-62.0000000,-8.0000000,0.0000000); //
	CreateDynamicObject(8169,-2255.1928700,2571.9973100,6.2634000,0.0000000,-90.0000000,62.0000000); //
	CreateDynamicObject(905,-2254.7028800,2571.8544900,9.7698500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(905,-2255.2187500,2572.1918900,9.7698500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(905,-2254.2148400,2572.7844200,9.7698500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(905,-2261.2138700,2564.7956500,4.4273200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(905,-2261.5190400,2564.6901900,4.4273200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(905,-2261.4023400,2565.7793000,4.8323800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(905,-2253.8208000,2566.7241200,4.2171800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(905,-2253.2856400,2565.3027300,3.6019800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(901,-1812.9528800,2870.8200700,59.0415600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(901,-1824.8487500,2866.8964800,54.6730300,0.0000000,-69.0000000,0.0000000); //
	CreateDynamicObject(8169,-1818.1064500,2873.2534200,56.0150000,-90.0000000,0.0000000,18.0000000); //
	CreateDynamicObject(900,-1812.5476100,2875.4436000,52.5457500,-10.0000000,-22.0000000,0.0000000); //
	CreateDynamicObject(901,-1821.2589100,2867.8391100,54.6730000,55.0000000,-69.0000000,0.0000000); //
	CreateDynamicObject(901,-1812.6991000,2870.8332500,54.6730000,55.0000000,-69.0000000,0.0000000); //
	CreateDynamicObject(901,-1805.5081800,2875.1713900,57.7621000,-11.0000000,0.0000000,55.0000000); //
	CreateDynamicObject(900,-1805.6456300,2880.7712400,52.5457500,-10.0000000,-22.0000000,0.0000000); //
	CreateDynamicObject(900,-1824.3071300,2867.9147900,48.7964000,4.0000000,18.0000000,76.0000000); //
	CreateDynamicObject(900,-1813.8787800,2879.0356400,45.3179200,0.0000000,-4.0000000,-4.0000000); //
	CreateDynamicObject(900,-1803.6776100,2876.4585000,46.9045900,0.0000000,-4.0000000,-69.0000000); //
	CreateDynamicObject(8169,-2572.8981900,2864.0490700,107.8042200,-68.0000000,33.0000000,33.0000000); //
	CreateDynamicObject(901,-2569.2746600,2858.0637200,110.2896000,-11.0000000,25.0000000,0.0000000); //
	CreateDynamicObject(901,-2573.4897500,2858.4221200,110.2896000,-11.0000000,25.0000000,127.0000000); //
	CreateDynamicObject(901,-2577.5063500,2860.1728500,110.2896000,-11.0000000,25.0000000,127.0000000); //
	CreateDynamicObject(901,-2566.6108400,2859.5153800,110.2896000,-11.0000000,25.0000000,0.0000000); //
	CreateDynamicObject(898,-2574.9392100,2861.4624000,101.1959200,18.0000000,25.0000000,-11.0000000); //
	CreateDynamicObject(898,-2569.2219200,2863.4514200,101.1959000,18.0000000,25.0000000,-55.0000000); //
	CreateDynamicObject(8169,-2572.4011200,2864.2751500,107.8042000,-68.0000000,33.0000000,47.0000000); //
	CreateDynamicObject(898,-2567.6801800,2861.4797400,103.6430500,18.0000000,25.0000000,-55.0000000); //
	CreateDynamicObject(901,-2003.5789800,2372.4187000,8.9372900,0.0000000,33.0000000,0.0000000); //
	CreateDynamicObject(901,-2012.1234100,2372.4326200,11.3494000,0.0000000,-47.0000000,0.0000000); //
	CreateDynamicObject(901,-2015.1933600,2375.0031700,9.5535400,0.0000000,-47.0000000,0.0000000); //
	CreateDynamicObject(900,-2003.0948500,2370.0461400,4.8183700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(900,-2009.8283700,2374.8090800,4.8183700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8169,-2009.2374300,2368.7761200,8.8919000,91.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(17068,-2028.8017600,2335.9604500,1.1497900,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(11495,-2050.8022500,2335.9563000,1.1498000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(946,-2360.6062000,2303.9099100,3.9855000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3819,-2342.6298800,2313.9152800,2.7200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(946,-2401.9509300,2304.0200200,3.9855000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(16001,-2346.9043000,2325.9414100,1.9184000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8947,-2289.1162100,2324.5185500,7.0143400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8947,-2294.1796900,2324.4453100,6.9843000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8947,-2291.2482900,2323.8054200,6.9563000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8948,-2291.2480500,2311.9484900,5.7876000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2774,-2300.8325200,2311.7260700,-3.0243800,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,-2300.8325200,2305.2233900,7.4292000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,-2300.8325200,2305.2233900,3.4293000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2774,-2300.8325200,2298.7922400,-3.0244000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,-2300.8325200,2293.7255900,7.4292000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,-2300.8383800,2293.7065400,3.4293000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2774,-2300.8325200,2287.2722200,-3.0244000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,-2294.3386200,2287.2722200,7.4292000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3851,-2294.3386200,2287.2722200,3.4293000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2774,-2287.8598600,2287.2722200,-3.0244000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2774,-2282.7465800,2287.2722200,-3.0244000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2774,-2282.7465800,2311.7260700,-3.0244000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2774,-2282.7465800,2298.8064000,-3.0244000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,-2282.7465800,2293.7255900,7.4292000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,-2282.7465800,2305.2233900,7.4292000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,-2282.7465800,2305.2233900,3.4293000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,-2282.7465800,2293.7065400,3.4293000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1649,-2285.2058100,2287.2763700,8.3437500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1649,-2285.2058100,2287.2763700,8.3438000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18981,-2291.2482900,2297.6333000,9.8585000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2291.2482900,2322.6328100,9.8585000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2291.2827100,2325.1218300,9.8445000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1532,-2435.9191900,2301.2712400,4.3198000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(19447,-2431.5493200,2293.7048300,3.6573000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19447,-2431.5493200,2303.3393600,3.6573000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2431.5383300,2308.2402300,-0.0003000,-69.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2431.5546900,2309.9213900,-0.0003000,-51.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2431.5446800,2311.1423300,-0.0003000,-40.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19447,-2451.6496600,2321.6027800,3.6573000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19447,-2442.0161100,2321.6027800,3.6573000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19454,-2435.5393100,2321.6242700,0.3956000,51.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19454,-2433.9885300,2321.6213400,0.3956000,37.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19454,-2432.2082500,2321.6252400,1.0108000,19.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19447,-2456.3061500,2294.0166000,3.6573000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19447,-2456.3061500,2303.6499000,3.6573000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,-2456.3061500,2310.0715300,3.6573000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,-2456.3061500,2313.2822300,3.6573000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19381,-2504.0000000,3892.0000000,1922.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2509.5871600,1921.0727500,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2509.5871600,1911.4377400,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19364,-2509.5871600,1905.0146500,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2497.6586900,1911.1977500,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7337,-2555.2404800,1858.6538100,7.3280000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(7338,-2550.0000000,6938.0000000,1826.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(7326,-2473.8588900,1814.9284700,7.4690000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(7337,-2475.2272900,1878.6397700,7.3280000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(17537,-2513.7346200,1813.9866900,18.3121000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(10838,-2475.0813000,1820.7492700,23.5152400,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(18981,-2497.6586900,1886.1988500,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2497.6586900,1861.2021500,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2497.6586900,1843.5701900,6.8900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8062,-2518.5295400,1844.5542000,11.1233000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2521.8947800,1886.1988500,6.8920000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2521.8947800,1861.2021500,6.8920000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2532.8051800,1886.1988500,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2532.8051800,1861.2021500,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2532.8051800,1836.2031300,6.9020000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(2988,-2519.1694300,1898.7164300,7.3831000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2988,-2510.7790500,1898.7303500,7.3831000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19456,-2524.0000000,1898.8293500,9.0440300,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2524.0000000,1898.6512500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2533.6335400,1898.6512500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2533.6335400,1898.8293500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,-2540.0566400,1898.8293500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,-2540.0566400,1898.6512500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,-2543.2673300,1898.8293500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,-2543.2673300,1898.6512500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2505.9445800,1898.6512500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2505.9445800,1898.8293500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1440,-2510.6167000,1908.9903600,7.8083000,0.0000000,0.0000000,-251.0000000); //
	CreateDynamicObject(19456,-2496.3107900,1898.6512500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2496.3107900,1898.8293500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,-2489.8886700,1898.6512500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,-2489.8886700,1898.8293500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19454,-2509.9333500,1832.4892600,11.5142000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19437,-2487.4799800,1898.8293500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19437,-2487.4799800,1898.6512500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19437,-2485.8759800,1898.8293500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19437,-2485.8759800,1898.6512500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2485.2880900,1893.7474400,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.2880900,1874.4803500,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.2880900,1864.8465600,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.2880900,1855.2135000,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.2880900,1845.5803200,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.2880900,1835.9465300,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.4670400,1893.7474400,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.4670400,1874.4803500,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.4670400,1864.8465600,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.4670400,1855.2135000,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.4670400,1845.5803200,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.4670400,1835.9465300,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2490.3725600,1831.3088400,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2495.2766100,1835.9776600,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2495.4558100,1835.9776600,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2490.3725600,1831.4864500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2544.7790500,1893.7474400,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2544.6022900,1893.7474400,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2544.7790500,1874.4803500,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2544.6022900,1874.4803500,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2544.7790500,1864.8465600,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2544.6022900,1864.8465600,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2544.7790500,1855.2135000,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2544.6022900,1855.2135000,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19364,-2543.2673300,1850.3094500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,-2543.2673300,1850.1324500,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(966,-2486.3393600,1887.6103500,7.3939000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(967,-2486.5742200,1889.6860400,7.3939000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(968,-2486.3393600,1887.6103500,8.2153000,0.0000000,-20.0000000,90.0000000); //
	CreateDynamicObject(966,-2543.7365700,1880.9511700,7.3939000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(967,-2543.4621600,1889.7467000,7.3879000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(968,-2543.7365700,1880.9511700,8.2153000,0.0000000,-20.0000000,-90.0000000); //
	CreateDynamicObject(1496,-2499.2814900,1853.5493200,7.3879000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3565,-2487.3439900,1873.8051800,8.7375000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3570,-2487.4636200,1865.6842000,8.7375000,0.0000000,0.0000000,88.0000000); //
	CreateDynamicObject(3571,-2487.4621600,1857.3829300,8.7375000,0.0000000,0.0000000,92.0000000); //
	CreateDynamicObject(3572,-2487.4287100,1849.0803200,8.7375000,0.0000000,0.0000000,86.0000000); //
	CreateDynamicObject(3568,-2490.9167500,1845.2934600,9.7977000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3567,-2542.3022500,1866.9470200,8.2119000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(6965,-2485.2541500,1811.4050300,11.1263000,0.0000000,0.0000000,105.0000000); //
	CreateDynamicObject(6965,-2485.2541500,1811.4050300,4.2357000,180.0000000,0.0000000,105.0000000); //
	CreateDynamicObject(6964,-2485.1252400,1811.4840100,7.2025400,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18763,-2463.7724600,1833.8150600,5.9222500,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2497.6586900,1819.0627400,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2497.6586900,1794.0647000,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2472.6582000,1794.0647000,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2447.6591800,1794.0647000,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2447.6591800,1819.0627400,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2472.6582000,1819.0627400,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2447.6591800,1844.0622600,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2472.6582000,1844.0622600,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2447.6591800,1869.0618900,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2447.6591800,1894.0594500,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(9339,-2453.4314000,1922.9392100,9.2683000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2472.6582000,1869.0618900,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2472.6582000,1894.0594500,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2472.6582000,1919.0589600,6.7290000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18763,-2463.7724600,1837.8153100,4.9208000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2460.6650400,1838.7364500,5.6573100,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19362,-2458.9431200,1838.7341300,5.6493000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19362,-2443.9333500,1838.7364500,5.6573000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19362,-2445.7341300,1838.7319300,5.6473000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19362,-2442.2927200,1837.2187500,5.6493000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2442.2927200,1834.0084200,5.6493000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2442.2937000,1832.0748300,5.6593000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2442.6010700,1829.7421900,5.6493000,0.0000000,0.0000000,348.9210800); //
	CreateDynamicObject(19362,-2443.2187500,1826.5905800,5.6493000,0.0000000,0.0000000,348.9211100); //
	CreateDynamicObject(19435,-2443.6296400,1824.4408000,5.6593000,0.0000000,0.0000000,348.9211100); //
	CreateDynamicObject(19362,-2444.6735800,1822.3557100,5.6493000,0.0000000,0.0000000,326.1202700); //
	CreateDynamicObject(19362,-2446.4633800,1819.6900600,5.6493000,0.0000000,0.0000000,326.1203000); //
	CreateDynamicObject(18765,-2452.3354500,1843.4587400,4.5434000,-4.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2447.7727100,1817.7307100,5.6593000,0.0000000,0.0000000,326.1203000); //
	CreateDynamicObject(19362,-2449.5200200,1816.2568400,5.6493000,0.0000000,0.0000000,303.6961400); //
	CreateDynamicObject(19362,-2452.1909200,1814.4765600,5.6493000,0.0000000,0.0000000,303.6961100); //
	CreateDynamicObject(19435,-2454.0200200,1813.2670900,5.6593000,0.0000000,0.0000000,303.6961100); //
	CreateDynamicObject(19362,-2456.2031300,1812.5305200,5.6493000,0.0000000,0.0000000,281.7719400); //
	CreateDynamicObject(19362,-2459.3459500,1811.8758500,5.6493000,0.0000000,0.0000000,281.7719100); //
	CreateDynamicObject(19435,-2461.5324700,1811.4284700,5.6593000,0.0000000,0.0000000,281.7719100); //
	CreateDynamicObject(19362,-2463.7006800,1811.2884500,5.6493000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19362,-2465.4294400,1809.6212200,5.6493000,0.0000000,0.0000000,352.2872300); //
	CreateDynamicObject(19362,-2465.8588900,1806.4416500,5.6493000,0.0000000,0.0000000,352.2872000); //
	CreateDynamicObject(19362,-2466.8071300,1803.4813200,5.6533000,0.0000000,0.0000000,332.5020100); //
	CreateDynamicObject(19362,-2468.1906700,1800.8223900,5.6493000,0.0000000,0.0000000,332.5020100); //
	CreateDynamicObject(19362,-2470.0302700,1798.3114000,5.6533000,0.0000000,0.0000000,315.0000000); //
	CreateDynamicObject(19362,-2472.1377000,1796.2136200,5.6493000,0.0000000,0.0000000,315.0000000); //
	CreateDynamicObject(19362,-2474.6770000,1794.3538800,5.6453000,0.0000000,0.0000000,297.4020100); //
	CreateDynamicObject(19362,-2477.4492200,1792.9172400,5.6493000,0.0000000,0.0000000,297.4020400); //
	CreateDynamicObject(19362,-2480.4318800,1791.9360400,5.6453000,0.0000000,0.0000000,278.7989800); //
	CreateDynamicObject(19362,-2483.6042500,1791.4453100,5.6493000,0.0000000,0.0000000,278.7990100); //
	CreateDynamicObject(19362,-2486.7263200,1791.4383500,5.6453000,0.0000000,0.0000000,261.3239100); //
	CreateDynamicObject(19362,-2489.8996600,1791.9224900,5.6453000,0.0000000,0.0000000,261.3239100); //
	CreateDynamicObject(19362,-2492.8647500,1792.8902600,5.6493000,0.0000000,0.0000000,242.4297900); //
	CreateDynamicObject(19362,-2495.7102100,1794.3765900,5.6493000,0.0000000,0.0000000,242.4297900); //
	CreateDynamicObject(19362,-2498.2504900,1796.2338900,5.6453000,0.0000000,0.0000000,225.4982000); //
	CreateDynamicObject(19362,-2500.3757300,1798.3339800,5.6493000,0.0000000,0.0000000,225.4982000); //
	CreateDynamicObject(19362,-2502.2182600,1800.8555900,5.6453000,0.0000000,0.0000000,207.2742000); //
	CreateDynamicObject(19362,-2503.6267100,1803.5750700,5.6513000,0.0000000,0.0000000,207.2742000); //
	CreateDynamicObject(19362,-2504.6008300,1806.5470000,5.6473000,0.0000000,0.0000000,189.1569200); //
	CreateDynamicObject(19362,-2505.1108400,1809.7153300,5.6473000,0.0000000,0.0000000,189.1569100); //
	CreateDynamicObject(19362,-2505.1284200,1812.8542500,5.6513000,0.0000000,0.0000000,171.5050000); //
	CreateDynamicObject(19362,-2504.6545400,1816.0291700,5.6513000,0.0000000,0.0000000,171.5050000); //
	CreateDynamicObject(19362,-2503.6918900,1819.0173300,5.6473000,0.0000000,0.0000000,152.8161900); //
	CreateDynamicObject(19362,-2502.2248500,1821.8741500,5.6473000,0.0000000,0.0000000,152.8161900); //
	CreateDynamicObject(19362,-2500.3776900,1824.4140600,5.6513000,0.0000000,0.0000000,135.0000000); //
	CreateDynamicObject(19362,-2498.1779800,1826.6130400,5.6573000,0.0000000,0.0000000,135.0000000); //
	CreateDynamicObject(19362,-2495.6362300,1828.4462900,5.6533000,0.0000000,0.0000000,117.0000000); //
	CreateDynamicObject(19362,-2493.0170900,1829.7877200,5.6573000,0.0000000,0.0000000,117.0000000); //
	CreateDynamicObject(19362,-2490.0305200,1830.7320600,5.6533000,0.0000000,0.0000000,98.1019000); //
	CreateDynamicObject(19362,-2487.6149900,1831.0795900,5.6693000,0.0000000,0.0000000,98.1019000); //
	CreateDynamicObject(19454,-2465.1826200,1844.1229200,5.6593000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2465.1826200,1853.7572000,5.6593000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2465.1826200,1863.3907500,5.6593000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2465.1826200,1873.0250200,5.6593000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2465.1826200,1882.6589400,5.6593000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2465.1826200,1892.2922400,5.6593000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2465.1826200,1901.9249300,5.6593000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2465.1826200,1911.5573700,5.6593000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2465.1865200,1917.9895000,5.6693000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2447.2482900,1839.6213400,5.6593000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2457.4265100,1839.6213400,5.6593000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1557,-2509.1711400,1813.8378900,7.1871500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1557,-2509.1760300,1816.8679200,7.1871000,0.0000000,0.0000000,990.0000000); //
	CreateDynamicObject(1557,-2509.1760300,1808.7487800,7.1871000,0.0000000,0.0000000,990.0000000); //
	CreateDynamicObject(1557,-2509.1711400,1805.7219200,7.1871000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19362,-2509.1455100,1812.3105500,7.9007000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2509.1455100,1810.2677000,7.9007000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2509.1455100,1806.4802200,11.4012000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2509.1455100,1809.6915300,11.4012000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2509.1455100,1815.2432900,11.4012000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,-2525.5564000,1827.7480500,7.9887400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,-2525.5564000,1818.1149900,7.9887000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,-2525.5564000,1808.4818100,7.9887000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,-2525.5119600,1800.1522200,7.9887000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2532.8051800,1811.2036100,6.9080000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2552.7573200,1811.2036100,6.9040000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(3601,-2533.3659700,1806.1855500,5.1721000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(8083,-2555.4741200,1874.2148400,16.8579000,0.0000000,0.0000000,-64.0000000); //
	CreateDynamicObject(1308,-2549.2890600,1844.3632800,7.3785000,0.0000000,0.0000000,-18.0000000); //
	CreateDynamicObject(8083,-2474.8147000,1918.2419400,17.0589000,0.0000000,0.0000000,-61.0000000); //
	CreateDynamicObject(1308,-2467.1894500,1888.9029500,7.3785000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8083,-2478.4470200,1861.6801800,17.0589000,0.0000000,0.0000000,-98.0000000); //
	CreateDynamicObject(1308,-2489.9658200,1833.4957300,7.3785000,0.0000000,0.0000000,-40.0000000); //
	CreateDynamicObject(19456,-2504.7841800,1924.0653100,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2495.1499000,1924.0653100,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,-2488.7270500,1924.0653100,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19437,-2486.3186000,1924.0653100,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,-2509.5871600,1901.8032200,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19437,-2509.5871600,1899.3958700,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.6064500,1919.1601600,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,-2485.6064500,1909.5264900,9.0440000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19373,-2506.4851100,1925.8693800,7.3540000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19373,-2507.9060100,1925.8693800,7.3440000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(3273,-2489.4934100,1922.3026100,7.2888000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3272,-2488.3107900,1914.3635300,7.4072000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3274,-2486.6931200,1917.0379600,7.3884000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3274,-2486.6931200,1908.5970500,7.3884000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3274,-2492.9287100,1911.6873800,7.3844000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3274,-2492.9287100,1920.1258500,7.3844000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3272,-2491.4736300,1914.3635300,7.4072000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1411,-2488.3110400,1907.5247800,8.8885000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1411,-2493.5756800,1907.5247800,8.8885000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1411,-2496.4541000,1910.3197000,8.8885000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1411,-2496.4541000,1921.3508300,8.8885000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1411,-2496.4580100,1917.8409400,8.8885000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1684,-2504.2919900,1921.7833300,8.8631000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1426,-2498.1044900,1922.1112100,7.4865000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1227,-2510.4023400,1906.0758100,8.2175000,0.0000000,0.0000000,990.0000000); //
	CreateDynamicObject(19455,-2428.9030800,2030.6505100,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2419.2702600,2030.6505100,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2409.6362300,2030.6505100,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2400.0041500,2030.6505100,6.9774000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19436,-2394.4851100,2030.6398900,6.9634000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2438.5363800,2054.6308600,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2428.9030800,2054.6308600,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2424.0146500,2054.6308600,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2424.0146500,2035.3590100,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2424.0146500,2064.2648900,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2428.9030800,2078.5659200,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2438.5363800,2078.5659200,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19455,-2419.2702600,2078.6418500,9.0971000,0.0000000,0.0000000,90.4020000); //
	CreateDynamicObject(19455,-2433.7436500,2064.2648900,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19363,-2433.7436500,2057.8430200,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19436,-2433.7436500,2055.4343300,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19363,-2433.7436500,2069.1445300,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19436,-2424.7304700,2069.1445300,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19436,-2442.5080600,2069.1445300,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19409,-2422.4812000,2040.0987500,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19409,-2416.0583500,2040.0987500,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19392,-2414.5441900,2035.3590100,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19363,-2414.5441900,2032.1479500,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19363,-2414.5441900,2038.5704300,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19392,-2419.2702600,2040.0987500,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19363,-2412.8481400,2040.0987500,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19363,-2409.6362300,2040.0987500,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19392,-2406.4262700,2040.0987500,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19436,-2424.0146500,2040.9792500,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19436,-2424.0146500,2049.0119600,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19436,-2424.0146500,2042.5835000,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2415.4504400,1888.8255600,-16.0636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2415.4106400,1779.5028100,-16.0636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2415.3967300,1670.9237100,-16.0636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2415.7683100,1562.2832000,-47.2006000,32.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2415.2216800,1999.1270800,-16.0636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2304.8574200,1999.2334000,-16.0636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2198.0293000,1999.2334000,-44.2786000,0.0000000,30.0000000,0.0000000); //
	CreateDynamicObject(18751,-2304.8574200,1888.8255600,-16.0636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2304.8574200,1779.5028100,-16.0636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2304.8574200,1670.9237100,-16.0636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2304.8574200,1562.2832000,-47.2006000,32.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2198.0293000,1888.8255600,-44.2786000,0.0000000,30.0000000,0.0000000); //
	CreateDynamicObject(18751,-2198.0293000,1779.5028100,-44.2786000,0.0000000,30.0000000,0.0000000); //
	CreateDynamicObject(18751,-2198.0293000,1670.9237100,-44.2786000,0.0000000,30.0000000,0.0000000); //
	CreateDynamicObject(18751,-2217.6840800,1645.6522200,-44.2786000,0.0000000,30.0000000,0.0000000); //
	CreateDynamicObject(18751,-2328.4751000,1558.6129200,-47.2006000,32.0000000,0.0000000,-18.0000000); //
	CreateDynamicObject(18228,-2261.8237300,1592.1473400,-34.5770500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18228,-2268.3085900,1602.6835900,-34.5770500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18228,-2272.9279800,1605.2359600,-34.5770500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2513.5495600,1670.8391100,-16.0636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2513.5495600,1562.2832000,-47.2006000,32.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2513.5495600,1779.5028100,-16.0636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2513.5495600,1888.8255600,-16.0636000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2616.6755400,1670.8391100,-45.1195000,32.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(18751,-2616.6755400,1779.5028100,-45.1195000,32.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(18751,-2616.6755400,1888.8255600,-45.1195000,32.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(18751,-2696.5837400,1764.5500500,-95.1195000,32.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(17031,-2566.5918000,1630.7083700,-37.0711100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18751,-2304.8574200,2101.7116700,-44.2786000,0.0000000,30.0000000,90.0000000); //
	CreateDynamicObject(18751,-2231.4411600,2074.1716300,-48.8033000,0.0000000,30.0000000,47.0000000); //
	CreateDynamicObject(17030,-2247.1958000,2061.4428700,-42.0531000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(17030,-2238.0732400,2058.1562500,-47.5094100,8.0000000,-24.0000000,-178.0000000); //
	CreateDynamicObject(18981,-2577.7048300,1891.1641800,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2577.7048300,1866.1646700,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2577.7048300,1841.1647900,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2602.7033700,1841.1647900,6.9000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2602.7075200,1850.4980500,6.8900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(5017,-2450.3884300,1793.3371600,10.6735000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1500,-2458.5749500,1800.4431200,7.4164000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(17523,-2448.5810500,1913.7946800,9.6623000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(6066,-2458.3645000,1913.7736800,13.1501000,0.0000000,6.0000000,180.0000000); //
	CreateDynamicObject(19435,-2461.9968300,1920.7645300,10.4289000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2461.9968300,1917.2642800,10.4289000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2461.9968300,1913.7637900,10.4289000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2461.9968300,1910.2636700,10.4289000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2461.9968300,1906.7641600,10.4289000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2461.9829100,1920.7645300,11.3299000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2461.9829100,1917.2642800,11.3299000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2461.9829100,1913.7637900,11.3299000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2461.9829100,1910.2636700,11.3299000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-2461.9829100,1906.7641600,11.3299000,90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8546,-2593.9445800,1845.9119900,10.7774000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1896.7146000,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1896.7146000,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1896.7146000,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1887.0809300,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1877.4481200,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2610.8623000,1867.8148200,0.4645000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1887.0809300,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1887.0809300,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1877.4481200,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1877.4481200,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2601.4252900,1867.8148200,5.0696000,0.0000000,64.0000000,0.0000000); //
	CreateDynamicObject(19380,-2614.2397500,1867.8148200,-0.1589000,0.0000000,76.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1896.7146000,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1887.0809300,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1877.4481200,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2591.4939000,1867.8148200,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9939000,1896.7146000,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9939000,1894.9400600,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9939000,1871.5017100,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2580.9939000,1867.8148200,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1896.7146000,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1894.9400600,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1871.5017100,7.3520000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2570.4926800,1867.8148200,7.3620000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(3642,-2584.2231400,1895.7907700,10.3866000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3642,-2584.2231400,1870.2578100,10.3866000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9321,-2586.5676300,1886.8737800,8.8481000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9321,-2586.5676300,1879.5424800,8.8481000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2565.4167500,1898.5582300,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4167500,1893.0595700,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4167500,1873.4713100,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4167500,1867.9512900,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2565.4260300,1865.9506800,8.0523000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1408,-2568.1616200,1863.2319300,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2573.6611300,1863.2319300,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2579.1838400,1863.2319300,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2584.6860400,1863.2319300,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2590.1892100,1863.2319300,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1408,-2593.7714800,1863.2412100,8.0523000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2602.6335400,1862.5079300,-5.2060100,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2614.5830100,1850.3990500,-5.2060000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2614.6401400,1841.2373000,-5.2060000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2602.6774900,1829.1988500,-5.2060100,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2577.7048300,1829.1888400,-5.2060000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2564.6706500,1811.2136200,-5.2060000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2564.7236300,1833.9611800,-5.1200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2552.7353500,1799.2511000,-5.2060000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2532.5588400,1790.7828400,-5.4070000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(18981,-2511.5664100,1782.0903300,-5.4060000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2497.6586900,1782.1234100,-5.4060000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2472.6582000,1782.1234100,-5.4060000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2447.6672400,1782.1153600,-5.4060000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2435.7312000,1794.1392800,-5.4060000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2435.7580600,1819.0627400,-5.4060000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2435.7580600,1844.0622600,-5.4060000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2435.7580600,1869.0618900,-5.4060000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2435.7580600,1894.0594500,-5.4060000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2435.6948200,1910.2832000,-5.2860000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2447.7434100,1922.3869600,-5.2620000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2511.8149400,1794.0286900,6.7190000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2524.3234900,1799.1752900,6.8780000,0.0000000,90.0000000,45.0000000); //
	CreateDynamicObject(19456,-2536.6989700,1798.7971200,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2527.0659200,1798.7971200,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2546.3317900,1798.7971200,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,-2555.9658200,1798.7971200,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,-2562.3889200,1798.7971200,9.0440000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(983,-2561.9533700,1798.7971200,8.0807000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(982,-2565.1450200,1811.6151100,8.0807000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.8886700,1888.9409200,-13.8226000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.9397000,1874.8530300,-13.8226000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19455,-2404.9177200,2035.3590100,9.0971000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,-2409.4460400,2035.3791500,10.8618000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2438.2902800,2035.3830600,10.8558000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2427.7897900,2035.3830600,10.8558000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2417.2939500,2035.3830600,10.8558000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2427.7897900,2045.0168500,10.8558000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2427.7897900,2054.6503900,10.8558000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2427.7897900,2064.2844200,10.8558000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2427.7897900,2073.9179700,10.8558000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2438.2902800,2073.9179700,10.8558000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2438.2902800,2064.2844200,10.8558000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2438.2902800,2054.6503900,10.8558000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2438.2902800,2045.0168500,10.8558000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2427.7897900,2073.9179700,11.0338000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2438.2902800,2073.9179700,11.0338000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2438.2902800,2064.2844200,11.0338000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2427.7897900,2064.2844200,11.0338000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2427.7897900,2054.6503900,11.0338000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2438.2902800,2054.6503900,11.0338000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2438.2902800,2045.0168500,11.0338000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2427.7897900,2045.0168500,11.0338000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2427.7897900,2035.3830600,11.0338000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2438.2902800,2035.3830600,11.0338000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2417.2939500,2035.3830600,11.0338000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,-2409.4460400,2035.3791500,11.0398000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(958,-2432.9997600,2065.4831500,8.2823000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(959,-2432.9997600,2065.4831500,8.2823000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(919,-2424.2353500,2067.2565900,7.8581000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(919,-2424.2353500,2056.0004900,7.8581000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(919,-2424.2353500,2061.4619100,7.8581000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(927,-2432.9982900,2069.2824700,8.4051000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3813,-2433.8833000,2069.6152300,7.5500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3761,-2432.7805200,2060.2199700,7.9752000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3761,-2430.4851100,2055.5415000,7.9752000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2957,-2440.6621100,2069.1445300,9.1785800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2957,-2436.1601600,2069.1445300,9.1786000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2957,-2440.6621100,2069.1445300,5.9252000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2957,-2436.1601600,2069.1445300,5.9252000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19466,-2416.0583500,2040.0987500,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19466,-2422.4812000,2040.0987500,9.0971000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1494,-2407.2014200,2040.0871600,7.4089000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1494,-2420.0483400,2040.0871600,7.4089000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1494,-2414.5400400,2034.6181600,7.4089000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19378,-2418.7158200,2035.3291000,7.3640000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19378,-2410.1477100,2035.3291000,7.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(2567,-2425.3845200,2040.6300000,7.4569000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2567,-2425.3845200,2035.4398200,9.1597600,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(929,-2426.1909200,2031.4383500,8.2738000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(934,-2440.5976600,2031.7595200,8.6922700,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(943,-2442.5600600,2033.8128700,8.1719500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18981,-2606.9426300,1862.8144500,-13.8326000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2604.3042000,1862.8479000,-10.5548000,76.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2618.8913600,1888.9939000,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2618.7971200,1874.8205600,-30.0682000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2606.9553200,1862.7716100,-30.0682000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2618.7971200,1874.8205600,-55.0644000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2606.9553200,1862.7716100,-55.0644000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2614.6401400,1841.2373000,-30.2039000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2614.5830100,1850.3990500,-30.2039000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2614.6401400,1841.2373000,-55.2034000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2602.6774900,1829.1988500,-30.2039000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2602.6774900,1829.1988500,-55.2034000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2577.7048300,1829.1888400,-30.2039000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2564.7236300,1833.9611800,-30.1039000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2564.6706500,1811.2136200,-30.2039000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2552.7353500,1799.2511000,-30.2039000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2435.7580600,1844.0622600,-30.2039000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2435.7580600,1819.0627400,-30.2039000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3753,-2492.6540500,1773.7071500,-2.4259100,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18981,-2508.7712400,1777.0434600,0.1228000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2476.6015600,1777.0434600,0.1228000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2493.4255400,1777.0313700,0.1108000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(18981,-2508.7392600,1765.1191400,-12.0627000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2520.7272900,1777.1339100,-11.1465600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2476.6015600,1765.1191400,-12.0627000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2493.4255400,1765.1091300,-12.0627000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18981,-2464.6911600,1777.1339100,-11.1466000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18981,-2472.6582000,1782.1074200,-30.2150000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2472.5117200,1760.6711400,-1.4533000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2482.8901400,1760.6711400,-1.4533000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2493.2951700,1760.6711400,-1.4533000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2504.4304200,1760.6711400,-1.4533000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2514.6545400,1760.6711400,-1.4533000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2514.6545400,1751.8714600,-1.4533000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2504.4304200,1751.8714600,-1.4533000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2493.2951700,1751.8714600,-1.4533000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2482.8901400,1751.8714600,-1.4533000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2472.5117200,1751.8714600,-1.4533000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2514.6545400,1751.8714600,-13.4873700,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2514.6545400,1760.6711400,-13.4874000,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2504.4304200,1751.8714600,-13.4874000,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2504.4304200,1760.6711400,-13.4874000,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2493.2951700,1751.8714600,-13.4874000,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2482.8901400,1751.8714600,-13.4874000,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2472.5117200,1751.8714600,-13.4874000,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2493.2951700,1760.6711400,-13.4874000,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2482.8901400,1760.6711400,-13.4874000,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2472.5117200,1760.6711400,-13.4874000,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2472.5117200,1751.8714600,-17.5763100,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3406,-2472.5117200,1760.6711400,-17.5763000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1638,-2515.5092800,1779.9990200,2.2360000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19366,-2490.6787100,1783.5361300,7.8786900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19458,-2495.4296900,1782.0230700,7.8787000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19458,-2505.0637200,1782.0230700,7.8787000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19366,-2495.4296900,1783.5361300,7.8787000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19366,-2505.0637200,1783.5361300,7.8787000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19366,-2500.2351100,1783.5361300,7.8787000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19458,-2495.4296900,1785.0647000,6.5777500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19458,-2505.0637200,1785.0647000,6.5777000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19366,-2509.7534200,1783.5361300,7.8787000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19458,-2505.0637200,1783.5361300,9.7005000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19458,-2495.4296900,1783.5361300,9.7004700,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19443,-2492.4824200,1784.3300800,8.1321500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19443,-2495.9821800,1784.3300800,8.1321000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19443,-2499.4804700,1784.3300800,8.1321000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19443,-2502.9797400,1784.3300800,8.1321000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19443,-2506.4782700,1784.3300800,8.1321000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19443,-2508.0202600,1784.3300800,8.1261000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(2485,-2491.1071800,1784.4151600,8.2738000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2485,-2491.6689500,1784.3689000,8.2738000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2486,-2492.2734400,1784.3980700,8.2738000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2490,-2492.2238800,1783.7890600,8.2738000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2489,-2493.1250000,1783.7806400,8.2738000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2484,-2494.4831500,1783.8171400,8.8372000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2484,-2494.4743700,1784.2170400,8.8372000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2484,-2494.4646000,1784.6372100,8.8372000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2583,-2496.2463400,1784.6984900,8.5225400,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2582,-2499.3552200,1784.7349900,8.5225000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2582,-2499.3642600,1784.2434100,8.5225000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2583,-2496.2832000,1784.2131300,8.5225000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2585,-2496.4528800,1782.2363300,8.5225000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2587,-2497.3772000,1782.1922600,9.0326000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2588,-2497.4331100,1782.1761500,7.9235700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2581,-2499.0114700,1782.3358200,8.2266000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2374,-2500.7756300,1782.3356900,8.6190000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2377,-2501.3918500,1782.3356900,8.6190000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2378,-2502.0598100,1782.3356900,8.6190000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2383,-2502.8034700,1782.3118900,8.6190000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2384,-2504.5986300,1783.9168700,8.3350000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2384,-2504.6003400,1784.4073500,8.3350000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2386,-2504.0410200,1783.9453100,8.3350000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2389,-2503.4902300,1782.3356900,8.6190000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2390,-2504.3212900,1782.3356900,8.6190000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(18962,-2500.6198700,1783.9046600,8.2917000,0.0000000,-90.0000000,33.0000000); //
	CreateDynamicObject(18961,-2500.5139200,1784.1828600,8.2417000,0.0000000,0.0000000,149.0000000); //
	CreateDynamicObject(18968,-2500.5124500,1784.4840100,8.2645000,0.0000000,8.0000000,0.0000000); //
	CreateDynamicObject(18968,-2500.5512700,1784.7479200,8.2645000,0.0000000,8.0000000,0.0000000); //
	CreateDynamicObject(18968,-2500.7714800,1784.5972900,8.2645000,0.0000000,8.0000000,0.0000000); //
	CreateDynamicObject(18968,-2500.8107900,1784.3673100,8.2645000,0.0000000,8.0000000,0.0000000); //
	CreateDynamicObject(18968,-2500.7646500,1784.0844700,8.2645000,0.0000000,8.0000000,0.0000000); //
	CreateDynamicObject(18934,-2500.9099100,1784.7506100,8.2597000,0.0000000,-90.0000000,0.0000000); //
	CreateDynamicObject(18927,-2501.0942400,1784.7535400,8.2597000,0.0000000,-90.0000000,0.0000000); //
	CreateDynamicObject(18928,-2501.2785600,1784.7564700,8.2597000,0.0000000,-90.0000000,0.0000000); //
	CreateDynamicObject(18930,-2501.4670400,1784.7779500,8.2597000,0.0000000,-90.0000000,0.0000000); //
	CreateDynamicObject(18931,-2501.0273400,1784.4675300,8.2597000,0.0000000,-90.0000000,0.0000000); //
	CreateDynamicObject(18932,-2501.2109400,1784.4860800,8.2597000,0.0000000,-90.0000000,0.0000000); //
	CreateDynamicObject(18933,-2501.4118700,1784.4824200,8.2597000,0.0000000,-90.0000000,0.0000000); //
	CreateDynamicObject(2957,-2507.4260300,1784.9980500,8.1214800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(321,-2497.4262700,1784.0023200,8.2069000,90.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(321,-2497.4853500,1784.1141400,8.2069000,90.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(983,-2565.1450200,1827.6223100,8.0807000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(984,-2571.5332000,1830.8302000,8.0807000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(984,-2536.7717300,1794.2320600,8.0807000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(983,-2529.9926800,1787.4423800,8.0807000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(983,-2526.5896000,1784.0279500,8.0807000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(983,-2521.1303700,1781.7595200,8.0807000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(983,-2514.7248500,1781.7684300,8.0807000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(983,-2508.3193400,1781.7684300,8.0807000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(983,-2501.9331100,1781.7684300,8.0807000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(983,-2495.5405300,1781.7684300,8.0807000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(982,-2465.1752900,1781.7684300,8.0807000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(984,-2445.9689900,1781.7684300,8.0807000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(983,-2438.7478000,1781.7684300,8.0807000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(982,-2435.5241700,1794.5841100,8.0807000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(982,-2435.5241700,1820.1835900,8.0807000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(982,-2435.5241700,1845.8018800,8.0807000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(982,-2435.5241700,1871.4223600,8.0807000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(984,-2435.5241700,1890.6396500,8.0807000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(984,-2435.5241700,1903.4414100,8.0807000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2454.0297900,1850.4986600,5.5283000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2452.3354500,1850.2016600,5.5283000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19362,-2452.3354500,1855.2252200,5.5283000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19362,-2450.8129900,1853.7052000,5.5243000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19362,-2450.8129900,1851.7385300,5.5323000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3761,-2411.1069300,2039.1860400,7.9752000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3761,-2411.1069300,2031.6237800,7.9752000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3761,-2405.8454600,2033.8868400,7.9752000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2173,-2418.7158200,2032.8258100,7.4429000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2356,-2418.0241700,2031.4005100,7.4423000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1721,-2417.9917000,2039.7762500,7.4330000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1721,-2417.3310500,2039.7762500,7.4330000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1721,-2416.6306200,2039.7762500,7.4330000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1721,-2415.9702100,2039.7762500,7.4330000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2612,-2423.8815900,2038.2022700,9.5327100,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(14782,-2423.5419900,2033.8746300,8.4591000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(688,-2424.5678700,2527.6538100,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2427.2124000,2520.3361800,12.2031000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(688,-2414.8195800,2522.9921900,12.2031000,0.0000000,0.0000000,0.0000000); //

	/*
	Objects converted: 2399
	Vehicles converted: 0
	Vehicle models found: 0
	----------------------
	In the time this conversion took to finish a hummingbird could have flapped it's wings 11.19 times!
	*/

	
	
	/*ballaskapu =  CreateDynamicObject(971, 2346.744385, -1236.318970, 22.999693, 0.0000, 0.0000, 90.0000);
	ballaskapu2 = CreateDynamicObject(969, 2360.904053, -1266.957275, 22.823538, 0.0000, 0.0000, 270.0000);
	ballaskapu3 = CreateDynamicObject(969, 2313.482422, -1223.061035, 22.963881, 0.0000, 0.0000, 90.0001);*/
	CreateDynamicObject(18359, 1006.79980, -3467.00000, -26.20000,   5.99900, 0.00000, 39.99600);
	CreateDynamicObject(18227, 888.89941, -3515.09961, 6.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18227, 854.70001, -3430.19995, 7.20000,   0.00000, 0.00000, 105.99600);
	CreateDynamicObject(18227, 1005.50000, -3311.60010, 12.30000,   0.00000, 0.00000, 49.99900);
	CreateDynamicObject(18227, 1059.00000, -3348.69922, 14.50000,   355.98999, 0.00000, 0.00000);
	CreateDynamicObject(13120, 927.20001, -3312.10010, -24.40000,   0.00000, 0.00000, 279.99799);
	CreateDynamicObject(13120, 868.59998, -3530.80005, -13.80000,   0.00000, 0.00000, 10.00000);
	CreateDynamicObject(17027, 866.20001, -3456.69995, 19.00000,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(17029, 1038.39941, -3345.19922, 10.20000,   0.00000, 0.00000, 149.99600);
	CreateDynamicObject(17029, 982.09961, -3331.59961, 9.00000,   0.00000, 0.00000, 33.99700);
	CreateDynamicObject(17026, 819.29999, -3458.50000, 6.40000,   0.00000, 2.00000, 99.99900);
	CreateDynamicObject(17026, 857.59998, -3452.10010, 11.20000,   0.00000, 0.00000, 319.99899);
	CreateDynamicObject(18227, 896.29999, -3226.60010, -1.00000,   0.00000, 0.00000, 169.99699);
	CreateDynamicObject(18227, 848.79999, -3227.80005, 5.20000,   0.00000, 0.00000, 239.99600);
	CreateDynamicObject(18227, 812.39941, -3230.89941, 17.70000,   0.00000, 0.00000, 71.99900);
	CreateDynamicObject(18227, 789.20001, -3253.30005, 17.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18227, 731.29980, -3341.79980, 6.10000,   0.00000, 0.00000, 299.99799);
	CreateDynamicObject(18227, 727.40002, -3353.69995, 14.90000,   0.00000, 0.00000, 141.99800);
	CreateDynamicObject(18227, 734.20001, -3312.89990, 15.50000,   0.00000, 0.00000, 129.99600);
	CreateDynamicObject(18227, 712.19922, -3407.59961, 6.40000,   0.00000, 0.00000, 199.99500);
	CreateDynamicObject(18227, 797.20001, -3468.50000, -3.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18227, 796.70001, -3455.89990, 13.50000,   0.00000, 0.00000, 26.00000);
	CreateDynamicObject(17026, 809.29999, -3460.30005, 21.70000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(17026, 907.40002, -3235.30005, 5.70000,   0.00000, 0.00000, 189.99800);
	CreateDynamicObject(17026, 862.50000, -3210.29980, 15.10000,   0.00000, 0.00000, 239.99100);
	CreateDynamicObject(17026, 819.29999, -3221.60010, 18.80000,   0.00000, 0.00000, 280.00000);
	CreateDynamicObject(17026, 735.79980, -3472.89941, -1.10000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(17026, 741.09998, -3523.00000, -2.60000,   0.00000, 0.00000, 340.00000);
	CreateDynamicObject(17026, 750.79999, -3568.30005, -3.70000,   0.00000, 0.00000, 350.00000);
	CreateDynamicObject(17026, 779.50000, -3605.50000, 0.00000,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(17026, 822.09998, -3602.30005, 0.00000,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(17026, 865.09961, -3580.29980, 0.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(17026, 892.59998, -3557.10010, -2.70000,   0.00000, 0.00000, 110.00000);
	CreateDynamicObject(17026, 954.59998, -3289.89990, 22.20000,   0.00000, 16.00000, 169.99699);
	CreateDynamicObject(10491, 1132.30005, -3705.89990, 7.50000,   335.92899, 10.00000, 258.91299);
	CreateDynamicObject(18309, 1027.59961, -3800.89941, -54.50000,   358.26999, 0.00000, 128.13901);
	CreateDynamicObject(18309, 961.79980, -3755.00000, -23.10000,   358.26999, 0.00000, 128.13400);
	CreateDynamicObject(18227, 1030.80005, -3688.00000, 2.80000,   0.00000, 0.00000, 188.74500);
	CreateDynamicObject(18227, 1054.50000, -3719.39990, 15.40000,   0.00000, 0.00000, 188.74001);
	CreateDynamicObject(18227, 1036.00000, -3585.39941, 33.40000,   0.00000, 0.00000, 108.73700);
	CreateDynamicObject(18309, 942.00000, -3627.89941, -26.20000,   358.26999, 0.00000, 66.13800);
	CreateDynamicObject(18309, 1111.00000, -3511.79980, -30.50000,   358.26999, 0.00000, 326.13501);
	CreateDynamicObject(18227, 1168.80005, -3578.19995, -10.40000,   0.00000, 0.00000, 18.74500);
	CreateDynamicObject(18227, 1057.40002, -3621.89990, 44.20000,   0.00000, 0.00000, 58.73300);
	CreateDynamicObject(18227, 979.48254, -3457.02637, 1.80000,   0.00000, 0.00000, 238.73300);
	CreateDynamicObject(18227, 1024.69995, -3481.10010, -8.10000,   0.00000, 0.00000, 298.73300);
	CreateDynamicObject(18227, 1032.50000, -3480.10010, -22.10000,   0.00000, 0.00000, 298.72900);
	CreateDynamicObject(18227, 1138.09961, -3741.89941, -12.70000,   0.00000, 0.00000, 38.71600);
	CreateDynamicObject(18227, 1147.80005, -3589.80005, -3.30000,   0.00000, 0.00000, 178.72400);
	CreateDynamicObject(18227, 1100.79980, -3542.89941, -4.90000,   0.00000, 0.00000, 168.72301);
	CreateDynamicObject(18227, 1071.69995, -3769.00000, -1.70000,   0.00000, 0.00000, 288.72101);
	CreateDynamicObject(18227, 1089.39941, -3784.89941, -9.50000,   0.00000, 0.00000, 288.72101);
	CreateDynamicObject(18227, 1081.09998, -3780.39990, -4.80000,   0.00000, 0.00000, 288.72101);
	CreateDynamicObject(18227, 1120.00000, -3607.80005, -11.10000,   0.00000, 0.00000, 198.72000);
	CreateDynamicObject(18227, 1175.09998, -3605.89990, -0.10000,   0.00000, 0.00000, 118.71500);
	CreateDynamicObject(18227, 944.59998, -3630.89990, -0.10000,   0.00000, 0.00000, 268.71399);
	CreateDynamicObject(18227, 930.50000, -3643.10010, -50.70000,   0.00000, 0.00000, 308.70499);
	CreateDynamicObject(18227, 925.79999, -3666.50000, -0.10000,   0.00000, 0.00000, 308.70499);
	CreateDynamicObject(18227, 938.20001, -3651.89990, -0.10000,   0.00000, 0.00000, 308.70499);
	CreateDynamicObject(18227, 946.09998, -3647.80005, -0.10000,   0.00000, 0.00000, 268.70901);
	CreateDynamicObject(13752, 938.00000, -3560.60010, -7.80000,   0.00000, 6.00000, 118.00000);
	CreateDynamicObject(18227, 903.40002, -3521.39990, -3.40000,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(3097, 920.70001, -3519.19995, 8.20000,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(18227, 1055.29041, -3500.89160, 4.80000,   0.00000, 10.00000, 340.14017);
	CreateDynamicObject(18227, 1176.50000, -3582.89990, -11.20000,   0.00000, 0.00000, 18.74300);
	CreateDynamicObject(13752, 1187.50000, -3559.09961, -4.20000,   0.00000, 5.99900, 219.99600);
	CreateDynamicObject(18227, 1060.30005, -3661.60010, 30.30000,   0.00000, 0.00000, 148.73801);
	CreateDynamicObject(18227, 1045.50000, -3643.80005, 30.30000,   0.00000, 0.00000, 148.73801);
	CreateDynamicObject(18227, 1073.09998, -3628.80005, 25.50000,   0.00000, 0.00000, 142.73801);
	CreateDynamicObject(18227, 1040.29980, -3546.89941, 8.30000,   0.00000, 0.00000, 108.73200);
	CreateDynamicObject(18227, 1045.00000, -3520.59961, -9.00000,   0.00000, 0.00000, 108.73200);
	CreateDynamicObject(18227, 1044.00000, -3601.69995, 34.20000,   0.00000, 0.00000, 176.74200);
	CreateDynamicObject(3502, 1117.89941, -3543.29980, 2.80000,   0.00000, 0.00000, 157.99400);
	CreateDynamicObject(18227, 1066.90002, -3607.80005, 34.20000,   0.00000, 0.00000, 176.73700);
	CreateDynamicObject(18449, 1027.99219, -3516.77393, 21.50000,   0.00000, 349.99701, 327.99701);
	CreateDynamicObject(18449, 961.90002, -3476.10010, 7.80000,   0.00000, 349.99701, 327.99701);
	CreateDynamicObject(18227, 989.70001, -3468.39990, -3.50000,   0.00000, 0.00000, 126.73600);
	CreateDynamicObject(3594, 966.90002, -3476.80005, 9.40000,   352.07800, 351.92200, 22.87900);
	CreateDynamicObject(852, 989.40002, -3488.89990, 13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3593, 1097.09546, -3566.22949, 41.60000,   354.89301, 121.63300, 161.66800);
	CreateDynamicObject(18227, 1035.29980, -3638.89941, 46.00000,   0.00000, 0.00000, 148.73300);
	CreateDynamicObject(18227, 1045.40002, -3653.39990, 35.30000,   0.00000, 0.00000, 148.73801);
	CreateDynamicObject(18227, 1014.00000, -3626.60010, 35.30000,   0.00000, 0.00000, 148.73801);
	CreateDynamicObject(10357, 1170.50000, -3613.29980, 94.60000,   354.14999, 346.92599, 188.64101);
	CreateDynamicObject(18450, 1093.81958, -3578.79639, 37.63744,   -11.19195, 355.92398, 298.75620);
	CreateDynamicObject(3798, 1058.00000, -3548.39990, 30.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3798, 1056.09998, -3548.69995, 31.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3798, 1058.19995, -3548.60010, 33.20000,   0.00000, 344.00000, 358.00000);
	CreateDynamicObject(18227, 1076.69995, -3599.00000, 5.20000,   0.00000, 0.00000, 328.73300);
	CreateDynamicObject(18227, 1085.80005, -3519.00000, 3.10000,   0.00000, 0.00000, 100.73400);
	CreateDynamicObject(3097, 1063.90002, -3550.69995, 35.30000,   1.92200, 16.00900, 301.44901);
	CreateDynamicObject(8651, 1052.81445, -3556.91382, 35.60000,   1.85400, 337.98801, 308.74899);
	CreateDynamicObject(3097, 1059.80005, -3553.19995, 36.10000,   41.96300, 2.68700, 282.20001);
	CreateDynamicObject(3593, 1051.00000, -3531.29980, 27.10000,   354.05600, 351.95300, 13.16200);
	CreateDynamicObject(18227, 1070.59998, -3534.50000, 11.90000,   0.00000, 0.00000, 178.72600);
	CreateDynamicObject(18450, 1128.30005, -3649.19995, 32.40000,   348.26401, 12.26000, 294.52701);
	CreateDynamicObject(18450, 1171.30005, -3713.80005, 18.90000,   354.04700, 8.03200, 314.82901);
	CreateDynamicObject(18227, 1131.00000, -3684.89941, 14.00000,   0.00000, 0.00000, 348.71201);
	CreateDynamicObject(18227, 1132.09998, -3625.69995, 20.30000,   0.00000, 0.00000, 18.71200);
	CreateDynamicObject(18227, 1094.59998, -3576.39990, 3.80000,   0.00000, 0.00000, 200.71001);
	CreateDynamicObject(1539, 1120.19995, -3640.60010, 44.50000,   13.30200, 341.48599, 110.40600);
	CreateDynamicObject(3337, 1173.59998, -3718.10010, 19.00000,   2.98700, 277.42099, 13.79600);
	CreateDynamicObject(18227, 1174.29980, -3639.29980, -10.70000,   0.00000, 0.00000, 118.71300);
	CreateDynamicObject(18227, 1153.50000, -3655.79980, 14.90000,   0.00000, 0.00000, 328.70499);
	CreateDynamicObject(18227, 1150.30005, -3634.10010, 20.70000,   0.00000, 0.00000, 348.70499);
	CreateDynamicObject(791, 940.50000, -3505.19995, -10.50000,   0.00000, 0.00000, 349.99100);
	CreateDynamicObject(791, 957.59998, -3540.89990, -10.50000,   0.00000, 0.00000, 349.99100);
	CreateDynamicObject(791, 929.50000, -3541.00000, -10.50000,   0.00000, 0.00000, 129.98599);
	CreateDynamicObject(791, 968.00000, -3585.00000, -10.50000,   0.00000, 0.00000, 311.98599);
	CreateDynamicObject(791, 914.50000, -3563.69995, -10.50000,   0.00000, 0.00000, 349.99100);
	CreateDynamicObject(791, 1091.50000, -3669.69995, -10.50000,   0.00000, 0.00000, 349.99100);
	CreateDynamicObject(791, 1098.40002, -3699.00000, -10.50000,   0.00000, 0.00000, 349.99100);
	CreateDynamicObject(688, 1118.30005, -3676.10010, 22.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(688, 1171.59998, -3687.50000, -5.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(688, 1176.09998, -3660.30005, -5.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18227, 1044.30005, -3384.39990, -4.30000,   355.98999, 0.00000, 110.00000);
	CreateDynamicObject(18227, 1060.69995, -3372.19995, 5.10000,   355.98401, 0.00000, 109.99500);
	CreateDynamicObject(18227, 1081.09998, -3370.69995, -23.20000,   355.98401, 0.00000, 109.99500);
	CreateDynamicObject(18227, 1053.30005, -3367.19995, 6.50000,   354.34799, 20.10200, 122.05900);
	CreateDynamicObject(789, 975.79999, -3391.00000, 17.00000,   0.00000, 0.00000, 49.99900);
	CreateDynamicObject(18227, 1003.89941, -3288.79980, 4.50000,   0.00000, 0.00000, 139.99899);
	CreateDynamicObject(18227, 1003.79999, -3337.80005, 12.30000,   0.00000, 0.00000, 239.99899);
	CreateDynamicObject(18227, 983.00000, -3312.19995, 26.40000,   0.00000, 0.00000, 229.99600);
	CreateDynamicObject(18227, 936.19922, -3376.09961, 4.70000,   0.00000, 0.00000, 261.99100);
	CreateDynamicObject(5002, 808.29980, -3320.79980, 6.45900,   0.00000, 0.00000, 234.99800);
	CreateDynamicObject(18227, 795.00000, -3214.39990, -1.10000,   0.00000, 0.00000, 91.99900);
	CreateDynamicObject(18227, 795.00000, -3214.39990, 14.60000,   0.00000, 0.00000, 91.99400);
	CreateDynamicObject(18227, 813.59998, -3189.19995, -1.10000,   0.00000, 0.00000, 61.99400);
	CreateDynamicObject(18227, 822.40002, -3190.60010, 17.70000,   342.90900, 18.86200, 73.72400);
	CreateDynamicObject(18227, 749.70001, -3266.60010, 3.60000,   0.00000, 0.00000, 111.99400);
	CreateDynamicObject(18227, 748.29999, -3284.39990, 3.60000,   0.00000, 0.00000, 111.98900);
	CreateDynamicObject(18227, 707.50000, -3387.10010, 6.40000,   0.00000, 0.00000, 199.99500);
	CreateDynamicObject(18227, 711.90002, -3362.10010, 6.40000,   0.00000, 0.00000, 279.99500);
	CreateDynamicObject(18227, 702.79999, -3352.30005, -1.40000,   0.00000, 0.00000, 279.99200);
	CreateDynamicObject(18227, 704.20001, -3344.39990, 5.10000,   0.00000, 0.00000, 279.99200);
	CreateDynamicObject(18227, 748.59998, -3317.39990, 0.60000,   0.00000, 0.00000, 327.99799);
	CreateDynamicObject(5002, 894.29980, -3347.00000, 6.40000,   0.00000, 0.00000, 49.98800);
	CreateDynamicObject(17026, 941.09998, -3298.10010, 6.00000,   0.00000, 0.00000, 169.99699);
	CreateDynamicObject(17026, 951.70001, -3277.60010, 13.00000,   0.00000, 355.99600, 209.99100);
	CreateDynamicObject(18227, 860.59998, -3446.10010, 4.70000,   350.00000, 0.00000, 261.99100);
	CreateDynamicObject(18227, 900.70001, -3408.80005, -2.80000,   0.00000, 0.00000, 261.99100);
	CreateDynamicObject(18227, 895.40002, -3408.19995, -2.80000,   0.00000, 0.00000, 261.99100);
	CreateDynamicObject(17656, 905.59998, -3395.00000, 12.60000,   2.00000, 0.00000, 40.00000);
	CreateDynamicObject(17656, 848.29999, -3326.69995, 12.60000,   2.00000, 0.00000, 219.99600);
	CreateDynamicObject(4123, 858.29999, -3329.50000, 17.90000,   0.00000, 0.00000, 42.00000);
	CreateDynamicObject(17026, 923.79999, -3233.69995, 14.50000,   0.00000, 0.00000, 189.99800);
	CreateDynamicObject(4176, 840.59998, -3368.30005, 11.89900,   0.00000, 0.00000, 312.00000);
	CreateDynamicObject(4048, 814.09998, -3349.60010, 18.00000,   0.00000, 0.00000, 222.00000);
	CreateDynamicObject(1413, 821.40002, -3317.50000, 7.70000,   0.00000, 0.00000, 42.00000);
	CreateDynamicObject(18227, 819.70001, -3476.89990, 13.50000,   0.00000, 0.00000, 25.99900);
	CreateDynamicObject(18227, 797.20001, -3444.80005, 5.70000,   0.00000, 0.00000, 25.99900);
	CreateDynamicObject(18227, 760.09998, -3415.10010, -2.50000,   0.00000, 0.00000, 25.99900);
	CreateDynamicObject(4207, 845.70001, -3389.89990, 6.50000,   0.00000, 0.00000, 42.00000);
	CreateDynamicObject(18227, 827.29999, -3448.00000, 6.20000,   0.00000, 0.00000, 95.99100);
	CreateDynamicObject(18227, 811.59998, -3432.50000, 6.20000,   0.00000, 0.00000, 35.98800);
	CreateDynamicObject(18227, 772.40002, -3423.39990, 6.20000,   0.00000, 0.00000, 35.98600);
	CreateDynamicObject(4158, 773.00000, -3360.19922, 6.60000,   0.00000, 0.00000, 131.99500);
	CreateDynamicObject(4160, 869.23535, -3292.25977, 6.57000,   0.05500, 0.00000, 41.99500);
	CreateDynamicObject(13591, 822.84296, -3417.15283, 6.90000,   0.00000, 0.00000, -6.44399);
	CreateDynamicObject(3996, 830.29980, -3295.39941, 6.56900,   0.00000, 0.00000, 221.99500);
	CreateDynamicObject(1413, 809.50000, -3385.30005, 7.70000,   0.00000, 0.00000, 311.99899);
	CreateDynamicObject(1413, 817.40002, -3321.00000, 7.70000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(1413, 813.20001, -3324.30005, 7.90000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(1413, 815.59998, -3332.89990, 7.70000,   0.00000, 0.00000, 131.99500);
	CreateDynamicObject(1413, 811.90002, -3329.30005, 7.70000,   0.00000, 0.00000, 141.99001);
	CreateDynamicObject(4085, 764.59998, -3340.60010, 0.80000,   0.00000, 0.00000, 312.00000);
	CreateDynamicObject(13065, 782.00000, -3338.60010, 4.60000,   0.00000, 0.00000, 222.00000);
	CreateDynamicObject(18227, 772.00000, -3291.69995, 0.60000,   0.00000, 0.00000, 285.99701);
	CreateDynamicObject(789, 767.79999, -3315.00000, 12.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 810.39941, -3330.59961, 19.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5110, 756.09998, -3384.60010, 11.90000,   0.00000, 0.00000, 222.00000);
	CreateDynamicObject(789, 776.59998, -3396.50000, 19.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4894, 798.79999, -3289.60010, 13.10000,   0.00000, 0.00000, 222.00000);
	CreateDynamicObject(910, 830.09998, -3257.69995, 8.00000,   0.00000, 0.00000, 130.00000);
	CreateDynamicObject(3302, 832.59998, -3261.60010, 6.80000,   0.00000, 94.00000, 44.00000);
	CreateDynamicObject(3302, 831.29999, -3260.00000, 7.10000,   0.00000, 93.99900, 44.00000);
	CreateDynamicObject(3302, 828.70001, -3257.19995, 7.10000,   0.00000, 93.99900, 46.00000);
	CreateDynamicObject(4085, 767.70001, -3336.30005, 0.80000,   0.00000, 0.00000, 311.99500);
	CreateDynamicObject(1413, 787.40002, -3320.69995, 7.90000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(1413, 787.29999, -3324.30005, 7.90000,   0.00000, 0.00000, 131.99500);
	CreateDynamicObject(4525, 783.90002, -3310.80005, 8.60000,   0.00000, 0.00000, 175.99500);
	CreateDynamicObject(11102, 778.90002, -3310.30005, 8.60000,   75.86100, 97.96800, 343.78601);
	CreateDynamicObject(18200, 756.20001, -3424.69995, 9.70000,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(17026, 718.09998, -3442.00000, -1.10000,   0.00000, 0.00000, 341.99600);
	CreateDynamicObject(17026, 726.79999, -3439.50000, 8.30000,   0.00000, 0.00000, 341.99301);
	CreateDynamicObject(789, 742.90002, -3446.80005, 27.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16271, 863.89941, -3252.69922, 20.60000,   0.00000, 0.00000, 221.99500);
	CreateDynamicObject(789, 850.50000, -3256.10010, 6.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5726, 822.79980, -3391.50000, 10.90000,   0.00000, 0.00000, 131.99500);
	CreateDynamicObject(1413, 817.00000, -3362.89941, 7.70000,   0.00000, 0.00000, 5.99900);
	CreateDynamicObject(1413, 837.89941, -3395.59961, 7.90000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(1413, 841.69922, -3392.09961, 7.80000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(1413, 802.50000, -3377.39941, 7.70000,   0.00000, 0.00000, 311.99500);
	CreateDynamicObject(1413, 806.00000, -3381.29980, 7.70000,   0.00000, 0.00000, 311.99500);
	CreateDynamicObject(789, 825.69922, -3370.59961, 19.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5725, 896.29980, -3296.09961, 15.60000,   0.00000, 0.00000, 131.99500);
	CreateDynamicObject(5410, 904.79999, -3373.60010, 9.70000,   0.00000, 0.00000, 222.00000);
	CreateDynamicObject(5392, 915.40002, -3344.10010, 9.68000,   0.00000, 0.00000, 96.00000);
	CreateDynamicObject(18227, 925.90002, -3324.30005, -2.80000,   0.00000, 0.00000, 145.98500);
	CreateDynamicObject(18227, 927.79999, -3309.19995, -2.80000,   0.00000, 0.00000, 145.98100);
	CreateDynamicObject(789, 909.00000, -3357.60010, 20.00000,   0.00000, 0.00000, 32.00000);
	CreateDynamicObject(1413, 911.50000, -3327.00000, 7.70000,   0.00000, 0.00000, 99.99500);
	CreateDynamicObject(1413, 912.29999, -3332.19995, 7.70000,   0.00000, 0.00000, 99.99200);
	CreateDynamicObject(1413, 909.59998, -3321.30005, 7.70000,   0.00000, 0.00000, 121.99200);
	CreateDynamicObject(4587, 908.09961, -3422.50000, -51.90000,   0.00000, 0.00000, 51.99800);
	CreateDynamicObject(789, 920.90002, -3387.69995, 18.80000,   354.00000, 0.00000, 31.99800);
	CreateDynamicObject(4587, 905.20001, -3460.10010, -56.70000,   20.00000, 0.00000, 49.99800);
	CreateDynamicObject(18227, 888.09998, -3457.89990, 2.70000,   349.99701, 0.00000, 141.98500);
	CreateDynamicObject(18227, 887.70001, -3483.60010, 2.70000,   349.99100, 0.00000, 101.98200);
	CreateDynamicObject(18227, 899.00000, -3478.10010, -5.10000,   349.99100, 0.00000, 101.98100);
	CreateDynamicObject(10357, 876.00000, -3472.09961, 89.10000,   355.99500, 0.99400, 152.06200);
	CreateDynamicObject(18227, 951.09961, -3390.69922, -2.80000,   0.00000, 0.00000, 295.98801);
	CreateDynamicObject(18227, 956.00000, -3377.59961, -2.80000,   0.00000, 0.00000, 295.98300);
	CreateDynamicObject(3279, 928.90002, -3400.30005, 6.50000,   0.00000, 0.00000, 134.00000);
	CreateDynamicObject(789, 928.00000, -3387.30005, 0.00000,   353.99600, 0.00000, 31.99800);
	CreateDynamicObject(987, 916.40002, -3439.89990, 7.30000,   0.00000, 0.00000, 142.00000);
	CreateDynamicObject(987, 917.09998, -3440.00000, 7.10000,   0.00000, 0.00000, 229.99800);
	CreateDynamicObject(987, 923.09961, -3433.00000, 7.10000,   0.00000, 0.00000, 51.99300);
	CreateDynamicObject(789, 911.29999, -3435.60010, 20.30000,   353.99600, 0.00000, 31.99800);
	CreateDynamicObject(987, 932.59998, -3430.69995, 7.10000,   0.00000, 0.00000, 51.99300);
	CreateDynamicObject(987, 940.00000, -3421.39990, 7.10000,   0.00000, 0.00000, 51.99300);
	CreateDynamicObject(987, 947.29999, -3411.80005, 7.10000,   0.00000, 0.00000, 141.99300);
	CreateDynamicObject(987, 932.40002, -3430.50000, 11.90000,   0.00000, 90.00000, 143.99300);
	CreateDynamicObject(987, 938.59998, -3404.89990, 13.40000,   0.00000, 90.00000, 141.98199);
	CreateDynamicObject(669, 790.21759, -3369.99048, 6.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4158, 762.10779, -3487.50781, 6.60000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(18451, 809.00000, -3418.80005, 6.80000,   0.00000, 0.00000, 186.00000);
	CreateDynamicObject(873, 772.70001, -3366.89990, 6.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 777.79999, -3373.19995, 6.60000,   0.00000, 0.00000, 3.98300);
	CreateDynamicObject(874, 777.79980, -3373.19922, 6.60000,   0.00000, 0.00000, 3.98300);
	CreateDynamicObject(874, 766.79999, -3361.89990, 6.60000,   0.00000, 0.00000, 5.98300);
	CreateDynamicObject(872, 782.00000, -3373.89990, 5.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(872, 770.70001, -3366.80005, 5.30000,   0.00000, 8.00000, 8.00000);
	CreateDynamicObject(3594, 788.94855, -3381.88574, 7.10000,   0.00000, 0.00000, 365.93979);
	CreateDynamicObject(824, 844.90002, -3271.19995, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(824, 865.40002, -3273.30005, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(824, 856.20001, -3262.00000, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 863.59998, -3270.10010, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 860.50000, -3267.19995, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 859.00000, -3264.00000, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 853.70001, -3264.10010, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 850.70001, -3265.39990, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 848.29999, -3268.60010, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 856.50000, -3263.19995, 7.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(873, 853.59998, -3268.19995, 7.50000,   0.00000, 0.00000, 53.99900);
	CreateDynamicObject(826, 867.70001, -3275.60010, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 868.29999, -3282.19995, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 862.70001, -3283.19995, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 856.20001, -3286.30005, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(873, 867.09998, -3278.89990, 6.60000,   0.00000, 0.00000, 99.99900);
	CreateDynamicObject(826, 858.90002, -3287.39990, 6.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 864.20001, -3281.30005, 5.80000,   350.00000, 180.00000, 224.00000);
	CreateDynamicObject(826, 869.90002, -3281.00000, 5.80000,   349.99701, 179.99500, 223.99500);
	CreateDynamicObject(826, 868.40002, -3275.80005, 5.80000,   349.99701, 179.99500, 223.99500);
	CreateDynamicObject(826, 859.50000, -3282.80005, 5.80000,   349.99701, 179.99500, 223.99500);
	CreateDynamicObject(826, 858.29999, -3289.39990, 5.80000,   349.99701, 179.99500, 223.99500);
	CreateDynamicObject(826, 858.29980, -3289.39941, 5.80000,   349.99701, 179.99500, 223.99500);
	CreateDynamicObject(4602, 907.40002, -3252.69995, -4.40000,   8.00000, 0.00000, 24.00000);
	CreateDynamicObject(873, 829.00000, -3379.30005, 7.30000,   0.00000, 0.00000, 7.99800);
	CreateDynamicObject(874, 838.29999, -3385.30005, 7.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 830.70001, -3384.69995, 7.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(873, 835.09998, -3389.19995, 7.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(873, 874.20001, -3397.80005, 7.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 876.90002, -3400.00000, 7.70000,   0.00000, 0.00000, 56.00000);
	CreateDynamicObject(789, 868.09998, -3327.60010, 0.70000,   0.00000, 0.00000, 310.00000);
	CreateDynamicObject(13120, 1053.09998, -3337.30005, -25.70000,   0.00000, 0.00000, 353.99600);
	CreateDynamicObject(18227, 1177.19922, -3541.19922, -34.00000,   348.61801, 19.02300, 325.77200);
	CreateDynamicObject(18227, 1123.19995, -3563.19995, -34.80000,   339.18900, 19.98900, 249.24300);
	CreateDynamicObject(18227, 1142.40002, -3564.00000, -31.80000,   339.18600, 19.98400, 249.24100);
	CreateDynamicObject(18227, 1149.80005, -3561.10010, -31.80000,   339.18600, 19.98400, 249.24100);
	CreateDynamicObject(18227, 1099.50000, -3496.39990, -43.10000,   339.18600, 19.98400, 249.24100);
	CreateDynamicObject(18227, 1082.00000, -3498.69995, -43.10000,   339.18600, 19.98400, 249.24100);
	CreateDynamicObject(18227, 1216.79980, -3566.69922, -20.00000,   348.61301, 19.02300, 325.76700);
	CreateDynamicObject(18227, 1226.79980, -3577.39941, -24.80000,   348.61301, 19.02300, 325.76700);
	CreateDynamicObject(18227, 1191.00000, -3560.89990, -21.80000,   348.61801, 19.02300, 263.77200);
	CreateDynamicObject(17026, 861.40002, -3209.30005, -2.10000,   0.00000, 0.00000, 239.99100);
	CreateDynamicObject(18227, 1054.50000, -3526.09961, -3.30000,   0.00000, 0.00000, 106.73200);
	CreateDynamicObject(18227, 1056.19995, -3619.60010, 33.50000,   0.00000, 0.00000, 58.73300);
	CreateDynamicObject(18227, 1052.00000, -3626.69995, 7.80000,   0.00000, 0.00000, 58.73300);
	CreateDynamicObject(18227, 1052.40002, -3614.00000, 7.80000,   0.00000, 0.00000, 58.73300);
	CreateDynamicObject(18227, 895.20001, -3623.69995, -1.70000,   0.00000, 0.00000, 10.73300);
	CreateDynamicObject(18227, 864.59998, -3591.19995, -2.50000,   0.00000, 0.00000, 10.72800);
	CreateDynamicObject(18227, 882.40002, -3627.30005, 7.80000,   0.00000, 0.00000, 10.72800);
	CreateDynamicObject(18227, 917.29999, -3642.60010, 7.80000,   0.00000, 0.00000, 26.72800);
	CreateDynamicObject(18227, 876.59998, -3613.50000, 3.10000,   0.00000, 0.00000, 22.72500);
	CreateDynamicObject(18227, 893.09998, -3609.10010, -21.20000,   0.00000, 0.00000, 22.72500);
	CreateDynamicObject(18227, 940.70001, -3591.10010, -32.50000,   0.00000, 0.00000, 22.72500);
	CreateDynamicObject(18227, 929.00000, -3609.00000, -25.80000,   0.00000, 0.00000, 24.72500);
	CreateDynamicObject(18227, 907.70001, -3669.50000, -37.20000,   0.00000, 0.00000, 308.70499);
	CreateDynamicObject(18227, 914.90002, -3672.30005, -25.50000,   0.00000, 0.00000, 308.70499);
	CreateDynamicObject(18227, 1028.09998, -3577.80005, 18.40000,   0.00000, 0.00000, 108.73700);
	CreateDynamicObject(18227, 1048.59998, -3647.60010, 46.00000,   0.00000, 0.00000, 136.73300);
	CreateDynamicObject(17029, 1049.40002, -3338.39990, 17.20000,   0.00000, 0.00000, 149.99600);
	CreateDynamicObject(17029, 1060.80005, -3380.00000, 14.00000,   0.00000, 0.00000, 99.99600);
	CreateDynamicObject(17029, 1072.00000, -3354.79980, 20.30000,   0.00000, 0.00000, 113.98900);
	CreateDynamicObject(17029, 1057.59998, -3324.30005, 28.10000,   0.00000, 0.00000, 163.98900);
	CreateDynamicObject(17029, 1067.69922, -3385.69922, 17.10000,   0.00000, 0.00000, 103.98600);
	CreateDynamicObject(17029, 925.09998, -3304.19995, 2.60000,   0.00000, 0.00000, 149.98599);
	CreateDynamicObject(18227, 955.59998, -3371.50000, -2.80000,   0.00000, 0.00000, 295.98801);
	CreateDynamicObject(18227, 964.40002, -3360.19995, -2.80000,   0.00000, 0.00000, 295.98801);
	CreateDynamicObject(5881, 1027.00000, -3349.80005, 9.80000,   0.00000, 356.00000, 132.00000);
	CreateDynamicObject(5881, 1032.90002, -3360.39990, 20.00000,   0.00000, 4.00000, 316.00000);
	CreateDynamicObject(17029, 1025.19995, -3353.10010, 10.70000,   0.00000, 0.00000, 187.99600);
	CreateDynamicObject(17029, 1034.40002, -3368.60010, 8.50000,   0.00000, 0.00000, 187.99300);
	CreateDynamicObject(17029, 1052.59998, -3409.50000, -5.50000,   0.00000, 0.00000, 187.99300);
	CreateDynamicObject(789, 991.70001, -3368.30005, 23.30000,   0.00000, 0.00000, 49.99900);
	CreateDynamicObject(18227, 935.29999, -3381.10010, 0.40000,   0.00000, 0.00000, 261.99100);
	CreateDynamicObject(791, 1027.19995, -3377.10010, -10.50000,   0.00000, 0.00000, 1.99400);
	CreateDynamicObject(17029, 1000.09998, -3377.89990, -4.00000,   0.00000, 16.00000, 235.99300);
	CreateDynamicObject(17029, 967.09998, -3377.50000, -10.00000,   0.00000, 15.99600, 175.99200);
	CreateDynamicObject(17029, 986.70001, -3378.19995, -6.50000,   0.00000, 15.99100, 175.99001);
	CreateDynamicObject(791, 1013.00000, -3423.50000, -2.00000,   0.00000, 0.00000, 1.99400);
	CreateDynamicObject(16271, 957.00000, -3387.50000, 18.40000,   0.00000, 0.00000, 319.99500);
	CreateDynamicObject(789, 1001.50000, -3427.69922, 13.30000,   0.00000, 0.00000, 49.99900);
	CreateDynamicObject(789, 950.50000, -3368.50000, 31.10000,   0.00000, 0.00000, 49.99900);
	CreateDynamicObject(18227, 930.90002, -3413.19995, -31.70000,   14.00000, 0.00000, 244.73300);
	CreateDynamicObject(18227, 925.09998, -3419.30005, -33.00000,   13.99700, 0.00000, 244.73100);
	CreateDynamicObject(18227, 1146.50000, -3532.89941, -12.50000,   348.61301, 19.02300, 325.76700);
	CreateDynamicObject(18227, 1022.90002, -3449.19995, -4.90000,   0.00000, 0.00000, 178.72600);
	CreateDynamicObject(18227, 1033.90002, -3484.10010, -2.90000,   0.00000, 0.00000, 178.72600);
	CreateDynamicObject(13752, 1146.98621, -3519.61377, -2.26311,   348.00699, 357.95001, 151.56900);
	CreateDynamicObject(18227, 1158.00000, -3600.29980, -15.50000,   348.61301, 19.02300, 325.76700);
	CreateDynamicObject(18227, 1171.59998, -3607.39990, -25.30000,   348.61301, 19.02300, 335.76700);
	CreateDynamicObject(18227, 1169.89941, -3540.69922, -25.30000,   348.60199, 19.01200, 335.75900);
	CreateDynamicObject(18227, 1068.19995, -3485.00000, 1.90000,   0.00000, 0.00000, 222.72400);
	CreateDynamicObject(13120, 1202.50000, -3510.30005, -19.30000,   0.00000, 0.00000, 281.99799);
	CreateDynamicObject(13120, 1100.20105, -3362.88379, -25.70000,   0.00000, 0.00000, 353.99600);
	CreateDynamicObject(13120, 1311.59998, -3435.89990, -13.00000,   0.00000, 348.00000, 27.99800);
	CreateDynamicObject(11511, 1344.39941, -3493.59961, 38.90000,   0.00000, 0.00000, 41.99000);
	CreateDynamicObject(18227, 1216.09998, -3517.60010, -8.80000,   348.61301, 19.02300, 5.76700);
	CreateDynamicObject(18227, 1215.30005, -3511.69995, 7.70000,   348.60699, 19.01700, 27.76200);
	CreateDynamicObject(18227, 1202.39941, -3523.79980, -8.60000,   348.60199, 19.01200, 27.75700);
	CreateDynamicObject(18227, 1247.09998, -3425.69995, 13.20000,   348.75000, 21.04600, 68.15600);
	CreateDynamicObject(18227, 1215.30005, -3511.69995, -12.30000,   348.60699, 19.01200, 27.75700);
	CreateDynamicObject(18227, 1256.30005, -3428.39990, 22.20000,   348.60699, 19.01200, 73.75700);
	CreateDynamicObject(18227, 1229.80005, -3434.10010, 8.10000,   348.60699, 19.00600, 103.75700);
	CreateDynamicObject(18227, 1214.29980, -3445.59961, 14.40000,   348.60199, 19.00100, 103.75500);
	CreateDynamicObject(18227, 1234.40002, -3425.50000, 8.10000,   348.60699, 19.00100, 103.75500);
	CreateDynamicObject(18227, 1219.59998, -3443.60010, 8.10000,   348.60699, 19.00100, 103.75500);
	CreateDynamicObject(18227, 1231.80005, -3444.50000, 14.40000,   348.60699, 19.00100, 103.75500);
	CreateDynamicObject(18227, 1248.50000, -3417.50000, 14.40000,   348.60699, 19.00100, 103.75500);
	CreateDynamicObject(18227, 1240.30005, -3421.30005, 23.80000,   348.60699, 19.00100, 103.75500);
	CreateDynamicObject(18227, 1285.50000, -3380.39990, 23.80000,   348.60699, 19.00100, 93.75500);
	CreateDynamicObject(13120, 1350.09998, -3396.69995, -13.00000,   0.00000, 349.99701, 27.99300);
	CreateDynamicObject(18227, 1310.50000, -3376.30005, 23.80000,   348.60699, 18.99500, 93.75200);
	CreateDynamicObject(18227, 1298.59961, -3394.00000, 23.80000,   348.60199, 18.99000, 93.75200);
	CreateDynamicObject(18227, 1353.30005, -3339.60010, 16.00000,   348.60199, 18.99000, 103.75100);
	CreateDynamicObject(18227, 1377.80005, -3335.00000, 21.30000,   348.60699, 18.99000, 73.75100);
	CreateDynamicObject(18227, 1414.80005, -3354.19995, 21.30000,   348.60699, 18.99000, 73.75100);
	CreateDynamicObject(18227, 1448.80005, -3387.10010, 21.30000,   348.60699, 18.99000, 23.75100);
	CreateDynamicObject(13120, 1409.80005, -3353.60010, -13.00000,   0.00000, 349.99701, 27.99300);
	CreateDynamicObject(13120, 1486.50000, -3405.00000, -22.50000,   0.00000, 349.99701, 7.99300);
	CreateDynamicObject(18227, 1467.19995, -3452.50000, 21.30000,   348.60699, 18.98400, 343.74701);
	CreateDynamicObject(18227, 1474.69995, -3496.50000, 21.30000,   348.60699, 18.97900, 343.74600);
	CreateDynamicObject(18227, 1479.90002, -3535.69995, 21.30000,   348.60699, 18.97900, 343.74600);
	CreateDynamicObject(18227, 1455.30005, -3573.69995, 18.30000,   348.60699, 18.97900, 313.74600);
	CreateDynamicObject(18227, 1401.00000, -3613.30005, 13.60000,   348.60699, 18.97900, 273.74200);
	CreateDynamicObject(18227, 1377.59961, -3636.89941, 13.60000,   348.60199, 18.97900, 273.74100);
	CreateDynamicObject(18227, 1346.90002, -3663.80005, 19.90000,   348.60699, 18.97900, 253.74100);
	CreateDynamicObject(18227, 1282.80005, -3617.00000, 19.90000,   348.60699, 18.97900, 203.74001);
	CreateDynamicObject(18227, 1302.09998, -3626.10010, 19.90000,   348.60699, 18.97900, 193.74001);
	CreateDynamicObject(18227, 1276.59998, -3599.50000, 32.70000,   348.60699, 18.97900, 183.73599);
	CreateDynamicObject(18227, 1244.39941, -3564.19922, 6.00000,   348.60199, 18.97900, 163.73500);
	CreateDynamicObject(18227, 1245.59998, -3560.69995, 23.30000,   348.60699, 18.97900, 173.73500);
	CreateDynamicObject(13120, 1308.39941, -3656.19922, -19.30000,   0.00000, 0.00000, 281.99200);
	CreateDynamicObject(18227, 1346.90002, -3657.60010, 30.90000,   348.60699, 18.97900, 243.74001);
	CreateDynamicObject(13120, 1373.50000, -3648.39990, -21.50000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(13120, 1474.09998, -3581.80005, -19.30000,   0.00000, 0.00000, 311.99600);
	CreateDynamicObject(13120, 1469.80005, -3532.69995, -19.30000,   0.00000, 0.00000, 311.99500);
	CreateDynamicObject(18227, 1503.30005, -3513.30005, 42.10000,   348.60699, 18.97900, 343.74600);
	CreateDynamicObject(18227, 1477.19995, -3446.19995, 38.10000,   348.60699, 18.97900, 339.74600);
	CreateDynamicObject(18227, 1211.09961, -3503.79980, 17.00000,   348.60199, 19.01200, 27.75700);
	CreateDynamicObject(18227, 1488.09998, -3514.60010, 22.30000,   348.60699, 18.97900, 343.74600);
	CreateDynamicObject(18227, 1470.69995, -3489.19995, 13.30000,   348.60699, 18.97900, 343.74600);
	CreateDynamicObject(18227, 1458.50000, -3384.50000, 26.30000,   348.60699, 18.97900, 13.74600);
	CreateDynamicObject(18227, 1356.30005, -3338.89990, 21.30000,   348.60699, 18.99000, 73.75100);
	CreateDynamicObject(18227, 1309.00000, -3364.39990, 23.80000,   348.60699, 18.99500, 93.75200);
	CreateDynamicObject(18227, 1278.19995, -3419.10010, 15.90000,   348.60699, 19.00600, 73.75700);
	CreateDynamicObject(18227, 1353.69995, -3334.89990, 3.30000,   348.60699, 18.99000, 73.75100);
	CreateDynamicObject(18227, 1461.40002, -3382.10010, 12.00000,   348.60699, 18.97900, 13.74400);
	CreateDynamicObject(18227, 1460.00000, -3380.39990, 10.80000,   348.60699, 18.97900, 13.74400);
	CreateDynamicObject(18227, 1511.09998, -3513.10010, 21.50000,   348.60699, 18.97900, 343.74600);
	CreateDynamicObject(18227, 1482.69995, -3447.39990, 23.10000,   348.60699, 18.97900, 343.74600);
	CreateDynamicObject(18227, 1487.09998, -3444.89990, 9.60000,   348.60699, 18.97900, 347.74600);
	CreateDynamicObject(18227, 1511.59998, -3505.69995, 9.60000,   348.60699, 18.97900, 347.74500);
	CreateDynamicObject(18227, 1504.90002, -3469.10010, 9.60000,   348.60699, 18.97900, 347.74500);
	CreateDynamicObject(18227, 1493.80005, -3429.50000, 9.60000,   348.60699, 18.97900, 351.74500);
	CreateDynamicObject(18227, 1498.19995, -3428.60010, -6.90000,   348.60699, 18.97900, 351.74399);
	CreateDynamicObject(18227, 1466.59998, -3579.19995, 27.60000,   348.60699, 18.97900, 313.74200);
	CreateDynamicObject(18227, 1399.39941, -3649.29980, 27.60000,   348.60199, 18.97900, 285.73801);
	CreateDynamicObject(18227, 1414.30005, -3631.10010, 17.60000,   348.60699, 18.97900, 283.73801);
	CreateDynamicObject(18227, 1345.19922, -3668.39941, 28.90000,   348.60199, 18.97900, 253.72900);
	CreateDynamicObject(11543, 1358.79980, -3466.39941, 31.70000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(11479, 1368.40002, -3476.69995, 24.20000,   0.00000, 0.00000, 42.00000);
	CreateDynamicObject(11450, 1393.09998, -3496.60010, 27.70000,   0.00000, 0.00000, 42.00000);
	CreateDynamicObject(3292, 1418.31006, -3475.68799, 24.60000,   0.00000, 0.00000, 44.00000);
	CreateDynamicObject(3294, 1414.80005, -3465.30005, 27.50000,   0.00000, 0.00000, 134.00000);
	CreateDynamicObject(18227, 1458.80005, -3517.19995, 13.30000,   348.60699, 18.97900, 343.74600);
	CreateDynamicObject(11451, 1406.30005, -3406.89990, 24.70000,   0.00000, 0.00000, 42.00000);
	CreateDynamicObject(18227, 1435.00000, -3418.69995, -7.00000,   348.60699, 18.98400, 23.74700);
	CreateDynamicObject(18227, 1445.19995, -3406.10010, 4.50000,   348.60699, 18.98400, 23.74700);
	CreateDynamicObject(18227, 1413.80005, -3360.69995, 11.80000,   348.60699, 18.99000, 73.75100);
	CreateDynamicObject(18227, 1460.90002, -3452.60010, 13.00000,   348.60699, 18.97900, 343.74600);
	CreateDynamicObject(11456, 1316.30005, -3507.80005, 28.10000,   0.00000, 0.00000, 311.89600);
	CreateDynamicObject(11449, 1358.00000, -3442.50000, 27.20000,   0.00000, 0.00000, 131.50000);
	CreateDynamicObject(11461, 1344.09998, -3461.19995, 24.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12847, 1403.59998, -3518.60010, 28.40000,   0.00000, 0.00000, 312.00000);
	CreateDynamicObject(5767, 1403.80005, -3551.19995, 62.80000,   0.00000, 358.00000, 347.00000);
	CreateDynamicObject(791, 1116.50000, -3726.19922, -26.20000,   0.00000, 0.00000, 349.98599);
	CreateDynamicObject(791, 1252.80005, -3465.19995, 12.90000,   0.00000, 0.00000, 173.98599);
	CreateDynamicObject(791, 1280.00000, -3445.69995, 4.10000,   0.00000, 0.00000, 127.98600);
	CreateDynamicObject(791, 1302.50000, -3379.39990, 23.90000,   0.00000, 0.00000, 309.98499);
	CreateDynamicObject(791, 1430.69995, -3412.60010, 19.40000,   0.00000, 0.00000, 83.98500);
	CreateDynamicObject(791, 1442.40002, -3518.89990, 19.40000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(791, 1295.19995, -3606.19995, 19.40000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(791, 1296.90002, -3644.00000, 6.30000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(791, 1442.59998, -3456.30005, 16.70000,   0.00000, 0.00000, 19.97500);
	CreateDynamicObject(791, 1442.59998, -3504.80005, 16.70000,   0.00000, 0.00000, 25.97500);
	CreateDynamicObject(18227, 1302.50000, -3398.60010, 16.50000,   348.60199, 18.99000, 93.75200);
	CreateDynamicObject(17038, 1332.30005, -3454.69995, 24.60000,   0.00000, 0.00000, 132.00000);
	CreateDynamicObject(17021, 1353.40002, -3391.10010, 32.30000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(18227, 1425.80005, -3330.10010, 26.80000,   348.59601, 18.98400, 103.74900);
	CreateDynamicObject(18227, 1374.19995, -3343.00000, 26.80000,   348.59601, 18.98400, 77.74900);
	CreateDynamicObject(791, 1391.00000, -3386.60010, 16.70000,   0.00000, 0.00000, 59.97300);
	CreateDynamicObject(791, 1419.40002, -3440.10010, 16.70000,   0.00000, 0.00000, 65.96900);
	CreateDynamicObject(16385, 1352.90002, -3543.50000, 24.60000,   0.00000, 0.00000, 42.00000);
	CreateDynamicObject(12941, 1389.69995, -3575.89990, 24.50000,   0.00000, 0.00000, 42.75000);
	CreateDynamicObject(18227, 1349.00000, -3680.39990, 0.60000,   348.60199, 18.97900, 253.72900);
	CreateDynamicObject(18227, 1356.69995, -3672.39990, 16.60000,   348.60199, 18.97900, 253.72900);
	CreateDynamicObject(18227, 1370.90002, -3681.60010, -3.60000,   348.60199, 18.97900, 253.72900);
	CreateDynamicObject(18227, 1379.50000, -3619.30005, 9.90000,   348.60199, 18.97900, 275.74100);
	CreateDynamicObject(18227, 1358.00000, -3654.69995, 10.60000,   348.59601, 18.97900, 275.73999);
	CreateDynamicObject(11295, 1347.09998, -3530.39990, 30.40000,   0.00000, 0.00000, 310.00000);
	CreateDynamicObject(9244, 1368.59998, -3589.10010, 29.70000,   0.00000, 0.00000, 312.00000);
	CreateDynamicObject(8836, 1380.69995, -3602.39990, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1383.59998, -3605.50000, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1385.80005, -3603.50000, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1387.59998, -3601.80005, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1385.09998, -3599.00000, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1383.80005, -3600.19995, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1379.00000, -3604.60010, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1382.40002, -3608.30005, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1384.30005, -3613.69995, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1380.09998, -3609.10010, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1376.09998, -3606.60010, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1372.69995, -3607.69995, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1375.90002, -3611.19995, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1379.90002, -3615.60010, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1377.09998, -3618.10010, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1374.50000, -3620.50000, 28.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1372.09998, -3617.89990, 28.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1368.90002, -3614.39990, 28.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1365.69995, -3610.50000, 28.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1369.50000, -3609.60010, 27.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1372.30005, -3611.69995, 27.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1362.40002, -3600.39990, 26.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1360.09998, -3599.60010, 26.80000,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(8836, 1360.40002, -3602.10010, 26.80000,   0.00000, 0.00000, 69.99900);
	CreateDynamicObject(8836, 1359.00000, -3603.89990, 29.10000,   0.00000, 12.00000, 69.99900);
	CreateDynamicObject(8836, 1354.19995, -3601.10010, 27.60000,   0.00000, 11.99700, 69.99400);
	CreateDynamicObject(8836, 1356.40002, -3601.50000, 29.40000,   0.00000, 5.99700, 151.99400);
	CreateDynamicObject(8836, 1361.40002, -3607.10010, 28.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1365.90002, -3607.60010, 28.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1360.09998, -3605.00000, 28.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1358.19995, -3606.80005, 28.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1358.19922, -3606.79980, 28.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1349.90002, -3608.60010, 32.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1353.69995, -3611.00000, 32.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1354.69995, -3613.69995, 32.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1357.50000, -3617.30005, 32.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1359.40002, -3620.30005, 32.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1361.09998, -3624.10010, 32.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1363.40002, -3627.00000, 32.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1366.40002, -3630.69995, 32.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1366.59998, -3617.80005, 30.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1370.19995, -3620.10010, 30.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1364.50000, -3614.69995, 30.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1353.59998, -3607.69995, 30.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1351.00000, -3603.89990, 30.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8836, 1343.30005, -3597.19995, 30.60000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(8836, 1347.90002, -3604.19995, 30.60000,   0.00000, 0.00000, 19.99500);
	CreateDynamicObject(8836, 1347.09998, -3597.19995, 30.60000,   0.00000, 0.00000, 19.99500);
	CreateDynamicObject(8836, 1347.09998, -3597.00000, 28.60000,   0.00000, 0.00000, 31.99500);
	CreateDynamicObject(8836, 1343.59998, -3597.39990, 28.60000,   0.00000, 0.00000, 31.99200);
	CreateDynamicObject(8836, 1344.80005, -3599.50000, 28.60000,   0.00000, 0.00000, 31.99200);
	CreateDynamicObject(8836, 1350.30005, -3597.10010, 28.60000,   0.00000, 0.00000, 31.99200);
	CreateDynamicObject(8836, 1358.90002, -3595.39990, 25.90000,   0.00000, 0.00000, 31.99200);
	CreateDynamicObject(9153, 1249.69995, -3479.00000, 29.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9153, 1225.80005, -3496.19995, 26.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9153, 1225.19995, -3492.39990, 26.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9153, 1238.09998, -3488.00000, 26.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9153, 1253.90002, -3479.10010, 26.50000,   0.00000, 0.00000, 42.00000);
	CreateDynamicObject(9153, 1274.40002, -3459.10010, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1257.80005, -3463.80005, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1275.80005, -3447.00000, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1291.00000, -3441.39990, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1297.90002, -3435.00000, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1291.09998, -3432.10010, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1282.30005, -3440.30005, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1314.90002, -3418.69995, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1320.59998, -3413.30005, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1327.50000, -3406.89990, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1319.19995, -3405.69995, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1311.40002, -3413.00000, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1298.19995, -3418.19995, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1294.00000, -3424.80005, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1267.19995, -3462.10010, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1252.50000, -3464.50000, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1239.40002, -3471.39990, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1245.59998, -3478.30005, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1240.80005, -3484.00000, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1235.50000, -3479.00000, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1250.30005, -3531.69995, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1256.69995, -3526.89990, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1263.30005, -3522.80005, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1267.19995, -3529.19995, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1260.59998, -3533.30005, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1254.69995, -3538.10010, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1254.69922, -3538.09961, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1285.80005, -3544.39990, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1281.69995, -3551.30005, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1281.00000, -3539.19995, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1278.59998, -3543.50000, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1298.69995, -3558.89990, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1294.30005, -3553.39990, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1290.69995, -3549.69995, 26.50000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1313.30005, -3575.19995, 27.80000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1307.69995, -3568.10010, 27.80000,   0.00000, 0.00000, 41.99500);
	CreateDynamicObject(9153, 1334.09998, -3592.69995, 27.80000,   0.00000, 0.00000, 63.99500);
	CreateDynamicObject(9153, 1342.50000, -3595.60010, 27.80000,   0.00000, 0.00000, 63.99000);
	CreateDynamicObject(9153, 1350.50000, -3596.69995, 27.80000,   0.00000, 0.00000, 97.99000);
	CreateDynamicObject(9153, 1356.69995, -3610.50000, 28.60000,   0.00000, 0.00000, 131.98700);
	CreateDynamicObject(9153, 1362.59998, -3616.39990, 28.60000,   0.00000, 0.00000, 131.98399);
	CreateDynamicObject(9153, 1388.90002, -3601.60010, 28.60000,   0.00000, 0.00000, 131.98399);
	CreateDynamicObject(9153, 1395.30005, -3604.39990, 28.60000,   0.00000, 0.00000, 131.98399);
	CreateDynamicObject(9153, 1349.90002, -3622.50000, 32.10000,   0.00000, 0.00000, 131.98399);
	CreateDynamicObject(9153, 1346.00000, -3611.50000, 32.10000,   0.00000, 0.00000, 131.98399);
	CreateDynamicObject(9153, 1398.90002, -3541.80005, 25.60000,   0.00000, 0.00000, 97.98400);
	CreateDynamicObject(9153, 1403.19995, -3551.19995, 26.90000,   0.00000, 0.00000, 97.98200);
	CreateDynamicObject(9153, 1395.30005, -3515.30005, 27.40000,   0.00000, 0.00000, 139.98199);
	CreateDynamicObject(9153, 1391.00000, -3519.30005, 27.40000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1394.90002, -3526.60010, 26.70000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1381.90002, -3514.30005, 26.70000,   0.00000, 0.00000, 129.97701);
	CreateDynamicObject(9153, 1386.00000, -3517.30005, 26.70000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1425.09998, -3531.60010, 24.00000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1430.40002, -3525.69995, 25.50000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1435.50000, -3528.39990, 25.50000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1407.00000, -3504.89990, 27.30000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1419.69995, -3507.19995, 26.30000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1427.80005, -3511.80005, 26.30000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1428.19995, -3521.60010, 26.30000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1437.90002, -3522.50000, 28.10000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1400.50000, -3497.30005, 26.70000,   0.00000, 0.00000, 135.97400);
	CreateDynamicObject(3029, 1394.30005, -3484.29004, 24.34000,   0.00000, 0.00000, 310.00000);
	CreateDynamicObject(9153, 1435.30005, -3458.00000, 26.70000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1443.59998, -3453.30005, 26.70000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1439.80005, -3467.89990, 26.70000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1446.09998, -3461.89990, 26.50000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1446.90002, -3459.50000, 26.50000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1449.40002, -3464.10010, 26.50000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1377.50000, -3389.30005, 26.80000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1388.00000, -3386.30005, 26.80000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1429.19995, -3417.89990, 26.80000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1432.80005, -3413.30005, 26.80000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1428.40002, -3426.19995, 26.80000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1436.09998, -3427.89990, 26.80000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(4508, 1413.90002, -3454.39990, 27.11000,   0.40000, 359.00000, 216.00000);
	CreateDynamicObject(9153, 1418.09998, -3447.00000, 23.50000,   0.00000, 0.00000, 139.97701);
	CreateDynamicObject(9153, 1409.09998, -3436.30005, 26.30000,   0.00000, 0.00000, 133.97701);
	CreateDynamicObject(9153, 1412.09998, -3434.39990, 26.30000,   0.00000, 0.00000, 173.97301);
	CreateDynamicObject(9153, 1422.50000, -3435.60010, 26.30000,   0.00000, 0.00000, 223.96899);
	CreateDynamicObject(9153, 1411.00000, -3441.89990, 22.50000,   0.00000, 0.00000, 223.96700);
	CreateDynamicObject(9153, 1416.00000, -3443.30005, 22.50000,   0.00000, 0.00000, 223.96700);
	CreateDynamicObject(9153, 1416.69995, -3439.10010, 22.50000,   0.00000, 0.00000, 223.96700);
	CreateDynamicObject(9153, 1415.30005, -3479.89990, 22.50000,   0.00000, 0.00000, 185.96700);
	CreateDynamicObject(9153, 1367.00000, -3396.30005, 23.80000,   0.00000, 0.00000, 133.96600);
	CreateDynamicObject(9153, 1371.19995, -3398.80005, 23.80000,   0.00000, 0.00000, 133.96201);
	CreateDynamicObject(9153, 1375.00000, -3394.19995, 23.80000,   0.00000, 0.00000, 133.96201);
	CreateDynamicObject(9153, 1376.80005, -3404.30005, 23.80000,   0.00000, 0.00000, 133.96201);
	CreateDynamicObject(9153, 1390.90002, -3419.30005, 23.80000,   0.00000, 0.00000, 133.96201);
	CreateDynamicObject(9153, 1375.09998, -3401.39990, 23.80000,   0.00000, 0.00000, 133.96201);
	CreateDynamicObject(9153, 1153.00000, -3600.79980, 13.50000,   0.00000, 0.00000, 133.96201);
	CreateDynamicObject(9153, 1143.09998, -3601.89990, 13.80000,   0.00000, 0.00000, 133.96201);
	CreateDynamicObject(9153, 1147.09998, -3605.50000, 17.00000,   0.00000, 0.00000, 133.96201);
	CreateDynamicObject(17029, 1073.59998, -3386.89990, 3.30000,   0.00000, 0.00000, 103.98600);
	CreateDynamicObject(17029, 1078.50000, -3387.19995, -9.50000,   0.00000, 0.00000, 103.98600);
	CreateDynamicObject(9153, 1223.90002, -3501.50000, 26.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9153, 1232.69995, -3493.19995, 26.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1262.19995, -3509.80005, 38.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1287.40002, -3456.10010, 38.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1333.69995, -3417.69995, 38.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1381.00000, -3413.69995, 38.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1426.69995, -3447.69995, 38.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1410.59998, -3493.60010, 38.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1392.50000, -3532.30005, 38.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1357.59998, -3603.60010, 41.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1318.80005, -3564.00000, 39.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1284.80005, -3540.10010, 38.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1317.69995, -3506.30005, 37.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1352.19995, -3442.89990, 37.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1344.59998, -3546.60010, 37.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1337.80005, -3552.69995, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1348.69995, -3564.39990, 26.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1345.50000, -3560.19995, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1340.90002, -3555.60010, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1343.50000, -3552.00000, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1346.59998, -3554.39990, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1349.19995, -3557.10010, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1351.50000, -3559.50000, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1351.59998, -3561.30005, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1346.09998, -3562.69995, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1342.80005, -3559.50000, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1348.50000, -3559.30005, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1355.50000, -3557.60010, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1358.90002, -3555.69995, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1361.59998, -3553.10010, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1354.09998, -3560.10010, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1347.50000, -3565.50000, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1335.80005, -3551.10010, 25.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1338.69995, -3555.50000, 25.70000,   0.00000, 0.00000, 330.00000);
	CreateDynamicObject(803, 1341.80005, -3557.39990, 25.70000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1345.59998, -3529.69995, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1350.09998, -3527.39990, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1352.09998, -3530.10010, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1349.40002, -3532.10010, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1347.00000, -3533.89990, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1348.30005, -3528.50000, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1354.30005, -3531.10010, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1357.69995, -3535.39990, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1361.50000, -3538.00000, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1363.90002, -3542.00000, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1366.00000, -3546.50000, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1368.00000, -3547.50000, 24.30000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1356.09998, -3534.30005, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1352.19995, -3529.89990, 25.00000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1368.40002, -3550.00000, 24.50000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1366.00000, -3551.50000, 24.50000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1364.40002, -3550.89990, 24.50000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1366.40002, -3549.80005, 24.50000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1366.39941, -3549.79980, 24.50000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(11011, 1308.19922, -3420.39941, 28.50000,   0.00000, 0.00000, 19.99500);
	CreateDynamicObject(18267, 1296.90002, -3492.80005, 24.70000,   0.00000, 0.00000, 312.00000);
	CreateDynamicObject(803, 1321.50000, -3493.10010, 24.30000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1319.00000, -3490.69995, 24.30000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1317.59998, -3489.10010, 24.30000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1314.19995, -3486.39990, 24.80000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1312.40002, -3488.30005, 24.80000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1310.80005, -3489.69995, 24.80000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1310.59998, -3483.39990, 24.80000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1323.69995, -3496.80005, 24.80000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1326.59998, -3499.60010, 24.80000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1331.40002, -3504.19995, 24.30000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1333.69995, -3506.30005, 24.30000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1334.69995, -3508.60010, 24.30000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1326.09998, -3518.10010, 24.30000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1324.30005, -3520.30005, 24.30000,   0.00000, 0.00000, 315.99600);
	CreateDynamicObject(803, 1321.80005, -3522.89990, 24.30000,   0.00000, 0.00000, 315.99399);
	CreateDynamicObject(803, 1319.30005, -3524.60010, 24.30000,   0.00000, 0.00000, 315.99399);
	CreateDynamicObject(803, 1317.69995, -3526.30005, 24.30000,   0.00000, 0.00000, 315.99399);
	CreateDynamicObject(803, 1316.00000, -3527.80005, 24.30000,   0.00000, 0.00000, 315.99399);
	CreateDynamicObject(803, 1313.19995, -3528.30005, 24.30000,   0.00000, 0.00000, 289.99399);
	CreateDynamicObject(803, 1312.00000, -3527.39990, 24.30000,   0.00000, 0.00000, 289.98999);
	CreateDynamicObject(803, 1311.00000, -3526.69995, 24.30000,   0.00000, 0.00000, 289.98999);
	CreateDynamicObject(803, 1309.69995, -3524.60010, 24.30000,   0.00000, 0.00000, 289.98999);
	CreateDynamicObject(803, 1309.69922, -3524.59961, 24.30000,   0.00000, 0.00000, 289.98999);
	CreateDynamicObject(803, 1308.00000, -3523.10010, 24.30000,   0.00000, 0.00000, 13.99000);
	CreateDynamicObject(803, 1306.50000, -3520.50000, 24.30000,   0.00000, 0.00000, 13.98600);
	CreateDynamicObject(803, 1303.50000, -3517.80005, 24.30000,   0.00000, 0.00000, 13.98600);
	CreateDynamicObject(803, 1300.69995, -3515.19995, 24.30000,   0.00000, 0.00000, 21.98600);
	CreateDynamicObject(803, 1299.80005, -3513.69995, 24.30000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1296.90002, -3510.10010, 24.30000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1297.50000, -3511.19995, 24.30000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1294.09998, -3508.19995, 24.30000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1294.19995, -3505.30005, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1293.00000, -3503.10010, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1290.59998, -3501.30005, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1288.59998, -3499.30005, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1286.30005, -3497.19995, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1284.50000, -3493.89990, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1284.59998, -3491.50000, 24.80000,   0.00000, 0.00000, 71.98400);
	CreateDynamicObject(803, 1287.00000, -3491.60010, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1289.59998, -3490.10010, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1289.40002, -3487.60010, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1291.59998, -3486.39990, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1292.50000, -3483.89990, 24.80000,   0.00000, 0.00000, 81.98400);
	CreateDynamicObject(803, 1297.30005, -3480.80005, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1302.09998, -3474.69995, 24.80000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1304.90002, -3477.19995, 24.80000,   0.00000, 0.00000, 321.98401);
	CreateDynamicObject(803, 1307.69995, -3479.69995, 24.80000,   0.00000, 0.00000, 41.98400);
	CreateDynamicObject(803, 1309.69995, -3481.50000, 24.80000,   0.00000, 0.00000, 81.98400);
	CreateDynamicObject(803, 1324.59998, -3516.69995, 25.50000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(803, 1322.90002, -3515.19995, 25.50000,   0.00000, 0.00000, 333.99600);
	CreateDynamicObject(803, 1318.50000, -3513.80005, 24.30000,   0.00000, 0.00000, 333.99500);
	CreateDynamicObject(803, 1317.09998, -3515.60010, 24.30000,   0.00000, 0.00000, 333.99500);
	CreateDynamicObject(803, 1315.19995, -3517.89990, 24.30000,   0.00000, 0.00000, 1.99500);
	CreateDynamicObject(803, 1312.30005, -3517.00000, 24.30000,   0.00000, 0.00000, 291.99399);
	CreateDynamicObject(803, 1311.09998, -3515.10010, 24.30000,   0.00000, 0.00000, 291.98901);
	CreateDynamicObject(803, 1308.50000, -3512.00000, 24.30000,   0.00000, 0.00000, 291.98901);
	CreateDynamicObject(803, 1306.40002, -3509.19995, 24.30000,   0.00000, 0.00000, 291.98901);
	CreateDynamicObject(803, 1304.40002, -3506.89990, 24.30000,   0.00000, 0.00000, 291.98901);
	CreateDynamicObject(803, 1304.39941, -3506.89941, 24.30000,   0.00000, 0.00000, 291.98901);
	CreateDynamicObject(803, 1308.30005, -3506.69995, 24.30000,   0.00000, 0.00000, 291.98901);
	CreateDynamicObject(803, 1311.40002, -3505.89990, 24.30000,   0.00000, 0.00000, 291.98901);
	CreateDynamicObject(803, 1313.59998, -3504.19995, 24.30000,   0.00000, 0.00000, 341.98901);
	CreateDynamicObject(803, 1315.90002, -3502.69995, 24.30000,   0.00000, 0.00000, 341.98801);
	CreateDynamicObject(803, 1318.90002, -3500.39990, 24.30000,   0.00000, 0.00000, 131.98801);
	CreateDynamicObject(803, 1321.40002, -3497.50000, 24.30000,   0.00000, 0.00000, 131.98399);
	CreateDynamicObject(803, 1323.40002, -3500.10010, 24.30000,   0.00000, 0.00000, 131.98399);
	CreateDynamicObject(803, 1322.90002, -3504.00000, 24.30000,   0.00000, 0.00000, 131.98399);
	CreateDynamicObject(803, 1317.40002, -3503.50000, 24.30000,   0.00000, 0.00000, 131.98399);
	CreateDynamicObject(803, 1318.00000, -3508.69995, 24.30000,   0.00000, 0.00000, 131.98399);
	CreateDynamicObject(803, 1313.00000, -3508.80005, 24.30000,   0.00000, 0.00000, 131.98399);
	CreateDynamicObject(803, 1315.50000, -3509.10010, 24.30000,   0.00000, 0.00000, 211.98399);
	CreateDynamicObject(803, 1320.80005, -3504.10010, 24.30000,   0.00000, 0.00000, 211.98100);
	CreateDynamicObject(803, 1320.90002, -3500.19995, 24.30000,   0.00000, 0.00000, 211.98100);
	CreateDynamicObject(803, 1319.30005, -3506.19995, 24.30000,   0.00000, 0.00000, 211.98100);
	CreateDynamicObject(803, 1324.69995, -3501.80005, 24.30000,   0.00000, 0.00000, 211.98100);
	CreateDynamicObject(803, 1319.90002, -3510.00000, 24.30000,   0.00000, 0.00000, 211.98100);
	CreateDynamicObject(803, 1317.59998, -3511.69995, 24.30000,   0.00000, 0.00000, 211.98100);
	CreateDynamicObject(803, 1317.59961, -3511.69922, 24.30000,   0.00000, 0.00000, 211.98100);
	CreateDynamicObject(803, 1313.19995, -3511.10010, 24.30000,   0.00000, 0.00000, 211.98100);
	CreateDynamicObject(803, 1312.40002, -3513.30005, 24.30000,   0.00000, 0.00000, 211.98100);
	CreateDynamicObject(803, 1314.90002, -3513.30005, 24.30000,   0.00000, 0.00000, 211.98100);
	CreateDynamicObject(803, 1314.90002, -3511.30005, 24.30000,   0.00000, 0.00000, 211.98100);
	CreateDynamicObject(887, 1287.09998, -3490.39990, 24.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(889, 1294.00000, -3485.39990, 24.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(894, 1289.19995, -3487.10010, 24.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(894, 1287.30005, -3495.19995, 24.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(894, 1294.69995, -3504.00000, 24.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12957, 1269.00000, -3499.00000, 25.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3594, 1383.09998, -3428.89990, 25.10000,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(16002, 1314.69995, -3459.80005, 24.60000,   39.52200, 23.61600, 68.45100);
	CreateDynamicObject(844, 1284.50000, -3472.29980, 25.29900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(839, 1309.69995, -3473.69995, 26.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1329.19995, -3468.69995, 25.00000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(803, 1326.30005, -3465.89990, 25.00000,   0.00000, 0.00000, 21.98400);
	CreateDynamicObject(836, 1387.19995, -3537.89990, 25.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(774, 1331.19995, -3476.80005, 22.20000,   0.00000, 0.00000, 347.99701);
	CreateDynamicObject(774, 1342.40002, -3489.69995, 23.40000,   0.00000, 0.00000, 319.99701);
	CreateDynamicObject(774, 1351.90002, -3481.89990, 10.10000,   0.00000, 0.00000, 293.99301);
	CreateDynamicObject(774, 1343.40002, -3475.19995, 10.10000,   0.00000, 0.00000, 293.98901);
	CreateDynamicObject(17029, 1076.50000, -3354.80005, 11.80000,   9.99400, 357.96899, 114.34100);
	CreateDynamicObject(17029, 1062.30005, -3312.69995, 9.30000,   9.99200, 357.96799, 168.34000);
	CreateDynamicObject(17029, 1053.30005, -3313.10010, 17.00000,   9.99200, 357.96799, 168.33800);
	CreateDynamicObject(17029, 1029.09998, -3294.00000, 4.40000,   9.99200, 357.96799, 188.33800);
	CreateDynamicObject(18227, 1157.40002, -3657.10010, -2.60000,   0.00000, 20.00000, 334.70499);
	CreateDynamicObject(18227, 1154.50000, -3650.00000, -2.60000,   0.00000, 19.99000, 334.70401);
	CreateDynamicObject(18227, 1206.19995, -3445.10010, 1.90000,   348.60199, 19.00100, 103.75500);
	CreateDynamicObject(18227, 1201.90002, -3451.60010, 1.90000,   348.60199, 19.00100, 103.75500);
	CreateDynamicObject(18227, 1189.50000, -3456.50000, -6.90000,   348.60199, 19.00100, 103.75500);
	CreateDynamicObject(18227, 1194.09998, -3458.80005, 5.10000,   348.60199, 19.00100, 103.75500);
	CreateDynamicObject(13752, 1255.00000, -3773.50000, -9.70000,   0.00000, 1.99900, 153.24600);
	CreateDynamicObject(18227, 1310.59998, -3750.89990, -29.10000,   0.00000, 0.00000, 118.71300);
	CreateDynamicObject(18227, 1335.69995, -3789.10010, -50.70000,   0.00000, 0.00000, 48.71300);
	CreateDynamicObject(12998, 1334.69995, -3796.50000, 16.20000,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(18227, 1350.40002, -3794.10010, -56.20000,   0.00000, 0.00000, 48.70800);
	CreateDynamicObject(13129, 1340.80005, -3844.21997, 16.19800,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(13001, 1405.88794, -3908.15894, 16.20000,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(12999, 1450.84998, -3854.75000, 16.20000,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(13127, 1469.09998, -3936.32007, 16.20000,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(12981, 1304.90918, -3751.66992, 18.33000,   0.00000, 0.00000, 155.99500);
	CreateDynamicObject(12980, 1332.02197, -3802.50000, 16.27400,   0.00000, 0.00000, 336.00000);
	CreateDynamicObject(12863, 1428.68994, -3855.39990, 16.20000,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(12862, 1459.71997, -3931.59961, 20.00000,   0.00000, 0.00000, 155.99500);
	CreateDynamicObject(12979, 1400.56006, -3910.35010, 16.30000,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(12976, 1408.40002, -3962.50000, 16.50000,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(11504, 1371.90002, -3953.00000, 15.80000,   0.00000, 0.00000, 66.00000);
	CreateDynamicObject(11547, 1369.90002, -3949.19995, 12.99000,   0.00000, 0.00000, 338.00000);
	CreateDynamicObject(13077, 1348.69995, -3887.80005, 21.30000,   0.00000, 0.00000, 336.00000);
	CreateDynamicObject(13120, 1299.69995, -3824.39990, -28.60000,   5.99600, 357.98901, 284.20200);
	CreateDynamicObject(13120, 1315.50000, -3941.69995, -30.10000,   5.99300, 357.98401, 282.20001);
	CreateDynamicObject(13120, 1304.00000, -3901.89990, -30.10000,   5.99300, 357.97900, 282.19501);
	CreateDynamicObject(13120, 1352.59998, -3834.80005, -30.10000,   5.99300, 357.97900, 282.19501);
	CreateDynamicObject(13120, 1386.40002, -3910.00000, -30.10000,   5.99300, 357.97900, 282.19501);
	CreateDynamicObject(13120, 1476.09998, -3857.19995, -30.10000,   5.99300, 357.97900, 346.19501);
	CreateDynamicObject(13120, 1524.00000, -3913.39990, -30.10000,   5.99300, 357.97900, 346.19000);
	CreateDynamicObject(13120, 1506.50000, -3968.00000, -30.10000,   5.99300, 357.97900, 346.19000);
	CreateDynamicObject(13120, 1474.30005, -4013.19995, -30.10000,   5.99300, 357.97900, 346.19000);
	CreateDynamicObject(13120, 1364.40002, -4024.60010, -30.10000,   5.99300, 357.97900, 286.19000);
	CreateDynamicObject(18227, 1342.69995, -3957.10010, -9.50000,   0.00000, 0.00000, 288.72101);
	CreateDynamicObject(18227, 1353.59961, -3969.59961, -9.50000,   0.00000, 0.00000, 298.71799);
	CreateDynamicObject(18227, 1419.30005, -3959.19995, -15.00000,   0.00000, 0.00000, 8.71800);
	CreateDynamicObject(18227, 1415.09998, -3955.69995, -15.00000,   0.00000, 0.00000, 8.71800);
	CreateDynamicObject(18227, 1327.09998, -3986.50000, -9.50000,   0.00000, 0.00000, 298.71799);
	CreateDynamicObject(18227, 1351.30005, -3983.39990, -9.50000,   0.00000, 0.00000, 298.71799);
	CreateDynamicObject(18227, 1411.80005, -4044.89990, -14.00000,   0.00000, 0.00000, 298.71799);
	CreateDynamicObject(18227, 1499.40002, -3960.60010, -3.80000,   0.00000, 0.00000, 72.71800);
	CreateDynamicObject(18227, 1506.59998, -3963.30005, 5.20000,   0.00000, 0.00000, 98.71300);
	CreateDynamicObject(18227, 1511.59998, -3952.10010, 5.20000,   0.00000, 0.00000, 108.71200);
	CreateDynamicObject(18227, 1482.00000, -3952.80005, -3.80000,   0.00000, 0.00000, 72.71300);
	CreateDynamicObject(18227, 1489.69995, -3952.00000, -9.10000,   0.00000, 0.00000, 72.71300);
	CreateDynamicObject(18227, 1510.30005, -3961.10010, -9.10000,   0.00000, 0.00000, 72.71300);
	CreateDynamicObject(18227, 1434.59998, -3981.30005, 4.50000,   0.00000, 0.00000, 92.71300);
	CreateDynamicObject(18227, 1429.90002, -3987.60010, 4.50000,   0.00000, 0.00000, 92.70800);
	CreateDynamicObject(18227, 1431.19995, -3991.10010, -3.80000,   0.00000, 0.00000, 92.70800);
	CreateDynamicObject(18227, 1410.09998, -3994.00000, 7.50000,   0.00000, 0.00000, 38.70800);
	CreateDynamicObject(18227, 1442.40002, -4009.60010, -0.70000,   0.00000, 0.00000, 28.70700);
	CreateDynamicObject(18227, 1351.00000, -3960.80005, 8.50000,   0.00000, 0.00000, 158.70500);
	CreateDynamicObject(18227, 1345.80005, -3962.60010, -0.20000,   0.00000, 0.00000, 158.70300);
	CreateDynamicObject(18309, 1477.19922, -3900.89941, -46.60000,   358.26999, 0.00000, 68.13200);
	CreateDynamicObject(18227, 1356.09998, -3725.00000, 14.90000,   0.00000, 15.98500, 214.70000);
	CreateDynamicObject(18227, 1354.19995, -3731.30005, -2.40000,   0.00000, 15.98000, 214.69501);
	CreateDynamicObject(18227, 1362.80005, -3726.10010, -2.40000,   0.00000, 15.98000, 214.69501);
	CreateDynamicObject(18227, 1326.19995, -3732.19995, 14.90000,   0.00000, 15.98000, 284.69501);
	CreateDynamicObject(18227, 1287.80005, -3725.19995, 14.90000,   0.00000, 15.97400, 240.69400);
	CreateDynamicObject(18227, 1276.59998, -3779.39990, -4.40000,   0.00000, 15.96900, 326.69400);
	CreateDynamicObject(18227, 1520.50000, -3963.29980, 26.00000,   0.00000, 0.00000, 98.70700);
	CreateDynamicObject(18227, 1506.50000, -3985.19995, 26.00000,   0.00000, 0.00000, 98.71200);
	CreateDynamicObject(18227, 1503.40002, -3995.30005, 5.10000,   0.00000, 0.00000, 98.71200);
	CreateDynamicObject(18227, 1500.40002, -3981.50000, 5.10000,   0.00000, 0.00000, 98.71200);
	CreateDynamicObject(18227, 1485.30005, -3995.80005, 16.00000,   0.00000, 0.00000, 36.71300);
	CreateDynamicObject(18227, 1437.30005, -4003.89990, 16.40000,   0.00000, 0.00000, 86.71100);
	CreateDynamicObject(18227, 1413.30005, -4010.10010, 24.20000,   0.00000, 0.00000, 36.71000);
	CreateDynamicObject(18227, 1337.40002, -3964.19995, 22.60000,   0.00000, 0.00000, 166.70300);
	CreateDynamicObject(18227, 1319.59998, -3898.10010, 0.60000,   0.00000, 0.00000, 198.70300);
	CreateDynamicObject(18227, 1306.50000, -3893.00000, 8.50000,   0.00000, 0.00000, 198.69901);
	CreateDynamicObject(18227, 1276.80005, -3871.69995, 8.50000,   0.00000, 0.00000, 228.69901);
	CreateDynamicObject(18227, 1268.00000, -3832.19995, 14.80000,   0.00000, 0.00000, 172.69901);
	CreateDynamicObject(18227, 1279.00000, -3830.80005, 10.10000,   0.00000, 0.00000, 102.69400);
	CreateDynamicObject(12853, 1460.55505, -3869.80005, 18.30000,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(10287, 1385.00000, -3809.50000, 26.75500,   0.00000, 0.00000, 155.99500);
	CreateDynamicObject(18227, 1307.89941, -3775.59961, -4.40000,   0.00000, 15.95800, 18.68800);
	CreateDynamicObject(18227, 1314.19995, -3805.19995, -25.20000,   0.00000, 21.96300, 8.68800);
	CreateDynamicObject(18227, 1326.40002, -3800.50000, -25.50000,   0.00000, 21.96200, 22.68500);
	CreateDynamicObject(18227, 1330.19995, -3803.19995, -25.50000,   0.00000, 21.96200, 22.68100);
	CreateDynamicObject(18227, 1335.00000, -3804.80005, -25.50000,   0.00000, 21.96200, 22.68100);
	CreateDynamicObject(18227, 1334.90002, -3810.69995, -25.50000,   0.00000, 21.96200, 16.68100);
	CreateDynamicObject(789, 1298.50000, -3841.69995, 29.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1307.80005, -3785.80005, 29.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1367.30005, -3784.80005, 29.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1384.19995, -3934.50000, 29.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1392.19995, -3980.69995, 27.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1470.59961, -3923.89941, 29.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1473.79980, -3849.19922, 29.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(776, 1367.40002, -3914.10010, 12.00000,   0.00000, 348.00000, 170.00000);
	CreateDynamicObject(780, 1477.40002, -3979.89990, 15.90000,   0.00000, 54.00000, 134.00000);
	CreateDynamicObject(671, 1463.30005, -3895.50000, 16.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(671, 1343.00000, -3846.30005, 16.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9153, 1421.90002, -3871.60010, 15.70000,   0.00000, 0.00000, 336.00000);
	CreateDynamicObject(9153, 1434.90002, -3839.39990, 15.70000,   0.00000, 0.00000, 335.99500);
	CreateDynamicObject(9153, 1383.00000, -3974.00000, 15.70000,   0.00000, 0.00000, 55.99500);
	CreateDynamicObject(9153, 1380.40002, -3968.10010, 15.70000,   0.00000, 0.00000, 55.99200);
	CreateDynamicObject(9153, 1376.09998, -3971.39990, 15.70000,   0.00000, 0.00000, 97.99200);
	CreateDynamicObject(9153, 1376.69995, -3976.60010, 15.70000,   0.00000, 0.00000, 71.98700);
	CreateDynamicObject(9153, 1371.19995, -3976.69995, 15.70000,   0.00000, 0.00000, 95.98200);
	CreateDynamicObject(9153, 1427.59998, -3977.10010, 15.70000,   0.00000, 0.00000, 95.98200);
	CreateDynamicObject(9153, 1430.59998, -3969.69995, 15.70000,   0.00000, 0.00000, 59.98200);
	CreateDynamicObject(9153, 1435.19995, -3973.10010, 15.70000,   0.00000, 0.00000, 59.98000);
	CreateDynamicObject(9153, 1431.69995, -3978.69995, 15.70000,   0.00000, 0.00000, 59.98000);
	CreateDynamicObject(9153, 1427.40002, -3976.50000, 15.70000,   0.00000, 0.00000, 59.98000);
	CreateDynamicObject(9153, 1431.19995, -3984.89990, 15.70000,   0.00000, 0.00000, 59.98000);
	CreateDynamicObject(9153, 1435.09998, -3969.80005, 15.70000,   0.00000, 0.00000, 59.98000);
	CreateDynamicObject(9153, 1468.59998, -3977.10010, 15.70000,   0.00000, 0.00000, 73.98000);
	CreateDynamicObject(9153, 1473.40002, -3980.00000, 15.70000,   0.00000, 0.00000, 73.97600);
	CreateDynamicObject(9153, 1480.80005, -3980.50000, 15.70000,   0.00000, 0.00000, 73.97600);
	CreateDynamicObject(9153, 1493.09998, -3981.69995, 15.70000,   0.00000, 0.00000, 73.97600);
	CreateDynamicObject(9153, 1426.00000, -3803.00000, 18.50000,   0.00000, 0.00000, 103.97600);
	CreateDynamicObject(18227, 1244.90002, -3763.89990, -12.70000,   0.00000, 0.00000, 38.71600);
	CreateDynamicObject(18227, 1250.09998, -3744.10010, -19.30000,   0.00000, 0.00000, 38.71600);
	CreateDynamicObject(18227, 1310.40002, -3810.10010, -3.90000,   0.00000, 0.00000, 38.71600);
	CreateDynamicObject(18227, 1322.90002, -3804.80005, -12.70000,   0.00000, 0.00000, 38.71600);
	CreateDynamicObject(18227, 1326.50000, -3805.80005, -12.70000,   0.00000, 0.00000, 38.71600);
	CreateDynamicObject(18227, 1343.59998, -3685.19995, 19.80000,   348.60199, 18.97900, 215.73801);
	CreateDynamicObject(18227, 1354.90002, -3680.60010, -0.60000,   348.59601, 18.97900, 215.73300);
	CreateDynamicObject(3337, 1278.00000, -3779.89990, 16.00000,   356.01801, 6.01100, 172.41800);
	CreateDynamicObject(3593, 1387.79980, -3876.00000, 16.49900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3593, 1470.40002, -3835.00000, 16.80000,   0.00000, 0.00000, 159.99600);
	CreateDynamicObject(18227, 1348.59998, -3688.60010, -0.60000,   348.59601, 18.97900, 215.73300);
	CreateDynamicObject(18227, 1364.09998, -3682.00000, -11.90000,   348.59601, 18.97900, 215.73300);
	CreateDynamicObject(18227, 1355.19995, -3691.10010, -11.90000,   348.59601, 18.97900, 215.73300);
	CreateDynamicObject(18227, 1284.59998, -3708.10010, -10.00000,   348.59601, 18.97900, 265.73300);
	CreateDynamicObject(18227, 1248.79980, -3720.29980, -16.30000,   348.59100, 18.97900, 265.73199);
	CreateDynamicObject(18227, 1234.40002, -3779.00000, -25.70000,   348.59601, 18.97900, 305.73199);
	CreateDynamicObject(18227, 1261.50000, -3842.60010, 2.20000,   0.00000, 0.00000, 172.69400);
	CreateDynamicObject(18227, 1271.09998, -3827.89990, -15.90000,   0.00000, 18.00000, 102.68900);
	CreateDynamicObject(18227, 1352.09998, -3967.50000, -1.70000,   0.00000, 0.00000, 18.71800);
	CreateDynamicObject(18227, 1371.90002, -3980.69995, -1.70000,   0.00000, 0.00000, 18.71500);
	CreateDynamicObject(18227, 1434.69995, -4011.30005, -2.40000,   350.22101, 12.18000, 88.80900);
	CreateDynamicObject(18227, 1485.90002, -4007.60010, -2.40000,   350.21701, 12.17800, 88.80800);
	CreateDynamicObject(18227, 1575.19995, -3921.00000, -2.40000,   350.21701, 12.17800, 128.80800);
	CreateDynamicObject(18227, 1577.80005, -3903.89990, 7.00000,   350.21100, 12.17300, 128.80400);
	CreateDynamicObject(18227, 1573.69995, -3889.00000, 13.30000,   350.21100, 12.17300, 128.80400);
	CreateDynamicObject(18227, 1577.90002, -3861.10010, 16.40000,   350.21100, 12.17300, 128.80400);
	CreateDynamicObject(18227, 1590.30005, -3863.00000, 3.80000,   350.21100, 12.17300, 148.80400);
	CreateDynamicObject(18227, 1577.90002, -3872.60010, 38.30000,   350.21100, 12.16700, 148.79900);
	CreateDynamicObject(18227, 1590.40002, -3871.60010, 24.20000,   350.21100, 12.16700, 148.79900);
	CreateDynamicObject(18227, 1601.50000, -3872.30005, 5.40000,   350.21100, 12.16700, 148.79900);
	CreateDynamicObject(18227, 1587.50000, -3911.69995, 14.80000,   350.21100, 12.16700, 108.79900);
	CreateDynamicObject(18227, 1408.40002, -3763.50000, 6.10000,   0.00000, 0.00000, 208.71201);
	CreateDynamicObject(18227, 1386.80005, -3761.39990, 6.10000,   0.00000, 0.00000, 208.70700);
	CreateDynamicObject(18227, 1373.09998, -3744.60010, 6.10000,   0.00000, 0.00000, 208.70700);
	CreateDynamicObject(18227, 1273.90002, -3824.89990, -2.50000,   0.00000, 0.00000, 172.69400);
	CreateDynamicObject(1414, 1466.90002, -3867.19995, 17.90000,   0.00000, 0.00000, 246.00000);
	CreateDynamicObject(1410, 1466.50000, -3867.30005, 16.80000,   0.00000, 0.00000, 66.00000);
	CreateDynamicObject(1410, 1466.50000, -3867.30005, 18.00000,   0.00000, 0.00000, 65.99500);
	CreateDynamicObject(5740, 1544.80005, -3878.80005, 14.92000,   0.00000, 0.00000, 246.00000);
	CreateDynamicObject(18227, 1536.00000, -3921.89990, 15.00000,   0.00000, 0.00000, 208.70700);
	CreateDynamicObject(18227, 1544.09998, -3940.19995, 15.00000,   0.00000, 0.00000, 208.70200);
	CreateDynamicObject(18227, 1463.80005, -3896.30005, -6.40000,   0.00000, 0.00000, 208.70200);
	CreateDynamicObject(18227, 1466.80005, -3860.00000, -6.40000,   0.00000, 0.00000, 208.70200);
	CreateDynamicObject(6100, 1466.80005, -3800.60010, 40.48700,   0.00000, 0.00000, 336.00000);
	CreateDynamicObject(3578, 1463.90002, -3824.69995, 16.90000,   0.00000, 0.00000, 338.00000);
	CreateDynamicObject(4572, 1501.90002, -3822.80005, 46.50000,   0.00000, 0.00000, 206.00000);
	CreateDynamicObject(789, 1474.09998, -3821.39990, 60.90000,   0.00000, 344.00000, 32.00000);
	CreateDynamicObject(18227, 1513.90002, -3817.89990, 4.60000,   0.00000, 0.00000, 138.70200);
	CreateDynamicObject(18227, 1510.30005, -3805.39990, -5.40000,   0.00000, 0.00000, 138.69701);
	CreateDynamicObject(18227, 1517.90002, -3837.50000, 15.00000,   0.00000, 0.00000, 138.69701);
	CreateDynamicObject(18227, 1524.00000, -3803.30005, 15.00000,   0.00000, 0.00000, 138.69701);
	CreateDynamicObject(18227, 1510.30005, -3838.39990, 15.00000,   0.00000, 0.00000, 156.69701);
	CreateDynamicObject(789, 1506.50000, -3841.89990, 32.30000,   0.00000, 340.00000, 0.00000);
	CreateDynamicObject(18227, 1413.00000, -3758.80005, 4.00000,   0.00000, 0.00000, 156.69299);
	CreateDynamicObject(18227, 1472.19995, -3862.10010, -13.30000,   0.00000, 0.00000, 154.69299);
	CreateDynamicObject(3593, 1340.19995, -3842.80005, 16.50000,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(1309, 1489.00000, -3889.10010, 20.80000,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(1437, 1482.09998, -3911.19995, 16.30000,   79.80400, 168.63000, 267.19501);
	CreateDynamicObject(789, 1488.69995, -3905.89990, 30.80000,   0.00000, 354.00000, 0.00000);
	CreateDynamicObject(18227, 1365.09998, -3933.30005, -13.30000,   0.00000, 0.00000, 302.71799);
	CreateDynamicObject(18227, 1378.80005, -3945.10010, -13.30000,   0.00000, 0.00000, 324.71701);
	CreateDynamicObject(18227, 1308.19995, -3806.69995, -11.60000,   0.00000, 0.00000, 38.71600);
	CreateDynamicObject(13752, 1051.69995, -3491.39990, -6.00000,   348.06201, 6.12300, 175.26601);
	CreateDynamicObject(791, 1138.19995, -3556.19995, 0.10000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(791, 1171.40002, -3606.10010, -3.70000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(3502, 1167.40002, -3611.10010, 16.30000,   0.00000, 0.00000, 207.99400);
	CreateDynamicObject(18227, 1207.30005, -3556.39990, -13.60000,   348.60199, 19.01200, 57.75700);
	CreateDynamicObject(18227, 1217.09998, -3511.30005, -24.60000,   348.59601, 19.00600, 107.75500);
	CreateDynamicObject(18227, 1217.69995, -3542.39990, -0.10000,   347.97000, 2.67000, 104.41600);
	CreateDynamicObject(18227, 1240.19995, -3757.50000, -14.80000,   0.00000, 0.00000, 38.71600);
	CreateDynamicObject(18227, 1242.50000, -3750.00000, -14.80000,   0.00000, 356.00000, 42.71600);
	CreateDynamicObject(18227, 1205.40002, -3741.30005, -13.10000,   0.00000, 355.99500, 352.71500);
	CreateDynamicObject(18227, 1181.80005, -3764.39990, -10.00000,   0.00000, 355.98999, 352.71100);
	CreateDynamicObject(18227, 1218.50000, -3740.50000, -2.20000,   0.00000, 355.98999, 42.71100);
	CreateDynamicObject(18227, 1187.69995, -3718.19995, -8.30000,   0.00000, 355.98401, 22.70900);
	CreateDynamicObject(18227, 1244.30005, -3745.50000, 0.50000,   0.00000, 0.00000, 8.71600);
	CreateDynamicObject(791, 1240.90002, -3735.80005, 0.10000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(18227, 1292.80005, -3726.19995, -8.90000,   0.00000, 355.98999, 38.71100);
	CreateDynamicObject(18227, 1234.19995, -3716.50000, -0.60000,   0.00000, 355.98401, 28.71000);
	CreateDynamicObject(18227, 1230.30005, -3706.30005, -7.40000,   0.00000, 355.98401, 38.71000);
	CreateDynamicObject(791, 1201.69995, -3702.69995, 0.10000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(18227, 1223.40002, -3684.39990, -8.50000,   0.00000, 0.00000, 30.71200);
	CreateDynamicObject(18227, 1242.80005, -3703.00000, -21.80000,   0.00000, 0.00000, 30.70700);
	CreateDynamicObject(18227, 1258.50000, -3703.80005, -23.50000,   0.00000, 0.00000, 30.70700);
	CreateDynamicObject(791, 1239.40002, -3715.50000, -17.20000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(791, 1183.09998, -3763.10010, -1.50000,   0.00000, 0.00000, 69.97500);
	CreateDynamicObject(791, 1175.09998, -3685.39990, -1.50000,   0.00000, 0.00000, 113.97200);
	CreateDynamicObject(18227, 1207.00000, -3769.10010, -10.00000,   0.00000, 355.98999, 32.71100);
	CreateDynamicObject(18227, 1193.40002, -3767.80005, -10.00000,   0.00000, 355.98401, 32.70600);
	CreateDynamicObject(791, 1158.40002, -3746.30005, 3.20000,   0.00000, 0.00000, 99.97200);
	CreateDynamicObject(3593, 1224.13757, -3754.66919, 13.61354,   0.00000, 0.00000, 45.66002);
	CreateDynamicObject(715, 1210.30005, -3738.19995, 25.30000,   0.00000, 336.00000, 40.00000);
	CreateDynamicObject(779, 1207.90002, -3759.69995, 15.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12857, 1205.30005, -3746.00000, 11.20000,   3.99800, 357.99500, 50.14000);
	CreateDynamicObject(789, 1251.19995, -3757.69995, 28.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(789, 1198.90002, -3720.00000, 41.80000,   0.00000, 338.00000, 30.00000);
	CreateDynamicObject(789, 1152.40002, -3720.89990, 30.10000,   0.00000, 360.00000, 29.99800);
	CreateDynamicObject(18227, 1164.69995, -3705.10010, -6.40000,   0.00000, 0.00000, 348.71201);
	CreateDynamicObject(789, 1059.30005, -3553.30005, 48.40000,   0.00000, 359.99500, 29.99300);
	CreateDynamicObject(789, 1025.00000, -3554.39990, 32.20000,   0.00000, 359.99500, 29.99300);
	CreateDynamicObject(789, 1104.19995, -3622.80005, 62.20000,   342.00000, 359.99399, 329.99100);
	CreateDynamicObject(11435, 1052.59998, -3503.10010, 27.10000,   9.90200, 8.12200, 10.59400);
	CreateDynamicObject(11435, 1009.00000, -3512.89990, 23.00000,   0.00000, 0.00000, 54.00000);
	CreateDynamicObject(11500, 1228.80005, -3517.50000, 24.10000,   0.00000, 0.00000, 134.00000);
	CreateDynamicObject(18227, 1063.30005, -3482.60010, 10.50000,   0.00000, 0.00000, 228.72200);
	CreateDynamicObject(18227, 1061.50000, -3466.69995, 1.10000,   0.00000, 0.00000, 218.72099);
	CreateDynamicObject(791, 1080.80005, -3476.10010, 4.90000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(791, 1151.50000, -3496.69995, -2.80000,   0.00000, 0.00000, 357.97501);
	CreateDynamicObject(789, 1102.80005, -3499.00000, 40.80000,   0.00000, 32.00000, 248.00000);
	CreateDynamicObject(18227, 1125.59998, -3544.60010, -32.80000,   348.61301, 19.02300, 325.76700);
	CreateDynamicObject(11435, 1204.80005, -3552.30005, 24.50000,   344.35501, 12.46600, 45.40700);
	CreateDynamicObject(789, 1286.90002, -3777.00000, 29.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(805, 1288.30005, -3780.00000, 16.40000,   17.28000, 16.77800, 354.88199);
	CreateDynamicObject(805, 1288.30005, -3780.00000, 17.40000,   17.27600, 16.77600, 354.88000);
	CreateDynamicObject(805, 1293.69995, -3782.69995, 17.40000,   17.27600, 16.77600, 354.88000);
	CreateDynamicObject(805, 1291.00000, -3780.80005, 17.40000,   17.27600, 16.77600, 354.88000);
	CreateDynamicObject(805, 1285.40002, -3778.00000, 17.90000,   17.27600, 16.77600, 354.88000);
	CreateDynamicObject(18227, 1308.40002, -3801.50000, -28.70000,   0.00000, 33.95800, 18.68800);
	CreateDynamicObject(18227, 1302.30005, -3776.39990, -11.40000,   0.00000, 15.95800, 18.68800);
	CreateDynamicObject(18227, 1239.59998, -3565.39990, -12.10000,   348.60199, 18.97900, 163.73500);
	CreateDynamicObject(18227, 1252.59998, -3571.69995, -12.10000,   348.60199, 18.97900, 163.73500);
	CreateDynamicObject(18227, 1218.80005, -3545.69995, -10.10000,   347.97000, 2.67000, 104.41400);
	CreateDynamicObject(18227, 1227.59998, -3680.19995, -16.00000,   0.00000, 0.00000, 30.70700);
	CreateDynamicObject(13120, 1273.59998, -3745.19995, -36.60000,   0.00000, 0.00000, 281.99200);
	CreateDynamicObject(13120, 1232.50000, -3722.00000, -43.80000,   24.00000, 0.00000, 281.99200);
	CreateDynamicObject(13120, 1174.19995, -3693.80005, -56.30000,   30.00000, 0.00000, 281.99200);
	CreateDynamicObject(13120, 1142.69995, -3740.60010, -66.60000,   29.99800, 0.00000, 281.99200);
	CreateDynamicObject(791, 1266.80005, -3664.80005, 6.30000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(791, 1225.30005, -3657.19995, 6.30000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(791, 1234.40002, -3624.00000, 4.10000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(791, 1205.19995, -3607.50000, 4.10000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(791, 1223.59998, -3591.30005, 4.10000,   0.00000, 0.00000, 13.97500);
	CreateDynamicObject(16390, 1276.40002, -3679.19995, 10.80000,   14.00000, 0.00000, 0.00000);
	CreateDynamicObject(16390, 1223.00000, -3665.89990, 7.60000,   13.78000, 349.70001, 2.47800);
	CreateDynamicObject(17958, 1207.09998, -3624.69995, 7.90000,   12.00000, 0.00000, 0.00000);
	CreateDynamicObject(17958, 1288.00000, -3671.10010, 10.90000,   5.99300, 357.98901, 80.21000);
	CreateDynamicObject(17958, 1261.40002, -3668.80005, 10.90000,   5.99300, 357.98401, 80.20600);
	CreateDynamicObject(17958, 1264.59998, -3635.89990, 15.40000,   355.99899, 357.98999, 79.85500);
	CreateDynamicObject(789, 1190.00000, -3646.30005, 17.00000,   0.00000, 354.00000, 22.00000);
	CreateDynamicObject(789, 1306.90002, -3643.39990, 33.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1437, 1259.50000, -3713.89990, 7.50000,   332.07401, 4.52800, 134.12399);
	CreateDynamicObject(1437, 1256.68994, -3716.00000, 12.20000,   342.04401, 4.20300, 133.29601);
	CreateDynamicObject(3095, 1070.22717, -3541.50415, 34.06167,   -12.98000, 11.50000, 32.40000);
	CreateDynamicObject(3095, 1065.31152, -3535.37134, 32.26168,   -12.13999, 13.96002, 45.40000);
	CreateDynamicObject(3095, 1059.37109, -3530.26245, 30.58316,   -12.14000, 13.96000, 50.89994);
	CreateDynamicObject(3095, 1053.36206, -3525.35669, 28.75375,   -12.14000, 13.96000, 55.43978);
	CreateDynamicObject(3095, 1046.66577, -3521.39648, 27.08788,   -12.14000, 13.96000, 63.09983);
	CreateDynamicObject(3095, 1038.95703, -3517.54614, 25.22458,   -12.14000, 13.96000, 63.09983);
	CreateDynamicObject(3095, 1031.12610, -3514.27026, 23.41589,   -12.14000, 13.96000, 70.83981);
	CreateDynamicObject(3095, 1023.16437, -3511.46313, 21.32063,   -15.14000, 13.96000, 70.83980);
	CreateDynamicObject(3095, 1016.58246, -3509.32178, 19.46834,   -15.14000, 13.96000, 70.83980);
	CreateDynamicObject(8651, 1068.55786, -3533.25000, 32.31800,   11.45400, 340.50809, 221.14909);
	CreateDynamicObject(8651, 1037.57202, -3511.93018, 24.63292,   11.45400, 340.50809, 247.60896);
	CreateDynamicObject(8651, 1060.92310, -3536.57153, 33.56258,   11.45400, 340.50809, 224.38896);
	CreateDynamicObject(8651, 1037.59961, -3521.02051, 26.79448,   11.45400, 340.50809, 246.52890);
	CreateDynamicObject(3095, 1229.85510, -3524.50073, 23.92493,   10.00000, 0.00000, 129.29999);
	CreateDynamicObject(3095, 1175.93127, -3542.28418, 19.85299,   12.00000, -10.00000, -31.08000);
	CreateDynamicObject(3095, 1183.30652, -3547.11963, 21.34397,   12.00000, -10.00000, -31.08000);
	CreateDynamicObject(3095, 1190.70886, -3551.59937, 21.34031,   12.00000, 10.00000, -31.08000);
	CreateDynamicObject(3095, 1195.03442, -3553.98340, 20.50143,   12.00000, 10.00000, -31.08000);
	CreateDynamicObject(3095, 1199.13269, -3546.28491, 21.68343,   2.15999, 10.36000, -29.27997);
	CreateDynamicObject(970, 1185.95862, -3553.92725, 21.97082,   1.86000, 10.02001, -29.03999);
	CreateDynamicObject(970, 1189.55286, -3555.92847, 21.25218,   1.86000, 10.02001, -29.03999);
	CreateDynamicObject(970, 1182.55090, -3551.77002, 21.77699,   2.22000, -7.85999, -29.03999);
	CreateDynamicObject(970, 1179.08704, -3549.55151, 21.08821,   2.22000, -7.85999, -33.60000);
	CreateDynamicObject(3095, 1143.71716, -3681.84448, 24.43699,   9.06000, 7.49999, 37.80000);
	CreateDynamicObject(3095, 1056.93567, -3517.61841, 27.11586,   -12.14000, 5.96000, 55.43980);
	CreateDynamicObject(3095, 1062.08862, -3510.62305, 25.82005,   -12.14000, 10.96000, 55.43980);
	CreateDynamicObject(3095, 1067.33533, -3503.72119, 23.77236,   -12.14000, 15.96000, 55.43980);
	CreateDynamicObject(3095, 1071.17078, -3498.90356, 23.03414,   -3.31999, -1.26004, 15.53980);
	CreateDynamicObject(3095, 1079.77087, -3496.88062, 22.98848,   -3.20000, 1.67997, 11.81982);
	CreateDynamicObject(3095, 1087.33862, -3498.93164, 22.94862,   -3.20000, 1.67997, -10.80018);
	CreateDynamicObject(3095, 1095.91614, -3500.66211, 21.83674,   -3.31999, 12.23998, -12.06018);
	CreateDynamicObject(901, 1067.59912, -3519.39185, 26.49534,   0.00000, 0.00000, 10.13998);
	CreateDynamicObject(901, 1052.24280, -3510.45215, 23.27281,   0.00000, 0.00000, 73.98000);
	CreateDynamicObject(901, 1056.93469, -3502.94385, 21.45826,   0.00000, 0.00000, 220.61996);
	CreateDynamicObject(901, 1063.75183, -3494.45166, 22.22453,   0.00000, 0.00000, 220.61996);
	CreateDynamicObject(901, 1074.11877, -3510.49536, 23.07640,   0.00000, 0.00000, 217.98007);




	// LSPD tetõ ajtó
	//CreateDynamicObject(1535, 1564.8549804688, -1667.2786865234, 27.395606994629, 0, 0, 0);
	// az új /duty position
	//CreateDynamicObject(1318, 1406.1895751953, -1566.2330322266, -44.940250396729, 0, 0, 0);
	//BANK
	BankAjto = CreateDynamicObject(2634, 2144.1845703125, 1627.1131591797, 994.28723144531, 0, 0, 180.63439941406);

	//============================= InGame Text ================================//
	//new sztring[128];
	/*format(sztring, sizeof(sztring), "Honlap: %s", weblap);
	Textdraw0 = TextDrawCreate(565.0,5.0, sztring);

	TextDrawAlignment(Textdraw0,2);
	TextDrawBackgroundColor(Textdraw0,0x000000ff);
	TextDrawFont(Textdraw0,0);
	TextDrawLetterSize(Textdraw0,0.4,1.0);
	TextDrawColor(Textdraw0, COLOR_LIGHTBLUE);
	TextDrawSetOutline(Textdraw0,1);
	TextDrawSetProportional(Textdraw0,1);
	TextDrawSetShadow(Textdraw0,1);*/

	/*sztring = "Tartsd be a szabalyokat, es jatssz RPsen!";
	Textdraw2 = TextDrawCreate(250, 5.0, sztring);
	TextDrawAlignment(Textdraw2,0);
	TextDrawBackgroundColor(Textdraw2, COLOR_LIGHTBLUE);
	TextDrawFont(Textdraw2,1);
	TextDrawLetterSize(Textdraw2,0.3,1.0);
	TextDrawColor(Textdraw2, COLOR_LIGHTRED);
	TextDrawSetOutline(Textdraw2,1);
	TextDrawSetProportional(Textdraw2,1);
	TextDrawSetShadow(Textdraw2,1);*/

	resitd = TextDrawCreate(565, 3, "CarResi!");
	TextDrawAlignment(resitd, 2);
	TextDrawFont(resitd, 1);
	TextDrawLetterSize(resitd, 0.4, 1.2);
	TextDrawColor(resitd, 0xFF0000FF);
	TextDrawSetShadow(resitd, 1);
	TextDrawSetOutline(resitd, 1);
	
	FeketesegTD= TextDrawCreate(0, 0, "~b~");
	TextDrawTextSize(FeketesegTD, 640, 480);
	TextDrawLetterSize(FeketesegTD,0.0,50.0);
	TextDrawUseBox(FeketesegTD , 1);
	TextDrawBoxColor(FeketesegTD, 0x000000FF);

	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 0)
		{
			HazPickup[h] = UjPickup(1273, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			pickups++;
		}
		if(HouseInfo[h][hOwned] == 1)
		{
			HazPickup[h] = UjPickup(1239, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			pickups++;
		}
	}
	for(new h = 0; h < sizeof(BizzInfo); h++)
	{
		if(BizzInfo[h][bOwned] == 0)
		{
			BizPickup[h] = UjPickup(1272, 23, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
			pickups++;
		}
		if(BizzInfo[h][bOwned] == 1)
		{
			BizPickup[h] = UjPickup(1239, 23, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
			pickups++;
		}
	}

	//Fort be / ki
	UjPickup(1318, 23, 135.465728, 1946.600585, 19.359313);
	UjPickup(1318, 23, 135.642883, 1934.607543, 19.258510);
	
	//Fort be / ki 2 a katona hq fele
	UjPickup(1318, 23, 291.151, 1821.415, 17.640);
	UjPickup(1318, 23, 279.645, 1821.550, 17.640);

	//Autóparkoló be / ki >> Oktató HQ
	UjPickup(1318, 23, 2491.210449, 2773.332519, 10.798006);
	UjPickup(1318, 23, 2503.887207, 2773.661376, 10.820312);

	UjPickup(1239, 23, 215.038833, 1862.826782, 13.140625);

	UjPickup(1279, 23, 2543.095703, -1290.998779, 1044.125000); // Drog pickup a gyárban, a droghoz
	UjPickup(356, 23, 2543.111328, -1295.866333, 1044.125000); // M4 pickup a gyárban, a matihoz

	UjPickup(1239, 23, 2525.047119, -1289.786499, 1048.289062); //Gyárban munka
	UjPickup(1239, 23, 362.639312, 169.937469, 1025.789062); //VH munka

	UjPickup(1239, 23, 691.2158,-1276.0931,13.5605); // yakuza
	UjPickup(1239, 23, 246.4178,87.9876,1003.6406); // pd
    UjPickup(1239, 23, 1526.9127,-1677.7935,5.8906); // pd

	//UjPickup(1242, 2, 202.3766,1861.6320,13.1406); // ng armor
  	UjPickup(1240, 2, 202.5629,1859.7087,13.1406); // ng health
  	UjPickup(1242, 2, 261.6862,71.2168,1003.2422); // PD armor

	UjPickup(1239, 23, 1173.2563,-1323.3102,15.3943); //Hospital 1 near Ammu
	UjPickup(1239, 23, 2029.5945,-1404.6426,17.2512); //Hospital 2 near speedway
	UjPickup(1239, 23, 253.9280,69.6094,1003.6406); //Clear icon in Police Station
	UjPickup(1239, 23, -1606.3289,675.3354,-5.2422); //SFPD Arrest ikon(i)
	UjPickup(1239, 23, 2277.637207, 2425.318359, 3.476562); //LVPD MDC ikon(i)
	UjPickup(1239, 23, 1381.0413,-1088.8511,27.3906); //Bill Board (old Job Department)
	UjPickup(371, 23, 1544.2,-1353.4,329.4); //LS towertop
	UjPickup(371, 23, 1536.0, -1360.0, 1150.0); //LS towertop
	UjPickup(1239, 23, 2035.1941,-1304.8467,20.9037); // Los Aztecas Hq enter
	UjPickup(1239, 23, 258.4913,-41.5296,1002.0234); // Los Aztecas Hq enter
	//UjPickup(1239, 23, 2193.072265, 2792.155761, 10.820312); // LV mûanyag
	//UjPickup(1318, 23, 1643.5533,-1523.0732,13.5588); // LS Tuning Bejárat
	//UjPickup(1318, 23, -2089.8782,95.2754,35.3203); // SF Tuning Bejárat
	UjPickup(1239, 23, 362.3623,209.2845,1008.3828); // Útlevél Megvétele
	UjPickup(1239, 23, 354.9763,154.1686,1025.7964); // Adó befizetés
	UjPickup(1239, 23, 363.1144,152.3946,1025.7964); // Adó ellenõrzés

	UjPickup(1239, 23, -2047.288, -91.537, 35.171); // Kereskedõ HQ
	UjPickup(1239, 23, -2046.842, -115.706, 35.239); // Kereskedõ HQ
	
	UjPickup(1239, 23, 1465.222900, -1010.950683, 26.843750); //LS Bank
	UjPickup(1239, 23, -1942.973876, 556.252868, 35.171875); //SF Bank
	UjPickup(1239, 23, 226.7355,122.7866,999.0410); // Vpop duty
	UjPickup(1239, 23, 734.2736,-1351.9012,13.5000);// Vpop átszállító
	
	UjPickup(1239, 23, 1208.880, -1820.819, 13.595); // FBI Szállító és arrest hely a garázsnál

	//AddStaticPickup(1247, 23, 555.087768, -2197.163818, 1.501912); // Sona fegyenclerakó * sárga csillag

	pickups=pickups+29;
	printf("Pickups Max = 100, Current Pickups = %d",pickups);
	if (realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour + IDOHOZZAADAS);
	}

	//othtimer = SetTimer("OtherTimer", 1000, 1);
	//egyebtimer = SetTimer("EgyebTimer", 1000, 1);
	//unjailtimer = SetTimer("SetPlayerUnjail", 1000, 1);
	//pickuptimer = SetTimer("CustomPickups", 1000, 1);
	//spectatetimer = SetTimer("Spectator", 1000, 1);
	//elettimer = SetTimer("EletTimer", 1000, 1);
	//drogtimer = SetTimer("Drog", 2000, 1);
	//munkatimer = SetTimer("MunkaTimer", 2000, 1);
	//teletimer = SetTimer("TeleTimer", 2000, 1);
	//afktimer = SetTimer("AfkChecker", 5000, 1);
	//mysqltimer = SetTimer("MysqlEllenorzes", 10000, 1);
	//infotimer = SetTimer("TextDrawUpdateAll", 10000, 1);
	//synctimer = SetTimer("SyncUp", 60000, 1);
	//cartimer = SetTimer("CarCheck", 30000, 1);
	//productiontimer = SetTimer("Production", 300000, 1); //5 mins (300000)
	//accountstimer = SetTimer("SaveAccounts", 300000, 1); //5perces mentések
	//weathertimer = SetTimer("IdojarasValtozas", 600000, 1);
	//Timerek[0] = SetTimer("TimerStarter", 1000, 1);
	
	Timerek[0] = SetTimer("CheckGas", RunOutTime, 1);
    Timerek[1] = SetTimer("StoppedVehicle", RunOutTime, 1);
	Timerek[2] = SetTimer("RandomHirdetes", 60000, 1);
	Timerek[3] = SetTimer("BackupTimer", (BackTime*1000), 1);

	Timerek[4] = SetTimer("TextDrawUpdateAll", 900, 1);

	Timerek[5] = SetTimer("OtherTimer", 1000, 1);
	Timerek[6] = SetTimer("EgyebTimer", 1000, 1);
	Timerek[7] = SetTimer("SetPlayerUnjail", 1000, 1);
	Timerek[8] = SetTimer("EletTimer", 1000, 1);
	Timerek[9] = SetTimer("CustomPickups", 3000, 1);
	//Timerek[10] = SetTimer("Spectator", 1000, 1);
	
	Timerek[11] = SetTimer("TeleTimer", 2000, 1);
	Timerek[12] = SetTimer("MunkaTimer", 2000, 1);
	Timerek[13] = SetTimer("Drog", 2000, 1);
	
	Timerek[14] = SetTimer("AfkChecker", 5000, 1);
	
	Timerek[15] = SetTimer("MysqlEllenorzes", 10000, 1);
	
	Timerek[16] = SetTimer("PayDay", 30000, 1);
	Timerek[17] = SetTimer("CarCheck", 30000, 1);
	
	Timerek[18] = SetTimer("SyncUp", 60000, 1);
	
	Timerek[19] = SetTimer("Production", 300000, 1);
	
	Timerek[20] = SetTimer("IdojarasValtozas", 900000, 1);
	
	Timerek[21] = SetTimer("MySQLUpdater", 900000, 1);

	Timerek[22] = SetTimer("SzerverNev", 1000, 1);
	Timerek[23] = SetTimer("RaceTimer", 1000, 1);
	Timerek[24] = SetTimer("Hatar", 1000, 1);
	Timerek[25] = SetTimer("SecTimer", 1000, 1);
	Timerek[26] = SetTimer("NPCTimer", 1000, 1);
	Timerek[27] = SetTimer("Benzinkut", 30000, 1);
	Timerek[28] = SetTimer("SaveHalak", 2*60000, 1);
	
	//Timerek[27] = SetTimer("SebessegKorlatozo", 50, 1);

	//Timerek[] = SetTimer("", 000, 1);

//	sonatimer = SetTimer("SonaFigyelo", 5000, 1);

	CarInit();

	NPCBetoltese();

	for(new x = 0; x < MAX_CHANNEL; x++)
	{
		ReportChannel[x][rMaxPlayers] = CHANNEL_PLAYERS;
		ReportChannel[x][rTimeOut] = CHANNEL_TIMEOUT;
		
		if(x == 0) strmid(ReportChannel[x][rTitle], "Adminsegédek", 0, 12, 40);
		else if(x == 1) strmid(ReportChannel[x][rTitle], "Adminok", 0, 7, 40);
		else if(x == 2) strmid(ReportChannel[x][rTitle], "Fõadminok", 0, 9, 40);
		else
		{
			strmid(ReportChannel[x][rTitle], "-----", 0, 4, 40);
			ReportChannel[x][rClosed] = 1;
		}
	}

	SendRconCommand("rcon 0");
	LetszamFrissites();

	UpdatePerSec[uPlayer] = 7;
	UpdatePerSec[uHaz] = 7;
	UpdatePerSec[uKocsi] = 7;
	UpdatePerSec[uBiz] = 7;
	UpdatePerSec[uTerulet] = 7;
	
	UpdateFolytatodik[uPlayer] = NINCS;
	UpdateFolytatodik[uHaz] = NINCS;
	UpdateFolytatodik[uKocsi] = NINCS;
	UpdateFolytatodik[uBiz] = NINCS;
	UpdateFolytatodik[uTerulet] = NINCS;

	ModBetoltve = 1;
	OnModBetoltve();
	return 1;
}

public TimerStarter()
{
	TimerCounter++;

	//1 seces timerek
	OtherTimer();
	EgyebTimer();
	SetPlayerUnjail();
	EletTimer();
	CustomPickups();
	Spectator();

	if(TimerCounter % 2 == 1) //2 seces timerek
	{
		TeleTimer();
		MunkaTimer();
		Drog();
	}
	if(TimerCounter % 5 == 4) //5 seces timerek
	{
		AfkChecker();
		Hatar();
	}
	if(TimerCounter % 10 == 9) //10 seces timerek
	{
		MysqlEllenorzes();
		TextDrawUpdateAll();
	}
	if(TimerCounter % 30 == 29) //30 seces timerek
	{
		PayDay();
		CarCheck();
	}
	if(TimerCounter % 60 == 59) //1 perces timerek
	{
		SyncUp();
	}
	if(TimerCounter % 300 == 299) //5 perces timerek
	{
		Production();
		SaveAccounts();
	}
	if(TimerCounter % 600 == 599) //10 perces timerek
	{
		IdojarasValtozas();
	}

	if(TimerCounter >= 600)
		TimerCounter = 0;

	return 1;
}

public SyncUp()
{
	new time = gettime();
	for(new playerid; playerid < MAX_PLAYERS; playerid++)
	{
		if(!IsPlayerConnected(playerid) || !Logged(playerid) || IsPlayerNPC(playerid)) continue;
		
		if(!Animban[playerid]) GiveHealth(playerid, -1.25);
		if(PlayerInfo[playerid][pJegy] > 1 && PlayerInfo[playerid][pJegy] < time)
		{
			Msg(playerid, "Lejárt a bérleted");
			Cselekves(playerid, "bérlete lejárt");
			PlayerInfo[playerid][pJegy] = 0;
		}
		
		if((PlayerInfo[playerid][pAdo] - PlayerInfo[playerid][pAdoFizetve]) > 0 && PlayerInfo[playerid][pPayDay] >= 1800 && PlayerInfo[playerid][pPayDay] % 120 == 0)
			Msg(playerid, "Még nem fizetted be az adódat! Ha nem fizeted be súlyos büntetést kapsz!");
	}
	SyncTime();
	DollahScoreUpdate();
	//SaveStuff();
}

public SyncTime()
{
	new string[64];
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		format(string, sizeof(string), "[Gates]: Az idõ most: %d:00",tmphour);
		BroadCast(COLOR_YELLOW,string);
		Rob = 0;
		ghour = tmphour;
		gdate = getdate();
		if (realtime)
		{
			SetWorldTime(tmphour + IDOHOZZAADAS);
		}
		Lotto();
	}
}

public SaveAccounts()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		AdatMentesSQL(i);
	}
	return 1;
}

public IsPlayerInTurf(playerid, turfid)
{
	if(IsPlayerConnected(playerid))
	{
		if(turfid == -1)
		{
			return 0;
		}
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY])
		{
	 		return 1;
		}
	}
	return 0;
}

public GetClosestPlayer(p1)
{
	new x,Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}

public Production()
{
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFishes] >= 5) { if(FishCount[i] >= 3) { PlayerInfo[i][pFishes] = 0; } else { FishCount[i] += 1; } }
		    if(PlayerDrunk[i] > 0) { PlayerDrunk[i] = 0; PlayerDrunkTime[i] = 0; GameTextForPlayer(i, "~p~Drunk effect~n~~w~Gone", 3500, 1); }
		    for(new k = 0; k < MAX_PLAYERS; k++)
			{
				if(IsPlayerConnected(k))
				{
				    if(IsACop(k) && CrimInRange(80.0, i,k))
				    {
					}
					else
					{
					    WantedPoints[i] -= 3;
					    if(WantedPoints[i] < 0) { WantedPoints[i] = 0; }
					    new points = WantedPoints[i];
					    new wlevel;
					    if(points > 0)
						{
						    new yesno;
							if(points == 3) { if(WantedLevel[i] != 1) { WantedLevel[i] = 1; wlevel = 1; yesno = 1; } }
							else if(points >= 4 && points <= 5) { if(WantedLevel[i] != 2) { WantedLevel[i] = 2; wlevel = 2; yesno = 1; } }
							else if(points >= 6 && points <= 7) { if(WantedLevel[i] != 3) { WantedLevel[i] = 3; wlevel = 3; yesno = 1; } }
							else if(points >= 8 && points <= 9) { if(WantedLevel[i] != 4) { WantedLevel[i] = 4; wlevel = 4; yesno = 1; } }
							else if(points >= 10 && points <= 11) { if(WantedLevel[i] != 5) { WantedLevel[i] = 5; wlevel = 5; yesno = 1; } }
							else if(points >= 12 && points <= 13) { if(WantedLevel[i] != 6) { WantedLevel[i] = 6; wlevel = 6; yesno = 1; } }
							else if(points >= 14) { if(WantedLevel[i] != 10) { WantedLevel[i] = 10; wlevel = 10; yesno = 1; } }
							else if(points <= 0) { if(WantedLevel[i] != 0) { ClearCrime(i); WantedLevel[i] = 0; wlevel = 0; yesno = 1;} }
							if(yesno)
							{
								format(string, sizeof(string), "Üldözési szint: %d", wlevel);
								SendClientMessage(i, COLOR_YELLOW, string);
							}
						}
					}
				}
			}
		}
	}
	if(RendelesAlatt == 1)
	{
		if(RendelesPenz <= 0)
		{
			RendelesAlatt = 2;
			return 1;
		}
		for(new c = 0; c < MAX_PLAYERS; c++)
		{
			if(!IsPlayerConnected(c) || !Logged(c) || IsPlayerNPC(c) || !AMT(c, MUNKA_AUTOKERESKEDO)) continue;
			SendFormatMessage(c, COLOR_GREY, "Kereskedõi felhívás: Egy import kocsi rendelés alatt van! Kocsi: %s, hátralévõ befizetés: %dFt", GetVehicleModelName(RendelesModel), RendelesPenz);
		}
	}
	else if(RendelesAlatt == 2)
	{
		RendelesIdo -= 300;
		if(RendelesIdo <= 0)
		{
			for(new c = 0; c < MAX_PLAYERS; c++)
			{
				if(!IsPlayerConnected(c) || !Logged(c) || IsPlayerNPC(c) || !AMT(c, MUNKA_AUTOKERESKEDO)) continue;
				SendClientMessage(c, COLOR_LIGHTBLUE, "Kereskedõi felhívás: Az import kocsi megérkezett a kikötõbe! Át kell hoznod az autkereskedõ HQra, hogy eladhasd!");
			}
			CreateKereskedoCar();
			RendelesAlatt = 0;
		}
		//SaveStuff();
	}
	/*new query[70];
	Format(query, "UPDATE %s SET Ertek='1,%d,%d' WHERE Nev='SzerverAdatok'", SQL_DB_Server, MAX_PLAYERS, OnlinePlayers());
	mysql_query(query);*/
	new query[120], gido = gettime();
	Format(query, "DELETE FROM %s WHERE orok='n' and ido<='%d'", SQL_DB_Ban, gido);
	mysql_query(query);
	LetszamFrissites();
	return 1;
}

public DateProp(playerid, type)
{
	new ido = gettime();
	if(type == DP_Kocsi) //V-s kocsi
	{
		new kulcs = PlayerInfo[playerid][pPcarkey], kulcs2 = PlayerInfo[playerid][pPcarkey2];
		if(kulcs != NINCS)
		{
			CarInfo[kulcs][cDate] = ido;
			CarUpdate(kulcs, CAR_Date);
		}
		if(kulcs2 != NINCS)
		{
			CarInfo[kulcs2][cDate] = ido;
			CarUpdate(kulcs2, CAR_Date);
		}
	}
	else if(type == DP_Haz)
	{
		new haz = PlayerInfo[playerid][pPhousekey], haz2 = PlayerInfo[playerid][pPhousekey2];
		if(haz != NINCS)
		{
			HouseInfo[haz][hDate] = ido;
			HazUpdate(haz, HAZ_Date);
		}
		if(haz2 != NINCS)
		{
			HouseInfo[haz2][hDate] = ido;
			HazUpdate(haz2, HAZ_Date);
		}
	}
}

public Checkprop(type)
{
	new ido = gettime(), propido, eladasiido;
	if(checkprop < 1 || checkprop > 5) return 1;
	if(type == DP_Kocsi)
	{
		for(new c = 0; c < sizeof(CarInfo); c++)
		{
			if(checkprop < 1) return 1;
			if(CarInfo[c][Van] == 1 && CarInfo[c][cOwned] == 1)
			{
				propido = CarInfo[c][cDate];
				eladasiido = ido - (60*60*24*EladasIdo[0]);
				if(propido <= eladasiido)
				{
					KocsiElad(c);
					checkprop--;
				}
			}
		}
	}
	else if(type == DP_Haz)
	{
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(checkprop < 1) return 1;
			if(HouseInfo[h][Van] == 1 && HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] != 0)
			{
				propido = HouseInfo[h][hDate];
				eladasiido = ido - (60*60*24*EladasIdo[1]);
				if(propido <= eladasiido)
				{
					HazElad(h);
					checkprop--;
				}
			}
		}
	}
	return 1;
}

stock JatszottOra(playerid)
{
	PlayerInfo[playerid][pPremiumIdo] -= 3600;
	if(PlayerInfo[playerid][pPremiumCsomag] != 0 && PlayerInfo[playerid][pPremiumIdo] <= gettime())
	{
		Msg(playerid, "A prémiumod lejárt.");
		PlayerInfo[playerid][pPremiumCsomag] = 0;
		PlayerInfo[playerid][pPremiumIdo] = 0;
	}
	PlayerInfo[playerid][pConnectTime] += 1;
	PlayerInfo[playerid][pExp] += 1;
	CheckSzint(playerid);
	if(PlayerInfo[playerid][pUtlevel] > 0)
		PlayerInfo[playerid][pUtlevel]--;
		
	if(PlayerInfo[playerid][pHitel] > 0)
	{
		if(PlayerInfo[playerid][pHitelElteltOra] < PlayerInfo[playerid][pHitelOra])
			PlayerInfo[playerid][pHitelElteltOra]++;
					
		if(PlayerInfo[playerid][pHitelElteltOra] == PlayerInfo[playerid][pHitelOra])
		{
			PlayerInfo[playerid][pHitelElteltOra] = 555;
			PlayerInfo[playerid][pZarolva] = 1;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Bank: Lejárt a határidõd, a bank zárolta a számládat - 20 perced van visszafizetni, vagy a bank felszámol még %d%% kamatot", BANK_KAMAT);
		}
		else if(PlayerInfo[playerid][pHitelElteltOra] < PlayerInfo[playerid][pHitelOra])
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Bank: Még %d órád van visszafizetni a kölcsönt a banknak, különben zárolják a számlád, és plusz kamatot számolnak fel!", (PlayerInfo[playerid][pHitelOra] - PlayerInfo[playerid][pHitelElteltOra]));
	}
	
	if(PlayerInfo[playerid][pCarLic] > 0)
		PlayerInfo[playerid][pCarLic] -= 1;
	if(PlayerInfo[playerid][pMotorJogsi] > 0)
		PlayerInfo[playerid][pMotorJogsi] -= 1; 
	if(PlayerInfo[playerid][pKamionJogsi] > 0)
		PlayerInfo[playerid][pKamionJogsi] -= 1; 
	if(PlayerInfo[playerid][pBoatLic] > 0)
		PlayerInfo[playerid][pBoatLic] -= 1; 
	if(PlayerInfo[playerid][pGunLic] > 0)
		PlayerInfo[playerid][pGunLic] -= 1; 
	if(PlayerInfo[playerid][pFlyLic] > 0)
		PlayerInfo[playerid][pFlyLic] -= 1; 
	if(PlayerInfo[playerid][pFishLic] > 0)
		PlayerInfo[playerid][pFishLic] -= 1; 	
}

public Vizsgaido(playerid)
{
	Msg(playerid, "Az idõ lejárt. Ha megfelelt ird be igen, ha nem ird be nem.");
	Autocp[playerid] = 22;
}

public PayDay()
{
	new string[128];
	new account,interest;
	new rent = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(!IsPlayerConnected(i) || IsPlayerNPC(i) || !Logged(i) || AFK[i] || PlayerInfo[i][pJailed] != 0) continue;
		PlayerInfo[i][pPayDay] += 30;
		
		if(PlayerInfo[i][pPayDay] % 3600 == 0)
			JatszottOra(i);
		
		if(PlayerInfo[i][pPayDay] == 3600)
		{
			PlayerInfo[i][pAdoKitoltve] = 0;
			PlayerInfo[i][pAdo] = 0;
			PlayerInfo[i][pAdoFizetve] = 0;
			PlayerInfo[i][pAdoEllenorizve] = 0;
		}
		
		if(PlayerInfo[i][pPayDay] % 1200 == 0 && PlayerInfo[i][pHitel] > 0)
		{
			if(PlayerInfo[i][pHitelElteltOra] == 555)
			{
				new ujkamat = floatround(float(PlayerInfo[i][pHitel]) * ((BANK_KAMAT + 100.0) / 100.0));
				PlayerInfo[i][pHitel] = ujkamat;
				SendFormatMessage(i, COLOR_LIGHTBLUE, "Bank: Mivel még mindig nem fizetted be a felvett kölcsönödet, így az adósságod %dFtról %dFtra nõtt", PlayerInfo[i][pHitel], ujkamat);
			}
		}

		if(PlayerInfo[i][pPayDay] >= MinimumFizuhoz)
		{
			new penzze = GetMoney(i);
		    if(penzze <= -5000)
			{
			    SendClientMessage(i, COLOR_LIGHTRED, "Nem tudtad kifizetni a tartozásodat! Akiknek tartoztál, bérgyilkost fogadtak fel.");
				PlayerInfo[i][pHeadValue] += (penzze * -1);
				Format(string, "<< %dFt tartozása volt neki: %s, így felbéreltek a meggyilkolására >>", (penzze * -1), PlayerName(i));
				SendHitmanRadioMessage(COLOR_YELLOW, string);
			}

			new playername2[MAX_PLAYER_NAME];
			GetPlayerName(i, playername2, sizeof(playername2));
			account = PlayerInfo[i][pAccount];
			new key = PlayerInfo[i][pBerlo];
			if(key != NINCS)
			{
				rent = HouseInfo[key][hRent];
				if(PlayerInfo[i][pBankSzamla] > 0)
				{
				    if(PlayerInfo[i][pAccount] < rent)
				    {
						PlayerInfo[i][pBerlo] = NINCS;
						SendClientMessage(i, COLOR_WHITE, "Nem tudod fizetni a lakbért, mert nincs pénz a számládon, ezért a tulaj kirugott");
						rent = 0;
					}
					else
						PlayerInfo[i][pAccount] -= rent;
				}
				else
				{
					if(GetMoney(i) < rent)
					{
						PlayerInfo[i][pBerlo] = NINCS;
						SendClientMessage(i, COLOR_WHITE, "Nem tudod fizetni a lakbért, mert nincs pénz a számládon, ezért a tulaj kirugott");
						rent = 0;
					}
					else
						GiveMoney(i, -rent);
				}
				HouseInfo[key][hTakings] = HouseInfo[key][hTakings]+rent;
			}

			new tmpintrate = 30; // 0,03%
			if(PlayerInfo[i][pPremiumCsomag] >= 400)
			{
				switch(PlayerInfo[i][pPremiumCsomag])
				{
					case 400: tmpintrate += 5; // +0,005% kamat
					case 800: tmpintrate += 15; // +0,015% kamat
					case 1600: tmpintrate += 20; // +0,02% kamat
				}
			}

			new checks = PlayerInfo[i][pPayCheck];
			new ebill = 0;
			if(PlayerInfo[i][pPhousekey] != NINCS)
			{
				if(HouseInfo[PlayerInfo[i][pPhousekey]][hBelso] < 37)
					ebill += HouseInfo[PlayerInfo[i][pPhousekey]][hBelso] * 1000;
				else
					ebill += 50000;
			}
			new TB;
			if(PlayerInfo[i][pBankSzamla] > 0 && PlayerInfo[i][pAccount] > 40000)
			{
			    if(PlayerInfo[i][pAccount] > ebill)
				{
				   	PlayerInfo[i][pAccount] -= ebill;
					BizPenz(BIZ_REZSI, ebill);
				}
				else
				{
				    ebill = 0;
				}
				
				TB = floatround(float(PlayerInfo[i][pAccount]) * 0.001);
				if(TB < 500) TB = 500;
				if(TB > 10000) TB = 10000;
				PlayerInfo[i][pAccount] -= TB;
				FrakcioInfo[LMUNKA_MENTO][fPenz] += TB;
			}
			interest = (PlayerInfo[i][pAccount]/10000)*(tmpintrate);

			PlayerPlayMusic(i);
			if(PlayerInfo[i][pBankSzamla] > 0)
			{
				PlayerInfo[i][pAccount] += checks;
				PlayerInfo[i][pAccount] += interest;
			}
			else
			{
			    GiveMoney(i, interest);
			}
			SendClientMessage(i, COLOR_WHITE, "|___ BANK INFORMÁCIÓJA ___|");
			if(checks > 0)
				SendFormatMessage(i, COLOR_GRAD1, "Fizetési Csekk: %dFt", checks);
			//else
				//Msg(i, "Fizetési Csekk: Nincs", false, COLOR_GRAD1);

			if(PlayerInfo[i][pPhousekey] != NINCS)
			{
			    format(string, sizeof(string), "  Számlák: -%dFt", ebill);
				SendClientMessage(i, COLOR_GRAD1, string);
			}
			if(PlayerInfo[i][pFutamido] > 0)
			{
				new kamatet  = 0;
				switch(random(4))
				{
						case 1: { kamatet = 100; } // 
						case 2: { kamatet = 125; } // 
						case 3: { kamatet = 150; } // 
						case 4: { kamatet = 175; } // 
				}
				new kamatja1 = PlayerInfo[i][pLekotottpenz]/10000;
				new kamatja2 = kamatja1*kamatet;
				SendClientMessage(i, COLOR_WHITE, "____________[ BETÉT KAMAT ]____________");
				SendFormatMessage(i, COLOR_ORANGE, "%d forint átutalva a számládra! (Kamatszorzó: 0.%d%)", kamatja2, kamatet);
				PlayerInfo[i][pFutamido]--;
				PlayerInfo[i][pAccount]+= kamatja2;
				SendFormatMessage(i, COLOR_ORANGE, "Maradék futamidõ: %d fizetés", PlayerInfo[i][pFutamido]);
				SendClientMessage(i, COLOR_WHITE, "_____________________________________");
			}
			if(PlayerInfo[i][pBankSzamla] > 0)
			{
				format(string, sizeof(string), "Bankszámla: %dFt | Kamat: 0.%d%% (+%dFt)", account, tmpintrate, interest);
				SendClientMessage(i, COLOR_GRAD1, string);
				if(FrakcioInfo[PlayerInfo[i][pMember]][fPenz ] >= FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]])
				{
					SendFormatMessage(i, COLOR_GRAD1, "Frakció fizetés: %d Ft", FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]]);
					PlayerInfo[i][pAccount] += FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]];
					FrakcioInfo[PlayerInfo[i][pMember]][fPenz ] -= FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]]
				}
				else SendClientMessage(i, COLOR_GRAD1, "Frakció fizetés: Nincs elegendõ összeg a széfben!");
			}
			else
			{
                SendClientMessage(i, COLOR_GRAD1, "Mivel nincs bankszámlád, ezért a fizetésed csekkbe kapod. Bankba felveheted!(/felvesz fizetés)");
				if(FrakcioInfo[PlayerInfo[i][pMember]][fPenz ] >= FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]])
				{
					SendFormatMessage(i, COLOR_GRAD1, "Frakció fizetés: %d Ft", FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]]);
					GiveMoney(i, FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]]);
					FrakcioInfo[PlayerInfo[i][pMember]][fPenz ] -= FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]]
				}
				else SendClientMessage(i, COLOR_GRAD1, "Frakció fizetés: Nincs elegendõ összeg a széfben!");
				if(TB > 0)
					SendFormatMessage(i, COLOR_GRAD1, "Társadalom Biztosítás: %dFt", TB);
			}
			SendClientMessage(i, COLOR_GRAD4, "|--------------------------------------|");
			format(string, sizeof(string), "Bérlés: -%dFt", rent);
			SendClientMessage(i, COLOR_GRAD5, string);
			format(string, sizeof(string), "~b~~h~Fizetes");
			GameTextForPlayer(i, string, 5000, 1);
			rent = 0;
			PlayerInfo[i][pPayDay] = 0;
			if(PlayerInfo[i][pBankSzamla] > 0)
			{
			    PlayerInfo[i][pPayCheck] = 0;
			}
			utalas[i] = 0; // Ez mi?XD
		}
	}
	return 1;
}

stock SetMapName(const mapname[])
{
new map[256];
format(map, sizeof(map), "mapname %s", mapname);
SendRconCommand(map);
}

public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

public AdatMentesSQL(playerid)
{
	if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid) && Registered(playerid) && Logged(playerid) && PlayerInfo[playerid][pOrigin] > 0 ||
	IsPlayerConnected(playerid) && !IsPlayerNPC(playerid) && PlayerInfo[playerid][pID] == NINCS)
	{
		if(PlayerInfo[playerid][pID] == NINCS)
		{
			new query2[150];
			Format(query2, "INSERT INTO %s (nev, pass) VALUES('%s', '%s')", SQL_DB_Player, PlayerName(playerid), PlayerInfo[playerid][pKey]);
			mysql_query(query2);
			MysqlGetPlayerId(playerid);
			PlayerInfo[playerid][pRegistered] = 2;
		}

		/*new fajl[64];
		Format(fajl, "Jatekosok/%s.ini", PlayerName(playerid));
		if(dini_Exists(fajl))
			dini_Remove(fajl);*/

		new query[MAX_MYSQL_STRING];

		if(PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0)
		{
				PlayerInfo[playerid][pPos_x] = 1684.9;
				PlayerInfo[playerid][pPos_y] = -2244.5;
				PlayerInfo[playerid][pPos_z] = 13.5;
		}
		if(Spectate[playerid] != 255)
		{
				PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
				PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
				PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
				PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
				PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
		}

		format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Player);

		//Fõbb adatok
		//MysqlUpdateStr(query, "Pass", PlayerInfo[playerid][pKey]); //Jelszóváltásnál ugyis menti azt
		MysqlUpdateInt(query, "Szint",PlayerInfo[playerid][pLevel]);
		MysqlUpdateInt(query, "Admin",PlayerInfo[playerid][pAdmin]);
		MysqlUpdateInt(query, "DonateRank", PlayerInfo[playerid][pDonateRank]);
		MysqlUpdateInt(query, "UpgradePoints", PlayerInfo[playerid][gPupgrade]);
		MysqlUpdateInt(query, "ConnectedTime", PlayerInfo[playerid][pConnectTime]);
		MysqlUpdateInt(query, "Sex", PlayerInfo[playerid][pSex]);
		MysqlUpdateInt(query, "Age", PlayerInfo[playerid][pAge]);
		MysqlUpdateInt(query, "Origin", PlayerInfo[playerid][pOrigin]);
		MysqlUpdateInt(query, "Married", PlayerInfo[playerid][pMarried]);
		MysqlUpdateStr(query, "MarriedTo", PlayerInfo[playerid][pMarriedTo]);

		//Egyéb adatok
		MysqlUpdateInt(query, "Crimes", PlayerInfo[playerid][pCrimes]);
		MysqlUpdateInt(query, "Kills", PlayerInfo[playerid][pKills]);
		MysqlUpdateInt(query, "Deaths", PlayerInfo[playerid][pDeaths]);
		MysqlUpdateInt(query, "Arrested", PlayerInfo[playerid][pArrested]);
		MysqlUpdateInt(query, "WantedDeaths", PlayerInfo[playerid][pWantedDeaths]);
		MysqlUpdateInt(query, "Fishes", PlayerInfo[playerid][pFishes]);
		MysqlUpdateInt(query, "BiggestFish", PlayerInfo[playerid][pBiggestFish]);
		MysqlUpdateInt(query, "HeadValue", PlayerInfo[playerid][pHeadValue]);
		MysqlUpdateInt(query, "Jailed", PlayerInfo[playerid][pJailed]);
		MysqlUpdateInt(query, "JailTime", PlayerInfo[playerid][pJailTime]);
		MysqlUpdateInt(query, "Wins", PlayerInfo[playerid][pWins]);
		MysqlUpdateInt(query, "Loses", PlayerInfo[playerid][pLoses]);
		MysqlUpdateInt(query, "Tutorial", PlayerInfo[playerid][pTut]);
		MysqlUpdateInt(query, "Mission", PlayerInfo[playerid][pMissionNr]);
		MysqlUpdateInt(query, "Warnings", PlayerInfo[playerid][pWarns]);
		MysqlUpdateInt(query, "KWarnings", PlayerInfo[playerid][pKWarns]);
		MysqlUpdateInt(query, "Drogido", PlayerInfo[playerid][pDrogido]);
		MysqlUpdateInt(query, "ASJog", PlayerInfo[playerid][pAS]);

		//Cuccai
		MysqlUpdateInt(query, "Respect", PlayerInfo[playerid][pExp]);
		MysqlUpdateInt(query, "Money", PlayerInfo[playerid][pCash]);
		MysqlUpdateInt(query, "Bank", PlayerInfo[playerid][pAccount]);
		MysqlUpdateInt(query, "Kaja", PlayerInfo[playerid][pKaja]);
		MysqlUpdateInt(query, "Phone", PlayerInfo[playerid][pPnumber]);
		MysqlUpdateInt(query, "House", PlayerInfo[playerid][pPhousekey]);
		MysqlUpdateInt(query, "Bizz", PlayerInfo[playerid][pPbiskey]);
		MysqlUpdateInt(query, "Kocsikulcs", PlayerInfo[playerid][pPcarkey]);

		new cuccok[128];

		//Müanyag, Cseje, Mák, Cannabis
		Format(cuccok, "%d,%d,%d,%d", PlayerInfo[playerid][pMuanyag], PlayerInfo[playerid][pCserje], PlayerInfo[playerid][pMak], PlayerInfo[playerid][pCannabis]);

		//Mati, Kokain, Heroin, Marihuana
		Format(cuccok, "%s,%d,%d,%d,%d", cuccok, PlayerInfo[playerid][pMats], PlayerInfo[playerid][pKokain], PlayerInfo[playerid][pHeroin], PlayerInfo[playerid][pMarihuana]);

		MysqlUpdateStr(query, "Cuccok", cuccok);

		//24/7 cuccok v. megvehetõ cuccok
		MysqlUpdateInt(query, "Phonebook", PlayerInfo[playerid][pPhoneBook]);
		MysqlUpdateInt(query, "CDPlayer", PlayerInfo[playerid][pCDPlayer]);
		MysqlUpdateInt(query, "Lotto", PlayerInfo[playerid][pLottoNr]);
		MysqlUpdateInt(query, "Fuel", PlayerInfo[playerid][pFuel]);
		MysqlUpdateInt(query, "Cigihasznalat", PlayerInfo[playerid][pCigiUsed]);
		MysqlUpdateInt(query, "Cigi", PlayerInfo[playerid][pCigi]);
		MysqlUpdateInt(query, "Nikotin", PlayerInfo[playerid][pNikotin]);
		MysqlUpdateInt(query, "Gyujto", PlayerInfo[playerid][pGyujto]);
		MysqlUpdateInt(query, "Pia", PlayerInfo[playerid][pPia]);

		//Munka / család adatok
		MysqlUpdateInt(query, "Job1", PlayerInfo[playerid][pJob1]);
		MysqlUpdateInt(query, "Job2", PlayerInfo[playerid][pJob2]);
		MysqlUpdateInt(query, "ContractTime", PlayerInfo[playerid][pContractTime]);
		MysqlUpdateInt(query, "ContractTime2", PlayerInfo[playerid][pContractTime2]);
		MysqlUpdateInt(query, "Paycheck", PlayerInfo[playerid][pPayCheck]);
		MysqlUpdateInt(query, "PayDay", PlayerInfo[playerid][pPayDay]);
		MysqlUpdateInt(query, "PayDayHad", PlayerInfo[playerid][pPayDayHad]);
		MysqlUpdateInt(query, "Leader", PlayerInfo[playerid][pLeader]);
		MysqlUpdateInt(query, "Member", PlayerInfo[playerid][pMember]);
		MysqlUpdateInt(query, "FMember", PlayerInfo[playerid][pFMember]);
		MysqlUpdateInt(query, "Rank", PlayerInfo[playerid][pRank]);

		//Skillek
		new skillek[128];

		Format(skillek, "%d, %d, %d, %d, %d, %d", PlayerInfo[playerid][pDetSkill], PlayerInfo[playerid][pSexSkill], PlayerInfo[playerid][pBoxSkill], PlayerInfo[playerid][pLawSkill], PlayerInfo[playerid][pMechSkill], PlayerInfo[playerid][pJackSkill]);
		Format(skillek, "%s, %d, %d, %d, %d, %d", skillek, PlayerInfo[playerid][pCarSkill], PlayerInfo[playerid][pNewsSkill], PlayerInfo[playerid][pDrugsSkill], PlayerInfo[playerid][pCookSkill], PlayerInfo[playerid][pFishSkill]);
		Format(skillek, "%s, %d, %d", skillek, PlayerInfo[playerid][pRiasztoSkill], PlayerInfo[playerid][pHackingSkill]);

		MysqlUpdateStr(query, "Skillek", skillek);

		//Jogsik
		new jogsik[32];
		Format(jogsik, "%d, %d, %d, %d, %d, %d, %d", PlayerInfo[playerid][pCarLic], PlayerInfo[playerid][pFlyLic], PlayerInfo[playerid][pBoatLic], PlayerInfo[playerid][pFishLic], PlayerInfo[playerid][pGunLic], PlayerInfo[playerid][pMotorJogsi], PlayerInfo[playerid][pKamionJogsi]);

		MysqlUpdateStr(query, "Jogsik", jogsik);

		//Skin
		MysqlUpdateInt(query, "Skin", PlayerInfo[playerid][pChar]);
		MysqlUpdateInt(query, "Model", PlayerInfo[playerid][pModel]);

		//Upgrades
		new upgrades[64];
		Format(upgrades, "%d, %d, %d, %d, %d", PlayerInfo[playerid][pAlcoholPerk], PlayerInfo[playerid][pDrugPerk], PlayerInfo[playerid][pMiserPerk], PlayerInfo[playerid][pPainPerk], PlayerInfo[playerid][pTraderPerk]);

		MysqlUpdateStr(query, "Upgrades", upgrades);

		//Crash
		new kilepespos[80], Float:pos[3], Int, VW;
		if(Kamera[playerid])
			{ pos[0] = -1943.552; pos[1] = 550.390; pos[2] = 37.267; } //SFPD szoba
		else
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		Int = GetPlayerInterior(playerid);
		VW = GetPlayerVirtualWorld(playerid);
		Format(kilepespos, "%.3f, %.3f, %.3f, %d, %d", pos[0], pos[1], pos[2], Int, VW);

		new kilepeselet[30], Float:eletpajzs[2];
		GetPlayerHealth(playerid, eletpajzs[0]);
		GetPlayerArmour(playerid, eletpajzs[1]);

		if(eletpajzs[0] > 100) eletpajzs[0] = 100;
		if(eletpajzs[1] > 100) eletpajzs[1] = 100;
		if(eletpajzs[0] < 3) eletpajzs[0] = 5;
		if(eletpajzs[1] < 3) eletpajzs[1] = 5;

		Format(kilepeselet, "%.3f, %.3f", eletpajzs[0], eletpajzs[1]);

		new kilepesfegyverek[128], kilepestoltenyek[128], ff[12], tt[12];

		if(PlayerPaintballing[playerid] != 1)
		{
			for(new x = 0; x < 12; x++)
				GetPlayerWeaponData(playerid, x, ff[x], tt[x]);
		}

		Format(kilepesfegyverek, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", ff[0], ff[1], ff[2], ff[3], ff[4], ff[5], ff[6], ff[7], ff[8], ff[9], ff[10], ff[11]);
		Format(kilepestoltenyek, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", tt[0], tt[1], tt[2], tt[3], tt[4], tt[5], tt[6], tt[7], tt[8], tt[9], tt[10], tt[11]);

		MysqlUpdateStr(query, "KilepesPos", kilepespos);
		MysqlUpdateStr(query, "KilepesElet", kilepeselet);
		MysqlUpdateStr(query, "KilepesFegyver", kilepesfegyverek);
		MysqlUpdateStr(query, "KilepesTolteny", kilepestoltenyek);

		//Egyéb
		MysqlUpdateInt(query, "Muted", PlayerInfo[playerid][pMuted]);
		if(!PlayerOnline[playerid]) MysqlUpdateInt(query, "UtoljaraAktiv", gettime());
		MysqlUpdateInt(query, "Inter", PlayerInfo[playerid][pInt]);
		MysqlUpdateInt(query, "Local", PlayerInfo[playerid][pLocal]);
		MysqlUpdateFlo(query, "Pos_x",PlayerInfo[playerid][pPos_x]);
		MysqlUpdateFlo(query, "Pos_y",PlayerInfo[playerid][pPos_y]);
		MysqlUpdateFlo(query, "Pos_z",PlayerInfo[playerid][pPos_z]);
		MysqlUpdateInt(query, "CarTime", PlayerInfo[playerid][pCarTime]);
		MysqlUpdateInt(query, "Lokator", PlayerInfo[playerid][pLokator]);
		//MysqlUpdateInt(query, "Nyomkovetes", PlayerInfo[playerid][pNyomkovetes]);
		//MysqlUpdateInt(query, "Nyomkoveto", PlayerInfo[playerid][pNyomkoveto]);
		MysqlUpdateInt(query, "Cigifuggoseg", PlayerInfo[playerid][pCigiFuggoseg]);
		MysqlUpdateInt(query, "Swat", PlayerInfo[playerid][pSwattag]);
		MysqlUpdateInt(query, "SwatRang", PlayerInfo[playerid][pSwatRang]);
		MysqlUpdateInt(query, "Kituntetes", PlayerInfo[playerid][pKituntetes]);
		MysqlUpdateInt(query, "Szallitott", PlayerInfo[playerid][pSzallitott]);
		MysqlUpdateInt(query, "Spawnchange", PlayerInfo[playerid][pSpawnchange]);
		MysqlUpdateStr(query, "AdminAlnev", PlayerInfo[playerid][pAdminAlnev]);
		MysqlUpdateInt(query, "TeloEgyenleg", PlayerInfo[playerid][pTeloEgyenleg]);
		MysqlUpdateInt(query, "Kotszer", PlayerInfo[playerid][pKotszer]);
		MysqlUpdateInt(query, "Utlevel", PlayerInfo[playerid][pUtlevel]);
		MysqlUpdateInt(query, "Stilus", PlayerInfo[playerid][pStilus]);
		
		new bankszamla[25];
		Format(bankszamla, "%d,%d,%d", PlayerInfo[playerid][pBankSzamla], PlayerInfo[playerid][pBankSzamlaSzam], PlayerInfo[playerid][pBankSzamlaJelszo]);
		MysqlUpdateStr(query, "BankSzamla", bankszamla);
		
		MysqlUpdateInt(query, "C4", PlayerInfo[playerid][pC4]);
		MysqlUpdateInt(query, "Hitman", PlayerInfo[playerid][pHitman]);
		MysqlUpdateStr(query, "HitmanNev", PlayerInfo[playerid][pHitmanNev]);
		
		new premium[25];
		Format(premium, "%d,%d", PlayerInfo[playerid][pPremiumCsomag], PlayerInfo[playerid][pPremiumPont]);
		MysqlUpdateStr(query, "Premium", premium);
		
		MysqlUpdateInt(query, "PremiumIdo", PlayerInfo[playerid][pPremiumIdo]);
		MysqlUpdateInt(query, "Berlo", PlayerInfo[playerid][pBerlo]);
		
		if(PlayerOnline[playerid]) MysqlUpdateInt(query, "Online", 1);
		else MysqlUpdateInt(query, "Online", 0);
		
		new ado[30];
		Format(ado, "%d,%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pAdoHaz], PlayerInfo[playerid][pAdoHazHol], PlayerInfo[playerid][pAdoSzint], PlayerInfo[playerid][pAdoJarmu], PlayerInfo[playerid][pAdoKitoltve], PlayerInfo[playerid][pAdo], PlayerInfo[playerid][pAdoFizetve], PlayerInfo[playerid][pAdoEllenorizve]);
		MysqlUpdateStr(query, "Adok", ado);
		new hitel[30];
		Format(hitel, "%d,%d,%d,%d,%d", PlayerInfo[playerid][pHitel], PlayerInfo[playerid][pFelvettHitel], PlayerInfo[playerid][pHitelOra], PlayerInfo[playerid][pHitelElteltOra], PlayerInfo[playerid][pZarolva]);
		MysqlUpdateStr(query, "Hitel", hitel);
		MysqlUpdateStr(query, "Jegy", PlayerInfo[playerid][pJegy]);
		
		MysqlUpdateStr(query, "Lekotottpenz", PlayerInfo[playerid][pLekotottpenz]);
		MysqlUpdateStr(query, "Futamido", PlayerInfo[playerid][pFutamido]);
		
		//new egyeb[30];
		//Format(egyeb, "%d", MedicBill[playerid]);
		//MysqlUpdateStr(query, "Egyeb", egyeb);
		MysqlUpdateInt(query, "Egyeb", MedicBill[playerid]);
		MysqlUpdateInt(query, "SSS", PlayerInfo[playerid][pSSS]);
		MysqlUpdateStr(query, "JailOK", PlayerInfo[playerid][pJailOK]);

		MysqlFinalUpdate(query, PlayerInfo[playerid][pID]);

	}

	return 1;
}

/*public AdatMentes(playerid)
{
	if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid) && Registered(playerid) && Logged(playerid) && PlayerInfo[playerid][pOrigin] > 0)
	{
		new string[128], file[64];

		format(file, sizeof(file), "Jatekosok/%s.ini", PlayerName(playerid));

		if(!fexist(file))
				dini_Create(file);

		new File:fajl = fopen(file, io_write);

		if(PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0)
		{
				PlayerInfo[playerid][pPos_x] = 1684.9;
				PlayerInfo[playerid][pPos_y] = -2244.5;
				PlayerInfo[playerid][pPos_z] = 13.5;
		}
		if(Spectate[playerid] != 255)
		{
				PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
				PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
				PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
				PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
				PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
		}

		GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);

		//Fõbb adatok
		//format(string, sizeof(string), "Key=%s\n", PlayerInfo[playerid][pKey]); fwrite(fajl, string);
		format(string, sizeof(string), "Level=%d\n",PlayerInfo[playerid][pLevel]); fwrite(fajl, string);
		format(string, sizeof(string), "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]); fwrite(fajl, string);
		format(string, sizeof(string), "DonateRank=%d\n", PlayerInfo[playerid][pDonateRank]); fwrite(fajl, string);
		format(string, sizeof(string), "UpgradePoints=%d\n", PlayerInfo[playerid][gPupgrade]); fwrite(fajl, string);
		format(string, sizeof(string), "ConnectedTime=%d\n", PlayerInfo[playerid][pConnectTime]); fwrite(fajl, string);
		format(string, sizeof(string), "Sex=%d\n", PlayerInfo[playerid][pSex]); fwrite(fajl, string);
		format(string, sizeof(string), "Age=%d\n", PlayerInfo[playerid][pAge]); fwrite(fajl, string);
		format(string, sizeof(string), "Origin=%d\n", PlayerInfo[playerid][pOrigin]); fwrite(fajl, string);
		format(string, sizeof(string), "Married=%d\n", PlayerInfo[playerid][pMarried]); fwrite(fajl, string);
		format(string, sizeof(string), "MarriedTo=%s\n", PlayerInfo[playerid][pMarriedTo]); fwrite(fajl, string);

		//Egyéb adatok
		format(string, sizeof(string), "Crimes=%d\n", PlayerInfo[playerid][pCrimes]); fwrite(fajl, string);
		format(string, sizeof(string), "Kills=%d\n", PlayerInfo[playerid][pKills]); fwrite(fajl, string);
		format(string, sizeof(string), "Deaths=%d\n", PlayerInfo[playerid][pDeaths]); fwrite(fajl, string);
		format(string, sizeof(string), "Arrested=%d\n", PlayerInfo[playerid][pArrested]); fwrite(fajl, string);
		format(string, sizeof(string), "WantedDeaths=%d\n", PlayerInfo[playerid][pWantedDeaths]); fwrite(fajl, string);
		format(string, sizeof(string), "Fishes=%d\n", PlayerInfo[playerid][pFishes]); fwrite(fajl, string);
		format(string, sizeof(string), "BiggestFish=%d\n", PlayerInfo[playerid][pBiggestFish]); fwrite(fajl, string);
		format(string, sizeof(string), "HeadValue=%d\n", PlayerInfo[playerid][pHeadValue]); fwrite(fajl, string);
		format(string, sizeof(string), "Jailed=%d\n", PlayerInfo[playerid][pJailed]); fwrite(fajl, string);
		format(string, sizeof(string), "JailTime=%d\n", PlayerInfo[playerid][pJailTime]); fwrite(fajl, string);
		format(string, sizeof(string), "Wins=%d\n", PlayerInfo[playerid][pWins]); fwrite(fajl, string);
		format(string, sizeof(string), "Loses=%d\n", PlayerInfo[playerid][pLoses]); fwrite(fajl, string);
		format(string, sizeof(string), "Tutorial=%d\n", PlayerInfo[playerid][pTut]); fwrite(fajl, string);
		format(string, sizeof(string), "Mission=%d\n", PlayerInfo[playerid][pMissionNr]); fwrite(fajl, string);
		format(string, sizeof(string), "Warnings=%d\n", PlayerInfo[playerid][pWarns]); fwrite(fajl, string);
		format(string, sizeof(string), "KWarnings=%d\n", PlayerInfo[playerid][pKWarns]); fwrite(fajl, string);
		format(string, sizeof(string), "Drogido=%d\n", PlayerInfo[playerid][pDrogido]); fwrite(fajl, string);
		format(string, sizeof(string), "AS=%d\n", PlayerInfo[playerid][pAS]); fwrite(fajl, string);

		//Cuccai
		format(string, sizeof(string), "Respect=%d\n", PlayerInfo[playerid][pExp]); fwrite(fajl, string);
		format(string, sizeof(string), "Money=%d\n", PlayerInfo[playerid][pCash]); fwrite(fajl, string);
		format(string, sizeof(string), "Bank=%d\n", PlayerInfo[playerid][pAccount]); fwrite(fajl, string);
		format(string, sizeof(string), "Kaja=%d\n", PlayerInfo[playerid][pKaja]); fwrite(fajl, string);
		format(string, sizeof(string), "PhoneNr=%d\n", PlayerInfo[playerid][pPnumber]); fwrite(fajl, string);
		format(string, sizeof(string), "House=%d\n", PlayerInfo[playerid][pPhousekey]); fwrite(fajl, string);
		format(string, sizeof(string), "Bizz=%d\n", PlayerInfo[playerid][pPbiskey]); fwrite(fajl, string);
		format(string, sizeof(string), "Kocsikulcs=%d\n", PlayerInfo[playerid][pPcarkey]); fwrite(fajl, string);

		format(string, sizeof(string), "Muanyag=%d\n", PlayerInfo[playerid][pMuanyag]); fwrite(fajl, string);
		format(string, sizeof(string), "Cserje=%d\n", PlayerInfo[playerid][pCserje]); fwrite(fajl, string);
		format(string, sizeof(string), "Mak=%d\n", PlayerInfo[playerid][pMak]); fwrite(fajl, string);
		format(string, sizeof(string), "Cannabis=%d\n", PlayerInfo[playerid][pCannabis]); fwrite(fajl, string);

		format(string, sizeof(string), "Materials=%d\n", PlayerInfo[playerid][pMats]); fwrite(fajl, string);
		format(string, sizeof(string), "Kokain=%d\n", PlayerInfo[playerid][pKokain]); fwrite(fajl, string);
		format(string, sizeof(string), "Heroin=%d\n", PlayerInfo[playerid][pHeroin]); fwrite(fajl, string);
		format(string, sizeof(string), "Marihuana=%d\n", PlayerInfo[playerid][pMarihuana]); fwrite(fajl, string);

		//24/7 cuccok v. megvehetõ cuccok
		format(string, sizeof(string), "Phonebook=%d\n", PlayerInfo[playerid][pPhoneBook]); fwrite(fajl, string);
		format(string, sizeof(string), "CDPlayer=%d\n", PlayerInfo[playerid][pCDPlayer]); fwrite(fajl, string);
		format(string, sizeof(string), "LottoNr=%d\n", PlayerInfo[playerid][pLottoNr]); fwrite(fajl, string);
		format(string, sizeof(string), "Fuel=%d\n", PlayerInfo[playerid][pFuel]); fwrite(fajl, string);
		format(string, sizeof(string), "Cigihasználat=%d\n", PlayerInfo[playerid][pCigiUsed]); fwrite(fajl, string);
		format(string, sizeof(string), "Cigi=%d\n", PlayerInfo[playerid][pCigi]); fwrite(fajl, string);
		format(string, sizeof(string), "Nikotin=%d\n", PlayerInfo[playerid][pNikotin]); fwrite(fajl, string);
		format(string, sizeof(string), "Gyujto=%d\n", PlayerInfo[playerid][pGyujto]); fwrite(fajl, string);
		format(string, sizeof(string), "Pia=%d\n", PlayerInfo[playerid][pPia]); fwrite(fajl, string);

		//Munka / család adatok
		format(string, sizeof(string), "Job1=%d\n", PlayerInfo[playerid][pJob1]); fwrite(fajl, string);
		format(string, sizeof(string), "Job2=%d\n", PlayerInfo[playerid][pJob2]); fwrite(fajl, string);
		format(string, sizeof(string), "ContractTime=%d\n", PlayerInfo[playerid][pContractTime]); fwrite(fajl, string);
		format(string, sizeof(string), "ContractTime2=%d\n", PlayerInfo[playerid][pContractTime2]); fwrite(fajl, string);
		format(string, sizeof(string), "Paycheck=%d\n", PlayerInfo[playerid][pPayCheck]); fwrite(fajl, string);
		format(string, sizeof(string), "PayDay=%d\n", PlayerInfo[playerid][pPayDay]); fwrite(fajl, string);
		format(string, sizeof(string), "PayDayHad=%d\n", PlayerInfo[playerid][pPayDayHad]); fwrite(fajl, string);
		format(string, sizeof(string), "Leader=%d\n", PlayerInfo[playerid][pLeader]); fwrite(fajl, string);
		format(string, sizeof(string), "Member=%d\n", PlayerInfo[playerid][pMember]); fwrite(fajl, string);
		format(string, sizeof(string), "FMember=%d\n", PlayerInfo[playerid][pFMember]); fwrite(fajl, string);
		format(string, sizeof(string), "Rank=%d\n", PlayerInfo[playerid][pRank]); fwrite(fajl, string);

		//Egyéb munka adatok
		format(string, sizeof(string), "DetSkill=%d\n", PlayerInfo[playerid][pDetSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "SexSkill=%d\n", PlayerInfo[playerid][pSexSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "BoxSkill=%d\n", PlayerInfo[playerid][pBoxSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "LawSkill=%d\n", PlayerInfo[playerid][pLawSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "MechSkill=%d\n", PlayerInfo[playerid][pMechSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "JackSkill=%d\n", PlayerInfo[playerid][pJackSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "CarSkill=%d\n", PlayerInfo[playerid][pCarSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "NewsSkill=%d\n", PlayerInfo[playerid][pNewsSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "DrugsSkill=%d\n", PlayerInfo[playerid][pDrugsSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "CookSkill=%d\n", PlayerInfo[playerid][pCookSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "FishSkill=%d\n", PlayerInfo[playerid][pFishSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "RiasztoSkill=%d\n", PlayerInfo[playerid][pRiasztoSkill]); fwrite(fajl, string);
		format(string, sizeof(string), "HackSkill=%d\n", PlayerInfo[playerid][pHackingSkill]); fwrite(fajl, string);

		//Jogsik
		format(string, sizeof(string), "CarLic=%d\n", PlayerInfo[playerid][pCarLic]); fwrite(fajl, string);
		format(string, sizeof(string), "FlyLic=%d\n", PlayerInfo[playerid][pFlyLic]); fwrite(fajl, string);
		format(string, sizeof(string), "BoatLic=%d\n", PlayerInfo[playerid][pBoatLic]); fwrite(fajl, string);
		format(string, sizeof(string), "FishLic=%d\n", PlayerInfo[playerid][pFishLic]); fwrite(fajl, string);
		format(string, sizeof(string), "GunLic=%d\n", PlayerInfo[playerid][pGunLic]); fwrite(fajl, string);

		//Skin
		format(string, sizeof(string), "Char=%d\n", PlayerInfo[playerid][pChar]); fwrite(fajl, string);
		format(string, sizeof(string), "Model=%d\n", PlayerInfo[playerid][pModel]); fwrite(fajl, string);

		//Skillek
		format(string, sizeof(string), "AlcoholPerk=%d\n", PlayerInfo[playerid][pAlcoholPerk]); fwrite(fajl, string);
		format(string, sizeof(string), "DrugPerk=%d\n", PlayerInfo[playerid][pDrugPerk]); fwrite(fajl, string);
		format(string, sizeof(string), "MiserPerk=%d\n", PlayerInfo[playerid][pMiserPerk]); fwrite(fajl, string);
		format(string, sizeof(string), "PainPerk=%d\n", PlayerInfo[playerid][pPainPerk]); fwrite(fajl, string);
		format(string, sizeof(string), "TraderPerk=%d\n", PlayerInfo[playerid][pTraderPerk]); fwrite(fajl, string);

		//Crash
		format(string, sizeof(string), "Crash=%d\n", PlayerInfo[playerid][pCrash]); fwrite(fajl, string);
		format(string, sizeof(string), "CInt=%d\n", PlayerInfo[playerid][pCInt]); fwrite(fajl, string);
		format(string, sizeof(string), "CVW=%d\n", PlayerInfo[playerid][pCVW]); fwrite(fajl, string);
		format(string, sizeof(string), "CPosX=%.1f\n", PlayerInfo[playerid][pCPosX]); fwrite(fajl, string);
		format(string, sizeof(string), "CPosY=%.1f\n", PlayerInfo[playerid][pCPosY]); fwrite(fajl, string);
		format(string, sizeof(string), "CPosZ=%.1f\n", PlayerInfo[playerid][pCPosZ]); fwrite(fajl, string);
		format(string, sizeof(string), "Celet=%.1f\n", PlayerInfo[playerid][pCelet]); fwrite(fajl, string);
		format(string, sizeof(string), "Cpajzs=%.1f\n", PlayerInfo[playerid][pCpajzs]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun0=%d\n", PlayerInfo[playerid][pGun0]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun1=%d\n", PlayerInfo[playerid][pGun1]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun2=%d\n", PlayerInfo[playerid][pGun2]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun3=%d\n", PlayerInfo[playerid][pGun3]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun4=%d\n", PlayerInfo[playerid][pGun4]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun5=%d\n", PlayerInfo[playerid][pGun5]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun6=%d\n", PlayerInfo[playerid][pGun6]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun7=%d\n", PlayerInfo[playerid][pGun7]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun8=%d\n", PlayerInfo[playerid][pGun8]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun9=%d\n", PlayerInfo[playerid][pGun9]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun10=%d\n", PlayerInfo[playerid][pGun10]); fwrite(fajl, string);
		format(string, sizeof(string), "Gun11=%d\n", PlayerInfo[playerid][pGun11]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo0=%d\n", PlayerInfo[playerid][pAmmo0]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo1=%d\n", PlayerInfo[playerid][pAmmo1]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo2=%d\n", PlayerInfo[playerid][pAmmo2]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo3=%d\n", PlayerInfo[playerid][pAmmo3]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo4=%d\n", PlayerInfo[playerid][pAmmo4]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo5=%d\n", PlayerInfo[playerid][pAmmo5]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo6=%d\n", PlayerInfo[playerid][pAmmo6]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo7=%d\n", PlayerInfo[playerid][pAmmo7]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo8=%d\n", PlayerInfo[playerid][pAmmo8]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo9=%d\n", PlayerInfo[playerid][pAmmo9]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo10=%d\n", PlayerInfo[playerid][pAmmo10]); fwrite(fajl, string);
		format(string, sizeof(string), "Ammo11=%d\n", PlayerInfo[playerid][pAmmo11]); fwrite(fajl, string);

		//Egyéb
		format(string, sizeof(string), "Muted=%d\n", PlayerInfo[playerid][pMuted]); fwrite(fajl, string);
		format(string, sizeof(string), "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]); fwrite(fajl, string);
		format(string, sizeof(string), "pHealth=%.1f\n",PlayerInfo[playerid][pHealth]); fwrite(fajl, string);
		format(string, sizeof(string), "Int=%d\n", PlayerInfo[playerid][pInt]); fwrite(fajl, string);
		format(string, sizeof(string), "Local=%d\n", PlayerInfo[playerid][pLocal]); fwrite(fajl, string);
		format(string, sizeof(string), "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]); fwrite(fajl, string);
		format(string, sizeof(string), "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]); fwrite(fajl, string);
		format(string, sizeof(string), "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]); fwrite(fajl, string);
		format(string, sizeof(string), "CarTime=%d\n", PlayerInfo[playerid][pCarTime]); fwrite(fajl, string);
		format(string, sizeof(string), "Lokator=%d\n", PlayerInfo[playerid][pLokator]); fwrite(fajl, string);
		//format(string, sizeof(string), "Nyomkovetes=%d\n", PlayerInfo[playerid][pNyomkovetes]); fwrite(fajl, string);
		//format(string, sizeof(string), "Nyomkoveto=%d\n", PlayerInfo[playerid][pNyomkoveto]); fwrite(fajl, string);
		format(string, sizeof(string), "Cigifuggoseg=%d\n", PlayerInfo[playerid][pCigiFuggoseg]); fwrite(fajl, string);
		format(string, sizeof(string), "Swattag=%d\n", PlayerInfo[playerid][pSwattag]); fwrite(fajl, string);
		format(string, sizeof(string), "SwatRang=%d\n", PlayerInfo[playerid][pSwatRang]); fwrite(fajl, string);
		format(string, sizeof(string), "Kituntetes=%d\n", PlayerInfo[playerid][pKituntetes]); fwrite(fajl, string);
		format(string, sizeof(string), "Szallitott=%d\n", PlayerInfo[playerid][pSzallitott]); fwrite(fajl, string);
		format(string, sizeof(string), "Spawnchange=%d\n", PlayerInfo[playerid][pSpawnchange]); fwrite(fajl, string);

		fclose(fajl);
	}

	return 1;
}*/

public OnPlayerUpdate(playerid) // Editing this public is on your own risk, it's not needed to edit because it works fine.
{
	if(IsPlayerConnected(playerid))
	{
		GetPlayerHealth(playerid, iNewPlayerHealth[playerid]);
		if(iNewPlayerHealth[playerid] != iPlayerHealth[playerid])
		{
		    OnPlayerHealthChange(playerid, iNewPlayerHealth[playerid], iPlayerHealth[playerid]);
		    iPlayerHealth[playerid] = iNewPlayerHealth[playerid];
		}

		GetPlayerArmour(playerid, iNewPlayerArmour[playerid]);
		if(iNewPlayerArmour[playerid] != iPlayerArmour[playerid])
		{
		    OnPlayerArmourChange(playerid, iNewPlayerArmour[playerid], iPlayerArmour[playerid]);
		    iPlayerArmour[playerid] = iNewPlayerArmour[playerid];
		}

		iNewPlayerMoney[playerid] = GetPlayerMoney(playerid);
		if(iNewPlayerMoney[playerid] != iPlayerMoney[playerid])
		{
		    OnPlayerMoneyChange(playerid, iNewPlayerMoney[playerid], iPlayerMoney[playerid]);
		    iPlayerMoney[playerid] = iNewPlayerMoney[playerid];
		}

		iNewPlayerAmmo[playerid] = GetPlayerAmmo(playerid);
		if(iNewPlayerAmmo[playerid] != iPlayerAmmo[playerid])
		{
		    OnPlayerAmmoChange(playerid, iNewPlayerAmmo[playerid], iPlayerAmmo[playerid]);
		    iPlayerAmmo[playerid] = iNewPlayerAmmo[playerid];
		}

		iNewPlayerVirtualWorld[playerid] = GetPlayerVirtualWorld(playerid);
		if(iNewPlayerVirtualWorld[playerid] != iPlayerVirtualWorld[playerid])
		{
		    OnPlayerVirtualWorldChange(playerid, iNewPlayerVirtualWorld[playerid], iPlayerVirtualWorld[playerid]);
		    iPlayerVirtualWorld[playerid] = iNewPlayerVirtualWorld[playerid];
		}

		/*iNewPlayerVirtualWorld[playerid] = GetPlayerVirtualWorld(playerid);
		if(iNewPlayerVirtualWorld[playerid] != iPlayerVirtualWorld[playerid])
		{
		    OnPlayerVirtualWorldChange(playerid, iNewPlayerVirtualWorld[playerid], iPlayerVirtualWorld[playerid]);
		    iPlayerVirtualWorld[playerid] = iNewPlayerVirtualWorld[playerid];
		}*/

		iNewPlayerScore[playerid] = GetPlayerScore(playerid);
		if(iNewPlayerScore[playerid] != iPlayerScore[playerid])
		{
		    OnPlayerScoreChange(playerid, iNewPlayerScore[playerid], iPlayerScore[playerid]);
		    iPlayerScore[playerid] = iNewPlayerScore[playerid];
		}

		iNewPlayerTeam[playerid] = GetPlayerTeam(playerid);
		if(iNewPlayerTeam[playerid] != iPlayerTeam[playerid])
		{
		    OnPlayerTeamChange(playerid, iNewPlayerTeam[playerid], iPlayerTeam[playerid]);
		    iPlayerTeam[playerid] = iNewPlayerTeam[playerid];
		}

		iNewPlayerSkin[playerid] = GetPlayerSkin(playerid);
		if(iNewPlayerSkin[playerid] != iPlayerSkin[playerid])
		{
		    OnPlayerSkinChange(playerid, iNewPlayerSkin[playerid], iPlayerSkin[playerid]);
		    iPlayerSkin[playerid] = iNewPlayerSkin[playerid];
		}

		iNewPlayerWantedLevel[playerid] = GetPlayerWantedLevel(playerid);
		if(iNewPlayerWantedLevel[playerid] != iPlayerWantedLevel[playerid])
		{
		    OnPlayerWantedLevelChange(playerid, iNewPlayerWantedLevel[playerid], iPlayerWantedLevel[playerid]);
		    iPlayerWantedLevel[playerid] = iNewPlayerWantedLevel[playerid];
		}

		iNewPlayerWeapon[playerid] = GetPlayerWeapon(playerid);
		if(iNewPlayerWeapon[playerid] != iPlayerWeapon[playerid])
		{
		    OnPlayerWeaponChange(playerid, iNewPlayerWeapon[playerid], iPlayerWeapon[playerid]);
		    iPlayerWeapon[playerid] = iNewPlayerWeapon[playerid];
		}
		
		if(SebessegKorlat[playerid] != 0 && KocsibanVan[playerid] && RendesJatekos(playerid))
			SebessegKorlatozoPlayer(playerid);
	}
	return 1;
}

/*public OnPlayerUpdate(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(Logged(playerid))
		{
			new penz = GetMoney(playerid);

			if(penz > MAXPENZ)
			{
				ResetMoney(playerid);
				GiveMoney(playerid, MAXPENZ);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Max %dFt lehet nálad!", MAXPENZ);
			}
			if(penz < -90000000)
			{
				ResetMoney(playerid);
				GiveMoney(playerid, -90000000);
			}
		}
	}
	return 1;
}*/

public AdatBetoltesSQL(playerid)
{
	new query[128];
	Format(query, "SELECT ID FROM %s WHERE karakterek > 0 AND karakter1='%d' OR karakterek > 1 AND karakter2='%d'", SQL_DB_Account, PlayerInfo[playerid][pID], PlayerInfo[playerid][pID]);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 1) VanAccountja[playerid] = true;
	else VanAccountja[playerid] = false;
	
/*	if(VanAccountja[playerid])
	{
		new id[5]
		mysql_fetch_row(id);
		PlayerAccountok[playerid][aID] = strval(id);
	}
	else
		PlayerAccountok[playerid][aID] = NINCS;*/
	
	mysql_free_result();
	
	Format(query, "SELECT * FROM %s WHERE id = '%d'", SQL_DB_Player, PlayerInfo[playerid][pID]);
	mysql_query(query);

	new datas[MAX_MYSQL_STRING], data[120][110];
	mysql_store_result();
	mysql_fetch_row(datas, "|");
	mysql_free_result();
	split(datas, data, '|');

	//strmid(PlayerInfo[playerid][pNev], data[1], 0, strlen(data[1]), 25);
	//strmid(PlayerInfo[playerid][pKey], data[2], 0, strlen(data[2]));
	PlayerInfo[playerid][pLevel] = strval(data[3]);
	PlayerInfo[playerid][pAdmin] = strval(data[4]);
	PlayerInfo[playerid][pDonateRank] = strval(data[5]);
	PlayerInfo[playerid][gPupgrade] = strval(data[6]);
	PlayerInfo[playerid][pConnectTime] = strval(data[7]);
	PlayerInfo[playerid][pSex] = strval(data[8]);
	PlayerInfo[playerid][pAge] = strval(data[9]);
	PlayerInfo[playerid][pOrigin] = strval(data[10]);
	PlayerInfo[playerid][pMarried] = strval(data[11]);
	strmid(PlayerInfo[playerid][pMarriedTo], data[12], 0, strlen(data[12]), 25);
	PlayerInfo[playerid][pCrimes] = strval(data[13]);
	PlayerInfo[playerid][pKills] = strval(data[14]);
	PlayerInfo[playerid][pDeaths] = strval(data[15]);
	PlayerInfo[playerid][pArrested] = strval(data[16]);
	PlayerInfo[playerid][pWantedDeaths] = strval(data[17]);
	PlayerInfo[playerid][pFishes] = strval(data[18]);
	PlayerInfo[playerid][pBiggestFish] = strval(data[19]);
	PlayerInfo[playerid][pHeadValue] = strval(data[20]);
	PlayerInfo[playerid][pJailed] = strval(data[21]);
	PlayerInfo[playerid][pJailTime] = strval(data[22]);
	PlayerInfo[playerid][pWins] = strval(data[23]);
	PlayerInfo[playerid][pLoses] = strval(data[24]);
	PlayerInfo[playerid][pTut] = strval(data[25]);
	PlayerInfo[playerid][pMissionNr] = strval(data[26]);
	PlayerInfo[playerid][pWarns] = strval(data[27]);
	PlayerInfo[playerid][pKWarns] = strval(data[28]);
	PlayerInfo[playerid][pDrogido] = strval(data[29]);
	PlayerInfo[playerid][pAS] = strval(data[30]);
	PlayerInfo[playerid][pExp] = strval(data[31]);
	PlayerInfo[playerid][pCash] = strval(data[32]);
	PlayerInfo[playerid][pAccount] = strval(data[33]);
	PlayerInfo[playerid][pKaja] = strval(data[34]);
	PlayerInfo[playerid][pPnumber] = strval(data[35]);
	PlayerInfo[playerid][pPhousekey] = strval(data[36]);
	PlayerInfo[playerid][pPbiskey] = strval(data[37]);
	PlayerInfo[playerid][pPcarkey] = strval(data[38]);

	new splits[20][10];
	split(data[39], splits, ',');

	PlayerInfo[playerid][pMuanyag] = strval(splits[0]);
	PlayerInfo[playerid][pCserje] = strval(splits[1]);
	PlayerInfo[playerid][pMak] = strval(splits[2]);
	PlayerInfo[playerid][pCannabis] = strval(splits[3]);
	PlayerInfo[playerid][pMats] = strval(splits[4]);
	PlayerInfo[playerid][pKokain] = strval(splits[5]);
	PlayerInfo[playerid][pHeroin] = strval(splits[6]);
	PlayerInfo[playerid][pMarihuana] = strval(splits[7]);

	PlayerInfo[playerid][pPhoneBook] = strval(data[40]);
	PlayerInfo[playerid][pCDPlayer] = strval(data[41]);
	PlayerInfo[playerid][pLottoNr] = strval(data[42]);
	PlayerInfo[playerid][pFuel] = strval(data[43]);
	PlayerInfo[playerid][pCigiUsed] = strval(data[44]);
	PlayerInfo[playerid][pCigi] = strval(data[45]);
	PlayerInfo[playerid][pNikotin] = strval(data[46]);
	PlayerInfo[playerid][pGyujto] = strval(data[47]);
	PlayerInfo[playerid][pPia] = strval(data[48]);
	PlayerInfo[playerid][pJob1] = strval(data[49]);
	PlayerInfo[playerid][pJob2] = strval(data[50]);
	PlayerInfo[playerid][pContractTime] = strval(data[51]);
	PlayerInfo[playerid][pContractTime2] = strval(data[52]);
	PlayerInfo[playerid][pPayCheck] = strval(data[53]);
	PlayerInfo[playerid][pPayDay] = strval(data[54]);
	PlayerInfo[playerid][pPayDayHad] = strval(data[55]);
	PlayerInfo[playerid][pLeader] = strval(data[56]);
	PlayerInfo[playerid][pMember] = strval(data[57]);
	PlayerInfo[playerid][pFMember] = strval(data[58]);
	PlayerInfo[playerid][pRank] = strval(data[59]);

	split(data[60], splits, ',');

	PlayerInfo[playerid][pDetSkill] = strval(splits[0]);
	PlayerInfo[playerid][pSexSkill] = strval(splits[1]);
	PlayerInfo[playerid][pBoxSkill] = strval(splits[2]);
	PlayerInfo[playerid][pLawSkill] = strval(splits[3]);
	PlayerInfo[playerid][pMechSkill] = strval(splits[4]);
	PlayerInfo[playerid][pJackSkill] = strval(splits[5]);
	PlayerInfo[playerid][pCarSkill] = strval(splits[6]);
	PlayerInfo[playerid][pNewsSkill] = strval(splits[7]);
	PlayerInfo[playerid][pDrugsSkill] = strval(splits[8]);
	PlayerInfo[playerid][pCookSkill] = strval(splits[9]);
	PlayerInfo[playerid][pFishSkill] = strval(splits[10]);
	PlayerInfo[playerid][pRiasztoSkill] = strval(splits[11]);
	PlayerInfo[playerid][pHackingSkill] = strval(splits[12]);

	split(data[61], splits, ',');

	PlayerInfo[playerid][pCarLic] = strval(splits[0]);
	PlayerInfo[playerid][pFlyLic] = strval(splits[1]);
	PlayerInfo[playerid][pBoatLic] = strval(splits[2]);
	PlayerInfo[playerid][pFishLic] = strval(splits[3]);
	PlayerInfo[playerid][pGunLic] = strval(splits[4]);
	PlayerInfo[playerid][pMotorJogsi] = strval(splits[5]);
	PlayerInfo[playerid][pKamionJogsi] = strval(splits[6]);

	PlayerInfo[playerid][pChar] = strval(data[62]);
	PlayerInfo[playerid][pModel] = strval(data[63]);

	split(data[64], splits, ',');

	PlayerInfo[playerid][pAlcoholPerk] = strval(splits[0]);
	PlayerInfo[playerid][pDrugPerk] = strval(splits[1]);
	PlayerInfo[playerid][pMiserPerk] = strval(splits[2]);
	PlayerInfo[playerid][pPainPerk] = strval(splits[3]);
	PlayerInfo[playerid][pTraderPerk] = strval(splits[4]);

	split(data[65], splits, ',');

	PlayerInfo[playerid][pCPosX] = floatstr(splits[0]);
	PlayerInfo[playerid][pCPosY] = floatstr(splits[1]);
	PlayerInfo[playerid][pCPosZ] = floatstr(splits[2]);
	PlayerInfo[playerid][pCInt] = strval(splits[3]);
	PlayerInfo[playerid][pCVW] = strval(splits[4]);

	split(data[66], splits, ',');

	PlayerInfo[playerid][pCelet] = floatstr(splits[0]);
	PlayerInfo[playerid][pCpajzs] = floatstr(splits[1]);

	split(data[67], splits, ',');

	for(new x = 0; x < 12; x++)
		PlayerInfo[playerid][pFegyver][x] = strval(splits[x]);
	
	/*PlayerInfo[playerid][pGun0] = strval(splits[0]);
	PlayerInfo[playerid][pGun1] = strval(splits[1]);
	PlayerInfo[playerid][pGun2] = strval(splits[2]);
	PlayerInfo[playerid][pGun3] = strval(splits[3]);
	PlayerInfo[playerid][pGun4] = strval(splits[4]);
	PlayerInfo[playerid][pGun5] = strval(splits[5]);
	PlayerInfo[playerid][pGun6] = strval(splits[6]);
	PlayerInfo[playerid][pGun7] = strval(splits[7]);
	PlayerInfo[playerid][pGun8] = strval(splits[8]);
	PlayerInfo[playerid][pGun9] = strval(splits[9]);
	PlayerInfo[playerid][pGun10] = strval(splits[10]);
	PlayerInfo[playerid][pGun11] = strval(splits[11]);*/

	split(data[68], splits, ',');

	for(new x = 0; x < 12; x++)
		PlayerInfo[playerid][pTolteny][x] = strval(splits[x]);

	/*PlayerInfo[playerid][pAmmo0] = strval(splits[0]);
	PlayerInfo[playerid][pAmmo1] = strval(splits[1]);
	PlayerInfo[playerid][pAmmo2] = strval(splits[2]);
	PlayerInfo[playerid][pAmmo3] = strval(splits[3]);
	PlayerInfo[playerid][pAmmo4] = strval(splits[4]);
	PlayerInfo[playerid][pAmmo5] = strval(splits[5]);
	PlayerInfo[playerid][pAmmo6] = strval(splits[6]);
	PlayerInfo[playerid][pAmmo7] = strval(splits[7]);
	PlayerInfo[playerid][pAmmo8] = strval(splits[8]);
	PlayerInfo[playerid][pAmmo9] = strval(splits[9]);
	PlayerInfo[playerid][pAmmo10] = strval(splits[10]);
	PlayerInfo[playerid][pAmmo11] = strval(splits[11]);*/

	PlayerInfo[playerid][pMuted] = strval(data[69]);
	// a 70eshez ne rakj semmit!! Az az UtoljaraAktiv!
	PlayerInfo[playerid][pInt] = strval(data[71]);
	PlayerInfo[playerid][pLocal] = strval(data[72]);
	PlayerInfo[playerid][pPos_x] = floatstr(data[73]);
	PlayerInfo[playerid][pPos_y] = floatstr(data[74]);
	PlayerInfo[playerid][pPos_z] = floatstr(data[75]);
	PlayerInfo[playerid][pCarTime] = strval(data[76]);
	PlayerInfo[playerid][pLokator] = strval(data[77]);
	PlayerInfo[playerid][pCigiFuggoseg] = strval(data[78]);
	PlayerInfo[playerid][pSwattag] = strval(data[79]);
	PlayerInfo[playerid][pSwatRang] = strval(data[80]);
	PlayerInfo[playerid][pKituntetes] = strval(data[81]);
	PlayerInfo[playerid][pSzallitott] = strval(data[82]);
	PlayerInfo[playerid][pSpawnchange] = strval(data[83]);
	strmid(PlayerInfo[playerid][pAdminAlnev], data[84], 0, strlen(data[84]), 25);
	PlayerInfo[playerid][pClint] = strval(data[85]);
	PlayerInfo[playerid][pTeloEgyenleg] = strval(data[86]);
	PlayerInfo[playerid][pKotszer] = strval(data[87]);
	PlayerInfo[playerid][pUtlevel] = strval(data[88]);
	PlayerInfo[playerid][pStilus] = strval(data[89]);
	
	split(data[90], splits, ',');

	PlayerInfo[playerid][pBankSzamla] = strval(splits[0]);
	PlayerInfo[playerid][pBankSzamlaSzam] = strval(splits[1]);
	PlayerInfo[playerid][pBankSzamlaJelszo] = strval(splits[2]);

	PlayerInfo[playerid][pC4] = strval(data[91]);
	PlayerInfo[playerid][pHitman] = strval(data[92]);
	strmid(PlayerInfo[playerid][pHitmanNev], data[93], 0, strlen(data[93]), MAX_PLAYER_NAME);
	
	split(data[94], splits, ',');
	
	PlayerInfo[playerid][pPremiumCsomag] = strval(splits[0]);
	PlayerInfo[playerid][pPremiumPont] = strval(splits[1]);
	
	PlayerInfo[playerid][pPremiumIdo] = strval(data[95]);
	PlayerInfo[playerid][pBerlo] = strval(data[96]);
	//PlayerInfo[playerid][pPower] = strval(data[97]); EZ LETT AZ "ONLINE" - KI NE TÖRÖLD!!!!!!
	
	split(data[98], splits, ',');
	
	PlayerInfo[playerid][pAdoHaz] = strval(splits[0]);
	PlayerInfo[playerid][pAdoHazHol] = strval(splits[1]);
	PlayerInfo[playerid][pAdoSzint] = strval(splits[2]);
	PlayerInfo[playerid][pAdoJarmu] = strval(splits[3]);
	PlayerInfo[playerid][pAdoKitoltve] = strval(splits[4]);
	PlayerInfo[playerid][pAdo] = strval(splits[5]);
	PlayerInfo[playerid][pAdoFizetve] = strval(splits[6]);
	PlayerInfo[playerid][pAdoEllenorizve] = strval(splits[7]);
	
	
	split(data[99], splits, ',');
	
	PlayerInfo[playerid][pHitel] = strval(splits[0]);
	PlayerInfo[playerid][pFelvettHitel] = strval(splits[1]);
	PlayerInfo[playerid][pHitelOra] = strval(splits[2]);
	PlayerInfo[playerid][pHitelElteltOra] = strval(splits[3]);
	PlayerInfo[playerid][pZarolva] = strval(splits[4]);
	
	PlayerInfo[playerid][pJegy] = strval(data[100]);
	
	PlayerInfo[playerid][pLekotottpenz] = strval(data[108]);
	PlayerInfo[playerid][pFutamido] = strval(data[109]);
	
	//split(data[101], splits, ',');
	//MedicBill[playerid] = strval(splits[0]);
	MedicBill[playerid] = strval(data[101]);
	PlayerInfo[playerid][pSSS] = strval(data[102]);
	strmid(PlayerInfo[playerid][pJailOK], data[103], 0, strlen(data[103]), 128);

	
	if(strfind(data[84], "_", true) != -1)
	{
		if(Admin(playerid, 1) && IsHitman(playerid))
			PlayerInfo[playerid][pAdminAlnevBe] = 1;
		else
			PlayerInfo[playerid][pAdminAlnevBe] = 0;
	}

	if(PlayerInfo[playerid][pPcarkey] > (MAXVSKOCSI+1))
		PlayerInfo[playerid][pPcarkey] = NINCS;
	if(PlayerInfo[playerid][pPhousekey] > (MAXHAZ+1))
		PlayerInfo[playerid][pPhousekey] = NINCS;

	return 1;
}

/*public AdatBetoltes(playerid)
{
	new fajl[64];

	format(fajl, sizeof(fajl), "Jatekosok/%s.ini", PlayerName(playerid));

	//if(dini_Isset(fajl, "Key")) { new pass[256]; pass = dini_Get(fajl, "Key"); strmid(PlayerInfo[playerid][pKey], pass, 0, strlen(pass)); }
	if(dini_Isset(fajl, "Level")) PlayerInfo[playerid][pLevel] = dini_Int(fajl, "Level");
	if(dini_Isset(fajl, "AdminLevel")) PlayerInfo[playerid][pAdmin] = dini_Int(fajl, "AdminLevel");
	if(dini_Isset(fajl, "DonateRank")) PlayerInfo[playerid][pDonateRank] = dini_Int(fajl, "DonateRank");
	if(dini_Isset(fajl, "UpgradePoints")) PlayerInfo[playerid][gPupgrade] = dini_Int(fajl, "UpgradePoints");
	if(dini_Isset(fajl, "ConnectedTime")) PlayerInfo[playerid][pConnectTime] = dini_Int(fajl, "ConnectedTime");
	if(dini_Isset(fajl, "Sex")) PlayerInfo[playerid][pSex] = dini_Int(fajl, "Sex");
	if(dini_Isset(fajl, "Age")) PlayerInfo[playerid][pAge] = dini_Int(fajl, "Age");
	if(dini_Isset(fajl, "Origin")) PlayerInfo[playerid][pOrigin] = dini_Int(fajl, "origin");
	if(dini_Isset(fajl, "Muted")) PlayerInfo[playerid][pMuted] = dini_Int(fajl, "Muted");
	if(dini_Isset(fajl, "Respect")) PlayerInfo[playerid][pExp] = dini_Int(fajl, "Respect");
	if(dini_Isset(fajl, "Money")) PlayerInfo[playerid][pCash] = dini_Int(fajl, "Money");
	if(dini_Isset(fajl, "Bank")) PlayerInfo[playerid][pAccount] = dini_Int(fajl, "Bank");
	if(dini_Isset(fajl, "Crimes")) PlayerInfo[playerid][pCrimes] = dini_Int(fajl, "Crimes");
	if(dini_Isset(fajl, "Kills")) PlayerInfo[playerid][pKills] = dini_Int(fajl, "Kills");
	if(dini_Isset(fajl, "Deaths")) PlayerInfo[playerid][pDeaths] = dini_Int(fajl, "Deaths");
	if(dini_Isset(fajl, "Arrested")) PlayerInfo[playerid][pArrested] = dini_Int(fajl, "Arrested");
	if(dini_Isset(fajl, "WantedDeaths")) PlayerInfo[playerid][pWantedDeaths] = dini_Int(fajl, "WantedDeaths");
	if(dini_Isset(fajl, "Phonebook")) PlayerInfo[playerid][pPhoneBook] = dini_Int(fajl, "Phonebook");
	if(dini_Isset(fajl, "LottoNr")) PlayerInfo[playerid][pLottoNr] = dini_Int(fajl, "LottoNr");
	if(dini_Isset(fajl, "Fishes")) PlayerInfo[playerid][pFishes] = dini_Int(fajl, "Fishes");
	if(dini_Isset(fajl, "BiggestFish")) PlayerInfo[playerid][pBiggestFish] = dini_Int(fajl, "BiggestFish");
	if(dini_Isset(fajl, "Job1")) PlayerInfo[playerid][pJob1] = dini_Int(fajl, "Job1");
	if(dini_Isset(fajl, "Job2")) PlayerInfo[playerid][pJob2] = dini_Int(fajl, "Job2");
	if(dini_Isset(fajl, "Paycheck")) PlayerInfo[playerid][pPayCheck] = dini_Int(fajl, "Paycheck");
	if(dini_Isset(fajl, "HeadValue")) PlayerInfo[playerid][pHeadValue] = dini_Int(fajl, "HeadValue");
	if(dini_Isset(fajl, "Jailed")) PlayerInfo[playerid][pJailed] = dini_Int(fajl, "Jailed");
	if(dini_Isset(fajl, "JailTime")) PlayerInfo[playerid][pJailTime] = dini_Int(fajl, "JailTime");
	if(dini_Isset(fajl, "Materials")) PlayerInfo[playerid][pMats] = dini_Int(fajl, "Materials");
	if(dini_Isset(fajl, "Kokain")) PlayerInfo[playerid][pKokain] = dini_Int(fajl, "Kokain");
	if(dini_Isset(fajl, "Heroin")) PlayerInfo[playerid][pHeroin] = dini_Int(fajl, "Heroin");
	if(dini_Isset(fajl, "Marihuana")) PlayerInfo[playerid][pMarihuana] = dini_Int(fajl, "Marihuana");
	if(dini_Isset(fajl, "Leader")) PlayerInfo[playerid][pLeader] = dini_Int(fajl, "Leader");
	if(dini_Isset(fajl, "Member")) PlayerInfo[playerid][pMember] = dini_Int(fajl, "Member");
	if(dini_Isset(fajl, "FMember")) PlayerInfo[playerid][pFMember] = dini_Int(fajl, "FMember");
	if(dini_Isset(fajl, "Rank")) PlayerInfo[playerid][pRank] = dini_Int(fajl, "Rank");
	if(dini_Isset(fajl, "Char")) PlayerInfo[playerid][pChar] = dini_Int(fajl, "Char");
	if(dini_Isset(fajl, "ContractTime")) PlayerInfo[playerid][pContractTime] = dini_Int(fajl, "ContractTime");
	if(dini_Isset(fajl, "ContractTime2")) PlayerInfo[playerid][pContractTime2] = dini_Int(fajl, "ContractTime2");
	if(dini_Isset(fajl, "DetSkill")) PlayerInfo[playerid][pDetSkill] = dini_Int(fajl, "DetSkill");
	if(dini_Isset(fajl, "SexSkill")) PlayerInfo[playerid][pSexSkill] = dini_Int(fajl, "SexSkill");
	if(dini_Isset(fajl, "BoxSkill")) PlayerInfo[playerid][pBoxSkill] = dini_Int(fajl, "BoxSkill");
	if(dini_Isset(fajl, "LawSkill")) PlayerInfo[playerid][pLawSkill] = dini_Int(fajl, "LawSkill");
	if(dini_Isset(fajl, "MechSkill")) PlayerInfo[playerid][pMechSkill] = dini_Int(fajl, "MechSkill");
	if(dini_Isset(fajl, "JackSkill")) PlayerInfo[playerid][pJackSkill] = dini_Int(fajl, "JackSkill");
	if(dini_Isset(fajl, "CarSkill")) PlayerInfo[playerid][pCarSkill] = dini_Int(fajl, "CarSkill");
	if(dini_Isset(fajl, "NewsSkill")) PlayerInfo[playerid][pNewsSkill] = dini_Int(fajl, "NewsSkill");
	if(dini_Isset(fajl, "DrugsSkill")) PlayerInfo[playerid][pDrugsSkill] = dini_Int(fajl, "DrugsSkill");
	if(dini_Isset(fajl, "CookSkill")) PlayerInfo[playerid][pCookSkill] = dini_Int(fajl, "CookSkill");
	if(dini_Isset(fajl, "FishSkill")) PlayerInfo[playerid][pFishSkill] = dini_Int(fajl, "FishSkill");
	if(dini_Isset(fajl, "RiasztoSkill")) PlayerInfo[playerid][pRiasztoSkill] = dini_Int(fajl, "RiasztoSkill");
	if(dini_Isset(fajl, "HackSkill")) PlayerInfo[playerid][pHackingSkill] = dini_Int(fajl, "FishSkill");
	if(dini_Isset(fajl, "pSHealth")) PlayerInfo[playerid][pSHealth] = dini_Float(fajl, "pSHealth");
	if(dini_Isset(fajl, "pHealth")) PlayerInfo[playerid][pHealth] = dini_Float(fajl, "pHealth");
	if(dini_Isset(fajl, "Int")) PlayerInfo[playerid][pInt] = dini_Int(fajl, "Int");
	if(dini_Isset(fajl, "Local")) PlayerInfo[playerid][pLocal] = dini_Int(fajl, "Local");
	if(dini_Isset(fajl, "Model")) PlayerInfo[playerid][pModel] = dini_Int(fajl, "Model");
	if(dini_Isset(fajl, "PhoneNr")) PlayerInfo[playerid][pPnumber] = dini_Int(fajl, "PhoneNr");
	if(dini_Isset(fajl, "House")) PlayerInfo[playerid][pPhousekey] = dini_Int(fajl, "House");
	if(dini_Isset(fajl, "Bizz")) PlayerInfo[playerid][pPbiskey] = dini_Int(fajl, "Bizz");
	if(dini_Isset(fajl, "Pos_x")) PlayerInfo[playerid][pPos_x] = dini_Float(fajl, "Pos_x");
	if(dini_Isset(fajl, "Pos_y")) PlayerInfo[playerid][pPos_y] = dini_Float(fajl, "Pos_y");
	if(dini_Isset(fajl, "Pos_z")) PlayerInfo[playerid][pPos_z] = dini_Float(fajl, "Pos_z");
	if(dini_Isset(fajl, "CarLic")) PlayerInfo[playerid][pCarLic] = dini_Int(fajl, "CarLic");
	if(dini_Isset(fajl, "FlyLic")) PlayerInfo[playerid][pFlyLic] = dini_Int(fajl, "FlyLic");
	if(dini_Isset(fajl, "BoatLic")) PlayerInfo[playerid][pBoatLic] = dini_Int(fajl, "BoatLic");
	if(dini_Isset(fajl, "FishLic")) PlayerInfo[playerid][pFishLic] = dini_Int(fajl, "FishLic");
	if(dini_Isset(fajl, "GunLic")) PlayerInfo[playerid][pGunLic] = dini_Int(fajl, "GunLic");
	if(dini_Isset(fajl, "CarTime")) PlayerInfo[playerid][pCarTime] = dini_Int(fajl, "CarTime");
	if(dini_Isset(fajl, "PayDay")) PlayerInfo[playerid][pPayDay] = dini_Int(fajl, "PayDay");
	if(dini_Isset(fajl, "PayDayHad")) PlayerInfo[playerid][pPayDayHad] = dini_Int(fajl, "PayDayHad");
	if(dini_Isset(fajl, "CDPlayer")) PlayerInfo[playerid][pCDPlayer] = dini_Int(fajl, "CDPlayer");
	if(dini_Isset(fajl, "Wins")) PlayerInfo[playerid][pWins] = dini_Int(fajl, "Wins");
	if(dini_Isset(fajl, "Loses")) PlayerInfo[playerid][pLoses] = dini_Int(fajl, "Loses");
	if(dini_Isset(fajl, "AlcoholPerk")) PlayerInfo[playerid][pAlcoholPerk] = dini_Int(fajl, "AlcoholPerk");
	if(dini_Isset(fajl, "DrugPerk")) PlayerInfo[playerid][pDrugPerk] = dini_Int(fajl, "DrugPerk");
	if(dini_Isset(fajl, "MiserPerk")) PlayerInfo[playerid][pMiserPerk] = dini_Int(fajl, "MiserPerk");
	if(dini_Isset(fajl, "PainPerk")) PlayerInfo[playerid][pPainPerk] = dini_Int(fajl, "PainPerk");
	if(dini_Isset(fajl, "TraderPerk")) PlayerInfo[playerid][pTraderPerk] = dini_Int(fajl, "TraderPerk");
	if(dini_Isset(fajl, "Tutorial")) PlayerInfo[playerid][pTut] = dini_Int(fajl, "Tutorial");
	if(dini_Isset(fajl, "Mission")) PlayerInfo[playerid][pMissionNr] = dini_Int(fajl, "Mission");
	if(dini_Isset(fajl, "Warnings")) PlayerInfo[playerid][pWarns] = dini_Int(fajl, "Warnings");
	if(dini_Isset(fajl, "KWarnings")) PlayerInfo[playerid][pKWarns] = dini_Int(fajl, "KWarnings");
	if(dini_Isset(fajl, "Fuel")) PlayerInfo[playerid][pFuel] = dini_Int(fajl, "Fuel");
	if(dini_Isset(fajl, "Married")) PlayerInfo[playerid][pMarried] = dini_Int(fajl, "Married");
	//if(dini_Isset(fajl, "MarriedTo")) strmid(PlayerInfo[playerid][pMarriedTo], val, 0, strlen(val)-1, 255); }
	if(dini_Isset(fajl, "MarriedTo")) PlayerInfo[playerid][pMarriedTo] = dini_Get(fajl, "MarriedTo");
	if(dini_Isset(fajl, "Lokator")) PlayerInfo[playerid][pLokator] = dini_Int(fajl, "Lokator");
/ *	if(dini_Isset(fajl, "Nyomkovetes")) PlayerInfo[playerid][pNyomkovetes] = dini_Int(fajl, "Nyomkovetes");
	if(dini_Isset(fajl, "Nyomkoveto")) PlayerInfo[playerid][pNyomkoveto] = dini_Int(fajl, "Nyomkoveto");* /
	if(dini_Isset(fajl, "Muanyag")) PlayerInfo[playerid][pMuanyag] = dini_Int(fajl, "Muanyag");
	if(dini_Isset(fajl, "Cserje")) PlayerInfo[playerid][pCserje] = dini_Int(fajl, "Cserje");
	if(dini_Isset(fajl, "Mak")) PlayerInfo[playerid][pMak] = dini_Int(fajl, "Mak");
	if(dini_Isset(fajl, "Cannabis")) PlayerInfo[playerid][pCannabis] = dini_Int(fajl, "Cannabis");
	if(dini_Isset(fajl, "Kaja")) PlayerInfo[playerid][pKaja] = dini_Int(fajl, "Kaja");
	if(dini_Isset(fajl, "Drogido")) PlayerInfo[playerid][pDrogido] = dini_Int(fajl, "Drogido");
	if(dini_Isset(fajl, "AS")) PlayerInfo[playerid][pAS] = dini_Int(fajl, "AS");
	if(dini_Isset(fajl, "CPosX")) PlayerInfo[playerid][pCPosX] = dini_Float(fajl, "CPosX");
	if(dini_Isset(fajl, "CPosY")) PlayerInfo[playerid][pCPosY] = dini_Float(fajl, "CPosY");
	if(dini_Isset(fajl, "CPosZ")) PlayerInfo[playerid][pCPosZ] = dini_Float(fajl, "CPosZ");
	if(dini_Isset(fajl, "CInt")) PlayerInfo[playerid][pCInt] = dini_Int(fajl, "CInt");
	if(dini_Isset(fajl, "Crash")) PlayerInfo[playerid][pCrash] = dini_Int(fajl, "Crash");
	if(dini_Isset(fajl, "Gun0")) PlayerInfo[playerid][pGun0] = dini_Int(fajl, "Gun0");
	if(dini_Isset(fajl, "Gun1")) PlayerInfo[playerid][pGun1] = dini_Int(fajl, "Gun1");
	if(dini_Isset(fajl, "Gun2")) PlayerInfo[playerid][pGun2] = dini_Int(fajl, "Gun2");
	if(dini_Isset(fajl, "Gun3")) PlayerInfo[playerid][pGun3] = dini_Int(fajl, "Gun3");
	if(dini_Isset(fajl, "Gun4")) PlayerInfo[playerid][pGun4] = dini_Int(fajl, "Gun4");
	if(dini_Isset(fajl, "Gun5")) PlayerInfo[playerid][pGun5] = dini_Int(fajl, "Gun5");
	if(dini_Isset(fajl, "Gun6")) PlayerInfo[playerid][pGun6] = dini_Int(fajl, "Gun6");
	if(dini_Isset(fajl, "Gun7")) PlayerInfo[playerid][pGun7] = dini_Int(fajl, "Gun7");
	if(dini_Isset(fajl, "Gun8")) PlayerInfo[playerid][pGun8] = dini_Int(fajl, "Gun8");
	if(dini_Isset(fajl, "Gun9")) PlayerInfo[playerid][pGun9] = dini_Int(fajl, "Gun9");
	if(dini_Isset(fajl, "Gun10")) PlayerInfo[playerid][pGun10] = dini_Int(fajl, "Gun10");
	if(dini_Isset(fajl, "Gun11")) PlayerInfo[playerid][pGun11] = dini_Int(fajl, "Gun11");
	if(dini_Isset(fajl, "Ammo0")) PlayerInfo[playerid][pAmmo0] = dini_Int(fajl, "Ammo0");
	if(dini_Isset(fajl, "Ammo1")) PlayerInfo[playerid][pAmmo1] = dini_Int(fajl, "Ammo1");
	if(dini_Isset(fajl, "Ammo2")) PlayerInfo[playerid][pAmmo2] = dini_Int(fajl, "Ammo2");
	if(dini_Isset(fajl, "Ammo3")) PlayerInfo[playerid][pAmmo3] = dini_Int(fajl, "Ammo3");
	if(dini_Isset(fajl, "Ammo4")) PlayerInfo[playerid][pAmmo4] = dini_Int(fajl, "Ammo4");
	if(dini_Isset(fajl, "Ammo5")) PlayerInfo[playerid][pAmmo5] = dini_Int(fajl, "Ammo5");
	if(dini_Isset(fajl, "Ammo6")) PlayerInfo[playerid][pAmmo6] = dini_Int(fajl, "Ammo6");
	if(dini_Isset(fajl, "Ammo7")) PlayerInfo[playerid][pAmmo7] = dini_Int(fajl, "Ammo7");
	if(dini_Isset(fajl, "Ammo8")) PlayerInfo[playerid][pAmmo8] = dini_Int(fajl, "Ammo8");
	if(dini_Isset(fajl, "Ammo9")) PlayerInfo[playerid][pAmmo9] = dini_Int(fajl, "Ammo9");
	if(dini_Isset(fajl, "Ammo10")) PlayerInfo[playerid][pAmmo10] = dini_Int(fajl, "Ammo10");
	if(dini_Isset(fajl, "Ammo11")) PlayerInfo[playerid][pAmmo11] = dini_Int(fajl, "Ammo11");
	if(dini_Isset(fajl, "Celet")) PlayerInfo[playerid][pCelet] = dini_Float(fajl, "Celet");
	if(dini_Isset(fajl, "Cpajzs")) PlayerInfo[playerid][pCpajzs] = dini_Float(fajl, "Cpajzs");
	if(dini_Isset(fajl, "Kocsikulcs")) PlayerInfo[playerid][pPcarkey] = dini_Int(fajl, "Kocsikulcs");
	if(dini_Isset(fajl, "Cigihasználat")) PlayerInfo[playerid][pCigiUsed] = dini_Int(fajl, "Cigihasználat");
	if(dini_Isset(fajl, "Cigifuggoseg")) PlayerInfo[playerid][pCigiFuggoseg] = dini_Int(fajl, "CigiFuggoseg");
	if(dini_Isset(fajl, "Cigi")) PlayerInfo[playerid][pCigi] = dini_Int(fajl, "Cigi");
	if(dini_Isset(fajl, "Nikotin")) PlayerInfo[playerid][pNikotin] = dini_Int(fajl, "Nikotin");
	if(dini_Isset(fajl, "Gyujto")) PlayerInfo[playerid][pGyujto] = dini_Int(fajl, "Gyujto");
	if(dini_Isset(fajl, "Pia")) PlayerInfo[playerid][pPia] = dini_Int(fajl, "Pia");
	if(dini_Isset(fajl, "Swattag")) PlayerInfo[playerid][pSwattag] = dini_Int(fajl, "Swattag");
	if(dini_Isset(fajl, "SwatRang")) PlayerInfo[playerid][pSwatRang] = dini_Int(fajl, "SwatRang");
	if(dini_Isset(fajl, "Kituntetes")) PlayerInfo[playerid][pKituntetes] = dini_Int(fajl, "Kituntetes");
	if(dini_Isset(fajl, "Szallitott")) PlayerInfo[playerid][pSzallitott] = dini_Int(fajl, "Szallitott");
	if(dini_Isset(fajl, "Spawnchange")) PlayerInfo[playerid][pSpawnchange] = dini_Int(fajl, "Spawnchange");

	if(PlayerInfo[playerid][pPcarkey] > (MAXVSKOCSI+1))
		PlayerInfo[playerid][pPcarkey] = NINCS;
	if(PlayerInfo[playerid][pPhousekey] > (MAXHAZ+1))
		PlayerInfo[playerid][pPhousekey] = NINCS;

	SetTimerEx("AdatMentesSQL", 1000, false, "d", playerid);

	return 1;
}*/

public OnPlayerLogin(playerid)
{
	new tmp2[256];

	CorrectPlayerDatas(playerid);

/*		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "SZERVER: Nem ez a jelszavad(4x próbálkozhatsz).");
	        gPlayerLogTries[playerid] += 1;
	        if(gPlayerLogTries[playerid] == 4) { Kick(playerid); }
	        return 1;
		}*/
	if(PlayerInfo[playerid][pCigiFuggoseg] == 1)
	{
	    SetTimerEx("fuggoseg", 1800, false, "ii", playerid);
	}
	
	if(PlayerInfo[playerid][pKotszer] > MAXKOTSZER)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Nálad %d kötszer volt, a megengedett %d, kötszereid száma átírva.", PlayerInfo[playerid][pKotszer], MAXKOTSZER);
		PlayerInfo[playerid][pKotszer] = MAXKOTSZER;
	}
	if(PlayerInfo[playerid][pAdoKitoltve] == 0)
	{
		Msg(playerid, "Figyelmeztetés: Nem adtad be az adóbevallásod!(/adó)");
	}

	if(PlayerInfo[playerid][pLevel] == -999) //autoban
	{
		Ban(playerid);
	}

	printf("%s belepett\n", PlayerName(playerid));
	
	new bekistring[128], ip[20];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(bekistring, sizeof(bekistring), "[IP:%s, ID: %d]%s Belépett", ip, playerid, PlayerName(playerid));
	BeKilepes(bekistring);

	if(!MoneyTxtCreated[playerid])
	{
		MoneyTxtCreated[playerid] = 1;
		MoneyTxt[playerid] = TextDrawCreate(498.000000,80.000000,"00000000Ft");
		TextDrawAlignment(MoneyTxt[playerid], 0);
		TextDrawBackgroundColor(MoneyTxt[playerid], COLOR_LIGHTBLUE);
		TextDrawFont(MoneyTxt[playerid], 0);
		TextDrawLetterSize(MoneyTxt[playerid], 0.65, 2.9);
		TextDrawColor(MoneyTxt[playerid], COLOR_GreenMoney);
		TextDrawSetOutline(MoneyTxt[playerid], 1);
		TextDrawSetProportional(MoneyTxt[playerid], 1);
		TextDrawUseBox(MoneyTxt[playerid], 1);
		TextDrawBoxColor(MoneyTxt[playerid], 0x000000FF);
	}
	TextDrawShowForPlayer(playerid, MoneyTxt[playerid]);
	CurCol[playerid] = 1;
	Conn[playerid] = 1;

	ShowTextDraw(playerid, TD_Info);
	ShowTextDraw(playerid, TD_Info2);

	gPlayerLogged[playerid] = 1;
	SpawnPlayer(playerid);

	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);

	format(tmp2, sizeof(tmp2), "~w~Udv~n~~y~%s", PlayerName(playerid));
	GameTextForPlayer(playerid, tmp2, 5000, 1);
	SendClientMessage(playerid, COLOR_YELLOW, motd);
	if(PlayerInfo[playerid][pFMember] < 255)
	{
	    format(tmp2, sizeof(tmp2), "Frakció mai üzenete: %s.", FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMOTD]);
	    SendClientMessage(playerid, COLOR_YELLOW, tmp2);
	}

	if(PlayerInfo[playerid][pCrash] == 1)
		SendClientMessage(playerid, COLOR_LIGHTRED, "Az utolsó kilépésedkor kresseltél. Ha szeretnél Crashtelézni: /crashtele (alias /ct)");

	if(!strlen(PlayerInfo[playerid][pKey]))
		SendClientMessage(playerid, COLOR_WHITE, "Figyelmeztetés: Nincs jelszód beállítva. Válts jelszót, vagy bárki beléphet hozzád >> /jelszovaltas");
	
	if(IsAS(playerid))
	{
		Channel(playerid, 0, true);
		Msg(playerid, "Mivel Adminsegéd vagy, ezért automatikusan csatlakoztál a 0ás channelre");
	}
	if(Admin(playerid, 1337))
	{
		Channel(playerid, 2, true);
		Msg(playerid, "Automatikusan be lettél rakva a fõadmin csennelre");
	}
	else if(Admin(playerid, 1))
	{
		Channel(playerid, 1, true);
		Msg(playerid, "Automatikusan be lettél rakva az admin csennelre");
	}
	
	if(PlayerInfo[playerid][pTut] == 0)
		ABroadCastFormat(COLOR_LIGHTRED, 0, "<< Új játékos a szerveren! Név: [%d]%s >>", playerid, PlayerName(playerid));

	if(!VanAccountja[playerid])
	{
		ShowPlayerDialog(playerid, 5555, DIALOG_STYLE_MSGBOX, "Web-Account", "Üdv!\n\nA karakteredhez még nincs társítva Account.\n\
		Az Account arra jó, hogy a weben (is) tudd kezelni a karaktere(i)det:\n-Jelszó váltás\n-Frakció adminisztrálás\n-Karaktered adatainak a megtekintése\n-Mások karaktereinek az adatai\n-stb...\n\n\
		Ezért ajánljuk, hogy hozz létre egy felhasználót, és társítsd a karaktered hozzá\n\nBõvebb információ: www.usercp.[Gates].net", "OK", "");
	}

	DateProp(playerid, DP_Haz);
	DateProp(playerid, DP_Kocsi);
	
	new query[50]; format(query, 64, "UPDATE %s SET Online='1' WHERE id='%d'", SQL_DB_Player, PlayerSQLID(playerid)); mysql_query(query);

	if(!IsPlayerNPC(playerid))
		Iter_Add(Jatekosok, playerid);

	if(PlayerInfo[playerid][pAdmin] > 5 && PlayerInfo[playerid][pAdmin] < 1337)
		PlayerInfo[playerid][pAdmin] = 5;
	else if(PlayerInfo[playerid][pAdmin] < 0)
		PlayerInfo[playerid][pAdmin] = 0;
	else if(PlayerInfo[playerid][pAdmin] > 1338 && !IsScripter(playerid))
		PlayerInfo[playerid][pAdmin] = 1338;
	else if(PlayerInfo[playerid][pAdmin] > 1338 && IsScripter(playerid))
		PlayerInfo[playerid][pAdmin] = 5555;

	return 1;
}

stock ini_GetKey( line[] )
{
	new keyRes[256];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

public OnIntsUpdate()
{
	new idx = ALAPINTERIORSZAM;
	new File: file2;
	new ennyi = IntekSzama();
	while (idx <= ennyi)
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s,%d,%f,%f,%f\n",
        IntInfo[idx][iType],
		IntInfo[idx][iNumber],
		IntInfo[idx][iExitX],
		IntInfo[idx][iExitY],
		IntInfo[idx][iExitZ]);
		if(idx == ALAPINTERIORSZAM)
		{
			file2 = fopen("Config/interiors.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/interiors.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public OnIgenyUpdate()
{
	new idx;
	new File: file2;
	//new hazak = 0, szamlalo;

/*	for(szamlalo = idx; szamlalo < MAXHAZ; szamlalo++)
	{
	    if(HouseInfo[szamlalo][Van] == 1)
	        hazak++;
	}*/

	while (idx < MAXIGENYLES)
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s,%d,%f,%f,%f\n",
		HazIgenylesek[idx][Nev],
		HazIgenylesek[idx][Belso],
		HazIgenylesek[idx][iX],
		HazIgenylesek[idx][iY],
		HazIgenylesek[idx][iZ]);
		if(idx == 0)
		{
			file2 = fopen("Config/hazigenylesek.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/hazigenylesek.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public OnAjtoUpdate()
{
	new idx;
	new File: file2;

	while (idx < MAXAJTO)
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s,%s,%f,%f,%f,%d,%d,%f,%f,%f,%d,%d,%d\n",
		Ajtok[idx][Csak],
		Ajtok[idx][Nev],
		Ajtok[idx][BeX],
		Ajtok[idx][BeY],
		Ajtok[idx][BeZ],
		Ajtok[idx][BeInt],
		Ajtok[idx][BeVW],
		Ajtok[idx][KiX],
		Ajtok[idx][KiY],
		Ajtok[idx][KiZ],
		Ajtok[idx][KiInt],
		Ajtok[idx][KiVW],
		Ajtok[idx][Zarva]);
		if(idx == 0)
		{
			file2 = fopen("Config/ajtok.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/ajtok.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public SaveRaktar()
{
	new x, szoveg[1024];
	new File: file2 = fopen("Config/raktar.cfg", io_write);
	format(szoveg, 1024, "%d", FrakcioInfo[LMUNKA_CAMORRA][fFegyver][1]);
	for(x = 2; x < 51; x++)
	{
		format(szoveg, 1024, "%s,%d", szoveg, FrakcioInfo[LMUNKA_CAMORRA][fFegyver][x]);
	}
	for(x = 1; x < 51; x++)
	{
		format(szoveg, 1024, "%s,%d", szoveg, FrakcioInfo[LMUNKA_YAKUZA][fFegyver][x]);
	}
	for(x = 1; x < 51; x++)
	{
		format(szoveg, 1024, "%s,%d", szoveg, FrakcioInfo[LMUNKA_COLUMBIA][fFegyver][x]);
	}
	fwrite(file2, szoveg);
	fclose(file2);
	return 1;
}


public SaveFrakcio()
{
	new idx, x;
	new File: file2;
	new coordsstring[256], string[128];
	while (idx < MAX_FRAKCIO)
	{
		format(string, sizeof(string), "%d", FrakcioInfo[idx][fFizetes][0]);
		for(x = 1; x < 13; x++)
		{
			format(string, sizeof(string), "%s,%d", FrakcioInfo[idx][fFizetes][x]);
		}
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%d,%d,%d,%d,%d,%d,%d,%d,%f,%d, %s, %d, %d, %d, %d, %d,%s\n",
		FrakcioInfo[idx][fPosX],
		FrakcioInfo[idx][fPosY],
		FrakcioInfo[idx][fPosZ],
		FrakcioInfo[idx][fPenz],
		FrakcioInfo[idx][fMati],
		FrakcioInfo[idx][fHeroin],
		FrakcioInfo[idx][fKokain],
		FrakcioInfo[idx][fMarihuana],
		FrakcioInfo[idx][fKaja],
		FrakcioInfo[idx][fMinrang],
		FrakcioInfo[idx][fObject],
		FrakcioInfo[idx][fPosA],
		FrakcioInfo[idx][fObjectID],
		FrakcioInfo[idx][fJelszo],
		FrakcioInfo[idx][fDeagle],
		FrakcioInfo[idx][fSilenced],
		FrakcioInfo[idx][fMp5],
		FrakcioInfo[idx][fM4],
		FrakcioInfo[idx][fShotgun],
		FrakcioInfo[idx][fUtolsoTamadas],
		string);
		if(idx == 0)
			file2 = fopen("Config/frakcio.cfg", io_write);
		else
			file2 = fopen("Config/frakcio.cfg", io_append);

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public SaveCeg()
{
	new idx;
	new File: file2;
	new coordsstring[256];
	
	while (idx < MAX_CEG)
	{
		format(coordsstring, sizeof(coordsstring), "%s,%s,%d,%d,%d,%d,%d\n\n",
		Ceg[idx][cNev],
		Ceg[idx][cTulaj],
		Ceg[idx][cSzint],
		Ceg[idx][cSzef],
		Ceg[idx][cPosX],
		Ceg[idx][cPosY],
		Ceg[idx][cPosZ]);
		if(idx == 0)
		{
			file2 = fopen("Config/ceg.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/ceg.cfg", io_append);
		}
		
		DestroyDynamicMapIcon(cegpickup[idx]);
		Delete3DTextLabel(cegtextek[idx]);
		new cegiras[512];
		format(cegiras, sizeof(cegiras), "%s\nTulajdonos: %s\nFejlesztségi szintje: %d", Ceg[idx][cNev], Ceg[idx][cTulaj], Ceg[idx][cSzint]);
		cegtextek[idx] = Create3DTextLabel(cegiras, 0x22AAFFFF, Ceg[idx][cPosX], Ceg[idx][cPosY], Ceg[idx][cPosZ]+0.5, 25.0, 0, 0);
		cegpickup[idx] = CreateDynamicMapIcon(Ceg[idx][cPosX], Ceg[idx][cPosY], Ceg[idx][cPosZ], 41, 0, NINCS, NINCS, NINCS, 300.0);

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public SaveATM()
{
	new idx;
	new File: file2;
	new coordsstring[256];
	
	while (idx < MAX_ATM)
	{
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,,%f,%d\n",
		ATM[idx][aPosX],
		ATM[idx][aPosY],
		ATM[idx][aPosZ],
		ATM[idx][aPosA],
		ATM[idx][aObjectID]);
		if(idx == 0)
		{
			file2 = fopen("Config/atm.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/atm.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

/*public OnPropUpdate()
{
	if(noooc != 50)
		return 1;
	new idx;
	new File: file2;
	while (idx < sizeof(BizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		BizzInfo[idx][bOwned],
		BizzInfo[idx][bOwner],
		BizzInfo[idx][bMessage],
		BizzInfo[idx][bExtortion],
		BizzInfo[idx][bEntranceX],
		BizzInfo[idx][bEntranceY],
		BizzInfo[idx][bEntranceZ],
		BizzInfo[idx][bExitX],
		BizzInfo[idx][bExitY],
		BizzInfo[idx][bExitZ],
		BizzInfo[idx][bLevelNeeded],
		BizzInfo[idx][bBuyPrice],
		BizzInfo[idx][bEntranceCost],
		BizzInfo[idx][bTill],
		BizzInfo[idx][bLocked],
		BizzInfo[idx][bInterior],
		BizzInfo[idx][bProducts],
		BizzInfo[idx][bMaxProducts],
		BizzInfo[idx][bPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("Config/bizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/bizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(BizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		BizzInfo[idx][bOwned],
		BizzInfo[idx][bOwner],
		BizzInfo[idx][bMessage],
		BizzInfo[idx][bExtortion],
		BizzInfo[idx][bEntranceX],
		BizzInfo[idx][bEntranceY],
		BizzInfo[idx][bEntranceZ],
		BizzInfo[idx][bLevelNeeded],
		BizzInfo[idx][bBuyPrice],
		BizzInfo[idx][bEntranceCost],
		BizzInfo[idx][bTill],
		BizzInfo[idx][bLocked],
		BizzInfo[idx][bInterior],
		BizzInfo[idx][bProducts],
		BizzInfo[idx][bMaxProducts],
		BizzInfo[idx][bPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("Config/sbizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/sbizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
 	while (idx < sizeof(CarInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d,%f,%f,%f,%f,%d,%d,%d,%s,%d,%d\n",
		CarInfo[idx][cModel],
		CarInfo[idx][cLocationx],
		CarInfo[idx][cLocationy],
		CarInfo[idx][cLocationz],
		CarInfo[idx][cAngle],
		CarInfo[idx][cColorOne],
		CarInfo[idx][cColorTwo],
		CarInfo[idx][cOwned],
		CarInfo[idx][cOwner],
		CarInfo[idx][cValue],
		CarInfo[idx][cLock]);
		if(idx == 0)
		{
			file2 = fopen("Config/kocsik.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/kocsik.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}*/

public BroadCast(color,const string[])
{
	SendClientMessageToAll(color, string);
	return 1;
}

public ABroadCast(color,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && Logged(i))
		{
			if(level == 0)
			{
				if(PlayerInfo[i][pAdmin] >= 1 || IsAS(i))
				{
					SendClientMessage(i, color, string);
				}
			}
			else
			{
				if(PlayerInfo[i][pAdmin] >= level)
				{
				    if(gInfo[i] == 0)
					{
						SendClientMessage(i, color, string);
					}
				}
			}
		}
	}
	printf("%s\n", string);
	return 1;
}

public OOCOff(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gOoc[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public OOCNews(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gNews[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendTeamMessage(team, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(LMT(i, team) || RadioHallgatas[i] == 0)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendRadioMessage(member, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member || RadioHallgatas[i] == member)
		    {
				if(gFam[i] != 1)
					SendClientMessage(i, color, string);
			}
		}
	}
}

public SendSwatRadioMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pSwattag] == 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendPowerRadioMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pPower] > 0)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendHitmanRadioMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(IsHitman(i))
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendKamionRadioMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(AMT(i, MUNKA_KAMIONOS))
		    {
		        new tmpcar = GetPlayerVehicleID(i);
		        if(IsATruck(tmpcar))
		        {
				SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public SendJobMessage(job, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pJob1] == job || PlayerInfo[i][pJob2] == job)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendNewFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFMember] == family)
		    {
                if(!gFam[i])
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public SendFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family || RadioHallgatas[i] == family)
		    {
                if(!gFam[i])
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public SendIRCMessage(channel, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayersChannel[i] == channel)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendCopMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(IsACop(i))
		    {
				SendClientMessage(i, color, string);
				RingTone[i] = 20;
			}
		}
	}
}

public SendAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

stock SendFAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 1337)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

stock SendSAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(IsScripter(i))
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

public StopMusic()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
		}
	}
}

public PlayerFixRadio(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    SetTimer("PlayerFixRadio2", 1000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		Fixr[playerid] = 1;
	}
}

public PlayerFixRadio2()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(Fixr[i])
			{
				PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
				Fixr[i] = 0;
			}
		}
	}
}

GetVehicleModelIDFromName(vname[])
{
	for(new i = 0; i < 211; i++)
	{
		if(strcmp(vehName[i], vname, true) == 0)
			return i + MIN_VEHI_ID;
	}
	return -1;
}

dcmd_nyit(playerid,params[])
{
#pragma unused params

	//Városháza 3. emelet 
	if(PlayerToPoint(10, playerid, -693.38104248047, 966.09802246094, 14.001571655273))
	{
		if(!IsAdmin(playerid) && !egyezik(PlayerName(playerid), "Malor_Cortez") && !egyezik(PlayerName(playerid), "Tommy_Cortez")) return 1;
		MoveDynamicObject(DeanObject[1], -693.38104248047, 966.09802246094, 7.9015865325928, 5);
	}
	else if(PlayerToPoint(10, playerid, -1530.2779541016, 482.50927734375, 7.895302772522))
	{
		if(IsAdmin(playerid) || LMT(playerid, LMUNKA_COLUMBIA))
			MoveDynamicObject(Columbiakapu[0], -1530.2779541016, 482.50927734375, 2.895302772522, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Columbiai maffia tagja!");
	}
	else if(PlayerToPoint(10, playerid, -1333.9532470703, 487.49685668945, 10.850687980652))
	{
		if(IsAdmin(playerid) || LMT(playerid, LMUNKA_COLUMBIA))
			MoveDynamicObject(Columbiakapu[1], -1333.9532470703, 487.49685668945, 5.850687980652, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Columbiai maffia tagja!");
	}
	else if(PlayerToPoint(10, playerid, -1422.2196044922, 494.63500976563, 4.8124537467957))
	{
		if(IsAdmin(playerid) || LMT(playerid, LMUNKA_COLUMBIA))
			MoveDynamicObject(Columbiakapu[2], -1422.2196044922, 494.63500976563, -1.8124537467957, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Columbiai maffia tagja!");
	}
	else if(PlayerToPoint(5, playerid, -1348.8055419922, 500.11483764648, 18.378604888916))
	{
		if(IsAdmin(playerid) || LMT(playerid, LMUNKA_COLUMBIA))
		{
			MoveDynamicObject(Columbiakapu[3], -1348.8055419922, 500.11483764648, 18.378604888916, 3);
			SetDynamicObjectRot(Columbiakapu[3], 0, 0, 90);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Columbiai maffia tagja!");
	}
	else if(PlayerToPoint(10, playerid, -2212.0959472656, 580.44555664063, 35.4140625))
	{
		if(LMT(playerid, LMUNKA_YAKUZA) || IsAdmin(playerid))
		{
			MoveDynamicObject(YakuzaKapu, -2212.0959472656, 580.44555664063, 28.4140625, 3);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Yakuza tagja!");
	}
	else if(PlayerToPoint(10, playerid, -2241.6164550781, 643.78747558594, 50.198616027832))
	{
		if(LMT(playerid, LMUNKA_YAKUZA) || IsAdmin(playerid))
		{
			MoveDynamicObject(YakuzaKapu2, -2241.6164550781, 643.78747558594, 40.198616027832, 3);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Yakuza tagja!");
	}
	else if(PlayerToPoint(10, playerid, 141.2569732666, 156.84545898438, 486.60430908203))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[0], 141.2569732666, 156.84545898438, 480.30430908203, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	else if(PlayerToPoint(10, playerid, 149.73329162598, 148.13616943359, 511.96417236328))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[1], 149.73329162598, 148.13616943359, 505.66417236328, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	
	else if(PlayerToPoint(10, playerid, -2546.2900390625, 30.683788299561, 17.626516342163))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[2], -2546.2900390625, 30.683788299561, 11.326516342163, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	
	else if(PlayerToPoint(10, playerid, -2539.265625, 52.763828277588, 7.5905790328979))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[3], -2539.265625, 52.763828277588, 1.5905790328979, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	
	else if(PlayerToPoint(10, playerid, -2594.1003417969, -40.896503448486, 2.7281250953674))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[4], -2594.1003417969, -40.896503448486, -4.4281250953674, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	
	else if(PlayerToPoint(10, playerid, -2594.142578125, 9.3017578125, 2.7192001342773))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[5], -2594.142578125, 9.3017578125, -4.4192001342773, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	else if(PlayerToPoint(5, playerid, 1768.6180,-1503.8698,-80.7624))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[6], 1779.1275634766, -1503.2954101563, -81.762428283691, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	else if(PlayerToPoint(10, playerid, 361.93688964844, 158.76313781738, 1026.2210693359))
	{
		if(LMT(playerid, LMUNKA_ONKORMANYZAT) || IsAdmin(playerid))
		{
			MoveDynamicObject(vhkapu1, 363.53530883789, 158.75035095215, 1040.2210693359, 2);
			MoveDynamicObject(vhkapu2, 361.93688964844, 158.76313781738, 1040.2210693359, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az önkormányzat tagja!");
	}
	else if(PlayerToPoint(10, playerid, 310.51953125, 1786.7412109375, 26.949998855591))
	{
		if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
		{
			MoveDynamicObject(ujkatonakapu1, 310.51953125, 1786.7412109375, 31.324951171875, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy katona!");
	}
	else if(PlayerToPoint(10, playerid, 315.8291015625, 1824.1689453125, 25.987161636353))
	{
		if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
		{
			SetDynamicObjectRot(ujkatonakapu2,  0, 331.25012207031, 358.99987792969);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy katona!");
	}
	else if(PlayerToPoint(10, playerid, 226.51953125, 1872.5595703125, 16.329160690308))
	{
		if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
		{
			MoveDynamicObject(ujkatonakapu3,  226.51953125, 1872.5595703125, 9.75, 2); 
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy katona!");
	}
	else if(PlayerToPoint(10, playerid, 1012.3286132813, -1544.8048095703, 14.925149917603))
	{
		if(LMT(playerid, LMUNKA_VAGOS) || IsAdmin(playerid))
		{
			MoveDynamicObject(VagosKapu1,  1012.328125, -1544.8046875, 9.6252307891846, 2); 
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a banda tagja!");
	}
	else if(PlayerToPoint(10, playerid, 958.87548828125, -1542.7796630859, 16.4130420684813))
	{
		if(LMT(playerid, LMUNKA_VAGOS) || IsAdmin(playerid))
		{
			MoveDynamicObject(VagosKapu2,  958.82330322266, -1542.0560302734, 16.413042068481, 2); 
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a banda tagja!");
	}
	else if(PlayerToPoint(10, playerid, 213.46047973633, 1875.8570556641, 13.81852722168))
	{
		if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
		{
			MoveDynamicObject(ujkatonakapu4, 213.46047973633, 1875.8570556641, 9.4685935974121, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy katona!");
	}

	else if(PlayerToPoint(3.0,playerid,2222.7507324219, -1651.8168945313, -40.909103393555)) // GSF
	{
		if(LMT(playerid, LMUNKA_GSF) || IsAdmin(playerid))
			MoveDynamicObject(GSFajto,2222.7414550781, -1651.7967529297, -37.659103393555,3.0); 
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a GSF tagja!");
	}
	else if(PlayerToPoint(3.0,playerid, 2220.7973632813, -1660.8442382813, -42.786094665527)) // GSF
	{
		if(LMT(playerid, LMUNKA_GSF) || IsAdmin(playerid))
			MoveDynamicObject(GSFajto2,2221.3544921875, -1660.6931152344, -34.424270629883,3.0);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a GSF tagja!");
	}
	else if(PlayerToPoint(10, playerid, 1587.998168, -1638.322509, 13.379069))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDKapu, 1598.102172, -1638.277832, 14.609522, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az LSPD/FBI tagja!");
	}
	else if(PlayerToPoint(7, playerid, -1917.303833, 301.403687, 40.874542))
	{
		if(AMT(playerid, MUNKA_SZERELO) || IsAdmin(playerid))
			MoveDynamicObject(AutoSzereloKapu, -1917.303833, 301.403687, 36.874542, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy autószerelõ!");
	}
	else if(PlayerToPoint(15, playerid, 1041.4748535156, -1459.7044677734, 15))
	{
	    if(LMT(playerid, LMUNKA_OKTATO) || IsAdmin(playerid))
	    	MoveDynamicObject(OktatoKapu, 1041.4748535156, -1459.7044677734, 8, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az Oktatók tagja!");
	}
	/*else if(PlayerToPoint(15, playerid, -2051.4443359375, -79.9228515625, 34.5))
	{
	    if(LMT(playerid, LMUNKA_OKTATO) || IsAdmin(playerid))
	    	MoveDynamicObject(UjOktatoKapu, -2042.9118652344, -79.889617919922, 34.5, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az Oktatók tagja!");
	}*/
	else if(PlayerToPoint(10, playerid, 1268.9294433594, -1844.1071777344, 15.120470046997))
	{
	    if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
	    	MoveDynamicObject(Fbiparkolo1, 1268.9294433594, -1844.1071777344, 9.120470046997, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ezt a kaput.");
	}
	else if(PlayerToPoint(10, playerid, 1214.0107421875, -1844.5538330078, 15.120470046997))
	{
	    if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
	    	MoveDynamicObject(Fbiparkolo2, 1214.0107421875, -1844.5538330078, 9.120470046997, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ezt a kaput.");
	}
	
	else if(PlayerToPoint(10, playerid, 321.66430664063, -1188.0876464844, 76.294494628906))
	{
		if(egyezik(PlayerName(playerid), "Sweet_Vincenzo") || egyezik(PlayerName(playerid), "Ron_Vincenzo") || IsAdmin(playerid))
		{
			MoveDynamicObject(Ronkapu,  321.66430664063, -1188.0876464844, 70.294494628906, 3); 
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Ron/Sweet!");
	}
	/*else if(PlayerToPoint(10, playerid,  322.01321411133, -1187.7904052734, 77.659317016602))
	{
	    if(IsAdmin(playerid))
	    	MoveDynamicObject(LeonKapu,  322.01321411133, -1187.7904052734, 53.659317016602, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Csak Leonnak és társaságának!");
	}
	
	else if(PlayerToPoint(10, playerid,  1688.2650146484, -1450.921875, 16.06679725647))
	{
	    if(IsAdmin(playerid))
	    	MoveDynamicObject(LeonKapu2,  1688.2646484375, -1450.921875, 5.9667987823486, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Höhö..Te nem vagy olyan Powa mint Leon(vagy Csárli Kórtez)!");
	}*/
	
	else if(PlayerToPoint(10, playerid, 1811.6462402344, -1890.2261962891, 15.180500030518))
	{
	    if(LMT(playerid, LMUNKA_TAXI) || IsAdmin(playerid))
	    	MoveDynamicObject(LSTaxiKapu, 1811.6462402344, -1890.2261962891, 9.180500030518, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a LS Taxi tagja!");
	}

	else if(PlayerToPoint(15, playerid, 777.7919921875, -1384.720703125, 13.066568374634))
	{
	    if(LMT(playerid, LMUNKA_VPOP) || IsAdmin(playerid))
	    	MoveDynamicObject(VPOPkapu1, 777.7919921875, -1384.720703125, 7.066568374634, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a VPOP tagja!");
	}

	else if(PlayerToPoint(15, playerid, 777.6494140625, -1330.0947265625, 12.966569900513))
	{
	    if(LMT(playerid, LMUNKA_VPOP) || IsAdmin(playerid))
	    	MoveDynamicObject(VPOPkapu2, 777.6494140625, -1330.0947265625, 6.966569900513, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a VPOP tagja!");
	}
//határ
	else if(PlayerToPoint(15, playerid, 41.4873046875, -1532.8486328125, 5.3060297966003))
	{
	    if(LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_FBI) || LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
	    	SetDynamicObjectRot(hatar1, 0, 0, 173.04718017578); // 173.04718017578	
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a VPOP tagja!");
	}

	else if(PlayerToPoint(15, playerid, 61.2470703125, -1530.4189453125, 5.0277938842773))
	{
	    if(LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_FBI) || LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
	    	SetDynamicObjectRot(hatar2, 0, 0, 173.04718017578); // 173.04718017578	
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a VPOP tagja!");
	}

	else if(PlayerToPoint(10, playerid, 1539.257934, -1627.996093, 13.382812))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDKapu2, 1539.2, -1618, 15, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az SCPD/FBI tagja!");
	}

	else if(PlayerToPoint(2, playerid, 246.371093, 72.526718, 1003.640625))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDAjto, 252.915, 72.571, 1002.396, 1.5);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az SCPD/FBI tagja!");
	}

	else if(PlayerToPoint(2, playerid, 248.164550, 75.895736, 1003.640625))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDAjto2, 248.136093, 79.469543, 999.508544, 1.5);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az SCPD/FBI tagja!");
	}

	else if(PlayerToPoint(2, playerid, 244.943969, 75.800033, 1003.640625))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDAjto3, 244.844192, 79.469528, 999.737487, 1.5);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az SCPD/FBI tagja!");
	}

	else if(PlayerToPoint(2, playerid, 262.275939, 90.806259, 1001.288269))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDAjto4, 262.344085, 87.105, 1001.04, 1.5);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az SCPD/FBI tagja!");
	}

	else if(PlayerToPoint(10, playerid, 266.3984375, 88.337036132813, 1002.6759033203))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(cella1, 266.3984375, 88.337036132813, 997.6759033203, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az SCPD/FBI tagja!");
	}

	else if(PlayerToPoint(10, playerid, 2266.75, 82.94, 1001.04))
 	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(cella2,  266.3984375, 83.844039916992, 997.6759033203, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az SCPD/FBI tagja!");
	}

	else if(PlayerToPoint(10, playerid, -1627.539185, 688.910339, 15.875875))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(sfpdkapu, -1627.539185, 688.910339, 20.875875, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az SFPD tagja!");
	}


	else if(PlayerToPoint(10, playerid, 1141.0126953125, -1292.4871826172, 15.356519699097))
	{
	    if(LMT(playerid, LMUNKA_MENTO) || IsAdmin(playerid))
	    	MoveDynamicObject(Mentokapu[0], 1141.0126953125, -1292.4871826172, 9, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Mentõs!");
	}
	else if(PlayerToPoint(10, playerid, 1144.2947998047, -1369.1510009766, 15.535444259644))
	{
		if(LMT(playerid, LMUNKA_MENTO) || IsAdmin(playerid))
	    	MoveDynamicObject(Mentokapu[1], 1144.2947998047, -1369.1510009766, 9, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Mentõs!");
	}
	else if(PlayerToPoint(10, playerid, 1063.5241699219, -1202.3879394531, 17.482151031494))
	{
	    if(LMT(playerid, LMUNKA_MENTO) || IsAdmin(playerid))
	    	MoveDynamicObject(Mentokapu[2], 1063.5241699219, -1202.3879394531, 17.482151031494, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Mentõs!");
	}
	else if(PlayerToPoint(10, playerid, 1122.4554443359, -1159.0748291016, 22.828125))
	{
	    if(LMT(playerid, LMUNKA_MENTO) || IsAdmin(playerid))
	    	MoveDynamicObject(Mentokapu[3], 1122.4554443359, -1159.0748291016, 22.828125, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Mentõs!");
	}


	else if(PlayerToPoint(10, playerid, 96.694069, 1920.418091, 17.354036))
	{
		if(IsACop(playerid) || IsAdmin(playerid))
		    MoveDynamicObject(FortKapu, 96.694069, 1920.418091, 13.354036, 2);
		else
		    SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy rendõr.");
	}

//SWAT1
	else if(PlayerToPoint(20, playerid, 2091.6640625, -1863.70703125, 14.546875))
	{
	    if(PlayerInfo[playerid][pSwattag] == 1)
		{
	    	MoveDynamicObject(swatkapu1,2091.7912597656, -1867.4818115234, 0.046875, 3);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a SWAT Egység tagja!");
	}

	else if(PlayerToPoint(10, playerid, 1961.274047, -2189.957031, 13.546875))
	{
	    if(IsAdmin(playerid))
	    	MoveDynamicObject(AirGate, 1950.404785, -2189.781494, 13.546875, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Hiba...");
	}

	else if(PlayerToPoint(10, playerid, 992.660645, -1103.695068, 22.601517))
	{
	    if(IsAdmin(playerid))
	    	MoveDynamicObject(szerelokapu, 992.660645, -1103.695068, 18.601517, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Admin!");
	}

	/*else if(PlayerToPoint(10, playerid, -362.834961, -1473.366821, 27.504303))
	{
	    if(IsHitman(playerid) || IsAdmin(playerid))
		{
	    	MoveDynamicObject(hitmankapu, -362.834961, -1473.366821, 20.504303, 2);
	    	MoveDynamicObject(hitmankapu2, -362.901794, -1467.799927, 20.504303, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ki ezt a kaput!");
	}*/

	
	else if(PlayerToPoint(10, playerid,  1389.2653808594, -1892.9382324219, 22.941055297852))
	{
		if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
		{
			MoveDynamicObject(FbiTitokKapu1, 1407.3345947266, -1892.8150634766, 22.941055297852, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "A-A..");
	}
		
	else if(PlayerToPoint(10, playerid,  1349.7514648438, -1879.2152099609, 8.0681505203247))
	{
		if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
		{
			MoveDynamicObject(FbiTitokKapu2, 1349.7509765625, -1879.21484375, 11.618096351624, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "A-A..");
	}
			
	else if(PlayerToPoint(10, playerid,  1359.1774902344, -1838.5638427734, 9.3379783630371))
	{
		if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
		{
			MoveDynamicObject(FbiTitokKapu3, 1359.1774902344, -1838.5638427734, 13.487915039063, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "A-A..");
	}
			
	/*else if(PlayerToPoint(10, playerid, -404.705658, -1388.603760, 25.391323))
	{
	    if(IsHitman(playerid) || IsAdmin(playerid))
		{
	    	MoveDynamicObject(hitmankapu3, -404.705658, -1388.603760, 19.391323, 2);
	    	MoveDynamicObject(hitmankapu4, -405.440094, -1384.505981, 19.460585, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Valami gond van a kapuval... Nem tudod kinyitni");
	}*/
	else if(PlayerToPoint(10, playerid, 2720.048828, -2405.139893, 14.135628))
	{
		if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
			MoveDynamicObject(katonakapu1, 2720.048828, -2405.139893, 6.135628, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ki ezt a kaput!");
	}

	else if(PlayerToPoint(10, playerid, 2720.123291, -2503.924805, 14.159458))
	{
		if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
			MoveDynamicObject(katonakapu2, 2720.123291, -2503.924805, 6.159458, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ki ezt a kaput!");
	}
	
	/*else if(PlayerToPoint(10, playerid, 2346.744385, -1236.318970, 22.999693))
	{
	    if(LMT(playerid, LMUNKA_BALLAS) || IsAdmin(playerid))
	    	MoveDynamicObject(ballaskapu, 2346.744385, -1236.318970, 17.999693, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Ballas tagja!");
	}
	
	else if(PlayerToPoint(10, playerid, 2360.904053, -1266.957275, 22.823538))
	{
	    if(LMT(playerid, LMUNKA_BALLAS) || IsAdmin(playerid))
	    	MoveDynamicObject(ballaskapu2, 2360.904053, -1266.957275, 17.823538, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Ballas tagja!");
	}
	
	else if(PlayerToPoint(10, playerid, 2313.482422, -1223.061035, 22.963881))
	{
	    if(LMT(playerid, LMUNKA_BALLAS) || IsAdmin(playerid))
	    	MoveDynamicObject(ballaskapu3, 2313.482422, -1223.061035, 17.963881, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Ballas tagja!");
	}*/
	/*else if(PlayerToPoint(10, playerid, 973.650879, -1295.328491, 14.221565))
	{
	    if(LMT(playerid, LMUNKA_AZTEC) || IsAdmin(playerid))
		{
	    	MoveDynamicObject(ms13kapu, 973.650879, -1295.328491, 10.221565, 3);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ki ezt a kaput!");
	}

    else if(PlayerToPoint(10, playerid, 962.422668, -1274.239624, 15.975883))
	{
	    if(LMT(playerid, LMUNKA_AZTEC) || IsAdmin(playerid))
		{
	    	MoveDynamicObject(ms13kapu2, 962.422668, -1274.239624, 11.975883, 3);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ki ezt a kaput!");
	}*/

	else if(PlayerToPoint(10, playerid, -1696.796997, 22.362562, 3.554687))
	{
	    if(AMT(playerid, MUNKA_AUTOKERESKEDO) || IsAdmin(playerid))
		{
	    	MoveDynamicObject(KereskedoKapu, -1690.9190673828, 16.893825531006, 5.3280787467957, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ki ezt a kaput!");
	}

	else if(PlayerToPoint(5, playerid, -2017.732178, -261.280273, 37.093704))
	{
	    if(PlayerInfo[playerid][pPhousekey] == 171)
		{
	    	MoveDynamicObject(KereskedoKapuHQn, -2017.735229, -261.234833, 31.499201, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ki ezt a kaput!");
		
	}
	else if(PlayerToPoint(2, playerid, 228.2798,151.3269,1003.0234))
	{
		Msg(playerid, "Használd a /belépés parancsot!");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "Nem vagy kapu közelében!");

	return 1;
}

dcmd_zar(playerid,params[])
{
#pragma unused params

	//Városháza 3. emelet
	if(PlayerToPoint(10, playerid, -693.38104248047, 966.09802246094, 14.001571655273))
	{
		if(!IsAdmin(playerid) && !egyezik(PlayerName(playerid), "Malor_Cortez") && !egyezik(PlayerName(playerid), "Tommy_Cortez")) return 1;
		MoveDynamicObject(DeanObject[1], -693.38104248047, 966.09802246094, 14.001571655273, 5);
	}
	else if(PlayerToPoint(10, playerid, -1530.2779541016, 482.50927734375, 7.895302772522))
	{
		if(IsAdmin(playerid) || LMT(playerid, LMUNKA_COLUMBIA))
			MoveDynamicObject(Columbiakapu[0], -1530.2779541016, 482.50927734375, 7.895302772522, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Columbiai maffia tagja!");
	}
	else if(PlayerToPoint(10, playerid, -1333.9532470703, 487.49685668945, 10.850687980652))
	{
		if(IsAdmin(playerid) || LMT(playerid, LMUNKA_COLUMBIA))
			MoveDynamicObject(Columbiakapu[1], -1333.9532470703, 487.49685668945, 10.850687980652, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Columbiai maffia tagja!");
	}
	else if(PlayerToPoint(10, playerid, -1422.2196044922, 494.63500976563, 4.8124537467957))
	{
		if(IsAdmin(playerid) || LMT(playerid, LMUNKA_COLUMBIA))
			MoveDynamicObject(Columbiakapu[2], -1422.2196044922, 494.63500976563, 4.8124537467957, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Columbiai maffia tagja!");
	}
	else if(PlayerToPoint(5, playerid, -1348.8055419922, 500.11483764648, 18.378604888916))
	{
		if(IsAdmin(playerid) || LMT(playerid, LMUNKA_COLUMBIA))
		{
			MoveDynamicObject(Columbiakapu[3], -1347.8837890625, 499.3525390625, 18.581729888916, 3);
			SetDynamicObjectRot(Columbiakapu[3], 0, 0, 0);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Columbiai maffia tagja!");
	}
	else if(PlayerToPoint(10, playerid, -2212.0959472656, 580.44555664063, 35.4140625))
	{
		if(LMT(playerid, LMUNKA_YAKUZA) || IsAdmin(playerid))
		{
			MoveDynamicObject(YakuzaKapu, -2212.0959472656, 580.44555664063, 35.4140625, 3);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Yakuza tagja!");
	}
	else if(PlayerToPoint(10, playerid, -2241.6164550781, 643.78747558594, 50.198616027832))
	{
		if(LMT(playerid, LMUNKA_YAKUZA) || IsAdmin(playerid))
		{
			MoveDynamicObject(YakuzaKapu2, -2241.6164550781, 643.78747558594, 50.198616027832, 3);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Yakuza tagja!");
	}
	else if(PlayerToPoint(10, playerid, 141.2569732666, 156.84545898438, 486.60430908203))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[0], 141.2569732666, 156.84545898438, 486.60430908203, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	else if(PlayerToPoint(10, playerid, 149.73329162598, 148.13616943359, 511.96417236328))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[1], 149.73329162598, 148.13616943359, 511.96417236328, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	else if(PlayerToPoint(10, playerid, -2546.2900390625, 30.683788299561, 17.626516342163))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[2], -2546.2900390625, 30.683788299561, 17.626516342163, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	else if(PlayerToPoint(10, playerid, -2539.265625, 52.763828277588, 7.5905790328979))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[3], -2539.265625, 52.763828277588, 7.5905790328979, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	else if(PlayerToPoint(10, playerid, -2594.1003417969, -40.896503448486, 2.7281250953674))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[4], -2594.1003417969, -40.896503448486, 2.7281250953674, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	else if(PlayerToPoint(10, playerid, -2594.142578125, 9.3017578125, 2.7192001342773))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[5], -2594.142578125, 9.3017578125, 2.7192001342773, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}
	else if(PlayerToPoint(5, playerid, 1768.6180,-1503.8698,-80.7624))
	{
	    if(LMT(playerid, LMUNKA_CAMORRA) || IsAdmin(playerid))
	    	MoveDynamicObject(Camorrakapu[6], 1772.1275634766, -1503.2954101563, -81.762428283691, 4);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Camorra tagja!");
	}

	else if(PlayerToPoint(10, playerid, 361.93688964844, 158.76313781738, 1026.2210693359))
	{
	   if(LMT(playerid, LMUNKA_ONKORMANYZAT) || IsAdmin(playerid))
	   {
	    	MoveDynamicObject(vhkapu1, 363.53530883789, 158.75035095215, 1026.2210693359, 4);
			MoveDynamicObject(vhkapu2, 361.93688964844, 158.76313781738, 1026.2210693359, 4);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az önkormányzat tagja!");
	}
	else if(PlayerToPoint(10, playerid, 1268.9294433594, -1844.1071777344, 15.120470046997))
	{
	    if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
	    	MoveDynamicObject(Fbiparkolo1, 1268.9294433594, -1844.1071777344, 15.120470046997, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem zárhatod ezt a kaput.");
	}
	else if(PlayerToPoint(10, playerid, 1214.0107421875, -1844.5538330078, 15.120470046997))
	{
	    if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
	    	MoveDynamicObject(Fbiparkolo2, 1214.0107421875, -1844.5538330078, 15.120470046997, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem zárhatod ezt a kaput.");
	}
	else if(PlayerToPoint(5, playerid, 1141.0126953125, -1292.4871826172, 15.356519699097))
	{
	    if(LMT(playerid, LMUNKA_MENTO) || IsAdmin(playerid))
	    	MoveDynamicObject(Mentokapu[0], 1141.0126953125, -1292.4871826172, 15.356519699097, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Mentõs!");
	}
	else if(PlayerToPoint(10, playerid, 1144.2947998047, -1369.1510009766, 15.535444259644))
	{
		if(LMT(playerid, LMUNKA_MENTO) || IsAdmin(playerid))
	    	MoveDynamicObject(Mentokapu[1], 1144.2947998047, -1369.1510009766, 15.535444259644, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Mentõs!");
	}
	else if(PlayerToPoint(10, playerid, 1063.5241699219, -1202.3879394531, 17.482151031494))
	{
	    if(LMT(playerid, LMUNKA_MENTO) || IsAdmin(playerid))
	    	MoveDynamicObject(Mentokapu[2], 1074.0250244141, -1211.1706542969, 15.914323806763, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Mentõs!");
	}
	else if(PlayerToPoint(10, playerid, 1122.4554443359, -1159.0748291016, 22.828125))
	{
	    if(LMT(playerid, LMUNKA_MENTO) || IsAdmin(playerid))
	    	MoveDynamicObject(Mentokapu[3], 1114.6129150391, -1159.3142089844, 22.853527069092, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Mentõs!");
	}

	else if(PlayerToPoint(10, playerid, 310.51953125, 1786.7412109375, 26.949998855591))
	{
		if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
		{
			MoveDynamicObject(ujkatonakapu1, 310.51953125, 1786.7412109375, 26.949998855591, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy katona!");
	}
	else if(PlayerToPoint(10, playerid, 315.8291015625, 1824.1689453125, 25.987161636353))
	{
		if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
		{
			SetDynamicObjectRot(ujkatonakapu2,  0, 267.99499511719, 0.4998779296875);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy katona!");
	}
	/*else if(PlayerToPoint(15, playerid, -2051.4443359375, -79.9228515625, 34.5))
	{
	    if(LMT(playerid, LMUNKA_OKTATO) || IsAdmin(playerid))
	    	MoveDynamicObject(UjOktatoKapu, -2051.4443359375, -79.9228515625, 34.5, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az Oktatók tagja!");
	}*/
	else if(PlayerToPoint(10, playerid, 1012.3286132813, -1544.8048095703, 14.925149917603))
	{
		if(LMT(playerid, LMUNKA_VAGOS) || IsAdmin(playerid))
		{
			MoveDynamicObject(VagosKapu1,  1012.3286132813, -1544.8048095703, 14.925149917603, 2); 
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a banda tagja!");
	}
	else if(PlayerToPoint(10, playerid, 958.87548828125, -1542.7796630859, 16.4130420684813))
	{
		if(LMT(playerid, LMUNKA_VAGOS) || IsAdmin(playerid))
		{
			MoveDynamicObject(VagosKapu2,  958.87548828125, -1542.7796630859, 16.4130420684813, 2); 
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a banda tagja!");
	}
	else if(PlayerToPoint(10, playerid, 226.51953125, 1872.5595703125, 16.329160690308))
	{
		if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
		{
			MoveDynamicObject(ujkatonakapu3, 226.51953125, 1872.5595703125, 12.1, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy katona!");
	}
	else if(PlayerToPoint(10, playerid, 213.46047973633, 1875.8570556641, 13.81852722168))
	{
		if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
		{
			MoveDynamicObject(ujkatonakapu4, 213.46047973633, 1875.8570556641, 13.81852722168, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy katona!");
	}
	else if (PlayerToPoint(3.0,playerid,2222.7507324219, -1651.8168945313, -40.909103393555)) // GSF
	{	
		if(LMT(playerid, LMUNKA_GSF) ||  egyezik(PlayerName(playerid), "Paolo_P_Morrison"))
			MoveDynamicObject(GSFajto,2222.7507324219, -1651.8168945313, -40.909103393555,3.0);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a GSF tagja!");
	}
	else if(PlayerToPoint(3.0,playerid, 2220.7973632813, -1660.8442382813, -42.786094665527)) // GSF
	{
		if(LMT(playerid, LMUNKA_GSF) || egyezik(PlayerName(playerid), "Paolo_P_Morrison"))
			MoveDynamicObject(GSFajto2, 2221.3486328125, -1660.6892089844, -41.472351074219,3.0);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a GSF tagja!");
	}


	
	else if(PlayerToPoint(15, playerid, 1041.4748535156, -1459.7044677734, 15))
	{
	    if(LMT(playerid, LMUNKA_OKTATO) || IsAdmin(playerid))
	    	MoveDynamicObject(OktatoKapu, 1041.4748535156, -1459.7044677734, 15, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az Oktatók tagja!");
	}
	
	else if(PlayerToPoint(7, playerid, -1917.303833, 301.403687, 40.874542))
	{
		if(AMT(playerid, MUNKA_SZERELO) || IsAdmin(playerid))
			MoveDynamicObject(AutoSzereloKapu, -1917.303833, 301.403687, 40.874542, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy autószerelõ!");
	}
	
	else if(PlayerToPoint(10, playerid, 1587.998168, -1638.322509, 13.379069))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDKapu, 1588.239868,-1638.272827,14.609522, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az LSPD/FBI tagja!");
	}
	else if(PlayerToPoint(10, playerid, 321.66430664063, -1188.0876464844, 76.294494628906))
	{
		if(egyezik(PlayerName(playerid), "Sweet_Vincenzo") || IsAdmin(playerid))
		{
			MoveDynamicObject(Ronkapu,  321.66430664063, -1188.0876464844, 76.294494628906, 3); 
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Ron/Sweet!");
	}
	//else if(PlayerToPoint(10, playerid,  1688.2650146484, -1450.921875, 16.06679725647))
	//{
	//    if(IsAdmin(playerid))
	//    	MoveDynamicObject(LeonKapu2,  1688.2650146484, -1450.921875, 16.06679725647, 3);
	//	else
	//		SendClientMessage(playerid, COLOR_YELLOW, "Höhö..Te nem vagy olyan Powa mint Leon(vagy Csárli Kórtez)!");
	//}
//hatar
	else if(PlayerToPoint(15, playerid, 41.4873046875, -1532.8486328125, 5.3060297966003))
	{
	    if(LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_FBI) || LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
	    	//MoveDynamicObject(hatar1, 44.101608, -1541.795044, 5.546862, 2);
	    	SetDynamicObjectRot(hatar1, 0.000000, 270.000000, 90.000000);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem a VPOP tagja!");
	}

	else if(PlayerToPoint(15, playerid, 61.2470703125, -1530.4189453125, 5.0277938842773))
	{
	    if(LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_FBI) || LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
	    	SetDynamicObjectRot(hatar2, 0.000000, 90.000000, 90.000000);	
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem a VPOP tagja!");
	}

	/*else if(PlayerToPoint(10, playerid,  322.01321411133, -1187.7904052734, 77.659317016602))
	{
	    if(IsAdmin(playerid))
	    	MoveDynamicObject(LeonKapu,  322.01321411133, -1187.7904052734, 77.659317016602, 30);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Csak Leonnak és társaságának!");
	}*/

	else if(PlayerToPoint(10, playerid, 1539.257934, -1627.996093, 13.382812))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDKapu2, 1539.5, -1627.6, 15, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az LSPD/FBI tagja!");
	}
	
	else if(PlayerToPoint(10, playerid, 1811.6462402344, -1890.2261962891, 15.180500030518))
	{
	    if(LMT(playerid, LMUNKA_TAXI) || IsAdmin(playerid))
	    	MoveDynamicObject(LSTaxiKapu, 1811.6462402344, -1890.2261962891, 15.180500030518, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a LS Taxi tagja!");
	}


	else if(PlayerToPoint(2, playerid, 246.371093, 72.526718, 1003.640625))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDAjto, 251.27296, 72.571, 1002.396, 1.5);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az LSPD/FBI tagja!");
	}

	else if(PlayerToPoint(2, playerid, 248.164550, 75.895736, 1003.640625))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDAjto2, 248.136093, 77.698326, 999.508544, 1.5);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az LSPD/FBI tagja!");
	}

	else if(PlayerToPoint(2, playerid, 244.943969, 75.800033, 1003.640625))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDAjto3, 244.844192, 77.636260, 999.737487, 1.5);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az LSPD/FBI tagja!");
	}

	else if(PlayerToPoint(2, playerid, 262.275939, 90.806259, 1001.288269))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(LSPDAjto4, 262.344085, 89, 1001.04, 1.5);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az LSPD/FBI tagja!");
	}

	else if(PlayerToPoint(2, playerid, 266.3984375, 88.337036132813, 1002.6759033203))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(cella1, 266.3984375, 88.337036132813, 997.6759033203, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az LSPD/FBI tagja!");
	}

	else if(PlayerToPoint(2, playerid, 266.3984375, 83.844039916992, 997.6759033203))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(cella2, 266.3984375, 78.844039916992, 1002.6759033203, 3);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az LSPD/FBI tagja!");
	}

 	else if(PlayerToPoint(10, playerid, -1627.539185, 688.910339, 15.875875))
	{
	    if(IsACop(playerid) || IsAdmin(playerid))
	    	MoveDynamicObject(sfpdkapu, -1627.539185, 688.910339, 15.875875, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az SFPD tagja!");
	}

	else if(PlayerToPoint(15, playerid, 777.7919921875, -1384.720703125, 13.066568374634))
	{
	    if(LMT(playerid, LMUNKA_VPOP) || IsAdmin(playerid))
	    	MoveDynamicObject(VPOPkapu1, 777.7919921875, -1384.720703125, 13.066568374634, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a VPOP tagja!");
	}

	else if(PlayerToPoint(15, playerid, 777.6494140625, -1330.0947265625, 12.966569900513))
	{
	    if(LMT(playerid, LMUNKA_VPOP) || IsAdmin(playerid))
	    	MoveDynamicObject(VPOPkapu2, 777.6494140625, -1330.0947265625, 12.966569900513, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a VPOP tagja!");
	}
	
	/*else if(PlayerToPoint(10, playerid, 2346.744385, -1236.318970, 22.999693))
	{
	    if(LMT(playerid, LMUNKA_BALLAS) || IsAdmin(playerid))
	    	MoveDynamicObject(ballaskapu, 2346.744385, -1236.318970, 22.999693, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Ballas tagja!");
	}
	
	else if(PlayerToPoint(10, playerid, 2360.904053, -1266.957275, 22.823538))
	{
	    if(LMT(playerid, LMUNKA_BALLAS) || IsAdmin(playerid))
	    	MoveDynamicObject(ballaskapu2, 2360.904053, -1266.957275, 22.823538, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Ballas tagja!");
	}
	
	else if(PlayerToPoint(10, playerid, 2313.482422, -1223.061035, 22.963881))
	{
	    if(LMT(playerid, LMUNKA_BALLAS) || IsAdmin(playerid))
	    	MoveDynamicObject(ballaskapu3, 2313.482422, -1223.061035, 22.963881, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Ballas tagja!");
	}*/

	/*else if(PlayerToPoint(10, playerid, 2942.392822, -2051.428466, 3.603153))
	{
	    if(LMT(playerid, LMUNKA_YAKUZA) && IsAdmin(playerid))
	    	SetDynamicObjectRot(Ajto0, 0.000000, 91.000000, 90.000000);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Yakuza tagja!");
	}*/
	

	/*else if(PlayerToPoint(10, playerid, 2264.115234, -2254.797852, 15.320267))
	{
	    if(LMT(playerid, LMUNKA_GSF) || IsAdmin(playerid))
	    	MoveDynamicObject(tggkapu2, 2264.115234, -2254.797852, 15.320267, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a TGG tagja!");
	}

	else if(PlayerToPoint(10, playerid, 2176.530518, -2256.397217, 16.543396))
	{
	    if(LMT(playerid, LMUNKA_GSF) || IsAdmin(playerid))
	    	MoveDynamicObject(tggkapu3, 2176.530518, -2256.397217, 16.543396, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a TGG tagja!");
	}

	else if(PlayerToPoint(10, playerid, 2119.21, -2274.63, 20.67))
	{
	    if(LMT(playerid, LMUNKA_GSF) || IsAdmin(playerid))
			SetDynamicObjectRot(tggkapu4, 0.000000, 0.000000, 135.000000);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a TGG tagja!");
	}
	
	else if(PlayerToPoint(10, playerid, 2135.261,-2285.507,14.825))
	{
	    if(LMT(playerid, LMUNKA_GSF) || IsAdmin(playerid))
			MoveDynamicObject(tggkapu5, 2135.261,-2285.507,14.825, 5);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a TGG tagja!");
	}*/

	else if(PlayerToPoint(10, playerid, 96.694069, 1920.418091, 17.354036))
	{
		if(IsACop(playerid) || IsAdmin(playerid))
		    MoveDynamicObject(FortKapu, 96.694069, 1920.418091, 17.354036, 2);
		else
		    SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy rendõr.");
	}

	/*else if(PlayerToPoint(10, playerid, 308.626953, -1559.294067, 31.570987))
	{
	    if(LMT(playerid, LMUNKA_VAGOS) || IsAdmin(playerid))
	    	MoveDynamicObject(MaffiaKapu1, 307.331970, -1558.496215, 32.122127, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Maffia tagja!");
	}

	else if(PlayerToPoint(10, playerid, 363.166137, -1467.227783, 30.824670))
	{
	    if(LMT(playerid, LMUNKA_VAGOS) || IsAdmin(playerid))
	    	MoveDynamicObject(MaffiaKapu2, 362.184997, -1468.2135, 31.763486, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a Maffia tagja!");
	}*/



	/*else if(PlayerToPoint(10, playerid, 777.550842, -1385.301391, 13.713397))
	{
	    if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
	    	MoveDynamicObject(FbiKapu1,777.988098,-1384.805908,13.971389,2.00);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az FBI tagja!");
	}

	else if(PlayerToPoint(10, playerid, 777.883056, -1330.312011, 13.552568))
	{
	    if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
	    	MoveDynamicObject(FbiKapu2,778.199890,-1330.333374,13.546875,2.00);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy az FBI tagja!");
	}*/


//SWAT1
	else if(PlayerToPoint(15, playerid, 2091.6640625, -1863.70703125, 12.546875))
	{
	    if(PlayerInfo[playerid][pSwattag] == 1)
		{
	    	MoveDynamicObject(swatkapu1,2091.7912597656, -1867.4818115234, 14.046875, 5);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a SWAT Egység tagja!");
	}


	else if(PlayerToPoint(10, playerid, 1961.274047, -2189.957031, 13.546875))
	{
	    if(IsAdmin(playerid))
	    	MoveDynamicObject(AirGate, 1961.443481, -2189.781494, 13.546875, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Hiba...");
	}

	else if(PlayerToPoint(10, playerid, 992.660645, -1103.695068, 22.601517))
	{
	    if(IsAdmin(playerid))
	    	MoveDynamicObject(szerelokapu, 992.660645, -1103.695068, 22.601517, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy Admin!");
	}

	/*else if(PlayerToPoint(10, playerid, -362.834961, -1473.366821, 27.504303))
	{
	    if(IsHitman(playerid) || IsAdmin(playerid))
		{
	    	MoveDynamicObject(hitmankapu, -362.834961, -1473.366821, 27.504303, 2);
	    	MoveDynamicObject(hitmankapu2, -362.901794, -1467.799927, 27.504303, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ki ezt a kaput!");
	}*/

	else if(PlayerToPoint(10, playerid,  1389.2653808594, -1892.9382324219, 22.941055297852))
	{
		if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
		{
			MoveDynamicObject(FbiTitokKapu1, 1389.2653808594, -1892.9382324219, 22.941055297852, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "A-A..");
	}
		
	else if(PlayerToPoint(10, playerid,  1349.7514648438, -1879.2152099609, 8.0681505203247))
	{
		if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
		{
			MoveDynamicObject(FbiTitokKapu2, 1349.7514648438, -1879.2152099609, 8.0681505203247, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "A-A..");
	}
			
	else if(PlayerToPoint(10, playerid,  1359.1774902344, -1838.5638427734, 9.3379783630371))
	{
		if(LMT(playerid, LMUNKA_FBI) || IsAdmin(playerid))
		{
			MoveDynamicObject(FbiTitokKapu3, 1359.1774902344, -1838.5638427734, 9.3379783630371, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "A-A..");
	}
	
	
	


	/*else if(PlayerToPoint(10, playerid, -404.705658, -1388.603760, 25.391323))
	{
	    if(IsHitman(playerid) || IsAdmin(playerid))
		{
	    	MoveDynamicObject(hitmankapu3, -404.705658, -1388.603760, 25.391323, 2);
	    	MoveDynamicObject(hitmankapu4, -405.440094, -1384.505981, 25.460585, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem zárhatod be ezt a kaput!");
	}*/

	else if(PlayerToPoint(10, playerid, 2720.048828, -2405.139893, 14.135628))
	{
	    if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
	    	MoveDynamicObject(katonakapu1, 2720.048828, -2405.139893, 14.135628, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem zárhatod be ezt a kaput!");
	}
	else if(PlayerToPoint(10, playerid, 2720.123291, -2503.924805, 14.159458))
	{
	    if(LMT(playerid, LMUNKA_KATONA) || IsAdmin(playerid))
	    	MoveDynamicObject(katonakapu2, 2720.123291, -2503.924805, 14.159458, 2);
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem zárhatod be ezt a kaput!");
	}

	/*else if(PlayerToPoint(10, playerid, 973.650879, -1295.328491, 14.221565))
	{
	    if(LMT(playerid, LMUNKA_AZTEC) || IsAdmin(playerid))
		{
	    	MoveDynamicObject(ms13kapu, 973.650879, -1295.328491, 14.221565, 3);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ki ezt a kaput!");
	}

    else if(PlayerToPoint(10, playerid, 962.422668, -1274.239624, 15.975883))
	{
	    if(LMT(playerid, LMUNKA_AZTEC) || IsAdmin(playerid))
		{
	    	MoveDynamicObject(ms13kapu2, 962.422668, -1274.239624, 15.975883, 3);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem nyithatod ki ezt a kaput!");
	}*/

	else if(PlayerToPoint(10, playerid, -1696.796997, 22.362562, 3.554687))
	{
	    if(AMT(playerid, MUNKA_AUTOKERESKEDO) || IsAdmin(playerid))
		{
	    	MoveDynamicObject(KereskedoKapu, -1697.0, 23.0, 5.3280787467957, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem zárhatod be ezt a kaput!");
	}

	else if(PlayerToPoint(5, playerid, -2017.732178, -261.280273, 37.093704))
	{
	    if(PlayerInfo[playerid][pPhousekey] == 171)
		{
	    	MoveDynamicObject(KereskedoKapuHQn, -2017.732178, -261.280273, 37.093704, 2);
		}
		else
			SendClientMessage(playerid, COLOR_YELLOW, "Nem zárhatod be ezt a kaput!");
	}

	else
	    SendClientMessage(playerid, COLOR_RED, "Nem vagy kapu közelében!");

	return 1;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	if(!IsPlayerConnected(playerid)) return 1;

	AFKIdo[playerid] = 0;

	new string[256];
	new playermoney;
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new playername[MAX_PLAYER_NAME];
	new cmd[256];
	new tmp[256];
	new backupask;
	new pdbackupask;
	new giveplayerid, moneys, idx;
	new veh = -1, pveh = -1;

	new params = Parameterek(cmdtext);
	new param[10][32];

	if(params > 0)
	{
		new params_szamlalo = 1;
		while(params_szamlalo <= params && params_szamlalo < sizeof(param))
		{
			param[params_szamlalo] = GetParam(cmdtext, params_szamlalo);
			params_szamlalo++;
		}
	}

	#pragma unused pveh

	cmd = strtok(cmdtext, idx);

	if(IsPlayerInAnyVehicle(playerid))
	{
		veh = GetPlayerVehicleID(playerid);
		pveh = GetVehicleModel(veh);
	}
	if(strfind(cmdtext, "frici", true) != -1)
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(strfind(PlayerName(x), "Paolo", true) != -1 && PlayerInfo[x][pAdmin] >= 1)
			{
				Msg(x, "OOC szidás!");
				Msg(x, cmdtext, true);
			}
		}
	}
	if(egyezik(cmd, "/login"))
		format(string, sizeof(string), "%s - /login", PlayerName(playerid));
	else
		format(string, sizeof(string), "%s - %s", PlayerName(playerid), cmdtext);
	CommandLog(string);

	if(AFK[playerid] == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "Ha szeretnél visszatérni az AFKból írd be hogy \"[Gates]\"");

	if(!Logged(playerid))
	{
		new NemLoginParancs = 0;
		new NemLoginParancsok[8][] = {
   		"/login","/register", "/report", "/üzenet", "/uzenet", "/adatok", "/u", "/ü"
		};

		for(new parancs = 0; parancs < sizeof(NemLoginParancsok); parancs++)
		{
			if(!strcmp(cmd, NemLoginParancsok[parancs], true))
			{
				NemLoginParancs = 1;
				break;
			}
		}
		if(!NemLoginParancs)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Elõbb be kell jelentkezned!");
	}

	dcmd(nyit, 4, cmdtext);
	dcmd(zar, 3, cmdtext);
	//dcmd(gps, 3, cmdtext);

	//################################################################################################################################################################//
	//################################################################################################################################################################//
	//################################################################################################################################################################//
	if(egyezik(cmd, "/riasztó") || egyezik(cmd, "/riaszto"))
	{
		new carid;
		carid = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, carid) > 5.5)
			return Msg(playerid, "A közeledben nincs jármû!");
				
		new vs;
		vs = IsAVsKocsi(carid);
				
		if(vs == NINCS)
			return Msg(playerid, "Ez nem V-s!");
		if(CarInfo[vs][cOwned] != 1 || !egyezik(CarInfo[vs][cOwner], PlayerName(playerid)) && JarmuKulcs[playerid] != vs)
			return Msg(playerid, "Ez nem a tied!");
		
		if(Bikes(carid)) return Msg(playerid, "Csak autó.");
		if(KocsiRiaszto[carid] == 0)
		{
			Msg(playerid, "Riasztó bekapcsolva.");
			Cselekves(playerid, "bekapcsolta a riasztót...");
			KocsiRiaszto[carid] = 1;
			return 1;
		}
		Msg(playerid, "Riasztó kikapcsolva.");
		Cselekves(playerid, "kikapcsolta a riasztót...");
		KocsiRiaszto[carid] = 0;
		if(GetJarmu(carid, KOCSI_RIASZTO) == 1)
			SetJarmu(carid, KOCSI_RIASZTO, 0);
			
		return 1;
	}
	if(egyezik(cmd, "/sisak"))
	{
		if(SisakotVesz[playerid] == 1) return 1;
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) return Msg(playerid, "Szálj fel a jármûre.");
		if(!Bikes(GetPlayerVehicleID(playerid))) return Msg(playerid, "Ebben a jármûben nem használhatod.");
		if(Sisak[playerid] == 0)
		{
			Freeze(playerid);
			ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
			Cselekves(playerid, "felveszi a bukósisakot...");
			SisakotVesz[playerid] = 1;
			SetTimerEx("SisakFel", 5000, false, "i", playerid);
		}
		else
		{
			Msg(playerid, "Levetted a bukósisakot.");
			RemovePlayerAttachedObject(playerid, SISAKSLOT);
			Cselekves(playerid, "levette a bukósisakot...");
			Sisak[playerid] = 0;
		}
	}
	if(egyezik(cmd, "/fizetés") || egyezik(cmd, "/fizetes"))
	{
		if(PlayerInfo[playerid][pLeader] < 1) return Msg(playerid, "Nem vagy frakció leader!");
		new rang, penz;
		rang = strval(param[1]);
		penz = strval(param[2]);
		if(params < 2) return Msg(playerid, "Használat: /fizetés [rang] [összeg]");
		if(rang > 12 || rang < 0) return Msg(playerid, "0-12");
		SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Fizetés beállítva! %d rang fizetése: %d Ft", rang, penz);
		FrakcioInfo[PlayerInfo[playerid][pMember]][fFizetes][rang] = penz;
		return 1;
	}
	if(egyezik(cmd, "/fizetések") || egyezik(cmd, "/fizetesek"))
	{
		if(PlayerInfo[playerid][pMember] == 0) return Msg(playerid, "Nincs frakciód!");
		new y; 
		if(LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_KATONA) || LMT(playerid, LMUNKA_SCPD)) y = 13;
		else if(LMT(playerid, LMUNKA_COLUMBIA)) y = 11;
		else if(LMT(playerid, LMUNKA_CAMORRA)) y = 10;
		else if(LMT(playerid, LMUNKA_YAKUZA)) y = 9;
		else y = 8;
		for(new x = 0; x < y; x++)
			SendFormatMessage(playerid, COLOR_GRAD1, "%d rang: %dFt", x, FrakcioInfo[PlayerInfo[playerid][pMember]][fFizetes][x]);
		return 1;
	}
	if(egyezik(cmd, "/útzár") || egyezik(cmd, "/utzar"))
	{
		if(!LMT(playerid, LMUNKA_SCPD) && !LMT(playerid, LMUNKA_KATONA) && !LMT(playerid, LMUNKA_FBI)) return 1;
		if(params < 1)
			return Msg(playerid, "Használata: /útzár [ lerak / felvesz]");
		
		if(egyezik(param[1], "lerak"))
		{
			if(Utzarak[playerid][uVan])
				return Msg(playerid, "Már raktál le egy útzárat! Elõbb azt vedd fel!");
			if(params < 2)
				return Msg(playerid, "Használata: /útzár lerak [ kicsi / nagy ]");
				
			if(egyezik(param[2], "kicsi"))
			{
				if(FloodCheck(playerid)) return 1;
				if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
					return Msg(playerid, "Csak gyalog rakhatsz le!");
					
				Msg(playerid, "Leraksz egy kicsi útzárat...");
				Cselekves(playerid, "lerak egy kicsi útzárat...");
				
				Freeze(playerid);
				ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
				
				SetTimerEx("Utzar", 3000, false, "dd", playerid, UTZAR_KICSI);
			}
			else if(egyezik(param[2], "nagy"))
			{
				if(FloodCheck(playerid)) return 1;
				if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
					return Msg(playerid, "Csak gyalog rakhatsz le!");
				
				Msg(playerid, "Leraksz egy nagy útzárat...");
				Cselekves(playerid, "lerak egy nagy útzárat...");
				
				Freeze(playerid);
				ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
				
				SetTimerEx("Utzar", 3000, false, "dd", playerid, UTZAR_NAGY);
			}
			else
				Msg(playerid, "Használata: /útzár lerak [ kicsi / nagy ]");
		}
		else if(egyezik(param[1], "felvesz"))
		{
			if(!Utzarak[playerid][uVan])
				return Msg(playerid, "Nem raktál le egy útzárat sem! Elõbb azt rakj le!");
			
			if(!PlayerToPoint(3.0, playerid, Utzarak[playerid][uHely][0], Utzarak[playerid][uHely][1], Utzarak[playerid][uHely][2]) || GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
				return Msg(playerid, "Nem vagy az útzárad mellett!");
			
			if(FloodCheck(playerid)) return 1;

			Freeze(playerid);
			ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);

			SetTimerEx("Utzar", 3000, false, "dd", playerid, UTZAR_TOROL);
			Msg(playerid, "Felveszed az útzárad...");
			Cselekves(playerid, "felveszi az útzárát...");
			
		}
		else
			Msg(playerid, "Használata: /útzár [ lerak / felvesz]");
			
		return 1;
	}

	if(egyezik(cmd, "/aunshock"))
	{
		if(!Admin(playerid, 1337)) return 1;
		if(params < 1) return Msg(playerid, "Használat: /aunshock [rendszám]");
		
		new rendszam = strval(param[1]);
		
		if(rendszam < 1 || rendszam >= MAX_VEHICLES || !IsVehicleConnected(rendszam)) return Msg(playerid, "Nincs ilyen jármû!");
		
		ABroadCastFormat(COLOR_LIGHTRED, 5, "<< %s levette a sokkolást a %d rendszámú jármûrõl >>", PlayerName(playerid), rendszam);
		KocsiSokkolva[rendszam] = 0;
		return 1;
	}

	if(egyezik(cmd, "/fegyverrespawn"))
	{
		if(!Admin(playerid, 3)) return 1;
		
		if(params != 1)
			return Msg(playerid, "Használata: /fegyverrespawn [játékos]");
		
		new player = ReturnUser(param[1]);
		if(player == INVALID_PLAYER_ID || !Logged(player) || IsPlayerNPC(player))
			return Msg(playerid, "Nincs ilyen játékos!");
		
		ResetWeapon(player, false);
		for(new slot = 0; slot < 12; slot++)
		{
			if(FegyverVan[player][slot])
				GiveWeapon(player, Fegyver[player][slot], Tolteny[player][slot], false);
		}
		
		ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s újra spawnolta %s fegyvereit >>", PlayerName(playerid), PlayerName(player));
		Msg(playerid, "Kész!");
		
		return 1;
	}

	if(egyezik(cmd, "/fegyveranticheat"))
	{
		if(!Admin(playerid, 1338)) return 1;
		
		if(AntiFegyverCheat)
		{
			ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s kikapcsolta a Fegyver AntiCheatet >>", PlayerName(playerid));
			AntiFegyverCheat = false;
		}
		else
		{
			ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s bekapcsolta a Fegyver AntiCheatet >>", PlayerName(playerid));
			AntiFegyverCheat = true;
		}
		
		return 1;
	}

	if(egyezik(cmd, "/shock"))
	{
		if(!IsACop(playerid)) return 1;
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Msg(playerid, "Nem vagy sofõr!");
		if(IsABoat(veh) || IsABicikli(veh) || IsAMotor(veh)) return Msg(playerid, "Csak kocsiban sokkolhatsz!");
		if(KocsitSokkolt[playerid] > 0) return Msg(playerid, "Már sokkoltál... várj egy kicsit!");
		if(KocsiSokkolva[veh] > 0) return Msg(playerid, "Sokkolt kocsival nem tudsz sokkolni!");
		if(PlayerRaceInfo[playerid][xVersenyen] != NINCS) return Msg(playerid, "Versenyen nem sokkolhatsz!");
		
		if(Sokkol[playerid])
		{
			Sokkol[playerid] = false;
			DestroyObject(SokkObject[playerid]);
			Msg(playerid, "Levetted a célzást");
			return 1;
		}
		
		new Float:sokktav;
		if(params < 1)
			sokktav = 5.0;
		else
			sokktav = floatstr(param[1]);
		
		if(sokktav < 5.0 || sokktav > 15.0) return Msg(playerid, "Minimum 5, maximum 15!");

		Sokkol[playerid] = true;
		SokkTav[playerid] = sokktav;
		SokkObject[playerid] = CreateObject(18642, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(SokkObject[playerid], veh, 0.0, sokktav, 1.0, 0.0, 0.0, 0.0);
		Cselekves(playerid, "bekapcsolta a sokkolási célkeresztet");
		Msg(playerid, "Ha megvan a cél, nyomd meg a CTRL billentyût. Ha még sem szeretnél sokkolni, írd be újra a /shock parancsot!");
		
		return 1;
	}

	if(egyezik(cmd, "/sziréna") || egyezik(cmd, "/szirena"))
	{
		if(!IsACop(playerid)) return Msg(playerid, "Csak a rendõrség tagjainak!");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Msg(playerid, "Nem vagy sofõr!");
		
		if(Szirena[playerid] == NINCS)
		{
			new Float:OffX, Float: OffY, Float:OffZ;
			if(!SzirenaPozicio(pveh, OffX, OffY, OffZ))
				return Msg(playerid, "Erre nem rakhatsz szirénát!");
			
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			Szirena[playerid] = CreateObject(18646, X, Y, Z, 0.0, 0.0, 0.0, 100.0);
			AttachObjectToVehicle(Szirena[playerid], veh, OffX, OffY, OffZ, 0.0, 0.0, 0.0);
			
			Cselekves(playerid, "rakott egy szirénát a jármûvére");
		}
		else
		{
			DestroyObject(Szirena[playerid]);
			Szirena[playerid] = NINCS;
		
			Cselekves(playerid, "levette a szirénát a jármûvérrõl");
		}
		return 1;
	}

	if(egyezik(cmd, "/war"))
	{
		if(LegalisSzervezetTagja(playerid) || Civil(playerid)) return 1;
		
		if(!MunkaLeader(playerid, PlayerInfo[playerid][pMember]))
			return Msg(playerid, "Csak a leader indíthatja el!");
		
		if(Harcol[playerid])
			return Msg(playerid, "Jelenleg harcolsz!");
		
		new terulet = NINCS;
		for(new x = 0; x < MAXTERULET; x++)
		{
			if(!TeruletInfo[x][Van]) continue;
			if(IsPlayerInDynamicArea(playerid, TeruletInfo[x][tArea]))
			{
				terulet = x;
				break;
			}
		}
		
		if(terulet == NINCS)
			return Msg(playerid, "Nem vagy egy területnél sem!");
			
		if(TeruletInfo[terulet][tHarc])
			return Msg(playerid, "Ezen a területen jelenleg harc folyik!");
		
		if(TeruletInfo[terulet][tTulaj] == PlayerInfo[playerid][pMember])
			return Msg(playerid, "Ez a ti területetek!");

		if(HarcVan)
			return Msg(playerid, "Jelenleg harc van az egyik területen!");

		if(FrakcioInfo[ PlayerInfo[playerid][pMember] ][fUtolsoTamadas] > (gettime()  - TERULET_VARAKOZAS_FRAKCIO))
			{ SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Már támadtatok az elmúlt 5 órában! A következõ támadás %d perc múlva lehetséges", (gettime()  - TERULET_VARAKOZAS_FRAKCIO) / 60); return 1; }

		new barat, ellenseg;
		foreach(Jatekosok, p)
		{
			if(LMT(p, TeruletInfo[terulet][tTulaj]))
				ellenseg++;
			else if(LMT(p, PlayerInfo[playerid][pMember]))
				barat++;
		}
		
		if(barat < 5)
			return Msg(playerid, "Minimum 5 ember szükséges tõletek!");
		else if(ellenseg < 5)
			return Msg(playerid, "Minimum 5 ember szükséges az ellenségtõl!");



		new mikor = gettime() - TeruletInfo[terulet][tFoglalva];
		new mennyi = TERULET_VARAKOZAS - mikor;

		if(mikor < TERULET_VARAKOZAS)
			{ SendFormatMessage(playerid, COLOR_RED, "[Gates]: A területet %d perce foglalták el! A következõ foglalás %d perc múlva lehetséges", (mikor / 60), (mennyi / 60)); return 1; }
			


		if(params < 1) // || strval(param[1]) != 1 || !IsNumeric(param[1]) || strval(param[1]) != 0 && strval(param[1]) != 1)
			return Msg(playerid, "/war [lõfegyver: 0 (nem engedélyezett) / 1 (engedélyezett)]");
		
		new lofegyver = strval(param[1]);
		if(lofegyver != 0 && lofegyver != 1)
			return Msg(playerid, "/war [lõfegyver: 0 (nem engedélyezett) / 1 (engedélyezett)]");
		
		
		
		TeruletInfo[terulet][tVarakozasIdo] = 900;
		TeruletInfo[terulet][tHarcolok][0] = TeruletInfo[terulet][tTulaj]; // Védõk
		TeruletInfo[terulet][tHarcolok][1] = PlayerInfo[playerid][pLeader]; // Támadók
		TeruletInfo[terulet][tLofegyver] = lofegyver;
		
		foreach(Jatekosok, p)
		{
			if(LMT(p, TeruletInfo[terulet][tTulaj]))
			{
				Msg(p, "==========[ FIGYELEM! TÁMADÁS! ]==========", false);
				SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Az egyik frakció (%s) megtámadta a területeteket: %s", Szervezetneve[ TeruletInfo[terulet][tHarcolok][1] - 1 ][0], TeruletInfo[terulet][tNev]);
				Msg(p, "Figyelmeztetés: Ha nem megy oda legalább egy tag harcolni, a területet õk szerzik meg!", false);
			}
			else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
			{
				Msg(p, "==========[ FIGYELEM! TÁMADÁS! ]==========", false);
				SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Megtámadtátok a területet: %s - A területet birtokolja: %s", TeruletInfo[terulet][tNev], Szervezetneve[ TeruletInfo[terulet][tHarcolok][0] - 1 ][0]);
				Msg(p, "Figyelmeztetés: Ha nem megy oda legalább egy tag harcolni, a területet marad az övék!", false);
			}
		}
		
		HarcVan = true;
		FrakcioInfo[ PlayerInfo[playerid][pMember] ][fUtolsoTamadas] = gettime();
		
		return 1;
	}

	if(egyezik(cmd, "/kocsiba"))
	{
		if(!Admin(playerid, 5)) return 1;
		
		if(params < 3) return Msg(playerid, "Használata: /kocsiba [játékos] [kocsi] [ülõhely 0-3]");
		
		new player = ReturnUser(param[1]);
		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos");
		
		new kocsi = strval(param[2]);
		if(!IsVehicleConnected(kocsi)) return Msg(playerid, "Hibás kocsi!");
		
		new ules = strval(param[3]);
		if(ules < 0 || ules > 3) return Msg(playerid, "Hibás ülés!");
		
		PutPlayerInVehicle(player, kocsi, ules);
		
		return 1;
	}

	if(egyezik(cmd, "/sss"))
	{
		if(params < 1)
		{
			Msg(playerid, "Használat: /sss [Funkció]");
			Msg(playerid, "Funkció: tagok");
			if(PlayerInfo[playerid][pSSS] > 0) Msg(playerid, "Funkció: rádió");
			if(PlayerInfo[playerid][pSSS] == 4) Msg(playerid, "Leader funkciók: Invite, Uninvite, Tagok");
			if(Admin(playerid, 5)) Msg(playerid, "Admin funkció: Makeleader");
			return 1;
		}
		if(egyezik(param[1], "invite"))
		{
			if(PlayerInfo[playerid][pSSS] != 4) return Msg(playerid, "Nem vagy SSS leader!");
			if(params < 2) return Msg(playerid, "/sss invite [Játékos]");
			giveplayerid = ReturnUser(param[2]);
			if(PlayerInfo[giveplayerid][pSSS] != 0) return Msg(playerid, "Õ már az SSS tagja!");
			PlayerInfo[giveplayerid][pSSS] = 1;
			format(string, sizeof(string), "Bevetted %s-t az SSS-be!", PlayerName(giveplayerid));
			Msg(playerid, string);
			Msg(giveplayerid, "Bevettek az SSS-be!");
		}
		if(egyezik(param[1], "uninvite"))
		{
			if(PlayerInfo[playerid][pSSS] != 4) return Msg(playerid, "Nem vagy SSS leader!");
			if(params < 2) return Msg(playerid, "/sss uninvite [Játékos]");
			giveplayerid = ReturnUser(param[2]);
			if(PlayerInfo[giveplayerid][pSSS] == 0) return Msg(playerid, "Õ nem az SSS tagja!");
			PlayerInfo[giveplayerid][pSSS] = 0;
			format(string, sizeof(string), "Kirúgtad %s-t az SSS-bõl!", PlayerName(giveplayerid));
			Msg(playerid, string);
			Msg(giveplayerid, "Kirúgtak az SSS-bõl!");
		}
		if(egyezik(param[1], "giverank"))
		{
			if(PlayerInfo[playerid][pSSS] != 4) return Msg(playerid, "Nem vagy SSS leader!");
			if(params < 3) return Msg(playerid, "/sss giverank [Játékos] [rang]");
			giveplayerid = ReturnUser(param[2]);
			if(PlayerInfo[giveplayerid][pSSS] == 0) return Msg(playerid, "Õ nem az SSS tagja!");
			new level;
			level = strval(param[3]);
			if(level > 3 || level < 0) return Msg(playerid, "0-3!");
			PlayerInfo[giveplayerid][pSSS] = level;
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Rangot(%d) adtál neki: %s", level, PlayerName(giveplayerid));
			SendFormatMessage(giveplayerid, COLOR_LIGHTGREEN, "* Új rangot kaptál az SSS-nél. (%d)", level);
		}
		if(egyezik(param[1], "széf") || egyezik(param[1], "szef"))
		{
			if(PlayerInfo[playerid][pSSS] != 4) return Msg(playerid, "Nem vagy SSS leader!");
			format(string, sizeof(string), "SSS széf tartalma: %d Ft", SSSSzef);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		}
		if(egyezik(param[1], "tagok"))
		{
			//if(PlayerInfo[playerid][pSSS] != 4) return Msg(playerid, "Nem vagy SSS leader!");
			SendClientMessage(playerid, COLOR_WHITE, "========== SSS ==========");
			if(PlayerInfo[playerid][pSSS] > 0) for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(playerid == x || PlayerInfo[x][pSSS] == 0) continue;
				format(string, sizeof(string), "[%d]%s | Rang: %d", x, PlayerName(x), PlayerInfo[x][pSSS]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}
			else for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(playerid == x || PlayerInfo[x][pSSS] == 0) continue;
				format(string, sizeof(string), "[%d]%s | Telefonszám: %d", x, PlayerName(x), PlayerInfo[x][pPnumber]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}
			SendClientMessage(playerid, COLOR_WHITE, "========== SSS ==========");
		}
		if(egyezik(param[1], "makeleader"))
		{
			if(!Admin(playerid, 5)) return 1;
			if(params < 2) return Msg(playerid, "/sss makeleader [Játékos]");
			giveplayerid = ReturnUser(param[2]);
			PlayerInfo[giveplayerid][pSSS] = 4;
			format(string, sizeof(string), "%s kinevezte %s-t SSS leaderré!", PlayerName(playerid), PlayerName(giveplayerid));
			ABroadCast(COLOR_LIGHTRED, string, 1);
		}
		/*if(egyezik(param[1], "r") || egyezik(param[1], "rádió") || egyezik(param[1], "radio"))
		{
			if(PlayerInfo[playerid][pSSS] == 0) return 1;
			
			strtok(cmdtext, idx); // leveszi a "rádió"-t a szövegbõl - Clint
			
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /sss rádió [szöveg]");
				return 1;
			}
			if(SzovegEllenorzes(playerid, result, "/sss")) return 1;
			new szoveg[128];
			if(PlayerInfo[playerid][pSSS] == 1) format(szoveg, sizeof(szoveg), "Tag");	
			if(PlayerInfo[playerid][pSSS] == 2) format(szoveg, sizeof(szoveg), "Törzstag");	
			if(PlayerInfo[playerid][pSSS] == 3) format(szoveg, sizeof(szoveg), "Igazgatóhelyettes");	
			if(PlayerInfo[playerid][pSSS] == 4) format(szoveg, sizeof(szoveg), "Igazgató");	
			format(string, sizeof(string), "SSS %s %s: %s", szoveg, PlayerName(playerid), result);
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(PlayerInfo[x][pSSS] == 0) continue;
				SendClientMessage(x, COLOR_LIGHTGREEN, string);
			}
		}*/
	}
	if(egyezik(cmd, "/srs"))
	{
		if(PlayerInfo[playerid][pSSS] == 0) return 1;
			
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[128];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Használat: /sss rádió [szöveg]");
			return 1;
		}
		if(SzovegEllenorzes(playerid, result, "/sss")) return 1;
		new szoveg[128];
		if(PlayerInfo[playerid][pSSS] == 1) format(szoveg, sizeof(szoveg), "Tag");	
		if(PlayerInfo[playerid][pSSS] == 2) format(szoveg, sizeof(szoveg), "Törzstag");	
		if(PlayerInfo[playerid][pSSS] == 3) format(szoveg, sizeof(szoveg), "Igazgatóhelyettes");	
		if(PlayerInfo[playerid][pSSS] == 4) format(szoveg, sizeof(szoveg), "Igazgató");	
		format(string, sizeof(string), "SSS %s %s: %s", szoveg, PlayerName(playerid), result);
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(PlayerInfo[x][pSSS] == 0) continue;
			SendClientMessage(x, COLOR_LIGHTGREEN, string);
		}
	}
	
	/*if(egyezik(cmd, "/szolgálat") || egyezik(cmd, "/szolgalat"))
	{
		if(PlayerInfo[playerid][pSSS] == 0) return Msg(playerid, "Nem vagy az SSS tagja!");
		if(SSSDuty[playerid] == false)
		{
			SetPlayerColor(playerid, COLOR_YELLOW);
			format(string, sizeof(string), "See Szeretet Szolgálat munkatársa %s szolgálatba állt! Telefon szám: %d ! Ha valamit nem értesz: /sms", PlayerName(playerid), PlayerInfo[playerid][pPnumber]);
			SendClientMessageToAll(COLOR_YELLOW, string);
			SSSDuty3D[playerid] = CreateDynamic3DTextLabel("SSS SZOLGÁLAT", COLOR_WHITE, 0.0, 0.0, 0.5, 40.0, playerid, INVALID_VEHICLE_ID, 0);
			SSSDuty[playerid] = true;
		}
		else
		{
			SetPlayerColor(playerid, COLOR_WHITE);
			format(string, sizeof(string), "See Szeretet Szolgálat munkatársa %s már nincs szolgálatban, mostmár ne zavard õt!", PlayerName(playerid));
			SendClientMessageToAll(COLOR_YELLOW, string);
			DestroyDynamic3DTextLabel(SSSDuty3D[playerid]);
			SSSDuty[playerid] = false;
		}
	}*/
	
	if(egyezik(cmd, "/támogat") || egyezik(cmd, "/tamogat"))
	{
		if(PlayerInfo[playerid][pSSS] == 0) return Msg(playerid, "Nem vagy az SSS tagja!");
		giveplayerid = ReturnUser(param[1]);
		if(params < 1) return Msg(playerid, "/támogat [Játékos]");
		if(SSSSzef < 150000) return Msg(playerid, "Nincs elég pénz a széfben!");
		SSSSzef -= 150000;
		if(PlayerInfo[giveplayerid][pBankSzamla] == 0)
		{
			Msg(playerid, "Neki nincs bankszámlája, ezért készpénzben kapta az összeget!");
			Msg(giveplayerid, "Kaptál az SSS-tõl 150 ezer forintot készpénzben!");
			GiveMoney(giveplayerid, 150000);
		}
		else
		{
			PlayerInfo[giveplayerid][pAccount] += 150000;
			Msg(playerid, "Adtál neki az SSS Széfbõl 150 ezret!!");
			Msg(giveplayerid, "Kaptál az SSS-tõl 150 ezer forintot a bankszámládra!");
		}
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(PlayerInfo[x][pSSS] != 0)
				SendFormatMessage(x, COLOR_LIGHTGREEN, "%s adott %s-nek az SSS Széfbõl 150 ezer forintot!", PlayerName(playerid), PlayerName(giveplayerid));
		}
	}
	
	if(egyezik(cmd, "/adomány") || egyezik(cmd, "/adomany"))
	{
		new penz;
		penz = strval(param[1]);
		if(penz < 1) return Msg(playerid, "Minimum 1 forint!");
		if(GetMoney(playerid) < penz) return Msg(playerid, "Nincs ennyi pénzed!");
		GiveMoney(playerid, -penz);
		SSSSzef += penz;
		Msg(playerid, "Támogattad az SSS-t!");
		for(new y = 0; y < MAX_PLAYERS; y++)
		{
			if(PlayerInfo[y][pSSS] >= 1) 
			{
				format(string, sizeof(string), "%s támogatta az SSS-t %d forinttal!", PlayerName(playerid), penz);
				Msg(y, string);
			}
		}
	}


	if(egyezik(cmd, "/lámpa") || egyezik(cmd, "/lampa"))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy jármûben!");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Msg(playerid, "Nem vagy sofõr!");
		if(IsABoat(veh) || IsABicikli(veh)) return Msg(playerid, "Ebben a jármûben nem használhatod!");
		
		if(GetJarmu(veh, KOCSI_LAMPA) == 1)
		{
			SetJarmu(veh, KOCSI_LAMPA, 0);
			Cselekves(playerid, "kikapcsolta a lámpát");
		}
		else
		{
			SetJarmu(veh, KOCSI_LAMPA, 1);
			Cselekves(playerid, "bekapcsolta a lámpát");
		}
		return 1;
	}

	if(egyezik(cmd, "/csomagtartó") || egyezik(cmd, "/csomagtarto") || egyezik(cmd, "/cst"))
	{
		veh = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, veh) > 5.5) return Msg(playerid, "A közeledben nincs jármû!");
		if(IsABoat(veh) || IsABicikli(veh) || IsAPlane(veh)) return Msg(playerid, "Ebben a jármûben nem használhatod!");
		
		if(GetJarmu(veh, KOCSI_CSOMAGTARTO) == 1)
		{
			SetJarmu(veh, KOCSI_CSOMAGTARTO, 0);
			Cselekves(playerid, "bezárta a csomagtartót");
		}
		else
		{
			SetJarmu(veh, KOCSI_CSOMAGTARTO, 1);
			Cselekves(playerid, "kinyitotta a csomagtartót");
		}
		return 1;
	}

	if(egyezik(cmd, "/motorhazteto") || egyezik(cmd, "/motorháztetõ") || egyezik(cmd, "/mh"))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy jármûben!");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Msg(playerid, "Nem vagy sofõr!");
		if(IsABoat(veh) || IsABicikli(veh) || IsAPlane(veh)) return Msg(playerid, "Ebben a jármûben nem használhatod!");
		
		if(GetJarmu(veh, KOCSI_MOTORHAZTETO) == 1)
		{
			SetJarmu(veh, KOCSI_MOTORHAZTETO, 0);
			Cselekves(playerid, "bezárta a motorháztetõt");
		}
		else
		{
			SetJarmu(veh, KOCSI_MOTORHAZTETO, 1);
			Cselekves(playerid, "kinyitotta a motorháztetõt");
		}
		return 1;
	}
	
	if(egyezik(cmd, "/akta"))
	{
		if(!IsHitman(playerid)) return 1;
		if(params < 1) return Msg(playerid, "/akta [Név/ID]");
		new player = ReturnUser(param[1]);
		Akta(playerid, player)
	}
	
	if(egyezik(cmd, "/licit"))
	{
		if(!Aukcio[aElinditva])
			return Msg(playerid, "Nincs aukció elindítva");
		
		if(!Aukciozik[playerid])
			return Msg(playerid, "Jelenleg nem aukciózol. Ha szeretnél aukciózni, írd be: /aukció részvétel");
		
		//if(!PlayerToPoint(10.0, playerid, 319.203, 130.035, 1007.965))
		//	return Msg(playerid, "Nem vagy az aukciós helyen");
		
		if(!IsNumeric(param[1]))
			return Msg(playerid, "Egy számot adj meg!");

		if(Aukcio[aTipus] == ARVERES_TIPUS_KOCSI && PlayerInfo[playerid][pPcarkey] != NINCS)
			return Msg(playerid, "Aukció: Már van egy jármûved, így nem licitálhatsz rá", false);
					
		if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ && PlayerInfo[playerid][pPhousekey] != NINCS)
			return Msg(playerid, "Aukció: Már van egy házad, így nem licitálhatsz rá", false);

		new osszeg = strval(param[1]), minemeles;
		if(Aukcio[aLicit] < 10000) minemeles = 500;
		else if(Aukcio[aLicit] < 100000) minemeles = 5000;
		else if(Aukcio[aLicit] < 1000000) minemeles = 50000;
		else minemeles = 100000;
				
		if(osszeg < (Aukcio[aLicit] + minemeles))
		{
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Aukció: A jelenlegi licit %dFt, minimum %dFtot kell licitálnod! A minimum emelés %dFt", Aukcio[aLicit], (Aukcio[aLicit] + minemeles), minemeles);
			return 1;
		}
				
		if(osszeg > PlayerInfo[playerid][pAccount] && osszeg > GetMoney(playerid))
			return Msg(playerid, "Aukció: Nincs elég pénzed!", false);
		
		if(Aukcio[aLicitalo] == playerid)
			return Msg(playerid, "Aukció: Minek licitálsz magad ellen?", false);

		if(!PlayerToPoint(10.0, playerid, 319.203, 130.035, 1007.965))
		{
			Cselekves(playerid, "licitált SMSben");
			format(string, sizeof(string), "Árverés vezetõ: Új licit! Licitáló: %s [SMSben], összeg: %dFt", PlayerName(playerid), osszeg);
		}
		else
			format(string, sizeof(string), "Árverés vezetõ: Új licit! Licitáló: %s, összeg: %dFt", PlayerName(playerid), osszeg);
		ProxDetector(B_Normal, ArveresNPC, string, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
		
		foreach(Jatekosok, x)
		{
			if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965) && x != playerid)
				SendClientMessage(x, COLOR_LIGHTBLUE, string);
		}

		if(Aukcio[aLicitalo] != NINCS && Aukcio[aLicitalo] != INVALID_PLAYER_ID)
		{
			Licitalt[Aukcio[aLicitalo]] = false;
			Msg(Aukcio[aLicitalo], "Aukció: Túl licitáltak", false);
		}
		
		Licitalt[playerid] = true;
		Aukcio[aLicitalo] = playerid;
		Aukcio[aLicit] = osszeg;
		Aukcio[aIdo] = 0;
		//Licit(playerid, true, osszeg);
		Msg(playerid, "Aukció: Sikeresen licitáltál", COLOR_GREY);
		
		NPCArveresUpdate();
		
		return 1;
	}
	
	if(egyezik(cmd, "/rejtett"))
	{
		if(Szint(playerid)  < 5) return Msg(playerid, "Minimum 5ös szint.");
		if(!Rejtett[playerid])
		{
			Msg(playerid, "Hívószám kikapcsolva.");
			Rejtett[playerid] = 1;
			return 1;
		}
		Msg(playerid, "Hívószám bekapcsolva.");
		Rejtett[playerid] = 0;
		return 1;
	}
		
	if(egyezik(cmd, "/belépés") || egyezik(cmd, "/belepes"))
	{
		if(!PlayerToPoint(2, playerid, 228.2798,151.3269,1003.0234)) return Msg(playerid, "Nem vagy az FBI Bejáratnál.");
		
		if(Fbibelepes == 0)
		{
			if(LMT(playerid, LMUNKA_FBI))
			{
				format(string, sizeof(string), "Üdvözlöm %s ügynök.\nKérem adja meg a jelszót.", PlayerName(playerid)); 
				ShowPlayerDialog(playerid, DIALOG_FBI, DIALOG_STYLE_INPUT, "FBI Access", string, "Ok","Mégse");
				HolTart[playerid] = 0;
			}
			else
			{
				format(string, sizeof(string), "Üdvözlöm vendég.\nKérem adja meg a jelszót."); 
				ShowPlayerDialog(playerid, DIALOG_FBI, DIALOG_STYLE_INPUT, "FBI Access", string, "Ok","Mégse");
				HolTart[playerid] = 1;
			}
		}
		else if(Fbibelepes == 1)
		{
			Msg(playerid, "Az ajtó lezárva behatolás miatt.");
		}	
		else if(Fbibelepes == 2)
		{
			Msg(playerid, "Az ajtó bezárva a Head által.");
		}
	}
	if(egyezik(cmd, "/base"))
	{
		if(!LMT(playerid, LMUNKA_FBI) && !Munkarang(playerid, 3)) return 1;
		if(params < 1)
		{
			Msg(playerid, "/base [funkció]");
			Msg(playerid, "Funkciók: Deaktiválás, Bezárás, Nyitás, Aktiválás");
			return 1;
		}
		if(egyezik(param[1], "Deaktiválás"))
		{
			if(Fbibelepes != 1 && Fbibelepes != 3) return Msg(playerid, "Nem volt Behatolás/ A rendszer nincs Aktiválva.");
			Fbibelepes = 0;
			MoveDynamicObject(Fbilezaro1, 234.6328125, 169.4833984375, 994.68664550781, 4);
			MoveDynamicObject(Fbilezaro2, 246.5712890625, 169.4853515625, 994.68664550781, 4);
			MoveDynamicObject(Fbilezaro3, 238.7548828125, 139.3955078125, 995.11334228516, 4);
			format(string, sizeof(string), "FBI HQ: System Deactivated!");
			SendRadioMessage(LMUNKA_FBI, COLOR_RED, string);
			SendSwatRadioMessage(COLOR_RED, string);
			Msg(playerid, "System Deactivated.");
		}
		else if(egyezik(param[1], "bezárás") || egyezik(param[1], "bezaras"))
		{
			if(Fbibelepes != 0) return Msg(playerid, "Zárva van vagy Behatolás történt(használd a deaktiválást).");
			Fbibelepes = 2;
			Msg(playerid, "Bezárva");
		}
		else if(egyezik(param[1], "nyitás") || egyezik(param[1], "nyitas"))
		{
			if(Fbibelepes != 2) return Msg(playerid, "Nyitva van vagy Behatolás történt(használd a deaktiválást).");
			Fbibelepes = 0;
			Msg(playerid, "Nyitva.");
		}
		else if(egyezik(param[1], "aktiválás") || egyezik(param[1], "aktivalas"))
		{
			if(Fbibelepes == 3) return Msg(playerid, "A rendszer aktiválva van.");
			MoveDynamicObject(Fbilezaro1, 234.6336517334, 169.48387145996, 1001.9366455078, 4);
			MoveDynamicObject(Fbilezaro2, 246.57153320313, 169.48551940918, 1001.9366455078, 4);
			MoveDynamicObject(Fbilezaro3, 238.75532531738, 139.39646911621, 1002.6133422852, 4);
			Fbibelepes = 3;
			Msg(playerid, "System Activated");
		}
			
	}

	if(egyezik(cmd, "/aukció") || egyezik(cmd, "/aukcio"))
	{
		if(params < 1)
		{
			Msg(playerid, "Használata: /aukció [funkció]", false)
			Msg(playerid, "Funkciók: árverések, részvétel", false);
			if(Admin(playerid, 1337))
			Msg(playerid, "Admin: hozzáad, töröl, indít, licit, eladható");
			return 1;
		}
		
		if(egyezik(param[1], "részvétel") || egyezik(param[1], "reszvetel"))
		{
			if(!Aukcio[aElinditva])
				return Msg(playerid, "Jelenleg nincs aukció!");
			
			if(Aukciozik[playerid])
				Msg(playerid, "Most már nem veszel részt az aukción");
			else
				Msg(playerid, "Most már részt veszel az aukción, így látod ki és mennyit licitál");
			
			Aukciozik[playerid] = !Aukciozik[playerid];
		}
		else if(egyezik(param[1], "eladható") || egyezik(param[1], "eladhato"))
		{
			if(!Admin(playerid, 1337)) return 1;
			if(params < 2)
				return Msg(playerid, "Használata: /aukció eladható [ház / kocsi]", false);

			new mettol = 1, db, bool:haz, darab = 10;
			
			if(egyezik(param[2], "ház") || egyezik(param[2], "haz")) haz = true;
			else if(egyezik(param[2], "kocsi")) haz = false;
			else return Msg(playerid, "Használata: /aukció eladható [ház / kocsi]", false);
			
			if(params > 2)
				mettol = strval(param[3]);
			
			if(params > 3)
				darab = strval(param[4]);
			
			if(mettol < 1 || mettol > 30)
				return Msg(playerid, "Hiba: Minimum egytõl, maximum 30tól!", false);
			
			if(darab < 3 || darab > 20)
				return Msg(playerid, "Hiba: Minimum 3, maximum 20db!", false);
			
			if(haz) for(new x = 0; x < MAXHAZ; x++)
			{
				if(HouseInfo[x][Van] != 1 || !InaktivCucc(x, INAKTIV_HAZ)) continue;
				
				db++;
				if(db >= mettol)
					SendFormatMessage(playerid, COLOR_GREY, "Ház: See u. %d - Hely: %s", x, Haztipus(HouseInfo[x][hTipus]));
				
				if((db - mettol + 1) >= darab)
					break;
			}
			else for(new x = 0; x < MAXVSKOCSI; x++)
			{
				if(CarInfo[x][Van] != 1 || !InaktivCucc(x, INAKTIV_KOCSI)) continue;
				
				db++;
				if(db >= mettol)
					SendFormatMessage(playerid, COLOR_GREY, "Kocsi: ID: %d - Rendszám: %d - Model: %s", x, CarInfo[x][cId], GetVehicleModelName(CarInfo[x][cId], true));
				
				if((db - mettol + 1) >= darab)
					break;
			}
		}
		else if(egyezik(param[1], "licit"))
		{
			if(!Admin(playerid, 1337)) return 1;
			if(Aukcio[aElinditva])
			{
				if(Aukcio[aLicitalo] != NINCS)
					SendFormatMessage(playerid, COLOR_GREY, "Utolsó licitáló: %s - %dFt", PlayerName(Aukcio[aLicitalo]), Aukcio[aLicit]);
				else if(Aukcio[aLicitalo] == INVALID_PLAYER_ID)
					SendFormatMessage(playerid, COLOR_GREY, "A licitáló kilépett: %s - %dFt", Aukcio[aLicitaloVolt], Aukcio[aLicit]);
				else
					SendClientMessage(playerid, COLOR_GREY, "Nem licitáltak még");
				/*if(Aukcio[aLicitalok][0] != NINCS)
					SendFormatMessage(playerid, COLOR_GREY, "Elõzõ licitáló: %s - %dFt", PlayerName(Aukcio[aLicitalok][0]), Aukcio[aLicitek][0]);
				if(Aukcio[aLicitalok][1] != NINCS)
					SendFormatMessage(playerid, COLOR_GREY, "Elõzõ licitáló: %s - %dFt", PlayerName(Aukcio[aLicitalok][1]), Aukcio[aLicitek][1]);
				if(Aukcio[aLicitalok][2] != NINCS)
					SendFormatMessage(playerid, COLOR_GREY, "Elõzõ licitáló: %s - %dFt", PlayerName(Aukcio[aLicitalok][2]), Aukcio[aLicitek][2]);*/
			}
			else
				SendClientMessage(playerid, COLOR_GREY, "Nincs elindítva árverés");
		}
		else if(egyezik(param[1], "indít") || egyezik(param[1], "indit"))
		{
			if(!Admin(playerid, 1337)) return 1;
			
			if(Aukcio[aElinditva])
				return Msg(playerid, "Aukció: Már van elindítva aukció", false);
			if(params < 2)
				return Msg(playerid, "Használata: /aukció indít [kikiáltási ár] [késleltetési idõ percben - 0=ki]", false);
				
			new ar, ido, slot = NINCS;
			ar = strval(param[2]);
			
			if(params < 3)
				ido = 0;
			else
				ido = strval(param[3]);
				
			if(ar < 1 || ar > 5000000)
				return Msg(playerid, "Aukció: A minimum 1Ft, a maximum 5,000,000Ft", false);
			if(ido < 0 || ido > 15)
				return Msg(playerid, "Aukció: A minimum 1perc, a maximum 15perc, vagy 0 a kikapcsoláshoz", false);
			
			for(new x = 0; x < MAXAUKCIO; x++)
			{
				if(AukcioVarolista[x][vVan])
				{
					if(AukcioVarolista[x][vTipus] == ARVERES_TIPUS_HAZ)
					{
						if(AukcioVarolista[x][vID] < 0 || AukcioVarolista[x][vID] >= MAXHAZ || HouseInfo[AukcioVarolista[x][vID]][Van] != 1 || !InaktivCucc(AukcioVarolista[x][vID], INAKTIV_HAZ))
						{
							SendFormatMessage(playerid, COLOR_LIGHTBLUE, "See u. %d törölve a várólistáról", AukcioVarolista[x][vID]);
							AukcioVarolista[x][vVan] = false;
							AukcioVarolista[x][vTipus] = 0;
						}
						else { slot = x; break; }
					}
					else if(AukcioVarolista[x][vTipus] == ARVERES_TIPUS_KOCSI)
					{
						if(AukcioVarolista[x][vID] < 0 || AukcioVarolista[x][vID] >= MAXVSKOCSI || CarInfo[AukcioVarolista[x][vID]][Van] != 1 || !InaktivCucc(AukcioVarolista[x][vID], INAKTIV_KOCSI))
						{
							SendFormatMessage(playerid, COLOR_LIGHTBLUE, "%d IDjü kocsi (rendszám: %d) törölve a várólistáról", AukcioVarolista[x][vID], CarInfo[AukcioVarolista[x][vID]][cId]);
							AukcioVarolista[x][vVan] = false;
							AukcioVarolista[x][vTipus] = 0;
						}
						else { slot = x; break; }
					}
				}
			}
			if(slot == NINCS)
				return Msg(playerid, "Aukció: A várólista üres", false);

			Aukcio[aID] = AukcioVarolista[slot][vID];
			Aukcio[aTipus] = AukcioVarolista[slot][vTipus];
			Aukcio[aKezdoLicit] = ar;
			Aukcio[aLicit] = ar;
			Aukcio[aIdo] = 0;
			Aukcio[aVarakozas] = 0;
			
			AukcioVarolista[slot][vVan] = false;
			
			new uzenet[128];
			if(ido > 0)
			{
				Aukcio[aElinditva] = false;
				Aukcio[aVarakozas] = ido * 60;
				switch(Aukcio[aTipus])
				{
					case ARVERES_TIPUS_HAZ: format(uzenet, 128, "Aukciós ház: Árverés indul %dperc mulva egy házra. Elhelyezkedés: %s, kikiáltási ár: %dFt", ido, Haztipus(HouseInfo[Aukcio[aID]][hTipus]), ar);
					case ARVERES_TIPUS_KOCSI: format(uzenet, 128, "Aukciós ház: Árverés indul %dperc mulva egy kocsira. Model: %s, kikiáltási ár: %dFt", ido, GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true), ar);
				}
			}
			else
			{
				Aukcio[aElinditva] = true;
				Aukcio[aVarakozas] = 0;
				switch(Aukcio[aTipus])
				{
					case ARVERES_TIPUS_HAZ: format(uzenet, 128, "Aukciós ház: Árverés indult egy házra. Elhelyezkedés: %s, kikiáltási ár: %dFt", Haztipus(HouseInfo[Aukcio[aID]][hTipus]), ar);
					case ARVERES_TIPUS_KOCSI: format(uzenet, 128, "Aukciós ház: Árverés indult egy kocsira. Model: %s, kikiáltási ár: %dFt", GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true), ar);
				}
			}
			
			if(Aukcio[aTipus] == ARVERES_TIPUS_KOCSI)
			{
				LicitKocsi = CarInfo[Aukcio[aID]][cId];
				LockCar(LicitKocsi);
				
				ParkCar(Aukcio[aID], -2684.219, -30.470, 4.335, 92.563);
				
				CarInfo[Aukcio[aID]][cOwned] = 0;
				strmid(CarInfo[Aukcio[aID]][cOwner], "Nincs_Tulaj", 0, strlen("Nincs_Tulaj"), 20);
				
				CarUpdate(Aukcio[aID], CAR_Owned, CAR_Owner);
			}
			
			foreach(Jatekosok, x)
			{
				if(Szint(x) > 4)
					SendClientMessage(x, COLOR_ORANGE, uzenet);
			}
			
			Aukcio[aLicitalo] = NINCS;
			
			NPCArveresUpdate();
			
			/*Aukcio[aLicitalok] = {NINCS, NINCS, NINCS};
			Aukcio[aLicitek] = {0, 0, 0};*/
		}
		else if(egyezik(param[1], "töröl") || egyezik(param[1], "torol"))
		{
			if(!Admin(playerid, 1337)) return 1;
			
			if(params < 2)
				return Msg(playerid, "Használata: /aukció töröl [várólista ID]", false);
			
			new slot = strval(param[1]) - 1;
			if(slot < 0 || slot >= MAXAUKCIO || !AukcioVarolista[slot][vVan])
				return Msg(playerid, "Aukció: Hibás várólista ID", false);
			
			AukcioVarolista[slot][vVan] = false;
			
			ABroadCastFormat(1, COLOR_LIGHTRED, "<< Aukció: %s törölt a várólistáról egy árverést >>", PlayerName(playerid));
		}
		else if(egyezik(param[1], "hozzáad") || egyezik(param[1], "hozzaad"))
		{
			if(!Admin(playerid, 1337)) return 1;
			
			new slot = NINCS, bool:talalt;
			for(new x = 0; x < MAXAUKCIO; x++) if(!AukcioVarolista[x][vVan]) { slot = x; break; }
			
			if(slot == NINCS)
				return Msg(playerid, "Aukció: Tele a várólista", false);
			if(params < 3)
				return Msg(playerid, "Használata: /aukció hozzáad [ház / kocsi] [házszám / rendszám]", false);
			
			new id = strval(param[3]);
			if(egyezik(param[2], "ház") || egyezik(param[2], "haz"))
			{
				if(id < 0 || id >= MAXHAZ || !HouseInfo[id][Van])
					return Msg(playerid, "Aukció: Nincs ilyen ház", false);
				if(!InaktivCucc(id, INAKTIV_HAZ))
					return Msg(playerid, "Aukció: Ez a ház még nem eladható", false);
				
				for(new x = 0; x < MAXAUKCIO; x++) if(AukcioVarolista[x][vID] == id && AukcioVarolista[x][vTipus] == ARVERES_TIPUS_HAZ) { talalt = true; break; }
				if(Aukcio[aID] == id && Aukcio[aTipus] == ARVERES_TIPUS_HAZ || talalt)
					return Msg(playerid, "Aukció: Ez már várólistán van", false);
				
				AukcioVarolista[slot][vVan] = true;
				AukcioVarolista[slot][vTipus] = ARVERES_TIPUS_HAZ;
				AukcioVarolista[slot][vID] = id;
				
				ABroadCastFormat(COLOR_LIGHTRED, 1, "<< Aukció: %s hozzáadott a várólistához egy házat >>", PlayerName(playerid));
			}
			else if(egyezik(param[2], "kocsi"))
			{
				if(id < 0 || id >= MAXVSKOCSI || !CarInfo[id][Van])
					return Msg(playerid, "Aukció: Nincs ilyen kocsi", false);
				if(!InaktivCucc(id, INAKTIV_KOCSI))
					return Msg(playerid, "Aukció: Ez a kocsi még nem eladható", false);

				for(new x = 0; x < MAXAUKCIO; x++) if(AukcioVarolista[x][vID] == id && AukcioVarolista[x][vTipus] == ARVERES_TIPUS_KOCSI) { talalt = true; break; }
				if(Aukcio[aID] == id && Aukcio[aTipus] == ARVERES_TIPUS_KOCSI || talalt)
					return Msg(playerid, "Aukció: Ez már várólistán van", false);

				AukcioVarolista[slot][vVan] = true;
				AukcioVarolista[slot][vTipus] = ARVERES_TIPUS_KOCSI;
				AukcioVarolista[slot][vID] = id;
				
				ABroadCastFormat(COLOR_LIGHTRED, 1, "<< Aukció: %s hozzáadott a várólistához egy kocsit >>", PlayerName(playerid));
			}
			else
				Msg(playerid, "Használata: /aukció hozzáad [ház / kocsi] [házszám / rendszám]", false);
		}
		if(egyezik(param[1], "árverések") || egyezik(param[1], "arveresek"))
		{
			Msg(playerid, "==========[ Árverések ]==========", false, COLOR_WHITE);
			if(!Aukcio[aElinditva] && Aukcio[aVarakozas] == 0)
				Msg(playerid, "Aukció: Jelenleg nincs folyamatban árverés", false)
			else if(!Aukcio[aElinditva] && Aukcio[aVarakozas] > 0)
			{
				if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
					SendFormatMessage(playerid, COLOR_YELLOW, "Aukció: Árverés hamarosan (%dmp) - See u. %d - Hely: %s - Kikiáltási ár: %dFt", Aukcio[aVarakozas], Aukcio[aID], Haztipus(HouseInfo[Aukcio[aID]][hTipus]), Aukcio[aKezdoLicit]);
				else if(Aukcio[aTipus] == ARVERES_TIPUS_KOCSI)
					SendFormatMessage(playerid, COLOR_YELLOW, "Aukció: Árverés hamarosan (%dmp) - Kocsi rendszám: %d - Model: %s - Kikiáltási ár: %dFt", Aukcio[aVarakozas], CarInfo[Aukcio[aID]][cId], GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true), Aukcio[aKezdoLicit]);
			}
			else
			{
				if(Aukcio[aLicit] == 0)
				{
					if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
						SendFormatMessage(playerid, COLOR_YELLOW, "Aukció: Árverés folyamatban - See u. %d - Hely: %s - Kikiáltási ár: %dFt", Aukcio[aID], Haztipus(HouseInfo[Aukcio[aID]][hTipus]), Aukcio[aKezdoLicit]);
					else if(Aukcio[aTipus] == ARVERES_TIPUS_KOCSI)
						SendFormatMessage(playerid, COLOR_YELLOW, "Aukció: Árverés folyamatban - Kocsi rendszám: %d - Model: %s - Kikiáltási ár: %dFt", CarInfo[Aukcio[aID]][cId], GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true), Aukcio[aKezdoLicit]);
				}
				else
				{
					if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
						SendFormatMessage(playerid, COLOR_YELLOW, "Aukció: Árverés folyamatban - See u. %d - Hely: %s - Utolsó licit: %dFt", Aukcio[aID], Haztipus(HouseInfo[Aukcio[aID]][hTipus]), Aukcio[aLicit]);
					else if(Aukcio[aTipus] == ARVERES_TIPUS_KOCSI)
						SendFormatMessage(playerid, COLOR_YELLOW, "Aukció: Árverés folyamatban - Kocsi rendszám: %d - Model: %s - Utolsó licit: %dFt", CarInfo[Aukcio[aID]][cId], GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true), Aukcio[aLicit]);
				}
			}
			for(new varolista = 0; varolista < MAXAUKCIO; varolista++)
			{
				if(AukcioVarolista[varolista][vVan])
				{
					if(AukcioVarolista[varolista][vTipus] == ARVERES_TIPUS_HAZ)
						SendFormatMessage(playerid, COLOR_YELLOW, "[%d]Várólista: See u. %d - Hely: %s", (varolista+1), AukcioVarolista[varolista][vID], Haztipus(HouseInfo[AukcioVarolista[varolista][vID]][hTipus]));
					else if(AukcioVarolista[varolista][vTipus] == ARVERES_TIPUS_KOCSI)
						SendFormatMessage(playerid, COLOR_YELLOW, "[%d]Várólista: Kocsi rendszám: %d - Model: %s", (varolista+1), CarInfo[AukcioVarolista[varolista][vID]][cId], GetVehicleModelName(CarInfo[AukcioVarolista[varolista][vID]][cId], true));
				}
			}
		}
		return 1;
	}

	
	if(egyezik(cmd, "/beköt") || egyezik(cmd, "/bekot"))
	{
		if(Szint(playerid) < 10) return Msg(playerid, "10es szinttõl!");
		if(params < 2) return Msg(playerid, "/beköt [száj / szem] [játékos neve / id]");
		new p = ReturnUser(param[2]);
		if(p == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos");
		if(egyezik(param[1], "száj") || egyezik(param[1], "szaj"))
		{
			if(!Leutve[p] && !PlayerTied[p]) return Msg(playerid, "A játékos nincs leütve / megkötözve.");
			if(!SzajBekotve[p])
			{
				Msg(playerid, "Bekötötted a száját.");
				Msg(p, "Bekötötték a szádat, így nem tudsz beszélni.");
				SzajBekotve[p] = 1;
				Cselekves(playerid, "bekötötte a valakinek a száját", 1);
				return 1;
			}
			Msg(playerid, "Levetted a kötést a szájáról.");
			Msg(p, "Levették a kötést a szádról, újra tudsz beszélni.");
			SzajBekotve[p] = 0;
			Cselekves(playerid, "levette valakinek a kötést a szájáról", 1);
			return 1;
		}
		if(egyezik(param[1], "szem"))
		{
			if(!Leutve[p] && !PlayerTied[p]) return Msg(playerid, "A játékos nincs leütve / megkötözve.");
			if(!SzemBekotve[p])
			{
				Msg(playerid, "Bekötötted a szemét.");
				Msg(p, "Bekötötték a szemed, így nem látsz semmit.");
				SzemBekotve[p] = 1;
				Feketeseg(p, true);
				Cselekves(playerid, "bekötötte a valakinek a szemét", 1);
				return 1;
			}
			Msg(playerid, "Levetted a kötést a szemérõl.");
			Msg(p, "Levették a kötést a szemedrõl, újra látsz.");
			SzemBekotve[p] = 0;
			Feketeseg(p, false);
			Cselekves(playerid, "levette valakinek a kötést a szemérõl", 1);
			return 1;
		}
	}
	
	if(egyezik(cmd, "/sebességkorlát") || egyezik(cmd, "/sebessegkorlat") || egyezik(cmd, "/sk"))
	{
		if(params < 1)
			return Msg(playerid, "Használata: /sebességkorlát [50-130 vagy 0]");
			
		new seb = strval(param[1]);
		if(seb < 50 && seb != 0 || seb > 130)
			return Msg(playerid, "Használata: /sebességkorlát [50-130 vagy 0]");
		
		SebessegKorlat[playerid] = seb;
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Sebességkorlát beállítva: %d km/h", seb);
		
		return 1;
	}
	
	if(egyezik(cmd, "/elvesz"))
	{
		if(params < 1)
		{
			Msg(playerid,"/elvesz [Mit]");
			SendClientMessage(playerid,COLOR_LIGHTRED,"Amit elvehetsz: Kaja, Kokain, Heroin, Mati, Cigi, Kötszer, Fegyver, Armor");
			return 1;
		}
		new p = GetClosestPlayer(playerid);
		if(Szunet[p]) return Msg(playerid, "Épp ESC-el várj mire visszatér!");
		if(Animban[playerid])
			return Msg(playerid, "Animban?");
		
		if(GetDistanceBetweenPlayers(playerid, p) > 2.0)
			return Msg(playerid, "Nincs senki a közeledbe.");
		
		if(p == playerid)
			return Msg(playerid, "Há micsinálsz hülyevagy?");
		
		if(!Leutve[p] && !PlayerTied[p] && !Animban[p])
			return Msg(playerid, "A játékos nincs leütve / megkötözve / animban.");

		if(PlayerInfo[playerid][pJailed] == 3)
		{
			Cselekves(playerid, "rabolni akart adminjailban, de kapott +15perc idõt :)", 0, true);
			PlayerInfo[playerid][pJailTime] += 900;
			return 1;
		}
		
		if(FloodCheck(playerid)) return 1;

		if(egyezik(param[1], "fegyver") || egyezik(param[1], "weapon"))
		{
			new wn = 0, wid, wammo;
			for(new w = 0; w < 13; w++)
			{
				GetPlayerWeaponData(p, w, wid, wammo);
				if(wid != 0 && wammo != 0)
				{
					GiveWeapon(playerid, wid, wammo);
					wn++;
				}
				ResetWeapon(p);
			}
			if(!wn) return Msg(playerid, "A játékosnál nincs fegyver.");
			Msg(playerid, "* Elvetted a fegyvereit.", false, COLOR_LIGHTBLUE);
			SendClientMessage(p, COLOR_LIGHTBLUE, "* Elvették a fegyvereid.");
			Cselekves(playerid, "elvette valakinek a fegyvereit");
		}
		if(egyezik(param[1], "material") || egyezik(param[1], "mati"))
		{
			new pmats = PlayerInfo[p][pMats];
			new mats = PlayerInfo[playerid][pMats];
			if(pmats < 1) return Msg(playerid, "A játékosnál nincs material.");
			if(mats >= MAXMATI) return Msg(playerid, "Nem lehet nálad több material.");
			PlayerInfo[playerid][pMats] += pmats;
			PlayerInfo[p][pMats] -= pmats;
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Elvettél %ddb materialt tõle", pmats);
			SendFormatMessage(p, COLOR_LIGHTBLUE, "* Elvettek tõled %ddb materialt.", pmats);
			Cselekves(playerid, "elvette valakinek a materialjait");
		}
		if(egyezik(param[1], "kokain"))
		{
			new felesleg, volt;
			if(PlayerInfo[p][pKokain] < 1)
				return Msg(playerid, "A játékosnál nincs kokain.");
			
			volt = PlayerInfo[p][pKokain];
			PlayerInfo[playerid][pKokain] += PlayerInfo[p][pKokain];
			PlayerInfo[p][pKokain] = 0;
			
			if(PlayerInfo[playerid][pKokain] > MAXKOKAIN)
			{
				felesleg = PlayerInfo[playerid][pKokain] - MAXKOKAIN;
				PlayerInfo[playerid][pKokain] = MAXKOKAIN;
			}

			if(felesleg == 0)
			{
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Elvettél %dg kokaint tõle", volt);
				SendFormatMessage(p, COLOR_LIGHTBLUE, "* Elvettek tõled %dg kokaint.", volt);
			}
			else
			{
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Elvettél %dg kokaint tõle, de mivel csak %d lehet nálad ezért itthagysz %d grammot.", volt, MAXKOKAIN, felesleg);
				SendFormatMessage(p, COLOR_LIGHTBLUE, "* Elvettek tõled %dg kokaint.", volt);
			}
			Cselekves(playerid, "elvette valakinek a kokainjait");
		}
		if(egyezik(param[1], "heroin"))
		{
			new felesleg, volt;
			if(PlayerInfo[p][pHeroin] < 1)
				return Msg(playerid, "A játékosnál nincs heroin.");
			
			volt = PlayerInfo[p][pHeroin];
			PlayerInfo[playerid][pHeroin] += PlayerInfo[p][pHeroin];
			PlayerInfo[p][pHeroin] = 0;
			
			if(PlayerInfo[playerid][pHeroin] > MAXHEROIN)
			{
				felesleg = PlayerInfo[playerid][pHeroin] - MAXHEROIN;
				PlayerInfo[playerid][pHeroin] = MAXHEROIN;
			}

			if(felesleg == 0)
			{
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Elvettél %dg heroint tõle", volt);
				SendFormatMessage(p, COLOR_LIGHTBLUE, "* Elvettek tõled %dg heroint.", volt);
			}
			else
			{
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Elvettél %dg heroint tõle, de mivel csak %d lehet nálad ezért itthagysz %d grammot.", volt, MAXHEROIN, felesleg);
				SendFormatMessage(p, COLOR_LIGHTBLUE, "* Elvettek tõled %dg heroint.", volt);
			}
			Cselekves(playerid, "elvette valakinek a heroinjait");
		}
		/*if(egyezik(param[1], "kaja"))
		{
			new pkaja = PlayerInfo[p][pKaja];
			new kaja = PlayerInfo[playerid][pKaja];
			if(PlayerInfo[p][pKaja] < 1) return Msg(playerid, "A játékosnál nincs kaja.");
			if(PlayerInfo[p][pKaja] > 1)
			{
				PlayerInfo[playerid][pKaja] += pkaja;
				PlayerInfo[p][pKaja] -= pkaja;
			}
			if(Playeringo[playerid][pKaja] > MAXKAJA)
			{
			PlayerInfo[playerid][pKaja] = MAXKAJA;
			}
			if(PlayerInfo[playerid]pKaja] == MAXKAJA)
			{
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Elvettél %ddb kaját tõle: %s", pkaja, PlayerName(p));
				SendFormatMessage(p, COLOR_LIGHTBLUE, "* Elvettek tõled %ddb kaját.", pkaja);
			}
			else
			{
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Elvettél %ddb kaját tõle: %s, de mivel csak 5 lehet nálad ezért itthagysz %s darabot.", pkaja, PlayerName(p), kivontkaja);
				SendFormatMessage(p, COLOR_LIGHTBLUE, "* Elvettek tõled %ddb kaját.", pkaja);
			}
			Cselekves(playerid, "elvette valakinek a kajáit...", 1);
		}*/
		if(egyezik(param[1], "cigi"))
		{
			new pcigi = PlayerInfo[p][pCigi];
			if(PlayerInfo[p][pCigi] < 1) return Msg(playerid, "A játékosnál nincs cigi.");
			PlayerInfo[playerid][pCigi] += pcigi;
			PlayerInfo[p][pCigi] -= pcigi;
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Elvettél %ddb cigit tõle", pcigi);
			SendFormatMessage(p, COLOR_LIGHTBLUE, "* Elvettek tõled %ddb cigit.", pcigi);
			Cselekves(playerid, "elvette valakinek a cigieit");
		}
		if(egyezik(param[1], "armor"))
		{
			new Float:armor;
			new Float:armor2;
			GetPlayerArmour(playerid, armor);
			GetPlayerArmour(p, armor2);
			if(armor != 0) return Msg(playerid, "Van mellényed!");
			if(armor2 == 0) return Msg(playerid, "Nincs mellénye!");
			SetPlayerArmour(playerid, 100);
			SetPlayerArmour(p, 0);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Elvetted az armorát");
		    SendClientMessage(p, COLOR_LIGHTBLUE, "Elvették az armorod");
			Cselekves(playerid, "elvette valakinek az armorját");
		}
		if(egyezik(param[1], "kötszer") || egyezik(param[1], "kotszer"))
		{
			new felesleg, volt;
			if(PlayerInfo[p][pKotszer] < 1)
				return Msg(playerid, "A játékosnál nincs kötszer.");
			
			volt = PlayerInfo[p][pKotszer];
			PlayerInfo[playerid][pKotszer] += PlayerInfo[p][pKotszer];
			PlayerInfo[p][pKotszer] = 0;
			
			if(PlayerInfo[playerid][pKotszer] > MAXKOTSZER)
			{
				felesleg = PlayerInfo[playerid][pKotszer] - MAXKOTSZER;
				PlayerInfo[playerid][pKotszer] = MAXKOTSZER;
			}

			if(felesleg == 0)
			{
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Elvettél %ddb kötszert tõle", volt);
				SendFormatMessage(p, COLOR_LIGHTBLUE, "* Elvettek tõled %ddb kötszert.", volt);
			}
			else
			{
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Elvettél %ddb kötszert tõle, de mivel csak %d lehet nálad ezért itthagysz %d darabot.", volt, MAXKOTSZER, felesleg);
				SendFormatMessage(p, COLOR_LIGHTBLUE, "* Elvettek tõled %ddb kötszert.", volt);
			}
			Cselekves(playerid, "elvette valakinek a kötszereit");
		}
		return 1;
	}
	
	if(egyezik(cmd, "/fegyverszállítás") || egyezik(cmd, "/fegyverszallitas"))
	{
		if(FloodCheck(playerid)) return 1;
		if(params < 1)
		{
			Msg(playerid, "/fegyverszállítás [funkció]");
			Msg(playerid, "Funkció: kezd, befejez, kirabol, bepakol, lead", false);
			return 1;
		}
		if(egyezik(param[1], "bepakol"))
		{
			if(!LMT(playerid, LMUNKA_KATONA)) return Msg(playerid, "Nem vagy katona!");
			if(params < 2)
			{
				Msg(playerid, "/fegyverszállítás bepakol [fegyver]");
				Msg(playerid, "Fegyverek: silenced, deagle, mp5, m4, shotgun", false);
				return 1;
			}
			if(egyezik(param[2], "silenced"))
			{
				if(!PlayerToPoint(20, playerid, 273.2682,2020.8837,17.6406))
				{
					Msg(playerid, "Nem vagy a Fort de Morgan melletti raktáron!");
					SetPlayerCheckpoint(playerid, 273.2682,2020.8837,17.6406, 20);
					return 1;
				}
				if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Kocsiban?");
				new car = GetClosestVehicle(playerid);
				new x;
				new szam;
				szam = strval(param[2]);
				if(car == fegyverszallitokocsi[0]) x = 0;
				else if(car == fegyverszallitokocsi[1]) x = 1;
				else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
				if(params < 3) return Msg(playerid, "/fegyverszállítás bepakol silenced [szám]");
				new ossz = fegyveraszallitoban[x] + szam;
				if(ossz > 1000) return Msg(playerid, "Max 1000 fegyver!");
				silencedaszallitoban[x] += szam;
				fegyveraszallitoban[x] += szam;
				format(string, sizeof(string), "Beraktál %d darab silencedet a fegyverszállítóba!", szam);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			}
			else if(egyezik(param[2], "deagle"))
			{
				if(!PlayerToPoint(20, playerid, 273.2682,2020.8837,17.6406))
				{
					Msg(playerid, "Nem vagy a Fort de Morgan melletti raktáron!");
					SetPlayerCheckpoint(playerid, 273.2682,2020.8837,17.6406, 20);
					return 1;
				}
				if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Kocsiban?");
				new car = GetClosestVehicle(playerid);
				new szam;
				szam = strval(param[3]);
				new x;
				if(car == fegyverszallitokocsi[0]) x = 0;
				else if(car == fegyverszallitokocsi[1]) x = 1;
				else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
				if(params < 3) return Msg(playerid, "/fegyverszállítás bepakol deagle [szám]");
				new ossz = fegyveraszallitoban[x] + szam;
				if(ossz > 1000) return Msg(playerid, "Max 1000 fegyver!");
				deagleaszallitoban[x] += szam;
				fegyveraszallitoban[x] += szam;
				format(string, sizeof(string), "Beraktál %d darab deaglét a fegyverszállítóba!", szam);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			}
			else if(egyezik(param[2], "shotgun"))
			{
				if(!PlayerToPoint(20, playerid, 273.2682,2020.8837,17.6406))
				{
					Msg(playerid, "Nem vagy a Fort de Morgan melletti raktáron!");
					SetPlayerCheckpoint(playerid, 273.2682,2020.8837,17.6406, 20);
					return 1;
				}
				if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Kocsiban?");
				new car = GetClosestVehicle(playerid);
				new szam;
				szam = strval(param[3]);
				new x;
				if(car == fegyverszallitokocsi[0]) x = 0;
				else if(car == fegyverszallitokocsi[1]) x = 1;
				else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
				if(params < 3) return Msg(playerid, "/fegyverszállítás bepakol shotgun [szám]");
				new ossz = fegyveraszallitoban[x] + szam;
				if(ossz > 1000) return Msg(playerid, "Max 1000 fegyver!");
				shotgunaszallitoban[x] += szam;
				fegyveraszallitoban[x] += szam;
				format(string, sizeof(string), "Beraktál %d darab shotgunt a fegyverszállítóba!", szam);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			}
			else if(egyezik(param[2], "mp5"))
			{
				if(!PlayerToPoint(20, playerid, 273.2682,2020.8837,17.6406))
				{
					Msg(playerid, "Nem vagy a Fort de Morgan melletti raktáron!");
					SetPlayerCheckpoint(playerid, 273.2682,2020.8837,17.6406, 20);
					return 1;
				}
				if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Kocsiban?");
				new car = GetClosestVehicle(playerid);
				new szam;
				szam = strval(param[3]);
				new x;
				if(car == fegyverszallitokocsi[0]) x = 0;
				else if(car == fegyverszallitokocsi[1]) x = 1;
				else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
				if(params < 3) return Msg(playerid, "/fegyverszállítás bepakol mp5 [szám]");
				new ossz = fegyveraszallitoban[x] + szam;
				if(ossz > 1000) return Msg(playerid, "Max 1000 fegyver!");
				mp5aszallitoban[x] += szam;
				fegyveraszallitoban[x] += szam;
				format(string, sizeof(string), "Beraktál %d darab mp5-t a fegyverszállítóba!", szam);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			}
			else if(egyezik(param[2], "M4"))
			{
				if(!PlayerToPoint(20, playerid, 273.2682,2020.8837,17.6406))
				{
					Msg(playerid, "Nem vagy a Fort de Morgan melletti raktáron!");
					SetPlayerCheckpoint(playerid, 273.2682,2020.8837,17.6406, 20);
					return 1;
				}
				if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Kocsiban?");
				new car = GetClosestVehicle(playerid);
				new szam;
				szam = strval(param[3]);
				new x;
				if(car == fegyverszallitokocsi[0]) x = 0;
				else if(car == fegyverszallitokocsi[1]) x = 1;
				else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
				if(params < 3) return Msg(playerid, "/fegyverszállítás bepakol M4 [szám]");
				new ossz = fegyveraszallitoban[x] + szam;
				if(ossz > 1000) return Msg(playerid, "Max 1000 fegyver!");
				m4aszallitoban[x] += szam;
				fegyveraszallitoban[x] += szam;
				format(string, sizeof(string), "Beraktál %d darab M4-et a fegyverszállítóba!", szam);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			}
		}
		else if(egyezik(param[1], "kezd"))
		{
			if(!LMT(playerid, LMUNKA_KATONA)) return Msg(playerid, "Nem vagy katona!");
			if(PlayerInfo[playerid][pRank] < 6) return Msg(playerid, "Minimum 6-os rang!");
			if(fszallit == 1) return Msg(playerid, "Már van elkezdett szállítás!");
			if(!PlayerToPoint(20, playerid, 273.2682,2020.8837,17.6406))
			{
				Msg(playerid, "Nem vagy a Fort de Morgan melletti raktáron!");
				SetPlayerCheckpoint(playerid, 273.2682,2020.8837,17.6406, 20);
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy kocsiban!");
			new car = GetPlayerVehicleID(playerid);
			new x;
			if(car == fegyverszallitokocsi[0]) x = 0;
			else if(car == fegyverszallitokocsi[1]) x = 1;
			else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
			format(string, sizeof(string), "%s megkezdte a fegyverszállítást!", PlayerName(playerid));
			SendRadioMessage(LMUNKA_SCPD, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
			format(string, sizeof(string), "================[A szállítás tartalma]================");
			SendRadioMessage(LMUNKA_SCPD, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
			new silenced = silencedaszallitoban[x];
			new deagle = deagleaszallitoban[x];
			new shotgun = shotgunaszallitoban[x];
			new mp5 = mp5aszallitoban[x];
			new M4 = m4aszallitoban[x];
			format(string, sizeof(string), "%d silenced | %d deagle | %d shotgun | %d mp5 | %d M4", silenced, deagle, shotgun, mp5, M4);
			SendRadioMessage(LMUNKA_SCPD, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
			fszallit = 1;
		}
		else if(egyezik(param[1], "lead"))
		{
			if(PlayerToPoint(10, playerid, 1578.8477,-1632.0316,13.3828))
			{
				if(egyezik(param[2], "silenced"))
				{
					if(fszallit == 0) return Msg(playerid, "Nincs elkezdett szállítás!");
					new szam;
					szam = strval(param[3]);
					if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy kocsiban!");
					new car = GetPlayerVehicleID(playerid);
					new x;
					if(car == fegyverszallitokocsi[0]) x = 0;
					else if(car == fegyverszallitokocsi[1]) x = 1;
					else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
					if(szam > silencedaszallitoban[x]) return Msg(playerid, "Ennyi nincs a kocsiban!");
					format(string, sizeof(string), "%s leadott %d-s silencedet SCPD-n!", PlayerName(playerid), szam);
					SendRadioMessage(LMUNKA_SCPD, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					FrakcioInfo[LMUNKA_SCPD][fSilenced] += szam;
					silencedaszallitoban[x] -= szam;
				}
				else if(egyezik(param[2], "deagle"))
				{
					if(fszallit == 0) return Msg(playerid, "Nincs elkezdett szállítás!");
					new szam;
					szam = strval(param[3]);
					if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy kocsiban!");
					new car = GetPlayerVehicleID(playerid);
					new x;
					if(car == fegyverszallitokocsi[0]) x = 0;
					else if(car == fegyverszallitokocsi[1]) x = 1;
					else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
					if(szam > deagleaszallitoban[x]) return Msg(playerid, "Ennyi nincs a kocsiban!");
					format(string, sizeof(string), "%s leadott %d-s deaglet SCPD-n!", PlayerName(playerid), szam);
					SendRadioMessage(LMUNKA_SCPD, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					FrakcioInfo[LMUNKA_SCPD][fDeagle] += szam;
					deagleaszallitoban[x] -= szam;
				}
				else if(egyezik(param[2], "shotgun"))
				{
					if(fszallit == 0) return Msg(playerid, "Nincs elkezdett szállítás!");
					new szam;
					szam = strval(param[3]);
					if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy kocsiban!");
					new car = GetPlayerVehicleID(playerid);
					new x;
					if(car == fegyverszallitokocsi[0]) x = 0;
					else if(car == fegyverszallitokocsi[1]) x = 1;
					else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
					if(szam > shotgunaszallitoban[x]) return Msg(playerid, "Ennyi nincs a kocsiban!");
					format(string, sizeof(string), "%s leadott %d-s shotgunt SCPD-n!", PlayerName(playerid), szam);
					SendRadioMessage(LMUNKA_SCPD, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					FrakcioInfo[LMUNKA_SCPD][fShotgun] += szam;
					shotgunaszallitoban[x] -= szam;
				}
				else if(egyezik(param[2], "mp5"))
				{
					if(fszallit == 0) return Msg(playerid, "Nincs elkezdett szállítás!");
					new szam;
					szam = strval(param[3]);
					if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy kocsiban!");
					new car = GetPlayerVehicleID(playerid);
					new x;
					if(car == fegyverszallitokocsi[0]) x = 0;
					else if(car == fegyverszallitokocsi[1]) x = 1;
					else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
					if(szam > mp5aszallitoban[x]) return Msg(playerid, "Ennyi nincs a kocsiban!");
					format(string, sizeof(string), "%s leadott %d-s mp5-t SCPD-n!", PlayerName(playerid), szam);
					SendRadioMessage(LMUNKA_SCPD, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					FrakcioInfo[LMUNKA_SCPD][fMp5] += szam;
					mp5aszallitoban[x] -= szam;
				}
				else if(egyezik(param[2], "M4"))
				{
					if(fszallit == 0) return Msg(playerid, "Nincs elkezdett szállítás!");
					new szam;
					szam = strval(param[3]);
					if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy kocsiban!");
					new car = GetPlayerVehicleID(playerid);
					new x;
					if(car == fegyverszallitokocsi[0]) x = 0;
					else if(car == fegyverszallitokocsi[1]) x = 1;
					else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
					if(szam > m4aszallitoban[x]) return Msg(playerid, "Ennyi nincs a kocsiban!");
					format(string, sizeof(string), "%s leadott %d-s silencedet SCPD-n!", PlayerName(playerid), szam);
					SendRadioMessage(LMUNKA_SCPD, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					FrakcioInfo[LMUNKA_SCPD][fM4] += szam;
					m4aszallitoban[x] -= szam;
				}
			}
			else if(PlayerToPoint(10, playerid, 733.2832,-1351.6173,13.5000))
			{
				if(egyezik(param[2], "silenced"))
				{
					if(fszallit == 0) return Msg(playerid, "Nincs elkezdett szállítás!");
					new szam;
					szam = strval(param[3]);
					if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy kocsiban!");
					new car = GetPlayerVehicleID(playerid);
					new x;
					if(car == fegyverszallitokocsi[0]) x = 0;
					else if(car == fegyverszallitokocsi[1]) x = 1;
					else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
					if(szam > silencedaszallitoban[x]) return Msg(playerid, "Ennyi nincs a kocsiban!");
					format(string, sizeof(string), "%s leadott %d-s silencedet SCPD-n!", PlayerName(playerid), szam);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					FrakcioInfo[LMUNKA_VPOP][fSilenced] += szam;
					silencedaszallitoban[x] -= szam;
				}
				else if(egyezik(param[2], "deagle"))
				{
					if(fszallit == 0) return Msg(playerid, "Nincs elkezdett szállítás!");
					new szam;
					szam = strval(param[3]);
					if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy kocsiban!");
					new car = GetPlayerVehicleID(playerid);
					new x;
					if(car == fegyverszallitokocsi[0]) x = 0;
					else if(car == fegyverszallitokocsi[1]) x = 1;
					else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
					if(szam > deagleaszallitoban[x]) return Msg(playerid, "Ennyi nincs a kocsiban!");
					format(string, sizeof(string), "%s leadott %d-s deaglet SCPD-n!", PlayerName(playerid), szam);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					FrakcioInfo[LMUNKA_VPOP][fDeagle] += szam;
					deagleaszallitoban[x] -= szam;
				}
				else if(egyezik(param[2], "shotgun"))
				{
					if(fszallit == 0) return Msg(playerid, "Nincs elkezdett szállítás!");
					new szam;
					szam = strval(param[3]);
					if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy kocsiban!");
					new car = GetPlayerVehicleID(playerid);
					new x;
					if(car == fegyverszallitokocsi[0]) x = 0;
					else if(car == fegyverszallitokocsi[1]) x = 1;
					else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
					if(szam > shotgunaszallitoban[x]) return Msg(playerid, "Ennyi nincs a kocsiban!");
					format(string, sizeof(string), "%s leadott %d-s shotgunt SCPD-n!", PlayerName(playerid), szam);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					FrakcioInfo[LMUNKA_VPOP][fShotgun] += szam;
					shotgunaszallitoban[x] -= szam;
				}
				else if(egyezik(param[2], "mp5"))
				{
					if(fszallit == 0) return Msg(playerid, "Nincs elkezdett szállítás!");
					new szam;
					szam = strval(param[3]);
					if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy kocsiban!");
					new car = GetPlayerVehicleID(playerid);
					new x;
					if(car == fegyverszallitokocsi[0]) x = 0;
					else if(car == fegyverszallitokocsi[1]) x = 1;
					else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
					if(szam > mp5aszallitoban[x]) return Msg(playerid, "Ennyi nincs a kocsiban!");
					format(string, sizeof(string), "%s leadott %d-s mp5-t SCPD-n!", PlayerName(playerid), szam);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					FrakcioInfo[LMUNKA_VPOP][fMp5] += szam;
					mp5aszallitoban[x] -= szam;
				}
				else if(egyezik(param[2], "M4"))
				{
					if(fszallit == 0) return Msg(playerid, "Nincs elkezdett szállítás!");
					new szam;
					szam = strval(param[3]);
					if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy kocsiban!");
					new car = GetPlayerVehicleID(playerid);
					new x;
					if(car == fegyverszallitokocsi[0]) x = 0;
					else if(car == fegyverszallitokocsi[1]) x = 1;
					else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
					if(szam > m4aszallitoban[x]) return Msg(playerid, "Ennyi nincs a kocsiban!");
					format(string, sizeof(string), "%s leadott %d-s silencedet SCPD-n!", PlayerName(playerid), szam);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
					SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
					FrakcioInfo[LMUNKA_VPOP][fM4] += szam;
					m4aszallitoban[x] -= szam;
				}
			}
		}
		else if(egyezik(param[1], "befejez"))
		{
			if(!LMT(playerid, LMUNKA_KATONA)) return Msg(playerid, "Nem vagy katona!");
			if(PlayerInfo[playerid][pRank] < 6) return Msg(playerid, "Minimum 6-os rang!");
			format(string, sizeof(string), "%s befejezte a szállítást!", PlayerName(playerid));
			SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTGREEN, string);
			SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTGREEN, string);
			fszallit = 0;
		}
		else if(egyezik(param[1], "kirabol"))
		{
			if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "A-a! Kocsiban nem!");
			new car, x;
           	car = GetClosestVehicle(playerid);
			if(car == fegyverszallitokocsi[0]) x = 0;
			else if(car == fegyverszallitokocsi[1]) x = 1;
			else return Msg(playerid, "Ez nem fegyverszállító kocsi!");
			if(silencedaszallitoban[x] > 0) 
			{
				GiveWeapon(playerid, 23, 70);
				silencedaszallitoban[x]--;
			}
			else if(deagleaszallitoban[x] > 0) 
			{
				GiveWeapon(playerid, 24, 70);
				deagleaszallitoban[x]--;
			}
			else if(shotgunaszallitoban[x] > 0) 
			{
				GiveWeapon(playerid, 25, 100);
				shotgunaszallitoban[x]--;
			}
			else if(mp5aszallitoban[x] > 0) 
			{
				GiveWeapon(playerid, 29, 300);
				mp5aszallitoban[x]--;
			}
			else if(m4aszallitoban[x] > 0) 
			{
				GiveWeapon(playerid, 31, 300);
				m4aszallitoban[x]--;
			}
		}
		return 1;
	}
	
	
	if(egyezik(cmd, "/fegyverraktár") || egyezik(cmd, "/fegyverraktar"))
	{
		if(FloodCheck(playerid)) return 1;
		if(!LMT(playerid, LMUNKA_COLUMBIA) && !LMT(playerid, LMUNKA_CAMORRA) && !LMT(playerid, LMUNKA_YAKUZA)) return Msg(playerid, "Nem vagy maffia tagja!");
		new frakcio = PlayerInfo[playerid][pMember];
		if(!PlayerToPoint(3, playerid, FrakcioInfo[frakcio][fPosX], FrakcioInfo[frakcio][fPosY], FrakcioInfo[frakcio][fPosZ])) return Msg(playerid, "Nem vagy a széf közelében.");
		if(params < 1) 
		{
			Msg(playerid, "/fegyverraktár [Funkció]");
			Msg(playerid, "Funkciók: berak, kivesz, megnéz", false);
			return 1;
		}
		if(egyezik(param[1], "berak"))
		{
			new slot = strval(param[2]);
			if(params < 2) return Msg(playerid, "/fegyverraktár berak [Slot]");
			if(slot < 1 || slot > 50) return Msg(playerid, "1-50!");
			new fegyver = GetPlayerWeapon(playerid);
			new tolteny = GetPlayerAmmo(playerid);
			if(fegyver == 0) return Msg(playerid, "Nincs nálad fegyver!");
			FrakcioInfo[frakcio][fFegyver][slot] = fegyver;
			FrakcioInfo[frakcio][fTolteny][slot] = tolteny;
			FegyverElvesz(playerid, fegyver);
			format(string, sizeof(string), "Beraktál egy %s fegyvert a raktárba, töltény: %d", aWeaponNames[fegyver], tolteny);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			SaveRaktar();
		}
		else if(egyezik(param[1], "kivesz"))
		{
			if(PlayerInfo[playerid][pRank] < FrakcioInfo[frakcio][fMinrang]) return Msg(playerid, "Nincs elég magas rangod hozzá!");
			new fegyver = GetPlayerWeapon(playerid);
			if(fegyver != 0) return Msg(playerid, "Már van nálad fegyver!")
			new slot
			slot = strval(param[2]);
			if(slot < 1 || slot > 50) return Msg(playerid, "1-50!");
			if(FrakcioInfo[frakcio][fFegyver][slot] == 0) return Msg(playerid, "Itt nincs fegyver!");
			new fegyo, ammo;
			fegyo = FrakcioInfo[frakcio][fFegyver][slot];
			ammo = FrakcioInfo[frakcio][fTolteny][slot];
			GiveWeapon(playerid, fegyo, ammo);
			FrakcioInfo[frakcio][fFegyver][slot] = 0;
			FrakcioInfo[frakcio][fTolteny][slot] = 0;
			format(string, sizeof(string), "Kivettél egy %s fegyvert a raktárból, töltény: %d", aWeaponNames[fegyo], ammo);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			SaveRaktar();
		}
		else if(egyezik(param[1], "megnéz") || egyezik(param[1], "megnez"))
		{
			new slot;
			slot	= strval(param[2]);
			if(slot < 1 || slot > 5) return Msg(playerid, "1-5!");
			new mettol, meddig;
			mettol = (slot - 1) * 10 + 1;
			meddig = slot * 10;
			SendClientMessage(playerid, COLOR_YELLOW, "========[Fegyverraktár]=======");
			for(new id = mettol; id <= meddig; id++)
			{
				if(FrakcioInfo[frakcio][fFegyver][id] > 0)
					format(string, sizeof(string), "[%d] Fegyver: %s | Töltény: %d", id, aWeaponNames[FrakcioInfo[frakcio][fFegyver][id]], FrakcioInfo[frakcio][fTolteny][id]);
				else
					format(string, sizeof(string), "[%d] Üres", id);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
		}
	}
	
//szállítás
	//========================================================================================================================================//
	if(egyezik(cmd, "/jelszó") || egyezik(cmd, "/jelszo"))
	{
		if(PlayerInfo[playerid][pLeader] == 0) return Msg(playerid, "Nem vagy leader.");
		new leader = PlayerInfo[playerid][pLeader];
		if(params < 1) return Msg(playerid, "/jelszó [Új jelszó]");
		FrakcioInfo[leader][fJelszo] = param[1];
		Msg(playerid, "Jelszó beállítva!");
	}
	
	
	if(egyezik(cmd, "/jegy"))
	{
		if(FloodCheck(playerid, 1, 3)) return 1;
		
		new time = gettime();
		if(params < 1)
		{
			if(!JegyEllenor(playerid))
				Msg(playerid, "Használata: /jegy [megnéz / vesz / megmutat / büntet]", false);
			else
				Msg(playerid, "Használata: /jegy [megnéz / vesz / megmutat]", false);
			return 1;
		}
		
		if(egyezik(param[1], "megnéz") || egyezik(param[1], "megnez"))
		{
			if(PlayerInfo[playerid][pJegy] == 0)
			{
				Msg(playerid, "Jegy / Bérlet: Nincs", false);
				Cselekves(playerid, "megnézte, hogy van-e jegye vagy bérlete, de sajnos nincs");
			}
			else if(PlayerInfo[playerid][pJegy] == 1)
			{
				Msg(playerid, "Jegy: Van", false);
				Cselekves(playerid, "megnézte a jegyét");
			}
			else if(PlayerInfo[playerid][pJegy] > time)
			{
				new kulonbseg, ora, perc;
				kulonbseg = PlayerInfo[playerid][pJegy] - gettime();
				ora = floatround((float(kulonbseg) / 3600.0), floatround_floor);
				perc = floatround((float(kulonbseg) / 60.0), floatround_floor) % 60;
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Bérlet: Van - Még %dóra és %dpercig", ora, perc);
				Cselekves(playerid, "megnézte meddig érvényes a bérlete");
			}
		}
		else if(egyezik(param[1], "megmutat"))
		{
			if(PlayerInfo[playerid][pJegy] == 0 || PlayerInfo[playerid][pJegy] > 1 && PlayerInfo[playerid][pJegy] < gettime())
				return Msg(playerid, "Nincs jegyed!");
				
			if(params < 2)
				return Msg(playerid, "/jegy megmutat [Név / ID]");
			
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID)
				return Msg(playerid, "Nincs ilyen játékos");
			if(GetDistanceBetweenPlayers(player, playerid) > 3.0)
				return Msg(playerid, "Nincs a közeledben");
			if(!JegyEllenor(player))
				return Msg(playerid, "Õ nem jegy ellenõr!");
			
			if(PlayerInfo[playerid][pJegy] == 1)
			{
				SendFormatMessage(player, COLOR_LIGHTGREEN, "Van érvényes jegye neki: %s", PlayerName(playerid));
				Msg(playerid, "Felmutattad a jegyed az ellenõrnek");
				Cselekves(playerid, "felmutatta a jegyét az ellenõrnek");
			}
			else if(PlayerInfo[playerid][pJegy] > time)
			{
				new kulonbseg, ora, perc;
				kulonbseg = PlayerInfo[playerid][pJegy] - time;
				ora = floatround((float(kulonbseg) / 3600.0), floatround_floor);
				perc = floatround((float(kulonbseg) / 60.0), floatround_floor) % 60;
				SendFormatMessage(player, COLOR_LIGHTGREEN, "Bérlet: Van érvényes bérlete neki: %s - Még %dóra és %dpercig", PlayerName(playerid), ora, perc);
				Msg(playerid, "Felmutattad a bérleted az ellenõrnek");
				Cselekves(playerid, "felmutatta a bérletét az ellenõrnek");
			}
		}
		else if(egyezik(param[1], "büntet") || egyezik(param[1], "buntet"))
		{
			if(!JegyEllenor(playerid))
				return Msg(playerid, "Nem vagy jegy ellenõr!");
				
			new busz = NPCBuszban(playerid);
			if(busz == NINCS)
				return Msg(playerid, "Nem vagy buszon!");
				
			if(params < 2)
				return Msg(playerid, "/jegy büntet [Név / ID]");
				
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID)
				return Msg(playerid, "Nincs ilyen játékos");
			if(GetDistanceBetweenPlayers(player, playerid) > 3.0)
				return Msg(playerid, "Nincs a közeledben");
			if(JegyEllenor(player))
				return Msg(playerid, "Õ jegy ellenõr!");
			if(JegyBuntetve[player])
				return Msg(playerid, "Õ már meg lett büntetve!");
			if(player == playerid)
				return Msg(playerid, "Magadat akarod megbüntetni? Mi vagy te perverz? :O");
			if(PlayerInfo[player][pJegy] > 0)
				return Msg(playerid, "Neki van jegye / bérlete!");
			
			GiveMoney(player, -20000);
			FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] += 20000;
			Msg(playerid, "Megbüntetted");
			Msg(player, "Az adóellenõr megbüntetett 20000Ftra");
			Cselekves(player, "bírságot kapott az ellenõrtõl és kifizette");
			JegyBuntetve[player] = true;
		}
		else if(egyezik(param[1], "vesz"))
		{
			if(PlayerInfo[playerid][pJegy] > 0)
				return Msg(playerid, "Már van jegyed vagy bérleted!");
				
			if(params < 2)
				return Msg(playerid, "/jegy vesz [sima - 1000Ft (leszállásig) / bérlet - 15,000Ft (1nap)]");
			
			if(!IsAt(playerid, IsAt_Buszmegallo))
				return Msg(playerid, "Nem vagy buszmegállóban!");
			
			if(egyezik(param[2], "sima"))
			{
				if(GetMoney(playerid) < 1000)
					return Msg(playerid, "Az ára 1000Ft");
				GiveMoney(playerid, -1000);
				Cselekves(playerid, "vett egy jegyet");
				PlayerInfo[playerid][pJegy] = 1;
			}
			else if(egyezik(param[2], "berlet") || egyezik(param[2], "bérlet"))
			{
				if(GetMoney(playerid) < 15000)
					return Msg(playerid, "Az ára 15,000Ft");
				GiveMoney(playerid, -15000);
				Cselekves(playerid, "vett egy bérletet");
				PlayerInfo[playerid][pJegy] = time + 86400;
			}
		}
		
		return 1;
	}

	if(egyezik(cmd, "/menetrend"))
	{
		if(params < 1)
		{
			new buszok, kovetkezo, ido;
			Msg(playerid, "==========[ Busz menetrend ]==========", false, COLOR_YELLOW);
			for(new x = 0; x < MAX_NPC_SOFOR; x++)
			{
				if(NPC_Vezetok[x][nConnected])
				{
					buszok++;
					
					if(NPC_Vezetok[x][nHolTart] == NPC_Vezetok[x][nMegallokSzama])
						kovetkezo = 0;
					else
						kovetkezo = NPC_Vezetok[x][nHolTart];
						
					ido = NPC_Vezetok[x][nMenetIdo];
					
					if(NPC_Vezetok[x][nMegallt])
						SendFormatMessage(playerid, COLOR_LIGHTGREEN, "%s | Következõ megálló: %s (Áll: %s)", NPC_Vezetok[x][nNev], NPC_MegallokNeve[x][kovetkezo], MegalloNev(x, NPC_MEGALLO_JELENLEGI));
					else
					{
						if(ido > 0)
							SendFormatMessage(playerid, COLOR_LIGHTGREEN, "%s | Következõ megálló: %s (%dmp)", NPC_Vezetok[x][nNev], NPC_MegallokNeve[x][kovetkezo], ido);
						else
							SendFormatMessage(playerid, COLOR_LIGHTGREEN, "%s | Következõ megálló: %s", NPC_Vezetok[x][nNev], NPC_MegallokNeve[x][kovetkezo]);
					}
				}
			}
			if(buszok == 0)
				Msg(playerid, "Jelenleg nincs egy busz sem");
		}
		else
		{
			new id = strval(param[1]);
			if(id < 1 || id > MAX_NPC_SOFOR || !NPC_Vezetok[id-1][nConnected]) return Msg(playerid, "Nincs ilyen busz");
			id--;

			new kovetkezo;
			if(NPC_Vezetok[id][nHolTart] == NPC_Vezetok[id][nMegallokSzama])
				kovetkezo = 0;
			else
				kovetkezo = NPC_Vezetok[id][nHolTart];

			SendFormatMessage(playerid, COLOR_YELLOW, "==========[ %s: megállók ]==========", NPC_Vezetok[id][nNev]);
			for(new x = 0; x < MAX_MEGALLO; x++)
			{
				if(NPC_Megallok[id][x][0] == 0.0) continue;
				/*if(kovetkezo == x)
				{
					new ido = NPC_Vezetok[id][nMenetIdo];
					if(ido > 0)
						SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[#%d >> %d] %s", (x+1), ido, NPC_MegallokNeve[id][x]);
					else
						SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[#%d >>] %s", (x+1), NPC_MegallokNeve[id][x]);
				}*/
				if(NPC_Vezetok[id][nMegallt] && Megallo(id, NPC_MEGALLO_JELENLEGI) == x)
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[#%d - Áll] %s", (x+1), NPC_MegallokNeve[id][x]);
				else
				{
					if(kovetkezo == x)
						SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[#%d >>] %s", (x+1), NPC_MegallokNeve[id][x]);
					else
						SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[#%d] %s", (x+1), NPC_MegallokNeve[id][x]);
				}
			}
		}
		return 1;
	}

	if(egyezik(cmd, "/kulcs"))
	{
		if(params < 1) return Msg(playerid, "/kulcs [jármû]");
		new p;
		//new haz;
		new jarmu;
		/*if(egyezik(param[1], "ház") || egyezik(param[1], "haz"))
		{
			if(PlayerInfo[playerid][pPhousekey] == NINCS && PlayerInfo[playerid][pPhousekey2] == NINCS) return Msg(playerid, "Nincs házad.");
			if(PlayerInfo[playerid][pPhousekey] != NINCS && PlayerInfo[playerid][pPhousekey2] != NINCS)
			{
				if(params < 3) return Msg(playerid, "/kulcs ház [1/2] [játékos neve / id]");
				new melyik = strval(param[2]);
				p = ReturnUser(param[3]);
				if(p == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
				if(melyik == 1)	
					haz = PlayerInfo[playerid][pPhousekey];
				if(melyik == 2)	
					haz = PlayerInfo[playerid][pPhousekey2];	
					
				if(GetDistanceBetweenPlayers(playerid, p) > 2) return Msg(playerid, "Nincs a közeledben a játékos.");
				HazKulcs[p] = haz;	
			}
			else
			{
				if(params < 2) return Msg(playerid, "/kulcs ház [játékos neve / id]");
				p = ReturnUser(param[2]);
				if(p == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
				if(GetDistanceBetweenPlayers(playerid, p) > 2) return Msg(playerid, "Nincs a közeledben a játékos.");
				haz = PlayerInfo[playerid][pPhousekey];
				HazKulcs[p] = haz;	
			}
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Átattad a házad kulcsaid neki: %s", PlayerName(p));
			SendFormatMessage(p, COLOR_LIGHTGREEN, "* %s oda adta a háza kulcsait.", PlayerName(playerid));
			Cselekves(playerid, "átad egy kulcsot valakinek...");
		}*/
		if(egyezik(param[1], "jármû") || egyezik(param[1], "jarmu"))
		{
			if(PlayerInfo[playerid][pPcarkey] == NINCS && PlayerInfo[playerid][pPcarkey2] == NINCS) return Msg(playerid, "Nincs jármûved.");
			if(PlayerInfo[playerid][pPcarkey] != NINCS && PlayerInfo[playerid][pPcarkey2] != NINCS)
			{
				if(params < 3) return Msg(playerid, "/kulcs jármû [1/2] [játékos neve / id]");
				new melyik = strval(param[2]);
				p = ReturnUser(param[3]);
				if(p == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
				if(melyik == 1)	
					jarmu = PlayerInfo[playerid][pPcarkey];
				if(melyik == 2)	
					jarmu = PlayerInfo[playerid][pPcarkey2];	
					
				if(GetDistanceBetweenPlayers(playerid, p) > 2) return Msg(playerid, "Nincs a közeledben a játékos.");
				JarmuKulcs[p] = jarmu;	
			}
			else
			{
				if(params < 2) return Msg(playerid, "/kulcs jármû [játékos neve / id]");
				p = ReturnUser(param[2]);
				if(p == -1) return Msg(playerid, "Nincs ilyen játékos.");
				if(GetDistanceBetweenPlayers(playerid, p) > 2) return Msg(playerid, "Nincs a közeledben a játékos.");
				jarmu = PlayerInfo[playerid][pPcarkey];
				JarmuKulcs[p] = jarmu;	
			}
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Átattad a jármûved kulcsait neki: %s", PlayerName(p));
			SendFormatMessage(p, COLOR_LIGHTGREEN, "* %s oda adta a jármûve kulcsait.", PlayerName(playerid));
			Cselekves(playerid, "átad egy kulcsot valakinek...");
		}
	}
	if(egyezik(cmd, "/contract") || egyezik(cmd, "/vérdíj"))
	{
		if(PlayerInfo[playerid][pLevel] < 3) return Msg(playerid, "Minimum 3as szint."); 
		if(params < 3) return Msg(playerid, "/contract [játékos neve / id] [összeg] [oka]");
		giveplayerid = ReturnUser(param[1]);
		moneys = strval(param[2]);
		if(giveplayerid == playerid) return Msg(playerid, "Mi a faszért contractolsz magadra te barom?");
		if(giveplayerid == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
		new minimum = (PlayerInfo[giveplayerid][pLevel] * 2000);
			
		if(PlayerInfo[giveplayerid][pLevel] < 3) return Msg(playerid, "A játékos 3as szint alatt van, ezért nem rakhatsz rá vérdíjat."); 

		if(moneys < minimum)
		{
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: A vérdíjnak minimum %dFt-nak kell lennie!", minimum);
			return 1;
		}
		
		strtok(cmdtext, idx); strtok(cmdtext, idx);
		
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[256];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		
		if(GetMoney(playerid) < moneys) return Msg(playerid, "Nincs ennyi pénzed.");
		GiveMoney(playerid, -moneys);
		PlayerInfo[giveplayerid][pHeadValue] += moneys;
		format(string, sizeof(string), "* Valaki azt akarja, hogy öljétek meg %s-t, %dFt-ért.", PlayerName(giveplayerid), moneys);
		SendHitmanRadioMessage(COLOR_YELLOW, string);
		format(string, sizeof(string), "* %s-ra/re %dFt-os vérdíjat tûztél ki, oka: %s", PlayerName(giveplayerid), moneys, (result));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "Hitman: %s %dFtos vérdíjat tûzött ki %s fejére, oka: %s", PlayerName(playerid), moneys, PlayerName(giveplayerid), (result));
		ABroadCast(COLOR_GREY, string, 1);
	}
	
	if(egyezik(cmd, "/gotokezdõ"))
	{
		if(!Admin(playerid, 1) && !IsAS(playerid)) return 1;
		if(params < 1) return Msg(playerid, "/gotokezdõ [játékos]");
		new p = ReturnUser(param[1]);
		if(p == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos");
		if(PlayerInfo[p][pTut] == 1) return Msg(playerid, "Ez a játékos nem kezdõ.");
		new Float:x, Float:y, Float:z;
		GetPlayerPos(p, x, y, z);
		SetPlayerInterior(playerid, GetPlayerInterior(p));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(p));
		SetPlayerPos(playerid, x, y, z+2);
		Hazbanvan[playerid] = 0;
		if(Admin(playerid, 1))
		{
			ABroadCastFormat(COLOR_LIGHTRED, 0, "<< Admin %s oda gotozott egy kezdõhöz(%s) >>", PlayerName(playerid), PlayerName(p));
		}
		else
		{
			ABroadCastFormat(COLOR_LIGHTRED, 0, "<< Adminsegéd %s oda gotozott egy kezdõhöz(%s) >>", PlayerName(playerid), PlayerName(p));
		}
	}
	if(egyezik(cmd, "/ablak"))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy jármûben.");
		if(!IsABicikli(GetPlayerVehicleID(playerid)) && !Bikes(GetPlayerVehicleID(playerid)) && !IsAMotor(GetPlayerVehicleID(playerid)))
		{
			if(!AblakLent[GetPlayerVehicleID(playerid)])
			{
				Msg(playerid, "Ablak lehúzva.");
				AblakLent[GetPlayerVehicleID(playerid)] = true;
				Cselekves(playerid, "lehúzta a jármû ablakát.");
				return 1;
			}
			Msg(playerid, "Ablak felhúzva.");
			AblakLent[GetPlayerVehicleID(playerid)] = false;
			Cselekves(playerid, "felhúzta a jármû ablakát.");
			return 1;
		}
		else return Msg(playerid, "Ennek a jármûnek nincs ablaka.");
	}
	
	if(egyezik(cmd, "/kilépések") || egyezik(cmd, "/kilepesek"))
	{
		
		if(Kilepesek[playerid])
		{
			Kilepesek[playerid] = false;
			Msg(playerid, "Most már nem látod, hogy kik lépnek ki a közeledben");
		}
		else
		{
			Kilepesek[playerid] = true;
			Msg(playerid, "Most már látod, hogy kik lépnek ki a közeledben");
		}
	}

	if(strcmp(cmd, "/ruha", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsAtClothShop(playerid))
            {
				if(params < 1 || !IsNumeric(param[1])) return Msg(playerid, "Használata: /ruha [skin ID]");
				if(GetMoney(playerid) < 12500) return Msg(playerid, "Egy ruha ára 12500Ft!");
				
				new skin = strval(param[1]);
				
                new talalt = NINCS, bool:talalt_nem = false;
				for(new x = 0; x < sizeof(Peds); x++)
				{
    				if(Peds[x][0] == skin)
    				{
						talalt = skin;
    				    if(PlayerInfo[playerid][pSex] == 2)
    				    {
    				        for(new y = 0; y < sizeof(Ferfiskinek); y++)
    				        {
    				            if(Ferfiskinek[y][0] == skin)
    				            {
    				                talalt_nem = true;
    				                break;
								}
							}
							if(talalt_nem)
								return Msg(playerid, "Nem vagy férfi!");
						}
                        else if(PlayerInfo[playerid][pSex] == 1)
    				    {
    				        for(new y = 0; y < sizeof(NoiSkinek); y++)
    				        {
    				            if(NoiSkinek[y][0] == skin)
    				            {
    				                talalt_nem = true;
    				                break;
								}
							}
							if(talalt_nem)
								return Msg(playerid, "Nem vagy nõ!");
						}
					}
				}
				if(talalt == NINCS)
					Msg(playerid, "Nincs ilyen ruha!");
				else
				{
					Msg(playerid, "Vettél egy ruhát");
					Cselekves(playerid, "vett egy ruhát");
					SetPlayerSkin(playerid, talalt);
					PlayerInfo[playerid][pModel] = talalt;
					GiveMoney(playerid, -12500);
				}
			}
			else
			{
			    Msg(playerid, "Nem vagy a ruhaboltban!");
			}
		}
	}


	if(egyezik(cmd, "/trafipax") || egyezik(cmd, "/trafi"))
	{
		if(!IsACop(playerid)) return Msg(playerid, "Nem vagy rendõr!")
		if(!OnDuty[playerid]) return Msg(playerid, "Nem vagy szolgálatban!");
		if(PlayerInfo[playerid][pRank] < 1) return Msg(playerid, "Csak 1 vagy nagyobb rangú trafipaxozhat!");
		if(LMT(playerid, LMUNKA_KATONA) && PlayerInfo[playerid][pRank] < 6) return Msg(playerid, "Katonaságon minimum hatos rang!");
		if(!TrafiPax[playerid][tAktiv])
		{
			if(params < 2) return Msg(playerid, "Használata: /trafipax [büntetés] [max sebesség]");
			new buntetes = strval(param[1]), sebesseg = strval(param[2]), nemlathato;
			if(params > 2 && IsNumeric(param[3]))
				nemlathato = strval(param[3]);
			else
				nemlathato = 0;
			if(nemlathato == 1 && PlayerInfo[playerid][pRank] < 6) return Msg(playerid, "Csak 6os rangtól rakhatsz le láthatatlan trafipaxot!");
			
			if(buntetes < 5000 || buntetes > 60000) return Msg(playerid, "Minimum összeg: 5,000Ft, maximum: 60,000Ft");
			if(sebesseg < 70 || sebesseg > 210) return Msg(playerid, "Minimum megadható korlát: 70km/h, maximum: 210km/h");
			if(!IsPlayerInAnyVehicle(playerid))
			{
				Cselekves(playerid, "lerakott egy trafipaxot és beállította a sebességet");
				TrafiPax[playerid][tAktiv] = true;
				TrafiPax[playerid][tSebesseg] = sebesseg;
				TrafiPax[playerid][tBuntetes] = buntetes;
				
				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);
				
				TrafiPax[playerid][tPosX] = x;
				TrafiPax[playerid][tPosY] = y;
				TrafiPax[playerid][tPosZ] = z;
				
				new szoveg[64]; format(szoveg, 64, "TRAFIPAX\nSebességkorlát: %d km/h\nBüntetés: %dFt", sebesseg, buntetes);
				if(nemlathato == 0) TrafiPax[playerid][t3D] = CreateDynamic3DTextLabel(szoveg, COLOR_YELLOW, 0.0, 0.0, 0.7, 40.0, playerid);
				else TrafiPax[playerid][t3D] = CreateDynamic3DTextLabel(szoveg, COLOR_YELLOW, 0.0, 0.0, 0.7, 3.0, playerid);
				//Attach3DTextLabelToPlayer(TrafiPax[playerid][t3D], playerid, 0.0, 0.0, 0.7);
			}
			else
			{
				Cselekves(playerid, "elõvette a trafipaxot és beállította a sebességet");
				TrafiPax[playerid][tAktiv] = true;
				TrafiPax[playerid][tSebesseg] = sebesseg;
				TrafiPax[playerid][tBuntetes] = buntetes;
				
				new Float:x, Float:y, Float:z, car = GetPlayerVehicleID(playerid);
				GetVehiclePos(car, x, y, z);
				
				TrafiPax[playerid][tPosX] = x;
				TrafiPax[playerid][tPosY] = y;
				TrafiPax[playerid][tPosZ] = z;

				new szoveg[64]; format(szoveg, 64, "TRAFIPAX\nSebességkorlát: %d km/h\nBüntetés: %dFt", sebesseg, buntetes);
				if(nemlathato == 0) TrafiPax[playerid][t3D] = CreateDynamic3DTextLabel(szoveg, COLOR_YELLOW, 0.0, 0.0, 2.0, 40.0, INVALID_PLAYER_ID, car);
				else TrafiPax[playerid][t3D] = CreateDynamic3DTextLabel(szoveg, COLOR_YELLOW, 0.0, 0.0, 2.0, 3.0, INVALID_PLAYER_ID, car);
				//Attach3DTextLabelToVehicle(TrafiPax[playerid][t3D], car, 0.0, 0.0, 2.0);
			}
		}
		else
		{
			Cselekves(playerid, "elrakta a trafipaxot");
			TrafiPax[playerid][tAktiv] = false;
			DestroyDynamic3DTextLabel(TrafiPax[playerid][t3D]);
		}
		return 1;
	}
	if(egyezik(cmd, "/diri")) //Csak tesztre csináltam!
	{
		if(!IsScripter(playerid)) return 1;
		if(params < 1) return Msg(playerid, "/diri [név/ID]");
		new p = ReturnUser(param[1]);
		if(PlayerInfo[p][pHitman] == 2)
		{
			Msg(playerid, "Elvetted a Directorát.");
			PlayerInfo[p][pHitman] = 0;
			Msg(p, "Elvették a Directorod, és a fogadba épített bomba felrobbant.");
			SetHealth(p, 0);
			new Float:x, Float:y, Float:z;
			GetPlayerPos(p, x, y, z);
			CreateExplosion(x, y, z, 7, 10);
		}
		else
		{
			Msg(playerid, "Kinevezted Directornak");
			Msg(p, "Kineveztek Directornak, segítségért /help és /portable");
			PlayerInfo[p][pHitman] = 2;
		}
	}
	
	if(egyezik(cmd, "/kezdõk") || egyezik(cmd, "/kezdok"))
	{
		if(!Admin(playerid, 1) && !IsAS(playerid)) return 1;
		
		new kezdok;
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || PlayerInfo[x][pTut] == 1) continue;
			kezdok++;
			SendFormatMessage(playerid, COLOR_WHITE, "Kezdõ: [%d]%s", x, PlayerName(x));
		}
		if(kezdok == 0)
			Msg(playerid, "Nincs kezdõ");
		
		return 1;
	}

	if(egyezik(cmd, "/enged"))
	{
		if(!Admin(playerid, 1) && !IsAS(playerid)) return 1;
		if(params < 1) return Msg(playerid, "Használata: /enged [játékos]");
		new player = ReturnUser(param[1]);
		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
		
		ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s megtanította %s-t az RPre és vállalja a felelõsséget érte >>", PlayerName(playerid), PlayerName(player));
		Msg(player, "Az adminisztrátor engedélyezte a játékot számodra! Jó játékot kívánunk!");
		PlayerInfo[player][pTut] = 1;
		SetPlayerVirtualWorld(player, 0);
		//SpawnPlayer(player);
		OnPlayerSpawn(player);
		
		return 1;
	}

	if(egyezik(cmd, "/pluszido") || egyezik(cmd, "/pluszidõ"))
	{
		if(!OnDuty[playerid]) return Msg(playerid, "Nem vagy szolgálatban");
		if(!IsACop(playerid)) return Msg(playerid, "Nem vagy rendõr");
		if(LMT(playerid, LMUNKA_VPOP)) return Msg(playerid, "Csak SCPD, FBI, Katona");
		if(!LMT(playerid, LMUNKA_SCPD) && PlayerInfo[playerid][pRank] < 4 && !LMT(playerid, LMUNKA_FBI)) return Msg(playerid, "Csak 4es rangtól!");
		if(LMT(playerid, LMUNKA_SCPD) && PlayerInfo[playerid][pRank] < 8 && !Admin(playerid, 1337)) return Msg(playerid, "Csak 8as rangtól!");
		if(params < 2)
			return Msg(playerid, "Használata: /pluszidõ [játékos] [idõ - percben]");
			
		new jatekos = ReturnUser(param[1]), ido = strval(param[2]);
		
		if(jatekos == INVALID_PLAYER_ID) return Msg(playerid, "Érvénytelen játékos");
		if(ido < 1) return Msg(playerid, "Minimum egy perc!")
		if(ido > 60) return Msg(playerid, "Maximum egy óra!");
		if(PlayerInfo[jatekos][pJailed] < 1) return Msg(playerid, "A játékos nincs börtönben!");
		if(PlayerInfo[jatekos][pJailTime] >= 18000) return Msg(playerid, "Hova adsz már neki jailt? Nem elég szerinted?");
		
		if(FloodCheck(playerid, 5)) return 1;
		
		switch(PlayerInfo[playerid][pMember])
		{
			case LMUNKA_SCPD, LMUNKA_SFPD:
			{
				switch(PlayerInfo[jatekos][pJailed])
				{
					case 2, 3, 5: return Msg(playerid, "Csak az SCPD helyein lévõ raboknak adhatsz plusz börtönidõt!");
				}
			}
			case LMUNKA_KATONA:
			{
				switch(PlayerInfo[jatekos][pJailed])
				{
					case 1, 3, 4, 5: return Msg(playerid, "Csak a Fort DeMorgenben lévõ raboknak adhatsz plusz börtönidõt!");
				}
			}
		}
		
		PlayerInfo[jatekos][pJailTime] += ido * 60;
		
		Msg(jatekos, "Egy rendvédelmis plusz börtön idõt adott");
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Plusz %d percet adtál neki: %s, így még %d percig van börtönben", ido, PlayerName(jatekos), PlayerInfo[jatekos][pJailTime] / 60);
		ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s plusz idõt (%d perc) adott neki: %s >>", PlayerName(playerid), ido, PlayerName(jatekos));
		
		return 1;
	}

	if(egyezik(cmd, "/zsak") || egyezik(cmd, "/zsák"))
	{
		if(params < 1)
		{
			Msg(playerid, "Használata: /zsák [funkció]");
			Msg(playerid, "[Funkciók] vesz, berak, kivesz, kirak, segítség", false);
			return 1;
		}
		
		if(FloodCheck(playerid)) return 1;
		
		if(egyezik(param[1], "segítség") || egyezik(param[1], "segitseg"))
		{
			Msg(playerid, "===[ Segítség ]===", false);
			Msg(playerid, "vesz: üres zsák kivétele, berak: a zsák bepakolása, kivesz: pénzes zsák kivétele, kirak: pénz kipakolása a zsákból", false);
		}
		else if(egyezik(param[1], "vesz"))
		{
			if(JatekosZsak[playerid] >= 0) return Msg(playerid, "Már vettél ki zsákot!");
			new kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 6.0) return Msg(playerid, "Nincs jármû a közeledben!");
			if(GetVehicleModel(kocsi) != 428) return Msg(playerid, "Ez nem pénzszállító!");
			JatekosZsak[playerid] = 0;
			Cselekves(playerid, "kivett egy zsákot a pénzszállítóból");
			Freeze(playerid, 1500); ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
		}
		else if(egyezik(param[1], "info"))
		{
			new kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 6.0) return Msg(playerid, "Nincs jármû a közeledben!");
			if(GetVehicleModel(kocsi) != 428) return Msg(playerid, "Ez nem pénzszállító!");
			
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "A pénzszállítóban %dFt van", PenzszallitoPenz[kocsi]);

		}
		else if(egyezik(param[1], "berak"))
		{
			if(JatekosZsak[playerid] < 0) return Msg(playerid, "Nincs zsákod");
			if(JatekosZsak[playerid] == 0) return Msg(playerid, "A zsákod üres :(");
			
			new kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 6.0) return Msg(playerid, "Nincs jármû a közeledben!");
			if(GetVehicleModel(kocsi) != 428) return Msg(playerid, "Ez nem pénzszállító!");
			
			if((PenzszallitoPenz[kocsi] + JatekosZsak[playerid]) <= MAXPENZSZALLITOPENZ)
			{
				PenzszallitoPenz[kocsi] += JatekosZsak[playerid];
				JatekosZsak[playerid] = NINCS;
				Cselekves(playerid, "bepakolt egy pénzzel teli zsákot a pénzszállítóba");
				Freeze(playerid, 1500); ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
			}
			/*else if(PenzszallitoPenz[kocsi] < MAXPENZSZALLITOPENZ)
			{
				JatekosZsak[playerid] -= (MAXPENZSZALLITOPENZ - PenzszallitoPenz[kocsi]);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Bepakoltál %dForintot a pénzszállítóba, de csak egy része fért be, így %dForint maradt a zsákodban",  (MAXPENZSZALLITOPENZ - PenzszallitoPenz[kocsi]), JatekosZsak[playerid]);
				PenzSzallitPenz = MAXPENZSZALLITOPENZ;
				Cselekves(playerid, "pénzt pakolt be a pénzszállítóba");
			}*/
			else
				Msg(playerid, "A pénzszállító tele van!");
		}
		else if(egyezik(param[1], "kivesz"))
		{
			if(JatekosZsak[playerid] > 0) return Msg(playerid, "Nálad már van zsák");
			
			new kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 6.0) return Msg(playerid, "Nincs jármû a közeledben!");
			if(GetVehicleModel(kocsi) != 428) return Msg(playerid, "Ez nem pénzszállító!");
			
			if(PenzszallitoPenz[kocsi] < 1) return Msg(playerid, "A pénzszállítóban nincs pénz");
			
			new kivesz = MAXZSAKPENZ;
			if(PenzszallitoPenz[kocsi] < MAXZSAKPENZ) kivesz = PenzszallitoPenz[kocsi];
			
			JatekosZsak[playerid] = kivesz;
			PenzszallitoPenz[kocsi] -= kivesz;
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél egy zsák pénzt a pénzszállítóból, tartalma: %dFt", kivesz);
			Cselekves(playerid, "kivett egy pénzzel teli zsákot a pénzszállítóból");
			Freeze(playerid, 1500); ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
		}
		else if(egyezik(param[1], "kirak"))
		{
			if(JatekosZsak[playerid] == NINCS) return Msg(playerid, "Nincs zsákod");
			if(JatekosZsak[playerid] == 0) return Msg(playerid, "A zsákod üres");
			
			new szef, melo = PlayerInfo[playerid][pMember];
			if(PlayerToPoint(10.0, playerid, 2143.797, 1641.955, 993.576))
				szef = 1;
			else if(!LegalisSzervezetTagja(playerid) && !Civil(playerid) && PlayerToPoint(2.0, playerid, FrakcioInfo[melo][fPosX], FrakcioInfo[melo][fPosY], FrakcioInfo[melo][fPosZ]))
				szef = 2;
			
			if(szef == 0) return Msg(playerid, "Nem vagy széfnél!");
			else if(szef == 1)
			{
				BankSzef += JatekosZsak[playerid];
				JatekosZsak[playerid] = NINCS;
				Cselekves(playerid, "visszarakott egy zsák pénzt a bank széfjébe");
				Freeze(playerid, 1500); ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
			}
			else if(szef == 2)
			{
				FrakcioInfo[melo][fPenz] += JatekosZsak[playerid];
				JatekosZsak[playerid] = NINCS;
				Cselekves(playerid, "berakta a lopott pénzt a széfbe");
				Freeze(playerid, 1500); ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
			}
		}
		/*else if(egyezik(param[1], "felrak"))
		{
			if(params < 2) return Msg(playerid, "/zsák felrak [játékos]");
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nem aktív a játékos.");
			if(!ProxDetectorS(2.0, playerid, player)) return Msg(playerid, "Nincs a közeledben a játékos.");
			if(ZsakVanRajta[player] == 0)
			{
				ShowTextDraw(player, Zsak);
				Msg(playerid, "Ráhúztál a fejére egy zsákot.");
				Msg(player, "Fejedre húztak egy zsákot.");
				Cselekves(playerid, "elõvesz egy zsákot és felhúzza valaki fejére", 1);
				return 1;
			}
			else return Msg(playerid, "Rajta már van zsák, ha leakarod venni írd be: /zsák levesz");
		}
		else if(egyezik(param[1], "levesz"))
		{
			if(params < 2) return Msg(playerid, "/zsák levesz [játékos]");
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nem aktív a játékos.");
			if(!ProxDetectorS(2.0, playerid, player)) return Msg(playerid, "Nincs a közeledben a játékos.");
			if(ZsakVanRajta[player] == 1)
			{
				TextDrawHideForPlayer(player, Textdraw5);
				Msg(playerid, "Levetted a zsákot róla.");
				Msg(player, "Levették a zsákot a fejedrõl.");
				Cselekves(playerid, "leveszi valakirõl a zsákot", 1);
				return 1;
			}
			else return Msg(playerid, "Rajta nincs zsák, ha felakarod húzni a fejére írd be: /zsák felrak");
		}*/
		return 1;
	}

	if(egyezik(cmd, "/kamera"))
	{
		if(params < 1)
		{
			Msg(playerid, "Használata: /kamera [kamera ID]");
			Msg(playerid, "[SF-Bank kamerák] Kivül: 1, 2, 3 | Belül: 4, 5, 6 | Széf: 7, 8, 9, 10, 11, 12, 13 ,14, 15, 16, 17, 18");
			Msg(playerid, "Kikapcsoláshoz: \"ki\"");
			return 1;
		}
		if(egyezik(param[1], "ki") && Kamera[playerid])
		{
			Tele(playerid, 240.3513,81.1932,1005.0391, false, 0, 10); UnFreeze(playerid);
			Kamera[playerid] = false;
			SetCameraBehindPlayer(playerid);
			return Msg(playerid, "Kamera kikapcsolva");
		}
		new kamera = strval(param[1]);
		if(kamera > 0 && kamera <= 18)
		{
			if(!PlayerToPoint(1.5, playerid, 240.3513,81.1932,1005.0391) && !Kamera[playerid]) return Msg(playerid, "Nem vagy a számítógép elõtt");
			
			Freeze(playerid);
			Kamera[playerid] = true;
			
			if(kamera <= 3) Tele(playerid, -1943.552, 550.390, 37.267, false, 0, 0);
			else if(kamera >= 4 && kamera <= 6) Tele(playerid, 2325.446, -10.469, 26.742, false, 2, 0);
			else if(kamera >= 7 && kamera <= 13) Tele(playerid, 2144.606, 1594.452, 999.755, false, 0, 1);
			else if(kamera == 14) Tele(playerid, 2165.480, 1612.761, 999.972, false, 0, 1);
			else if(kamera >= 15) Tele(playerid, 2238.217, 1585.519, 999.971, false, 0, 1);
			
			switch(kamera)
			{
				// Bank elõtti helyek
				case 1: { SetPlayerCameraPos(playerid, -1924.521, 588.865, 42.181); SetPlayerCameraLookAt(playerid, -1948.613, 564.146, 35.207); }
				case 2: { SetPlayerCameraPos(playerid, -1962.093, 588.351, 39.980); SetPlayerCameraLookAt(playerid, -1950.864, 566.055, 35.234); }
				case 3: { SetPlayerCameraPos(playerid, -1962.093, 588.351, 39.980); SetPlayerCameraLookAt(playerid, -1979.185, 558.746, 35.118); }
				
				// Bank belül
				case 4: { SetPlayerCameraPos(playerid, 2316.853, -17.153, 28.526); SetPlayerCameraLookAt(playerid, 2309.581, -8.211, 26.742); }
				case 5: { SetPlayerCameraPos(playerid, 2317.125, -0.169, 28.689); SetPlayerCameraLookAt(playerid, 2309.281, -9.862, 26.742); }
				case 6: { SetPlayerCameraPos(playerid, 2306.144, -17.321, 28.598); SetPlayerCameraLookAt(playerid, 2314.806, -1.466, 26.742); }
				
				// Széf felül, lent, és maga a széf
				case 7: { SetPlayerCameraPos(playerid, 2149.471, 1604.226, 1008.248); SetPlayerCameraLookAt(playerid, 2146.801, 1598.454, 1003.967); } // széf fent
				case 8: { SetPlayerCameraPos(playerid, 2142.929, 1604.062, 1003.821); SetPlayerCameraLookAt(playerid, 2150.481, 1602.958, 1001.970); } // széf közép
				case 9: { SetPlayerCameraPos(playerid, 2140.601, 1620.260, 1002.323); SetPlayerCameraLookAt(playerid, 2147.851, 1605.643, 1001.363); } // széf szellõzõ
				case 10: { SetPlayerCameraPos(playerid, 2151.853, 1606.368, 1003.096); SetPlayerCameraLookAt(playerid, 2143.480, 1619.888, 1000.968); } // széf szellõzõ 2
				case 11: { SetPlayerCameraPos(playerid, 2141.104, 1607.320, 996.070); SetPlayerCameraLookAt(playerid, 2147.659, 1624.965, 993.688); } // széf lent
				case 12: { SetPlayerCameraPos(playerid, 2144.004, 1626.562, 996.290); SetPlayerCameraLookAt(playerid, 2144.360, 1604.194, 993.568); } // széf lent 2
				case 13: { SetPlayerCameraPos(playerid, 2147.158, 1627.724, 996.374); SetPlayerCameraLookAt(playerid, 2143.953, 1641.954, 993.576); } // széf bent
				
				// Garázs fele
				case 14: { SetPlayerCameraPos(playerid, 2155.774, 1596.058, 1002.768); SetPlayerCameraLookAt(playerid, 2159.241, 1619.883, 999.967); } // széf lift
				
				// Garázs
				case 15: { SetPlayerCameraPos(playerid, 2226.284, 1621.254, 1003.014); SetPlayerCameraLookAt(playerid, 2224.382, 1598.751, 999.983); } // garázs
				case 16: { SetPlayerCameraPos(playerid, 2226.284, 1621.254, 1003.014); SetPlayerCameraLookAt(playerid, 2196.668, 1617.161, 999.972); } // garázs 2
				case 17: { SetPlayerCameraPos(playerid, 2216.615, 1595.099, 1002.567); SetPlayerCameraLookAt(playerid, 2222.118, 1570.528, 999.997); } // garázs lent
				case 18: { SetPlayerCameraPos(playerid, 2168.703, 1581.614, 1002.653); SetPlayerCameraLookAt(playerid, 2191.559, 1587.863, 999.978); } // garázs lent 2
			}
		}
		return 1;
	}

	if(egyezik(cmd, "/bankszéf"))
	{
		if(!Admin(playerid, 1)) return 1;
		if(params < 1)
			SendFormatMessage(playerid, COLOR_WHITE, "Bank széf: %dFt", BankSzef);
		else if(egyezik(param[1], "set"))
		{
			if(!IsScripter(playerid)) return 1;
			if(params < 2) return 1;
			BankSzef = strval(param[2]);
			Msg(playerid, "Beállítva");
		}
		return 1;
	}

	if(egyezik(cmd, "/hitel"))
	{
		if(params < 1)
			return Msg(playerid, "Használata: /hitel [felvesz / befizet / info]");
		
		if(egyezik(param[1], "felvesz"))
		{
			if(!IsAt(playerid, IsAt_Bank))
				return Msg(playerid, "Nem vagy a bankban!");
				
			if(PlayerInfo[playerid][pHitel] > 1)
				return Msg(playerid, "Bank: Elõbb az elõzõ hitelt vissza kell fizetned!", false);
				
			if(Szint(playerid) < 2)
				return Msg(playerid, "Hitel csak 2es szinttõl");
			
			if(params < 2)
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Használata: /hitel felvesz [összeg] - Minimális összeg: 10000Ft - Maximális összeg: %d", Szint(playerid) * 100000);
				Msg(playerid, "Megjegyzés: 10000-100000Ft esetén a határidõ 5óra, 100000-250000Ft esetén 8óra, és 250000Ft felett 10óra a visszafizetési határidõ!", false);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Kamat: A kamat a határidõ letelte után 20percenként hozzáadódik a felvett hitelhez - A kamat %d%%", BANK_KAMAT);
				return 1;
			}
			new osszeg = strval(param[2]);
			if(osszeg < 10000 || osszeg > (Szint(playerid) * 100000))
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Bank: Az összeg minimum 10,000 és maximum %dFt lehet!", Szint(playerid) * 100000);
				return 1;
			}
			if(BankSzef < osszeg)
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Bank: A banknak sajnos nincs ennyi pénze - A maximum felvehetõ összeg jelenleg %dFt", BankSzef);
				return 1;
			}
			PlayerInfo[playerid][pHitel] = osszeg;
			PlayerInfo[playerid][pFelvettHitel] = osszeg;
			BankSzef -= osszeg;
			GiveMoney(playerid, osszeg);
			
			if(osszeg < 100000) PlayerInfo[playerid][pHitelOra] = 5;
			else if(osszeg >= 100000 && osszeg < 250000) PlayerInfo[playerid][pHitelOra] = 8;
			else PlayerInfo[playerid][pHitelOra] = 10;
			PlayerInfo[playerid][pHitelElteltOra] = 0;
			
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Bank: Sikeresen felvettél %dFt kölcsönt. %d órád van visszafizetni", osszeg, PlayerInfo[playerid][pHitelOra]);
			Cselekves(playerid, "kölcsönt vett fel a banktól");
		}
		else if(egyezik(param[1], "befizet"))
		{
			if(!IsAt(playerid, IsAt_Bank))
				return Msg(playerid, "Nem vagy a bankban!");
				
			if(PlayerInfo[playerid][pHitel] <= 0)
				return Msg(playerid, "Bank: Nem vettél fel hitelt / vissza törlesztetted.", false);
			
			if(params < 2)
				return Msg(playerid, "Használata: /hitel befizet [összeg]");

			new osszeg = strval(param[2]);
			if(osszeg < 1)
				return Msg(playerid, "Normális összeget írj már be...");
			
			if(osszeg > GetMoney(playerid))
				return Msg(playerid, "Nincs ennyi pénzed!");
			
			if(osszeg > PlayerInfo[playerid][pHitel])
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Bank: Csak %dFtot kell befizetned", PlayerInfo[playerid][pHitel]);
				return 1;
			}
			PlayerInfo[playerid][pHitel] -= osszeg;
			BankSzef += osszeg;
			GiveMoney(playerid, -osszeg);
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Bank: Sikeresen törlesztettél %dFtot", osszeg);
			if(PlayerInfo[playerid][pHitel] <= 0 && PlayerInfo[playerid][pZarolva] == 1)
			{
				PlayerInfo[playerid][pZarolva] = 0;
				PlayerInfo[playerid][pFelvettHitel] = 0;
				Msg(playerid, "Bank: Törlesztetted az adósságod, feloldottuk a számlád.", false);
			}
			else if(PlayerInfo[playerid][pHitel] <= 0)
				Msg(playerid, "Bank: Sikeresen törlesztetted az összeset", false);
			Cselekves(playerid, "törlesztett a banknak");
		}
		else if(egyezik(param[1], "info"))
		{
			Msg(playerid, "==========[ Bank Hitel-Info ]==========");
			if(PlayerInfo[playerid][pHitel] <= 0)
				Msg(playerid, "Még nem vettél fel hitelt", false);
			else
			{
				if(PlayerInfo[playerid][pHitelElteltOra] <= PlayerInfo[playerid][pHitelOra])
					SendFormatMessage(playerid, COLOR_GREY, "%dFt hitelt vettél fel - Jelenlegi tartozásod: %dFt - Határidó: %dóra", PlayerInfo[playerid][pFelvettHitel], PlayerInfo[playerid][pHitel], (PlayerInfo[playerid][pHitelOra] - PlayerInfo[playerid][pHitelElteltOra]));
				else
					SendFormatMessage(playerid, COLOR_GREY, "%dFt hitelt vettél fel - Jelenlegi tartozásod: %dFt - Határidó: Lejárt - 20percenkénti kamatozás: %d%%", PlayerInfo[playerid][pFelvettHitel], PlayerInfo[playerid][pHitel], BANK_KAMAT);
			}
		}
		
		return 1;
	}

	if(egyezik(cmd, "/sendrcon"))
	{
		if(!IsScripter(playerid)) return 1;
		
		if(params < 1)
			return Msg(playerid, "Használata: /rcon [paraméterek]");
		
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[40];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		
		ABroadCastFormat(COLOR_LIGHTRED, 1337, "<< Rcon parancs futtatva - Parancs: %s - Admin: %s >>", result, PlayerName(playerid));
		SendFormatMessage(playerid, COLOR_LIGHTRED, "Parancs futtatva: %s", result);
		SendRconCommand(result);
		
		return 1;
	}

	if(egyezik(cmd, "/report"))
	{
		if(params < 1)
		{
			Msg(playerid, "Használata: /report [parancs]", false);
			Msg(playerid, "Parancsok: join, exit, status, channelstatus", false);
			//Msg(playerid, "Funkciók: status > A channelekrõl információk", false);
			//Msg(playerid, "Funkciók: channelstatus [channel] > A channelrõl információk", false);
			//Msg(playerid, "Funkciók: join [channel] > Csatlakozás az egyik channelre", false);
			//Msg(playerid, "Funkciók: exit > Kilépés a channelrõl", false);
			if(Admin(playerid, 1))
			{
				Msg(playerid, "Funkciók: view [channel] > Egy channel figyelése", false);
				Msg(playerid, "Funkciók: set [adminsegéd] [channel] > Adminsegéd berakása a channelre", false);
				Msg(playerid, "Funkciók: block [játékos] > Játékos blokkolása", false);
				Msg(playerid, "Funkciók: kick [játékos] [oka] > Kirúgás", false);
				Msg(playerid, "Funkciók: get [player] [channel] > Behívás channelre", false);
				
				if(Admin(playerid, 2))
				{
					Msg(playerid, "Funkciók: title [channel] [téma] > Channel téma", false);
					Msg(playerid, "Funkciók: max [channel] [max] > Maximum játékos", false);
					Msg(playerid, "Funkciók: timeout [channel] [idõ] > Idõlimit", false);
					Msg(playerid, "Funkciók: seeing [channel] > A játékosok lássák egymást", false);
				}
				if(Admin(playerid, 1337))
					Msg(playerid, "Funkciók: recount > Statisztikák újraszámolása");
			}
			return 1;
		}
		new channel = PlayerInfo[playerid][pReportChannel];
		new vchannel = PlayerInfo[playerid][pViewReportChannel];
		if(egyezik(param[1], "status"))
		{
			new szoveg[128], egyeb[20];
			Msg(playerid, "===========[ Channel Status ]===========", false, COLOR_LIGHTGREEN);
			for(new x = 0; x < MAX_CHANNEL; x++)
			{
				if(ReportChannel[x][rTimeOut] != 555)
					Format(egyeb, "| T: %ds*", ReportChannel[x][rTimeOut]);
				if(ReportChannel[x][rSeeing])
				{
					if(strlen(egyeb))
						Format(egyeb, "%s + MLE*", egyeb);
					else
						egyeb = "| MLE*";
				}
				if(x != 0)
				{
					if(ReportChannel[x][rClosed])
						Format(szoveg, "[Admin] ID: %d | Téma: %s | Zárva", x, ReportChannel[x][rTitle]);
					else
						Format(szoveg, "[Admin] ID: %d | Téma: %s | Adminok: %d | Játékosok: %d/%d %s", x, ReportChannel[x][rTitle], ReportChannel[x][rAdmins], ReportChannel[x][rMaxPlayers], ReportChannel[x][rPlayers], egyeb);
				}
				else
				{
					if(ReportChannel[x][rClosed])
						Format(szoveg, "[Admin/AS] ID: %d | Téma: %s | Zárva", x, ReportChannel[x][rTitle]);
					else
						Format(szoveg, "[Admin/AS] ID: %d | Téma: %s | Adminok: %d | Adminsegédek: %d | Játékosok: %d/%d %s", x, ReportChannel[x][rTitle], ReportChannel[x][rAdmins], ReportChannel[x][rAdminHelpers], ReportChannel[x][rMaxPlayers], ReportChannel[x][rPlayers], egyeb);
				}
				Msg(playerid, szoveg, false, COLOR_GREEN);
			}
			Msg(playerid, "Megjegyzés: T = Idõkorlát (ha eddig nem írsz, a rendszer kirúg) | MLE = Mindenki Látja Egymást", false, COLOR_WHITE);
			if(!Admin(playerid, 1))
				Msg(playerid, "Az összes channel figyelése: /report view all");
		}
		else if(egyezik(param[1], "channelstatus"))
		{
			//if(!Admin(playerid, 1)) return 1;
			if(params < 2)
				return Msg(playerid, "Használata: /report channelstatus [channel]");
			
			new szoba = strval(param[2]);
			if(szoba < NINCS || szoba >= MAX_CHANNEL)
				return Msg(playerid, "Hibás channel!");
				
			new count;
			Msg(playerid, "===========[ Channel Status ]===========", false, COLOR_LIGHTGREEN);
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || !Admin(x, 1)) continue;
					
				if(PlayerInfo[x][pViewReportChannel] == szoba || PlayerInfo[x][pViewReportChannel] == 555)
				{
					count++;
					if(count == 1) Msg(playerid, "Adminisztrátorok a channelen:", false, COLOR_WHITE);
					Msg(playerid, PlayerName(x), false, COLOR_GREEN);
				}
			}
			if(count == 0)
				Msg(playerid, "Adminisztrátorok a channelen: Nincs", false, COLOR_WHITE);
			
			count = 0;
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || !IsAS(x)) continue;
					
				if(PlayerInfo[x][pViewReportChannel] == szoba || PlayerInfo[x][pViewReportChannel] == 555)
				{
					count++;
					if(count == 1) Msg(playerid, "Adminsegédek a channelen:", false, COLOR_WHITE);
					Msg(playerid, PlayerName(x), false, COLOR_GREEN);
				}
			}
			if(count == 0)
				Msg(playerid, "Adminsegédek a channelen: Nincs", false, COLOR_WHITE);

			count = 0;
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
					
				if(PlayerInfo[x][pReportChannel] == szoba)
				{
					count++;
					if(count == 1) Msg(playerid, "Játékosok a channelen:", false, COLOR_WHITE);
					Msg(playerid, PlayerName(x), false, COLOR_GREEN);
				}
			}
			if(count == 0)
				Msg(playerid, "Játékosok a channelen: Nincs", false, COLOR_WHITE);
				
			Msg(playerid, "===========[ Channel Status ]===========", false, COLOR_LIGHTGREEN);
		}
		else if(egyezik(param[1], "join"))
		{
			if(Admin(playerid, 1))
				return Msg(playerid, "Adminoknak /report view [channel]");
			if(params < 2)
				return Msg(playerid, "Használata: /report join [szoba]", false);
			
			if(reporttiltva[playerid] == 1)
				return Msg(playerid, "Nem tudsz reportolni!");
			
			new szoba = strval(param[2]);
			if(szoba < 0 || szoba >= MAX_CHANNEL)
				return Msg(playerid, "Hibás szoba! Kérlek nézd meg, hogy milyen szobák vannak! (/report status)");
			if(PlayerInfo[playerid][pReportTiltva])
				return Msg(playerid, "Nincs engedélyed reportolni!");
			if(ReportChannel[szoba][rClosed])
				return Msg(playerid, "Ez a channel zárva van!");
			if(PlayerInfo[playerid][pReportChannel] == szoba)
				return Msg(playerid, "Jelenleg is ebben a szobában vagy!");
			if(ReportChannel[szoba][rPlayers] >= ReportChannel[szoba][rMaxPlayers] && ReportChannel[szoba][rMaxPlayers] != 555)
				return Msg(playerid, "A channel megtelt! Próbáld késõbb, vagy menj egy másikba!");
			if(ReportChannel[szoba][rAdmins] < 1 && ReportChannel[szoba][rAdminHelpers] < 1)
				return Msg(playerid, "A channelen sajnos nincs se admin, se adminsegéd, így nem tudsz csatlakozni");
			
			Channel(playerid, szoba);
			
			new szoveg[96];
			if(ReportChannel[szoba][rTimeOut] != 555)
				Format(szoveg, "Csatlakoztál a channelhez! Üzenni az /ü(zenet) paranccsal tudsz. Ne feledd, a téma %s! Idõ: %dmp* | Kilépés: /report exit", ReportChannel[szoba][rTitle], ReportChannel[szoba][rTimeOut]);
			else
				Format(szoveg, "Csatlakoztál a channelhez! Üzenni az /ü(zenet) paranccsal tudsz. Ne feledd, a téma %s! Idõ: Nincs * | Kilépés: /report exit", ReportChannel[szoba][rTitle], ReportChannel[szoba][rTimeOut]);
			Msg(playerid, szoveg, false, COLOR_YELLOW);
			Msg(playerid, "*Megjegyzés: Az idõ azt jelenti, hogy ha X másodpercig nem írsz, a rendszer kirúg, hogy ne foglald a helyet feleslegesen!");
		}
		else if(egyezik(param[1], "exit"))
		{
			if(channel == NINCS)
				return Msg(playerid, "Jelenleg nem vagy channelen!");
			
			Channel(playerid, NINCS);
			Msg(playerid, "Kiléptél a channelrõl");
		}
		else if(egyezik(param[1], "view"))
		{
			if(!Admin(playerid, 1)) return 1;
			if(params < 2)
				return Msg(playerid, "Használata: /report view [channel]", false);
			
			new szoba;
			
			if(egyezik(param[2], "all")) szoba = 555;
			else if(egyezik(param[2], "off")) szoba = NINCS;
			else szoba = strval(param[2]);
			
			if(vchannel == szoba)
				return Msg(playerid, "Már ezen a channelen vagy!");
			
			if(szoba < NINCS || szoba >= MAX_CHANNEL && szoba != 555)
				return Msg(playerid, "Érvénytelen channel!");

			Channel(playerid, szoba, true);

			if(szoba == 555)
				Msg(playerid, "Csatlakoztál az összes channelhez, így látod, ki ír ide! Kilépés: /report view off");
			else if(szoba >= 0)
				Msg(playerid, "Csatlakoztál a channelhez, így látod, ki ír ide! Kilépés: /report view off");
			else
				Msg(playerid, "Mostmár nem látsz egy reportot sem");

			/*if(vchannel > 0) ReportChannel[channel][rAdmins]--;
			if(vchannel == 0) for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rAdmins]--;
			
			if(szoba >= 0)
			{
				if(szoba != 555) ReportChannel[szoba][rAdmins]++;
				else for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rAdmins]++;
				PlayerInfo[playerid][pViewReportChannel] = szoba;
				Msg(playerid, "Csatlakoztál a channelhez, így látod, ki ír ide! Kilépés: /report view off");
			}
			else
				Msg(playerid, "Mostmár nem látsz egy reportot sem");
			*/
		}
		else if(egyezik(param[1], "set"))
		{
			if(!Admin(playerid, 1)) return 1;
			if(params < 3)
			{
				Msg(playerid, "Használata: /report set [adminsegéd/admin] [mód]", false);
				Msg(playerid, "Módok: Channel ID > Berakod egy bizonyos channelre", false);
				Msg(playerid, "Módok: all > Látják az összes AdminSegéd channelt", false);
				return 1;
			}
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
			if(!Admin(player, 1) && !IsAS(player))
				return Msg(playerid, "Ja persze, egy sima játékost akarsz? -.-\"");
			
			new szoba;
			if(egyezik(param[3], "all")) szoba = 555;
			else szoba = strval(param[3]);
			
			if(szoba < 0 || szoba >= MAX_CHANNEL && szoba != 555)
				return Msg(playerid, "Hibás channel!");
			
			new uzenet[80];
			if(szoba == 555)
			{
				Format(uzenet, "%s mostmár az összes adminsegéd channelt látni fogja!", PlayerName(player));
				Msg(playerid, uzenet);
				Msg(player, "Az egyik admin beállította, hogy lásd az összes channelt!");
				Format(uzenet, "%s berakta %s-t az összes channelre", PlayerName(playerid), PlayerName(player));
				ABroadCast(COLOR_LIGHTRED, uzenet, 1);
			}
			else
			{
				Format(uzenet, "Beraktad %s-t a %d számú channelre!", PlayerName(player), szoba);
				Msg(playerid, uzenet);
				Format(uzenet, "Egy admin berakott téged a következõ channelre: %d", szoba);
				Msg(player, uzenet);
				Format(uzenet, "%s beraktad %s-t a következõ channelre: %d", PlayerName(playerid), PlayerName(player), szoba);
				ABroadCast(COLOR_LIGHTRED, uzenet, 1);
			}
			Channel(player, szoba, true);
		}
		else if(egyezik(param[1], "get"))
		{
			if(!Admin(playerid, 1)) return 1;
			if(params < 3)
				return Msg(playerid, "Használata: /report get [player] [channel]");
			
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID)
				return Msg(playerid, "Hibás játékos!");
			
			new szoba = strval(param[3]);
			if(szoba < 0 || szoba >= MAX_CHANNEL)
				return Msg(playerid, "Hibás channel!");
			
			if(PlayerInfo[player][pReportChannel] == szoba)
				return Msg(playerid, "Õ már ezen a channelen van");
			
			if(ReportChannel[szoba][rAdmins] < 1 && ReportChannel[szoba][rAdminHelpers] < 1)
				return Msg(playerid, "Ezen a channelen nincs se admin, se adminsegéd, így nem tudod behívni!");
			
			Channel(player, szoba);
			ABroadCastFormat(COLOR_LIGHTRED, 1, "%s behívta %s-t a channelre (ID: %d)", PlayerName(playerid), PlayerName(player), szoba);
			Msg(playerid, "Behívtad");
			Msg(player, "Az egyik adminisztrátor behívott téged az egyik channelre");
		}
		else if(egyezik(param[1], "timeout"))
		{
			if(!Admin(playerid, 2)) return 1;
			if(params < 3)
				return Msg(playerid, "Használata: /report timeout [channel] [idõ]", false);
				
			new szoba = strval(param[2]);
			if(szoba < 0 || szoba >= MAX_CHANNEL)
				return Msg(playerid, "Hibás channel!");
			
			new ido = strval(param[3]);
			if(ido < 5 || ido > 60 && ido != 555)
				return Msg(playerid, "Hibás érték! Minimum 5, maximum 60 (ha nincs limit 555)");
			
			if(ido != 555)
				ABroadCastFormat(COLOR_LIGHTRED, 1, "%s beállította az idõlimitet %dmásodpercre a channelen (Channel %d)", PlayerName(playerid), ido, szoba);
			else
				ABroadCastFormat(COLOR_LIGHTRED, 1, "%s levette az idõlimitet a channelrõl (Channel %d)", PlayerName(playerid), szoba);
			ReportChannel[szoba][rTimeOut] = ido;
		}
		else if(egyezik(param[1], "max"))
		{
			if(!Admin(playerid, 2)) return 1;
			if(params < 3)
				return Msg(playerid, "Használata: /report timeout [channel] [maxjátékos]", false);
				
			new szoba = strval(param[2]);
			if(szoba < 0 || szoba >= MAX_CHANNEL)
				return Msg(playerid, "Hibás channel!");
			
			new jatekos = strval(param[3]);
			if(jatekos < 5 || jatekos > 15 && jatekos != 555)
				return Msg(playerid, "Hibás érték! Minimum 5, maximum 15 (ha nincs limit 555)");
			
			if(jatekos != 555)
				ABroadCastFormat(COLOR_LIGHTRED, 1, "%s beállította a játékoslimitet %d játékosra a channelen (Channel %d)", PlayerName(playerid), jatekos, szoba);
			else
				ABroadCastFormat(COLOR_LIGHTRED, 1, "%s levette a játékos limitet a channelrõl (Channel %d)", PlayerName(playerid), szoba);
			ReportChannel[szoba][rMaxPlayers] = jatekos;
		}
		else if(egyezik(param[1], "lock"))
		{
			if(!Admin(playerid, 2)) return 1;
			if(params < 2)
				return Msg(playerid, "Használata: /report lock [channel]", false);
				
			new szoba = strval(param[2]);
			if(szoba < 0 || szoba >= MAX_CHANNEL)
				return Msg(playerid, "Hibás channel!");
			
			if(ReportChannel[szoba][rClosed])
			{
				ABroadCastFormat(COLOR_LIGHTRED, 1, "%s megnyitotta a channelt (Channel %d)", PlayerName(playerid), szoba);
				ReportChannel[szoba][rClosed] = 0;
			}
			else
			{
				ABroadCastFormat(COLOR_LIGHTRED, 1, "%s lezárta a channelt (Channel %d)", PlayerName(playerid), szoba);
				ReportChannel[szoba][rClosed] = 1;
			}
		}
		else if(egyezik(param[1], "block"))
		{
			if(!Admin(playerid, 1)) return 1;
			if(params < 2)
				return Msg(playerid, "Használata: /report block [játékos]", false);
			
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID)
				return Msg(player, "Érvénytelen játékos!");
			if(Admin(player, 1))
				return Msg(playerid, "Hogyne már... Admint? -.-\"");
			
			if(reporttiltva[player] == 0)
			{
				Msg(playerid, "Letiltottad");
				ABroadCastFormat(COLOR_LIGHTRED, 1, "%s letiltotta %s-t a reporttól", PlayerName(playerid), PlayerName(player));
				reporttiltva[player] = 1;
				
				if(PlayerInfo[player][pReportChannel] != NINCS)
					Channel(player, NINCS);
			}
			else
			{
				Msg(playerid, "Feloldottad");
				ABroadCastFormat(COLOR_LIGHTRED, 1, "%s feloldotta a tiltást a reportról neki: %s", PlayerName(playerid), PlayerName(player));
				reporttiltva[player] = 0;
			}
		}
		else if(egyezik(param[1], "title"))
		{
			if(!Admin(playerid, 2)) return 1;
			if(params < 3)
				return Msg(playerid, "Használata: /report title [channel] [téma]", false);
			
			new szoba = strval(param[2]);
			if(szoba < 0 || szoba >= MAX_CHANNEL)
				return Msg(playerid, "Hibás channel!");
			
			strtok(cmdtext, idx); strtok(cmdtext, idx);
			strmid(ReportChannel[szoba][rTitle], cmdtext, idx+1, strlen(cmdtext), 40);
			
			Msg(playerid, "Módosítottad");
			ABroadCastFormat(COLOR_LIGHTRED, 1, "%s módosította a channel (ID: %d) témáját: %s", PlayerName(playerid), szoba, ReportChannel[szoba][rTitle]);
		}
		else if(egyezik(param[1], "kick"))
		{
			if(!Admin(playerid, 1) && !IsAS(playerid)) return 1;
			if(params < 3)
				return Msg(playerid, "Használata: /report kick [játékos] [oka]", false);
			
			new jatekos = strval(param[2]), oka[40];
			if(jatekos == NINCS)
				return Msg(playerid, "Hibás játékos!");
			if(Admin(jatekos, 1))
				return Msg(playerid, "Hogyne már... Admint? -.-\"");
			if(PlayerInfo[jatekos][pReportChannel] == NINCS)
				return Msg(playerid, "Nincs channelen!");
			
			strtok(cmdtext, idx); strtok(cmdtext, idx);
			strmid(oka, cmdtext, idx+1, strlen(cmdtext), 40);

			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
				if(PlayerInfo[x][pViewReportChannel] == PlayerInfo[jatekos][pReportChannel] || PlayerInfo[x][pViewReportChannel] == 555 || PlayerInfo[x][pReportChannel] == PlayerInfo[jatekos][pReportChannel])
					SendFormatMessage(x, COLOR_LIGHTRED, "[Channel %d]%s-t kirúgta a channelrõl %s | Oka: %s", PlayerInfo[jatekos][pReportChannel], PlayerName(jatekos), PlayerName(playerid), oka);
			}
			Msg(jatekos, "Kirúgtak a channelrõl");

			Msg(playerid, "Kirúgtad");
			Channel(jatekos, NINCS);
			ABroadCastFormat(COLOR_LIGHTRED, 1, "%s kirúgta %s-t a channelrõl, oka: %s", PlayerName(playerid), PlayerName(jatekos), oka);
		}
		else if(egyezik(param[1], "recount"))
		{
			if(!Admin(playerid, 1337)) return 1;
			for(new c = 0; c < MAX_CHANNEL; c++)
			{
				ReportChannel[c][rAdmins] = 0;
				ReportChannel[c][rAdminHelpers] = 0;
				ReportChannel[c][rPlayers] = 0;
			}
			new chn, chna;
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
				chn = PlayerInfo[x][pReportChannel]; chna = PlayerInfo[x][pViewReportChannel];
				if(chn != NINCS)
					ReportChannel[chn][rPlayers]++;
				if(chna != NINCS)
				{
					if(chna == 555)
					{
						if(Admin(x, 1))
							for(new v = 0; v < MAX_CHANNEL; v++) ReportChannel[v][rAdmins]++;
						else if(IsAS(x))
							for(new v = 0; v < MAX_CHANNEL; v++) ReportChannel[v][rAdminHelpers]++;
						else
							PlayerInfo[x][pViewReportChannel] = NINCS;
					}
					else
						if(Admin(x, 1))
							ReportChannel[chna][rAdmins]++;
						else if(IsAS(x))
							ReportChannel[chna][rAdminHelpers]++;
						else
							PlayerInfo[x][pViewReportChannel] = NINCS;
				}
			}
			Msg(playerid, "Statisztikák újraszámolva");
		}
		else if(egyezik(param[1], "seeing"))
		{
			if(!Admin(playerid, 2)) return 1;
			if(params < 2)
				return Msg(playerid, "Használata: /report seeing [channel]");
			
			new szoba;
			if(egyezik(param[2], "all")) szoba = 555;
			else szoba = strval(param[2]);
			
			if(szoba < 0 || szoba >= MAX_CHANNEL && szoba != 555)
				return Msg(playerid, "Hibás channel!");
			
			if(szoba == 555)
			{
				if(params < 3)
					return Msg(playerid, "Használata: /report seeing all [be/ki]");
				if(egyezik(param[3], "be"))
				{
					ABroadCastFormat(COLOR_LIGHTRED, 1, "%s engedélyezte az összes channelen, hogy a játékosok lássák egymást", PlayerName(playerid));
					for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rSeeing] = 1;
				}
				else
				{
					ABroadCastFormat(COLOR_LIGHTRED, 1, "%s tiltotta az összes channelen, hogy a játékosok lássák egymást", PlayerName(playerid));
					for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rSeeing] = 0;
				}
			}
			else
			{
				if(ReportChannel[szoba][rSeeing])
				{
					ABroadCastFormat(COLOR_LIGHTRED, 1, "%s tiltotta a channelen (ID: %d), hogy a játékosok lássák egymást", PlayerName(playerid), szoba);
					ReportChannel[szoba][rSeeing] = 0;
				}
				else
				{
					ABroadCastFormat(COLOR_LIGHTRED, 1, "%s engedélyezte a channelen (ID: %d), hogy a játékosok lássák egymást", PlayerName(playerid), szoba);
					ReportChannel[szoba][rSeeing] = 1;
				}
			}	
		}
		else if(egyezik(param[1], "recount"))
		{
			if(!Admin(playerid, 1337)) return 1;
			for(new x = 0; x < MAX_CHANNEL; x++)
			{
				ReportChannel[x][rAdmins] = 0;
				ReportChannel[x][rAdminHelpers] = 0;
				ReportChannel[x][rPlayers] = 0;
				for(new y = 0; y < MAX_PLAYERS; y++)
				{
					if(!IsPlayerConnected(y) || IsPlayerNPC(y)) continue;
					if(PlayerInfo[y][pReportChannel] == x)
						ReportChannel[x][rPlayers]++;
					if(PlayerInfo[y][pViewReportChannel] == x || PlayerInfo[y][pViewReportChannel] == 555)
					{
						if(Admin(playerid, 1))
							ReportChannel[x][rAdmins]++;
						else
							ReportChannel[x][rAdminHelpers]++;
					}
				}
			}
		}
		return 1;
	}

	if(egyezik(cmd, "uzenet") || egyezik(cmd, "/üzenet") || egyezik (cmd, "/ü") || egyezik(cmd, "/u"))
	{
		if(reporttiltva[playerid] == 1) return Msg(playerid, "Nem tudsz reportolni");
		new szoba = PlayerInfo[playerid][pReportChannel];
		if(szoba == NINCS) return Msg(playerid, "Nem vagy channelen! Channelek: /report");

		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[120];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}

		result[idx - offset] = EOS;
		if(!strlen(result))
			return Msg(playerid, "/üzenet [üzenet]");

		if(SzovegEllenorzes(playerid, result, "/ü"))
			return 1;

		if(ReportolasIdo[playerid] != 0)
			return Msg(playerid, "Nyugi, ne siess!");
		ReportolasIdo[playerid] = 15;

		ReportUzenet(playerid, result);
		SendFormatMessage(playerid, COLOR_YELLOW, "[Channel %d]Reportod: %s", szoba, result);
		TudReportolni[playerid] = 0;
		return 1;
	}
	
	if(egyezik(cmd, "/cvá") || egyezik(cmd, "/cva"))
	{
		new szoba = PlayerInfo[playerid][pViewReportChannel], channel;
		if(szoba == NINCS) return Msg(playerid, "Nem vagy channelen! Channelek: /report");
		if(szoba == 555)
		{
			if(!IsNumeric(param[1]))
				return Msg(playerid, "Mivel az összes channelen fennt vagy, ezért vagy a /cváall-t használod, hogy mindenhova üzenj, vagy /cvá [channel] [szöveg]", false);
			channel = strval(param[1]);
			strtok(cmdtext, idx);
			if(channel < 0 || channel >= MAX_CHANNEL)
				return Msg(playerid, "Mivel az összes channelen fennt vagy, ezért vagy a /cváall-t használod, hogy mindenhova üzenj, vagy /cvá [channel] [szöveg]", false);
		}
		else channel = szoba;

		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[120];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result) && szoba != 555)
			return Msg(playerid, "/cvá [üzenet]");
		else if(!strlen(result) && szoba == 555)
			return Msg(playerid, "/cvá [channel] [üzenet]");
		
		if(szoba == 555)
			ReportUzenet(playerid, result, true, false, channel);
		else
			ReportUzenet(playerid, result, true);
		return 1;
	}
	
	if(egyezik(cmd, "/cváall") || egyezik(cmd, "/cvaall"))
	{
		new szoba = PlayerInfo[playerid][pViewReportChannel];
		if(szoba != 555)
			return Msg(playerid, "Nem vagy fennt mindegyik channelen!");

		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[120];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
			return Msg(playerid, "/cváall [üzenet]");
		
		ReportUzenet(playerid, result, true, true);
		return 1;
	}

	if(egyezik(cmd, "/resivan"))
	{
		if(!IsScripter(playerid)) return 1;
		
		if(resivan)
			resivan = 0;
		else
			resivan = 1;
			
		SendFormatMessage(playerid, COLOR_WHITE, "Resivan: %d", resivan);
		
		return 1;			
	}

	if(egyezik(cmd, "/fegyver") || egyezik(cmd, "/f"))
	{
		if(params < 1)
		{
			Msg(playerid, "Használata: /f(egyver) [funkció]");
			Msg(playerid, "Funkciók: elõvesz [fegyvernév / fegyverid] - Rövidítés: /f e [fegyvernév / id]");
			Msg(playerid, "Funkciók: elrak - Rövidítés: /f k");
			Msg(playerid, "Funkciók: újratöltés - Rövidítés: /f r");
			return 1;
		}
		
		if(egyezik(param[1], "elrak") || egyezik(param[1], "k"))
		{
			Cselekves(playerid, "elrakta a fegyverét", 1);
			Msg(playerid, "Elraktad");
			SetPlayerArmedWeapon(playerid, 0);
			Fegyvere[playerid] = 0;
			return 1;
		}
		else if(egyezik(param[1], "elõvesz") || egyezik(param[1], "elovesz") || egyezik(param[1], "e"))
		{
			if(params < 2)
				return Msg(playerid, "Használat: /fegyver elõvesz [név / id]");
			
			if(NemMozoghat(playerid))
				return Msg(playerid, "Nem vehetsz elõ fegyvert!");
			
			new slot, id, fegyo, ammo;
			if(IsNumeric(param[2]))
			{
				id = strval(param[2]);
				if(id < 1 || id >= sizeof(aWeaponNames))
					return Msg(playerid, "Nincs ilyen fegyver");
					
				slot = GetGunSlot(id);
				GetPlayerWeaponData(playerid, slot, fegyo, ammo);
				
				if(fegyo != id || ammo == 0)
					return Msg(playerid, "Nincs ilyen fegyvered!");
					
				if(IsPlayerInAnyVehicle(playerid) && (id == 22 || id == 23 || id == 24))
					return Msg(playerid, "Ezt nem veheted elõ jármûben");
				
				if(Lofegyver(id) && Harcol[playerid] && !TeruletInfo[ HarcolTerulet[playerid] ][tLofegyver])
					return Msg(playerid, "Lõfegyvert NEM vehetsz elõ!");
				
				Fegyvere[playerid] = id;
				SetPlayerArmedWeapon(playerid, id);
				Cselekves(playerid, "elõvett egy fegyvert",1);
				Msg(playerid, "Elõvettél egy fegyvert!");
				
				if(id >= 24 && id <= 34)
					OnePlayAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
			}
			else
			{
				id = GetGunID(param[2]);
				if(id == 0)
					return Msg(playerid, "Nincs ilyen fegyver");
				slot = GetGunSlot(id);
				GetPlayerWeaponData(playerid, slot, fegyo, ammo);
				
				if(fegyo != id || ammo == 0)
					return Msg(playerid, "Nincs ilyen fegyvered!");

				if(IsPlayerInAnyVehicle(playerid) && (id == 22 || id == 23 || id == 24))
					return Msg(playerid, "Ezt nem veheted elõ jármûben");

				if(Lofegyver(id) && Harcol[playerid] && !TeruletInfo[ HarcolTerulet[playerid] ][tLofegyver])
					return Msg(playerid, "Lõfegyvert NEM vehetsz elõ!");

				Fegyvere[playerid] = id;
				SetPlayerArmedWeapon(playerid, id);
				Cselekves(playerid, "elõvett egy fegyvert", 1);
				Msg(playerid, "Elõvettél egy fegyvert!");
				
				if(id >= 24 && id <= 34)
					OnePlayAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
			}
		}
		else if(egyezik(param[1], "újratöltés") || egyezik(param[1], "ujratoltes") || egyezik(param[1], "r"))
		{
			if(Fegyvere[playerid] < 3)
				return Msg(playerid, "Mégis mit akarsz újratölteni? o.O");
			new slot = GetGunSlot(Fegyvere[playerid]), wep, ammo;
			GetPlayerWeaponData(playerid, slot, wep, ammo);
			if(ammo < 1)
				return Msg(playerid, "Mégis mit akarsz újratölteni? o.O");
				
			Cselekves(playerid, "újratöltötte a fegyverét", 1);
			Msg(playerid, "Fegyver újratöltve!");
			GiveWeapon(playerid, Fegyvere[playerid], 0);
			if(Fegyvere[playerid] >= 24 && Fegyvere[playerid] <= 34)
				OnePlayAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
		}
		return 1;
	}

    if(egyezik(cmd, "/spawn"))
    {
		if(!IsScripter(playerid)) return 1;
		if(params != 1) return 1;
		
		new player = ReturnUser(param[1]);
		if(player == INVALID_PLAYER_ID) return 1;
		
		SpawnPlayer(player);
		SendFormatMessage(playerid, COLOR_WHITE, "%d spawnoltatva!", player);
		
        return 1;
    }

	if(egyezik(cmd, "/debug"))
	{
		if(!IsScripter(playerid)) return 1;
		if(params < 1)
		{
			Msg(playerid, "/debug [funkció] [paraméter]", false);
			//Msg(playerid, "Funkciók: CorrectPlayerDatas [név] | gettime | getdate | hatar | report [játékos] | minimumfizuhoz");
			//Msg(playerid, "Funkciók: Csomagtarto");
			return 1;
		}
		if(egyezik(param[1], "kocsikerek"))
		{
			if(params < 2) return 1;
			new kocsi = strval(param[2]);
			if(kocsi < 1 || kocsi >= MAX_VEHICLES || !IsVehicleConnected(kocsi)) return 1;
			
			new panels, doors, lights, tires;
			GetVehicleDamageStatus(kocsi, panels, doors, lights, tires);
			if(tires == 15)
			{
				UpdateVehicleDamageStatus(kocsi, panels, doors, lights, 0);
				Msg(playerid, "Kerék megjavitva");
			}
			else
			{
				UpdateVehicleDamageStatus(kocsi, panels, doors, lights, 15);
				Msg(playerid, "Kerék kilyukasztva");
			}
		}
		else if(egyezik(param[1], "fegyverinfo"))
		{
			if(params < 2) return 1;
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return 1;
			
			new 
				fegyo, losz,
				fegyverinfo[64],
				kellinfo[64]
			;
			
			for(new slot = 0; slot < 12; slot++)
			{
				GetPlayerWeaponData(player, slot, fegyo, losz);
				
				if(fegyo != 0) format(fegyverinfo, 64, "%s, %ddb", GetGunName(fegyo), losz);
				else fegyverinfo = "Nincs";
				
				if(FegyverVan[player][slot] && Fegyver[player][slot] != 0) format(kellinfo, 64, "%s, %ddb", GetGunName(Fegyver[player][slot]), Tolteny[player][slot]);
				else kellinfo = "Nincs";
				
				SendFormatMessage(playerid, COLOR_WHITE, "Slot %d - Van: %s - Kellene: %s", slot, fegyverinfo, kellinfo);
			}
		}
		else if(egyezik(param[1], "time"))
		{
			Msg(playerid, "Kész");
			SyncTime();
		}
		else if(egyezik(param[1], "respawncars"))
		{
			for(new car = 1; car < MAX_VEHICLES; car++)
			{
				if(IsVehicleConnected(car))
					DestroyVehicle(car);
			}
			for(new car = 0; car < sizeof(CreatedCars); car++)
				CreatedCars[car] = 0;
			AllCarSpawn();
		}
		else if(egyezik(param[1], "saveaccounts"))
		{
			if(FloodCheck(playerid, 5)) return 1;
			SaveAccounts();
			Msg(playerid, "Mentés elindult... kb. 10-20mp");
		}
		else if(egyezik(param[1], "ccc"))
		{
			if(params < 2) return Msg(playerid, "HP?");
			new hp = strval(param[2]);
			
			if(hp < 0 || hp > 100000) return Msg(playerid, "Érvénytelen szám");
			
			if(IsPlayerInAnyVehicle(playerid))
				SetVehicleHealth(GetPlayerVehicleID(playerid), float(hp));
			else
				Msg(playerid, "Nem vagy kocsiban!");
		}
		else if(egyezik(param[1], "minimumfizuhoz"))
		{
			if(params < 2) return Msg(playerid, "Idõ?");
			new ido = strval(param[2]);
			MinimumFizuhoz = ido;
			Msg(playerid, "Kész");
		}
		else if(egyezik(param[1], "terulettulaj"))
		{
			if(params < 3) return Msg(playerid, "Terület és frakció?");
			new terulet = strval(param[2]), frakcio = strval(param[3]);
			TeruletInfo[terulet][tTulaj] = frakcio;
			Msg(playerid, "Beállítva!");
			TeruletUpdate(terulet, TERULET_Tulaj);
			TeruletFrissites();
		}
		else if(egyezik(param[1], "szamolas"))
		{
			if(params < 2) return Msg(playerid, "NPC?");
			new npc = strval(param[2]);
			
			if(npc < 0 || npc >= MAX_NPC_SOFOR || !NPC_Vezetok[npc][nConnected])
				return Msg(playerid, "Hiba");
			
			if(NPC_Vezetok[npc][nSzamolas])
			{
				NPC_Vezetok[npc][nSzamolas] = false;
				Msg(playerid, "Számolás kikapcsolva");
			}
			else
			{
				NPC_Vezetok[npc][nSzamolas] = true;
				Msg(playerid, "Számolás bekapcsolva");
			}
		}
		else if(egyezik(param[1], "varosban"))
		{
			if(params < 2) return Msg(playerid, "Játékos?");
			new jatekos = strval(param[2]);
			
			if(!RendesJatekos(jatekos))
				return Msg(playerid, "Hiba");
			
			if(Varosban[jatekos])
				SendFormatMessage(playerid, COLOR_WHITE, "%s a városban van", PlayerName(jatekos));
			else
				SendFormatMessage(playerid, COLOR_WHITE, "%s nincs a városban", PlayerName(jatekos));
		}
		else if(egyezik(param[1], "spectateveh"))
		{
			if(params < 2) {TogglePlayerSpectating(playerid, 0); return 1; }
			TogglePlayerSpectating(playerid, 1);
			PlayerSpectateVehicle(playerid, strval(param[2]));
			Msg(playerid, "Spectate!");
		}
		else if(egyezik(param[1], "idojaras"))
		{
			IdojarasValtozas();
			Msg(playerid, "Kész!");
		}
		else if(egyezik(param[1], "megallo"))
		{
			if(params < 2) return Msg(playerid, "NPC?");
			new npc = strval(param[2]);
			for(new x = 0; x < MAX_MEGALLO; x++)
				SendFormatMessage(playerid, COLOR_WHITE, "Név: %s | X: %f | Y: %f | Z: %f", NPC_MegallokNeve[npc][x], NPC_Megallok[npc][x][0], NPC_Megallok[npc][x][1], NPC_Megallok[npc][x][2]);
		}
		/*else if(egyezik(param[1], "continueplayback"))
		{
			if(params < 2) return Msg(playerid, "NPC?");
			new npc = strval(param[2]);
			ContinueRecordingPlayback(npc);
			Msg(playerid, "Kész");
		}*/
		else if(egyezik(param[1], "benzin"))
		{
			if(params < 2) return Msg(playerid, "/debug benzin [benzin]");
			new benzin = strval(param[2]), kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 10.0) return Msg(playerid, "Nincs a közelben kocsi!");
			SendFormatMessage(playerid, COLOR_WHITE, "Új érték: %dl, régi: %dl", benzin, Gas[kocsi]);
			Gas[kocsi] = benzin;
		}
		else if(egyezik(param[1], "fekete"))
		{
			if(params < 3) return Msg(playerid, "Használat: /debug fekete [játékos] [0/1]");
			new user = ReturnUser(param[2]);
			if(user == INVALID_PLAYER_ID)
				return Msg(playerid, "Nincs ilyen játékos!");
				
			new igennem = strval(param[3]);			
			if(igennem == 1)
			{
				Feketeseg(user, true);
				return Msg(playerid, "Sötétség!");
			}
			else if(igennem == 0)
			{
				Feketeseg(user, false);
				return Msg(playerid, "Fény!");
			}
			else
				return Msg(playerid, "0 vagy 1!");
		}
		else if(egyezik(param[1], "CorrectPlayerDatas"))
		{
			if(params < 2) return Msg(playerid, "Név?");
			new user = ReturnUser(param[2]);
			if(user == INVALID_PLAYER_ID)
				return Msg(playerid, "Nincs ilyen játékos!");

			CorrectPlayerDatas(user);
			Msg(playerid, "Kész!");
		}
		else if(egyezik(param[1], "gettime"))
			SendFormatMessage(playerid, COLOR_WHITE, "gettime() = %d", gettime());
		else if(egyezik(param[1], "getdate"))
			SendFormatMessage(playerid, COLOR_WHITE, "getdate() = %d", getdate());
		else if(egyezik(param[1], "hatar"))
			SendFormatMessage(playerid, COLOR_WHITE, "Határ() = %d", hatar);
		else if(egyezik(param[1], "sound"))
		{
			if(params < 2)
				return Msg(playerid, "/debug sound [hang]");
			PlayerPlaySound(playerid, strval(param[2]), 0.0, 0.0, 0.0);
		}
		else if(egyezik(param[1], "payday"))
		{
			if(params < 2)
				return Msg(playerid, "/debug payday [idõ - percben!]");
			PlayerInfo[playerid][pPayDay] = strval(param[2]) * 60;
			SendFormatMessage(playerid, COLOR_WHITE, "PayDay: %dperc", strval(param[2]) * 60);
		}
		else if(egyezik(param[1], "adokitoltve"))
		{
			PlayerInfo[playerid][pAdoKitoltve] = 0;
			Msg(playerid, "Adó kitöltve 0ra téve");
		}
		else if(egyezik(param[1], "csomagtartocheck"))
		{
			new bool:ment;
			for(new x = 0; x < sizeof(CuccokAKocsiban); x++)
			{
				ment = false;
				for(new y = 0; y < 10; y++)
				{
					if(CuccokAKocsiban[x][y] < 0)
					{
						if(!ment)
						{
							SendFormatMessage(playerid, COLOR_GREY, "Kocsi %d resettelve mert minusz volt benne", x);
							ment = true;
						}
						CuccokAKocsiban[x][y] = 0;
					}
				}
			}
			//CsomagTartoMentes();
			Msg(playerid, "Kész");
		}
		else if(egyezik(param[1], "mysqlupdater"))
		{
			MySQLUpdater();
			Msg(playerid, "MySQLUpdater Futtatva");
		}
		else if(egyezik(param[1], "report"))
		{
			if(params < 2) return Msg(playerid, "Név?");
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID)
				return Msg(playerid, "Nincs ilyen játékos!");

			SendFormatMessage(playerid, COLOR_WHITE, "%s reportváltozójának az értéke: %d", PlayerName(player), TudReportolni[player]);
		}
		else if(egyezik(param[1], "csomagtarto"))
		{	
			if(params < 2) return Msg(playerid, "/debug csomagtarto [minusz / plus]");
			if(egyezik(param[2], "minusz"))
			{
				new m = 0;
				for(new v = 0; v < MAX_VEHICLES; v++)
				{
					for(new s = 0; s < 17; s++)
					{
						if(CuccokAKocsiban[v][s] < 0)
						{
							CuccokAKocsiban[v][s] = 0;
							m++;
						}
					}
				}
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Összesen %d jármûben volt MINUSZ cucc", m);
			}	
			if(egyezik(param[2], "plus"))
			{
				new m = 0;
				for(new v = 0; v < MAX_VEHICLES; v++)
				{
					for(new s = 0; s < 16; s++)
					{
						if(CuccokAKocsiban[v][s] > 10000)
						{
							CuccokAKocsiban[v][s] = 0;
							m++;
						}
					}
				}
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Összesen %d jármûben volt PLUS(10.000) cucc", m);
			}
		}
		
		return 1;
	}

	if(egyezik(cmd, "/versenyzõk") || egyezik(cmd, "/versenyzok"))
	{
		if(!IsDirector(playerid) && BViadal[playerid] == 0) return 1;
		
		ViadalRadar();
		
		SendFormatMessage(playerid, COLOR_YELLOW, "A célpontok bejelölve a radaron! Versenyzõk száma: %d", BVJatekosok);
		
		return 1;
	}

	if(egyezik(cmd, "/nevek"))
	{
		if(!Admin(playerid, 1)) return 1;
		
		if(Nevek[playerid])
		{
			Nevek[playerid] = 0;
			ShowNames(playerid, 0);
			Msg(playerid, "Nevek kikapcsolva!");
		}
		else
		{
			Nevek[playerid] = 1;
			ShowNames(playerid, 1);
			Msg(playerid, "Nevek bekapcsolva!");
		}
		
		return 1;
	}

	if(egyezik(cmd, "/alock"))
	{
		if(!Admin(playerid, 4)) return 1;
		
		new kocsi = GetClosestVehicle(playerid);
		
		if(GetDistanceToVehicle(playerid, kocsi) > 6.0) return Msg(playerid, "Nincs a közeledben jármû!");
		
		if(!Locked(kocsi))
		{
			LockCar(kocsi);
			SendFormatMessage(playerid, COLOR_WHITE, "Kocsi bezárva! [Id: %d]", kocsi);
		}
		else
		{
			UnLockCar(kocsi);
			SendFormatMessage(playerid, COLOR_WHITE, "Kocsi nyitva! [Id: %d]", kocsi);
		}
		
		return 1;
	}

	if(egyezik(cmd, "/k") || egyezik(cmd, "/kereskedõ") || egyezik(cmd, "/kereskedo"))
	{
		if(params < 1)
		{
			Msg(playerid, "===============[ Autókereskedõ ]===============", false);
			Msg(playerid, "Használata: /k [parancs] [alparancs]", false, COLOR_WHITE);
			Msg(playerid, "Parancsok: park, elad, vesz", false, COLOR_WHITE);
			return 1;
		}

		if(egyezik(param[1], "park"))
		{
			if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy jármûben!");
			new kocsi = IsAVsKocsi(GetPlayerVehicleID(playerid));
			if(kocsi == -1) return Msg(playerid, "Ez nem kereskedõi jármû!");
			if(CarInfo[kocsi][cOwned] != 0) return Msg(playerid, "Ez nem kereskedõi jármû!");
			if(!IsAt(playerid, IsAt_KereskedoHQ)) return Msg(playerid, "Nem vagy a kereskedõ HQ-n!");

			new Float:x, Float:y, Float:z, Float:a;
			GetVehiclePos(CarInfo[kocsi][cId], x, y, z);
			GetVehicleZAngle(CarInfo[kocsi][cId], a);

			CarInfo[kocsi][cLocationx] = x;
			CarInfo[kocsi][cLocationy] = y;
			CarInfo[kocsi][cLocationz] = z;
			CarInfo[kocsi][cAngle] = a;
			format(string, sizeof(string), "~n~~g~Leparkoltad");
			GameTextForPlayer(playerid, string, 10000, 3);

			//CarUpdate(kocsi, "LocX='%f', LocY='%f', LocZ='%f', Angle='%f'", x, y, z, a);
			CarUpdate(kocsi, CAR_X, CAR_Y, CAR_Z, CAR_Angle);

			DestroyVehicle(CarInfo[kocsi][cId]);
			CarInfo[kocsi][cId] = UjKocsi(CarInfo[kocsi][cModel],CarInfo[kocsi][cLocationx],CarInfo[kocsi][cLocationy],CarInfo[kocsi][cLocationz],CarInfo[kocsi][cAngle],CarInfo[kocsi][cColorOne],CarInfo[kocsi][cColorTwo]);
			Locker(CarInfo[kocsi][cId]);

			SetPlayerPos(playerid,x,y,z+1);
			TogglePlayerControllable(playerid, 1);
			return 1;
		}
		else if(egyezik(param[1], "elad"))
		{
			new kocsix = GetClosestVehicle(playerid);
			new kocsi = IsAVsKocsi(kocsix);

			if(kocsi == NINCS)
				return 1;

			new player;
			player = GetClosestPlayer(playerid);
			
			if(GetDistanceBetweenPlayers(playerid, player) > 2)
				return Msg(playerid, "A közeledben nincs senki!");
				
			if(IsPlayerNPC(player))
				return Msg(playerid, "Persze, majd az NPC elkocsikázik vele mi ? -.-");
				
			if(!Logged(player))
				return Msg(playerid, "Nincs belépve!");
				
			if(PlayerInfo[player][pPcarkey] != NINCS)
				if(PlayerInfo[player][pPremiumPont] > 0 && PlayerInfo[player][pPcarkey2] != NINCS || PlayerInfo[player][pPremiumPont] < 1)
					return Msg(playerid, "Van jármûve!");
					
			if(GetDistanceToVehicle(playerid, CarInfo[kocsi][cId]) > 5.5 || CarInfo[kocsi][cOwned] == 1)
				return Msg(playerid, "Nincs a közelben kereskedõi jármû!");

			Cselekves(playerid, "megír egy adásvételi szerzõdést, és átnyújtja a másik embernek.");
			Msg(playerid, "El szeretnéd adni a jármûvedet neki.", false, COLOR_LIGHTGREEN);
			SendFormatMessage(player, COLOR_LIGHTGREEN, "%s eladna neked egy kereskedõi jármûvet - Model: %s - /v vesz", PlayerName(playerid), GetVehicleModelName(GetVehicleModel(CarInfo[kocsi][cId])));
			KereskedoKocsiElad[player] = playerid;
			KereskedoKocsi[player] = kocsi;

			return 1;
		}
		else if(egyezik(param[1], "vesz"))
		{
			new player;
			player = KereskedoKocsiVetel[playerid];
			if(player == NINCS || !IsPlayerConnected(player) || IsPlayerNPC(player) || !Logged(player)) return 1;
			new car = KereskedoKocsi[playerid];
			if(CarInfo[car][cOwned] != 1) return 1;

			if(GetDistanceBetweenPlayers(playerid, player) > 2)
				return Msg(playerid, "Nincs a közeledben!");

			CarInfo[car][cOwned] = 0;

			new nev[MAX_PLAYER_NAME];
			format(nev, sizeof(nev), "Nincs_Tulaj");
			strmid(CarInfo[car][cOwner], nev, 0, strlen(nev));
			//CarUpdate(car, "Eladva='0', Tulaj='%s'", nev);
			CarUpdate(car, CAR_Owned, CAR_Owner);

			CorrectPlayerDatas(player);

			Cselekves(playerid, "aláírta az adásvételi szerzõdést, és vett egy jármûvet.");
			Msg(playerid, "Gratulálunk, ez mostmár autókereskedõi kocsi!", false, COLOR_LIGHTGREEN);
			SendFormatMessage(player, COLOR_LIGHTGREEN, "%s megvette a jármûvet - Model: %s", PlayerName(playerid), GetVehicleModelName(GetVehicleModel(CarInfo[car][cId])));
			KereskedoKocsiVetel[playerid] = NINCS;

			return 1;
		}

		return 1;
	}

	if(egyezik(cmd, "/gotopos"))
	{
		if(!Admin(playerid, 1338)) return 1;
		if(params < 3)
			return Msg(playerid, "/gotopos [x] [y] [z]");

		new Float:tpos[3];
		tpos[0] = floatstr(param[1]);
		tpos[1] = floatstr(param[2]);
		tpos[2] = floatstr(param[3]);
		Tele(playerid, tpos[0], tpos[1], tpos[2], false);
		SendFormatMessage(playerid, COLOR_GREY, "Teleportálva ide: %f, %f, %f", tpos[0], tpos[1], tpos[2]);
		return 1;
	}

	if(egyezik(cmd, "/aláír") || egyezik(cmd, "/alair"))
	{
		if(AdasVeteliNeki[playerid] == NINCS)
			return Msg(playerid, "Nem adtak neked szerzõdést!");

		new player = AdasVeteliNeki[playerid];

		/*if(AdasVeteliTipus[playerid] == 0)
		{
			if(PlayerInfo[playerid][pPhousekey] == NINCS)
			{
				Msg(playerid, "Mivel eladtad a házadat, ezért a szerzõdés már nem érvényes!");
				AdasVeteliNeki[playerid] = NINCS;
				return 1;
			}
			else if(PlayerInfo[player][pPhousekey] != NINCS)
			{
				Msg(playerid, "Közben vett egy házat, ezért a szerzõdés már nem érvényes!");
				AdasVeteliNeki[playerid] = NINCS;
				return 1;
			}
		}
		else if(AdasVeteliTipus[playerid] == 1)
		{
			if(PlayerInfo[playerid][pPcarkey] == NINCS)
			{
				Msg(playerid, "Mivel eladtad a jármûvedet, ezért a szerzõdés már nem érvényes!");
				AdasVeteliNeki[playerid] = NINCS;
				return 1;
			}
			else if(PlayerInfo[player][pPcarkey] != NINCS)
			{
				Msg(playerid, "Közben vett egy jármûvet, ezért a szerzõdés már nem érvényes!");
				AdasVeteliNeki[playerid] = NINCS;
				return 1;
			}
		}
		else if(AdasVeteliTipus[playerid] == 2)
		{
			if(PlayerInfo[playerid][pPbiskey] == NINCS)
			{
				Msg(playerid, "Mivel eladtad a bizniszedet, ezért a szerzõdés már nem érvényes!");
				AdasVeteliNeki[playerid] = NINCS;
				return 1;
			}
			else if(PlayerInfo[player][pPcarkey] != NINCS)
			{
				Msg(playerid, "Közben vett egy bizniszét, ezért a szerzõdés már nem érvényes!");
				AdasVeteliNeki[playerid] = NINCS;
				return 1;
			}
		}*/

		new cucc, nev[MAX_PLAYER_NAME], ara, Float:tav;
		nev = PlayerName(player);
		ara = AdasVeteliAra[playerid];
		tav = GetDistanceBetweenPlayers(playerid, player);

		if(tav > 2.0)
			return Msg(playerid, "Nincs a közeledben!");

		if(AdasVeteliTipus[playerid] == 0)
		{
			if(PlayerInfo[player][pPhousekey] != NINCS)
			{
				PlayerInfo[player][pPremiumPont]--;
				Msg(player, "Egy prémiumpont levonva");
			}
			
			cucc = AdasVeteliCucc[playerid];
			strmid(HouseInfo[cucc][hOwner], nev, 0, strlen(nev), MAX_PLAYER_NAME);
			//HazUpdate(cucc, "Tulaj='%s'", nev);
			HazUpdate(cucc, HAZ_Owner);
			PlayerInfo[playerid][pPhousekey] = NINCS;

			Cselekves(playerid, "aláírta az adásvételi szerzõdést");

			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Aláírtad a szerzõdést. Eladtad a [Gates] utca %d. szám alatt lévõ házt, és a bank átutalta a pénzt (%dFt)", cucc, ara);
			SendFormatMessage(player, COLOR_LIGHTBLUE, "%s aláírta a szerzõdést, ezáltal tied a [Gates] utca %d. szám alatt lévõ ház, és átutaltad neki a pénzt (%dFt)", PlayerName(playerid), cucc, ara);
			PlayerInfo[player][pAccount] -= ara;
			if(PlayerInfo[playerid][pBankSzamlaSzam] != 0) PlayerInfo[playerid][pAccount] += ara;
			else GiveMoney(playerid, ara);
		}
		else if(AdasVeteliTipus[playerid] == 1)
		{
			if(PlayerInfo[player][pPcarkey] != NINCS)
			{
				PlayerInfo[player][pPremiumPont]--;
				Msg(player, "Egy prémiumpont levonva");
			}
			
			cucc = AdasVeteliCucc[playerid];
			strmid(CarInfo[cucc][cOwner], nev, 0, strlen(nev), MAX_PLAYER_NAME);
			//CarUpdate(cucc, "Tulaj='%s'", nev);
			CarUpdate(cucc, CAR_Owner);

			Cselekves(playerid, "aláírta az adásvételi szerzõdést");

			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Aláírtad a szerzõdést. Eladtad a %d rendszámû jármûvedet, és a bank átutalta a pénzt (%dFt)", cucc, ara);
			SendFormatMessage(player, COLOR_LIGHTBLUE, "%s aláírta a szerzõdést, ezáltal tied a %d rendszámú jármû, és átutaltad neki a pénzt (%dFt)", PlayerName(playerid), cucc, ara);
			PlayerInfo[player][pAccount] -= ara;
			if(PlayerInfo[playerid][pBankSzamlaSzam] != 0) PlayerInfo[playerid][pAccount] += ara;
			else GiveMoney(playerid, ara);
		}
		else if(AdasVeteliTipus[playerid] == 2)
		{
			cucc = PlayerInfo[playerid][pPbiskey];
			strmid(BizzInfo[cucc][bOwner], nev, 0, strlen(nev), MAX_PLAYER_NAME);
			//BizUpdate(cucc, "Tulaj='%s'", nev);
			BizUpdate(cucc, BIZ_Owner);

			Cselekves(playerid, "aláírta az adásvételi szerzõdést");

			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Aláírtad a szerzõdést. Eladtad a \"%s\"-t, és a bank átutalta a pénzt (%dFt)", BizzInfo[cucc][bMessage], ara);
			SendFormatMessage(player, COLOR_LIGHTBLUE, "%s aláírta a szerzõdést, ezáltal tied a \"%s\", és átutaltad neki a pénzt (%dFt)", PlayerName(playerid), BizzInfo[cucc][bMessage], ara);
			PlayerInfo[player][pAccount] -= ara;
			if(PlayerInfo[playerid][pBankSzamlaSzam] != 0) PlayerInfo[playerid][pAccount] += ara;
			else GiveMoney(playerid, ara);
		}

		AdasVeteliNeki[playerid] = NINCS;

		CorrectPlayerDatas(playerid);
		CorrectPlayerDatas(player);

		return 1;
	}

	if(egyezik(cmd, "/adasveteli") || egyezik(cmd, "/adásvételi"))
	{
		new player = GetClosestPlayer(playerid), Float:tav = GetDistanceBetweenPlayers(playerid, player);

		if(tav > 2.0)
			return Msg(playerid, "A közeledben nincs senki!");

		if(AdasVeteliNeki[player] != NINCS)
			return Msg(playerid, "Neki már adtak egy adásvételi szerzõdést!");

		if(params < 2)
		{
			Msg(playerid, "Használata: /adásvételi [mit] [mennyiért]");
			Msg(playerid, "Lehet: kocsi, ház, biznisz", false);
			return 1;
		}

		new ara = strval(param[2]);
		if(ara < 100000)
			return Msg(playerid, "Persze, biztos ennyiért adod IRL is... -.-\"");
		if(ara > PlayerInfo[playerid][pAccount])
			return Msg(playerid, "Nincs ennyi pénz a bankszámládon!");

		if(egyezik(param[1], "ház") || egyezik(param[1], "haz"))
		{
			if(VanHaza(playerid) == 1 && PremiumPont(playerid) < 1 || VanHaza(playerid) == 2)
				return Msg(playerid, "Már van házad!");
				
			new haz = IsAt(playerid, IsAt_Haz);
			if(haz == NINCS)
				return Msg(playerid, "Nem vagy egy házban sem!");
				
			if(!egyezik(PlayerName(player), HouseInfo[haz][hOwner]))
			{
				Msg(playerid, "Szép próba!");
				Msg(playerid, "[Vevõ]Bugot akarsz kihasználni?(Ház)");
				Msg(player, "Ez nem a te házad!");
				Msg(player, "[Tulaj]Bugot akarsz kihasználni?(Ház)");
				return 1;
			}

			if(VanHaza(playerid) == 1)
			{
				if(Biztos[playerid] != 1)
				{
					Msg(playerid, "Biztos vagy benne, hogy megveszed második házként? Vehetsz második kocsit is. Ha biztos vagy benne, írd be újra a parancsot!");
					Biztos[playerid] = 1;
					return 1;
				}
			}

			new szoveg[64];
			Format(szoveg, "átnyújtja az adásvételi szerzõdést neki: %s", PlayerName(player));
			Cselekves(playerid, szoveg);

			AdasVeteliNeki[player] = playerid;
			AdasVeteliTipus[player] = 0;
			AdasVeteliAra[player] = ara;
			AdasVeteliCucc[player] = haz;
			Msg(playerid, "Átadtad neki a szerõzdést.", false);
			SendFormatMessage(player, COLOR_LIGHTBLUE, "%s megvenné a házadat %dFtért - A szerzõdés aláírása: /alair - Visszautasítás: /cancel adasveteli", PlayerName(playerid), ara);
		}
		else if(egyezik(param[1], "kocsi"))
		{
			if(PlayerInfo[playerid][pPcarkey] != NINCS)
				if(PlayerInfo[playerid][pPremiumPont] > 0 && PlayerInfo[playerid][pPcarkey2] != NINCS || PlayerInfo[playerid][pPremiumPont] < 1)
				return Msg(playerid, "Már van jármûved!");
			if(PlayerInfo[player][pPcarkey] == NINCS && PlayerInfo[player][pPcarkey2] == NINCS)
				return Msg(playerid, "Neki nincs saját jármûve!");
				
			new kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 5.5)
				return Msg(playerid, "Nincs jármû a közeledben");
			
			new vs = IsAVsKocsi(kocsi);
			if(vs == NINCS)
				return Msg(playerid, "Ez nem V-s!");
			if(CarInfo[vs][cOwned] != 1)
				return Msg(playerid, "Ez egy kereskedõ jármû...");
			if(!egyezik(CarInfo[vs][cOwner], PlayerName(player)))
				return Msg(playerid, "Ez nem az övé!");

			if(PlayerInfo[playerid][pPcarkey] != NINCS)
			{
				if(Biztos[playerid] != 1)
				{
					Msg(playerid, "Biztos vagy benne, hogy megveszed második jármûként? Vehetsz második házat is. Ha biztos vagy benne, írd be újra a parancsot!");
					Biztos[playerid] = 1;
					return 1;
				}
			}

			new szoveg[64];
			Format(szoveg, "átnyújtja az adásvételi szerzõdést neki: %s", PlayerName(player));
			Cselekves(playerid, szoveg);

			AdasVeteliNeki[player] = playerid;
			AdasVeteliTipus[player] = 1;
			AdasVeteliAra[player] = ara;
			AdasVeteliCucc[player] = vs;
			Msg(playerid, "Átadtad neki a szerõzdést.", false);
			SendFormatMessage(player, COLOR_LIGHTBLUE, "%s megvenné a jármûvedet %dFtért - A szerzõdés aláírása: /alair - Visszautasítás: /cancel adasveteli", PlayerName(playerid), ara);
		}
		else if(egyezik(param[1], "biznisz"))
		{
			if(PlayerInfo[playerid][pPbiskey] != 255)
				return Msg(playerid, "Már van bizniszed!");
			if(PlayerInfo[player][pPbiskey] == 255)
				return Msg(playerid, "Neki nincs biznisze!");

			new szoveg[64];
			Format(szoveg, "átnyújtja az adásvételi szerzõdést neki: %s", PlayerName(player));
			Cselekves(playerid, szoveg);

			AdasVeteliNeki[player] = playerid;
			AdasVeteliTipus[player] = 2;
			AdasVeteliAra[player] = ara;
			Msg(playerid, "Átadtad neki a szerõzdést.", false);
			SendFormatMessage(player, COLOR_LIGHTBLUE, "%s megvenné a bizniszedet %dFtért - A szerzõdés aláírása: /alair - Visszautasítás: /cancel adasveteli", PlayerName(playerid), ara);
		}
		else
		{
			Msg(playerid, "Használata: /adásvételi [kitõl] [mit] [mennyiért]");
			Msg(playerid, "Lehet: kocsi, ház, biznisz", false);
			return 1;
		}

		return 1;
	}

	if(egyezik(cmd, "/tele"))
	{
		if(!Admin(playerid, 1)) return 1;

		new gotostring[512];
		for(new g = 0; g < sizeof(GotoPos); g++)
		{
			if(g == 0)
				Format(gotostring, "%s", GotoNev[0]);
			else
				Format(gotostring, "%s\n%s", gotostring, GotoNev[g]);
		}

		ShowPlayerDialog(playerid, DIALOG_GOTO, DIALOG_STYLE_LIST, "Admin Teleportálás", gotostring, "Teleport!", "Mégse");
		Hazbanvan[playerid] = 0;
		return 1;
	}

	if(egyezik(cmd, "/msegit"))
	{
		if(Animban[playerid] == 1)
	    {
			if(FrakcioTagok(LMUNKA_MENTO) > 0) return Msg(playerid, "Van fennt mentõs! Hívj segítséget > /service medic");
			
		    if(PlayerInfo[playerid][pKotszer] >= 2)
		    {
   				MunkaFolyamatban[playerid] = 1;
			    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Ellatod a sebeidet...", 60000, 3);
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
				SetTimerEx("Munkavege", 60000, false, "ddd", playerid, M_MSEGIT, 0);
				PlayerInfo[playerid][pKotszer] -= 2;
				Cselekves(playerid, "ellátja a sebeit...");
			}
			else
			{
		    	SendClientMessage(playerid, COLOR_YELLOW, "Nincs kötszered! Vegyél a 24/7-be! (2 kötszer kell!)");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Nem szorulsz segítségre!");
		}
	}
	if(strcmp(cmd, "/csokiautomata", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(FloodCheck(playerid)) return 1;
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(IsAt(playerid, IsAt_Csokiautomata))
				{
					if(GetMoney(playerid) > 200)
					{
						Msg(playerid, "Vettél egy csokit");
						GiveMoney(playerid, -200);
						BizPenz(BIZ_AUTOMATA, 200, playerid);
						
						new Float:hp;
						GetPlayerHealth(playerid, hp);
						if(hp <= 90)
							SetHealth(playerid, hp+10);
						else
							SetHealth(playerid, 100);
						Cselekves(playerid, "vett egy csokit az automatából");
					}
					else return Msg(playerid, "Nincs elég pénzed! (200Ft)");
				}
				else return Msg(playerid, "Nem vagy csokiautomatánál!");
			}
			else return Msg(playerid, "Kocsiban?");
		}
	}
	
	if(strcmp(cmd, "/italautomata", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(FloodCheck(playerid)) return 1;
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(IsAt(playerid, IsAt_Italautomata))
				{
					if(GetMoney(playerid) > 200)
					{
						Msg(playerid, "Vettél egy üdítõt!");
						GiveMoney(playerid, -200);
						BizPenz(BIZ_AUTOMATA, 200, playerid);
						
						new Float:hp;
						GetPlayerHealth(playerid, hp);
						if(hp <= 90)
							SetHealth(playerid, hp+10);
						else
							SetHealth(playerid, 100);
						Cselekves(playerid, "vett egy doboz üdítõt az automatából");
					}
					else return Msg(playerid, "Nincs elég pénzed! (200Ft)");
				}
				else return Msg(playerid, "Nem vagy italautomatánál!");
			}
			else return Msg(playerid, "Kocsiban?");
		}
	}

	if(strcmp(cmd, "/menu", true) == 0 || strcmp(cmd, "/menü", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
			return 1;

		if(FloodCheck(playerid)) return 1;

		new car = GetClosestVehicle(playerid), model = GetVehicleModel(car);
		if(model == 588 || model == 423)
		{
			new Float:dist = GetDistanceToVehicle(playerid, car);
			if(dist <= 3.5)
			{
				new sofor = KocsiSofor(car);
				if(sofor == NINCS)
					return Msg(playerid, "A kocsiba nincs senki!");
				
				if(GetMoney(playerid) < 1000) return Msg(playerid, "Minimum 1000Ft készpénznek kell lennie nálad");

				switch(model)
				{
					case 423:
					{
						if(params < 1)
						{
							Msg2(playerid, "================================================[ Fagylalt Kocsi ]================================================", COLOR_WHITE);
							Msg2(playerid, "Egy gömbös: [1]Vaníliás(100Ft), [2]Csokis(110Ft), [3]Epres(120Ft), [4]Málnás(125Ft), [5]Banános(150Ft)", COLOR_GREY);
							Msg2(playerid, "Két gömbös: [6]Vaníliás(180Ft), [7]Csokis(190Ft), [8]Epres(200Ft), [9]Málnás(210Ft), [10]Banános(250Ft)", COLOR_GREY);
							Msg2(playerid, "Három gömbös: [11]Vaníliás(250Ft), [12]Csokis(260Ft), [13]Epres(280Ft), [14]Málnás(300Ft), [15]Banános(340Ft)", COLOR_GREY);
							return 1;
						}

						if(!IsNumeric(param[1]))
							return Msg(playerid, "Ilyen nincs az étlapon!");

						new kaja = strval(param[1]);

						if(kaja < 1 || kaja > 15)
							return Msg(playerid, "Ilyen nincs az étlapon!");

						switch(kaja)
						{
							case 1: { Cselekves(playerid, "vett egy egy gömbös vaníliás fagylaltot"); GiveHealth(playerid, 8); MoneyTrans(playerid, sofor, 100); }
							case 2: { Cselekves(playerid, "vett egy egy gömbös csokis fagylaltot"); GiveHealth(playerid, 9); MoneyTrans(playerid, sofor, 110); }
							case 3: { Cselekves(playerid, "vett egy egy gömbös epres fagylaltot"); GiveHealth(playerid, 10); MoneyTrans(playerid, sofor, 120); }
							case 4: { Cselekves(playerid, "vett egy egy gömbös málnás fagylaltot"); GiveHealth(playerid, 11); MoneyTrans(playerid, sofor, 125); }
							case 5: { Cselekves(playerid, "vett egy egy gömbös banános fagylaltot"); GiveHealth(playerid, 12); MoneyTrans(playerid, sofor, 150); }
							case 6: { Cselekves(playerid, "vett egy két gömbös vaníliás fagylaltot"); GiveHealth(playerid, 13); MoneyTrans(playerid, sofor, 180); }
							case 7: { Cselekves(playerid, "vett egy két gömbös csokis fagylaltot"); GiveHealth(playerid, 14); MoneyTrans(playerid, sofor, 190); }
							case 8: { Cselekves(playerid, "vett egy két gömbös epres fagylaltot"); GiveHealth(playerid, 15); MoneyTrans(playerid, sofor, 200); }
							case 9: { Cselekves(playerid, "vett egy két gömbös málnás fagylaltot"); GiveHealth(playerid, 16); MoneyTrans(playerid, sofor, 210); }
							case 10: { Cselekves(playerid, "vett egy két gömbös banános fagylaltot"); GiveHealth(playerid, 17); MoneyTrans(playerid, sofor, 250); }
							case 11: { Cselekves(playerid, "vett egy három gömbös vaníliás fagylaltot"); GiveHealth(playerid, 18); MoneyTrans(playerid, sofor, 250); }
							case 12: { Cselekves(playerid, "vett egy három gömbös csokis fagylaltot"); GiveHealth(playerid, 19); MoneyTrans(playerid, sofor, 260); }
							case 13: { Cselekves(playerid, "vett egy három gömbös epres fagylaltot"); GiveHealth(playerid, 20); MoneyTrans(playerid, sofor, 280); }
							case 14: { Cselekves(playerid, "vett egy három gömbös málnás fagylaltot"); GiveHealth(playerid, 21); MoneyTrans(playerid, sofor, 300); }
							case 15: { Cselekves(playerid, "vett egy három gömbös banános fagylaltot"); GiveHealth(playerid, 22); MoneyTrans(playerid, sofor, 340); }
						}
					}
					case 588:
					{
						if(params < 1)
						{
							Msg2(playerid, "================[ HotDog Kocsi ]================", COLOR_WHITE);
							Msg2(playerid, "Üdítõk: [1]Coca Cola(200Ft), [2]Fanta(200Ft), [3]Ásványvíz(100Ft)", COLOR_GREY);
							Msg2(playerid, "Kaják: [4]HotDog(300Ft), [5]Hamburger(350Ft), [6]Gyros(400Ft)", COLOR_GREY);
							return 1;
						}

						if(!IsNumeric(param[1]))
							return Msg(playerid, "Ilyen nincs az étlapon!");

						new kaja = strval(param[1]);

						if(kaja < 1 || kaja > 6)
							return Msg(playerid, "Ilyen nincs az étlapon!");

						switch(kaja)
						{
							case 1: { Cselekves(playerid, "vett egy Coca Colát"); GiveHealth(playerid, 12); MoneyTrans(playerid, sofor, 200); }
							case 2: { Cselekves(playerid, "vett egy Fantát"); GiveHealth(playerid, 15); MoneyTrans(playerid, sofor, 200); }
							case 3: { Cselekves(playerid, "vett egy Ásványvizet"); GiveHealth(playerid, 9); MoneyTrans(playerid, sofor, 100); }
							case 4: { Cselekves(playerid, "vett egy Hotdogot"); GiveHealth(playerid, 30); MoneyTrans(playerid, sofor,300 ); }
							case 5: { Cselekves(playerid, "vett egy Hamburgert"); GiveHealth(playerid, 40); MoneyTrans(playerid, sofor, 350); }
							case 6: { Cselekves(playerid, "vett egy Gyrost"); GiveHealth(playerid, 50); MoneyTrans(playerid, sofor, 400); }
							default: Msg(playerid, "Nincs ilyen az étlapon");
						}
					}
				}
				return 1;
			}
		}

		new kajalda;
		if(IsAt(playerid, IsAt_McDonald)) kajalda = IsAt_McDonald;
		else if(IsAt(playerid, IsAt_Pizzazo)) kajalda = IsAt_Pizzazo;
		else if(IsAt(playerid, IsAt_Csirkes)) kajalda = IsAt_Csirkes;
		else if(IsAt(playerid, IsAt_HotDog)) kajalda = IsAt_HotDog;
		else if(IsAt(playerid, IsAt_Etterem)) kajalda = IsAt_Etterem;
		else
			return Msg(playerid, "Ezen a helyen nem lehet enni.");

		switch(kajalda)
		{
			case IsAt_McDonald:
			{
				if(params != 1)
				{
					Msg2(playerid, "======================================[ McDonald ]======================================", COLOR_WHITE);
					Msg2(playerid, "Italok: [1]Coca Cola(200Ft), [2]Sprite(200Ft), [3]Fanta(200Ft), [4]Cappy narancs Juice(250Ft), [5]NaturAqua(100Ft)", COLOR_GREY);
					Msg2(playerid, "Szendvicsek: [6]Hamburger(250Ft), [7]Sajtburger(300Ft), [8]BigMac(400Ft), [9]McChicken(450Ft), [10]Sertés McFarm(500F)", COLOR_GREY);
					Msg2(playerid, "Szendvicsek: [11]Sajtos McRoyal(500Ft), [12]Duplasajtos McRoyal(600Ft)", COLOR_GREY);
					Msg2(playerid, "Harapnivalók: [13]Chicken McNuggets(150Ft), [14]Sültkrumpli(200Ft)", COLOR_GREY);
					Msg2(playerid, "Saláták: [15]Csirkés cézár saláta(200Ft), [16]Prémium csirkesaláta(250Ft), [17]Prémium Grill csirkesaláta(350Ft)", COLOR_GREY);
					Msg2(playerid, "Desszertek: [18]Pöttyös túrórudi(100Ft), [19]Fánk(100Ft), [20]Csoki shake(200Ft), [21]Eper shake(200Ft), [22]Vanilia shake(200Ft)", COLOR_GREY);
					return 1;
				}

				if(!IsNumeric(param[1]))
					return Msg(playerid, "Nincs ilyen az étlapon!");

				new kaja = strval(param[1]);
				switch(kaja)
				{
					case 1: { Cselekves(playerid, "rendelt egy Coca Colát"); BizPenz(BIZ_MCDONALD, 200, playerid); GiveHealth(playerid, 20); }
					case 2: { Cselekves(playerid, "rendelt egy Spritot"); BizPenz(BIZ_MCDONALD, 200, playerid); GiveHealth(playerid, 20); }
					case 3: { Cselekves(playerid, "rendelt egy Fantát"); BizPenz(BIZ_MCDONALD, 200, playerid); GiveHealth(playerid, 20); }
					case 4: { Cselekves(playerid, "rendelt egy Cappy narancs Juice-t"); BizPenz(BIZ_MCDONALD, 250, playerid); GiveHealth(playerid, 20); }
					case 5: { Cselekves(playerid, "rendelt egy NaturAquea ásványvizet"); BizPenz(BIZ_MCDONALD, 100, playerid); GiveHealth(playerid, 15); }
					case 6: { Cselekves(playerid, "rendelt egy Hamburgert"); BizPenz(BIZ_MCDONALD, 250, playerid); GiveHealth(playerid, 55); }
					case 7: { Cselekves(playerid, "rendelt egy Sajtburgert"); BizPenz(BIZ_MCDONALD, 300, playerid); GiveHealth(playerid, 40); }
					case 8: { Cselekves(playerid, "rendelt egy BigMacet"); BizPenz(BIZ_MCDONALD, 400, playerid); GiveHealth(playerid, 65); }
					case 9: { Cselekves(playerid, "rendelt egy McChickent"); BizPenz(BIZ_MCDONALD, 450, playerid); GiveHealth(playerid, 40); }
					case 10: { Cselekves(playerid, "rendelt egy Sertés McFarmt"); BizPenz(BIZ_MCDONALD, 500, playerid); GiveHealth(playerid, 50); }
					case 11: { Cselekves(playerid, "rendelt egy Sajtos McRoyalt"); BizPenz(BIZ_MCDONALD, 500, playerid); GiveHealth(playerid, 50); }
					case 12: { Cselekves(playerid, "rendelt egy Duplasajtos McRoyalt"); BizPenz(BIZ_MCDONALD, 600, playerid); GiveHealth(playerid, 55); }
					case 13: { Cselekves(playerid, "rendelt Chicken McNuggets falatokat"); BizPenz(BIZ_MCDONALD, 150, playerid); GiveHealth(playerid, 20); }
					case 14: { Cselekves(playerid, "rendelt egy kis Sültkrumplit"); BizPenz(BIZ_MCDONALD, 200, playerid); GiveHealth(playerid, 30); }
					case 15: { Cselekves(playerid, "rendelt egy Cézár salátát"); BizPenz(BIZ_MCDONALD, 200, playerid); GiveHealth(playerid, 15); }
					case 16: { Cselekves(playerid, "rendelt egy Pémium csirkesalátát"); BizPenz(BIZ_MCDONALD, 250, playerid); GiveHealth(playerid, 20); }
					case 17: { Cselekves(playerid, "rendelt egy Prémium Gill csirkesalátát"); BizPenz(BIZ_MCDONALD, 350, playerid); GiveHealth(playerid, 20); }
					case 18: { Cselekves(playerid, "rendelt egy Pöttyös túrórudit"); BizPenz(BIZ_MCDONALD, 100, playerid); GiveHealth(playerid, 15); }
					case 19: { Cselekves(playerid, "rendelt egy kis Fánkot"); BizPenz(BIZ_MCDONALD, 100, playerid); GiveHealth(playerid, 15); }
					case 20: { Cselekves(playerid, "rendelt egy Csoki shake-t"); BizPenz(BIZ_MCDONALD, 200, playerid); GiveHealth(playerid, 10); }
					case 21: { Cselekves(playerid, "rendelt egy Eper shake-t"); BizPenz(BIZ_MCDONALD, 200, playerid); GiveHealth(playerid, 10); }
					case 22: { Cselekves(playerid, "rendelt egy Vanilia shake-t"); BizPenz(BIZ_MCDONALD, 200, playerid); GiveHealth(playerid, 10); }
					//case : { Cselekves(playerid, ""); BizPenz(BIZ_MCDONALD, , playerid); GiveHealth(playerid, ); }
					default: Msg(playerid, "Nincs ilyen az étlapon!");
				}
			}
			case IsAt_Pizzazo:
			{
				if(params != 1)
				{
					Msg2(playerid, "======================================[ Pizza Hut ]======================================", COLOR_WHITE);
					Msg2(playerid, "Italok: [1]Coca Cola(200Ft), [2]Coca Cola Light(150Ft), [3]Fanta(200Ft), [4]Sprite(200Ft), [5]Coca Cola 2L(350Ft), [6]Nestea Lemon(200FT)", COLOR_GREY);
					Msg2(playerid, "Pizzák: [7]Szalámis(400Ft), [8]Sonkás(400Ft), [9]Hawaii(500Ft), [10]Mexikói(500Ft), [11]Magyaros(550Ft)", COLOR_GREY);
					Msg2(playerid, "Pizzák (Nagy): [12]Szalámis(700Ft), [13]Sonkás(700Ft), [14]Hawaii(850Ft), [15]Mexikói(850Ft), [16]Magyaros(900Ft)", COLOR_GREY);
					Msg2(playerid, "Desszertek: [17]Gesztenye püré(500Ft), [18]Banánturmix(550Ft), [19]Tiramisu(600Ft)", COLOR_GREY);
					return 1;
				}

				if(!IsNumeric(param[1]))
					return Msg(playerid, "Nincs ilyen az étlapon!");

				new kaja = strval(param[1]);
				switch(kaja)
				{
					case 1: { Cselekves(playerid, "rendelt egy Coca Colát"); BizPenz(BIZ_PIZZA, 200, playerid); GiveHealth(playerid, 20); }
					case 2: { Cselekves(playerid, "rendelt egy Coca Cola Lightot"); BizPenz(BIZ_PIZZA, 150, playerid); GiveHealth(playerid, 20); }
					case 3: { Cselekves(playerid, "rendelt egy Fantát"); BizPenz(BIZ_PIZZA, 200, playerid); GiveHealth(playerid, 20); }
					case 4: { Cselekves(playerid, "rendelt egy Spritot"); BizPenz(BIZ_PIZZA, 200, playerid); GiveHealth(playerid, 20); }
					case 5: { Cselekves(playerid, "rendelt egy 2 literes Coca Colát"); BizPenz(BIZ_PIZZA, 350, playerid); GiveHealth(playerid, 30); }
					case 6: { Cselekves(playerid, "rendelt egy Nestea Lemont"); BizPenz(BIZ_PIZZA, 200, playerid); GiveHealth(playerid, 20); }
					case 7: { Cselekves(playerid, "rendelt egy Szalámis pizzát"); BizPenz(BIZ_PIZZA, 400, playerid); GiveHealth(playerid, 40); }
					case 8: { Cselekves(playerid, "rendelt egy Sonkás pizzát"); BizPenz(BIZ_PIZZA, 400, playerid); GiveHealth(playerid, 40); }
					case 9: { Cselekves(playerid, "rendelt egy Hawaii pizzát"); BizPenz(BIZ_PIZZA, 500, playerid); GiveHealth(playerid, 40); }
					case 10: { Cselekves(playerid, "rendelt egy Mexikói pizzát"); BizPenz(BIZ_PIZZA, 500, playerid); GiveHealth(playerid, 40); }
					case 11: { Cselekves(playerid, "rendelt egy Magyaros pizzát"); BizPenz(BIZ_PIZZA, 550, playerid); GiveHealth(playerid, 40); }
					case 12: { Cselekves(playerid, "rendelt egy nagy Szalámis pizát"); BizPenz(BIZ_PIZZA,700 , playerid); GiveHealth(playerid, 70); }
					case 13: { Cselekves(playerid, "rendelt egy nagy Sonkás pizzát"); BizPenz(BIZ_PIZZA, 700, playerid); GiveHealth(playerid, 70); }
					case 14: { Cselekves(playerid, "rendelt egy nagy Hawaii pizzát"); BizPenz(BIZ_PIZZA, 850, playerid); GiveHealth(playerid, 70); }
					case 15: { Cselekves(playerid, "rendelt egy nagy Mexikói pizzát"); BizPenz(BIZ_PIZZA, 850, playerid); GiveHealth(playerid, 70); }
					case 16: { Cselekves(playerid, "rendelt egy nagy Magyaros pizzát"); BizPenz(BIZ_PIZZA, 900, playerid); GiveHealth(playerid, 70); }
					case 17: { Cselekves(playerid, "rendelt egy kis Gesztenye pürét"); BizPenz(BIZ_PIZZA, 500, playerid); GiveHealth(playerid, 30); }
					case 18: { Cselekves(playerid, "rendelt egy Banánturmixot"); BizPenz(BIZ_PIZZA, 550, playerid); GiveHealth(playerid, 30); }
					case 19: { Cselekves(playerid, "rendelt egy Tiramisut"); BizPenz(BIZ_PIZZA, 600, playerid); GiveHealth(playerid, 30); }
					//case : { Cselekves(playerid, ""); BizPenz(BIZ_PIZZA, , playerid); GiveHealth(playerid, ); }
					default: Msg(playerid, "Nincs ilyen az étlapon!");
				}
			}
			case IsAt_Csirkes:
			{
				if(params != 1)
				{
					Msg2(playerid, "======================================[ Cluckin' Bell ]======================================", COLOR_WHITE);
					Msg2(playerid, "Italok: [1]Coca Cola(200Ft), [2]Sprite(200Ft), [3]Fanta(200Ft), [4]NaturAqua(100Ft)", COLOR_GREY);
					Msg2(playerid, "Étlap: [5]Csirkecsomb(200Ft), [6]Csirkemell(225Ft), [7]Csirkeszárny(250Ft), [8]Csirkemáj(300Ft), [9]Sûlt csirkeláb(200Ft), [10]Húsleves(400Ft)", COLOR_GREY);
					Msg2(playerid, "Étlap: [11]Sûltkrumpli(150Ft), [12]Csirkés szendvics(350Ft), [13]Csirkemellfilé(300Ft)", COLOR_GREY);
					Msg2(playerid, "Desszertek: [14]Palacsinta(250Ft), [15]Gesztenyepüré(350Ft), [16]Madártej(400Ft)", COLOR_GREY);
					//Msg2(playerid, "", COLOR_GREY);
					return 1;
				}

				if(!IsNumeric(param[1]))
					return Msg(playerid, "Nincs ilyen az étlapon!");

				new kaja = strval(param[1]);
				switch(kaja)
				{
					case 1: { Cselekves(playerid, "rendelt egy Coca Colát"); BizPenz(BIZ_CSIRKE, 200, playerid); GiveHealth(playerid, 20); }
					case 2: { Cselekves(playerid, "rendelt egy Spritot"); BizPenz(BIZ_CSIRKE, 200, playerid); GiveHealth(playerid, 20); }
					case 3: { Cselekves(playerid, "rendelt egy Fantát"); BizPenz(BIZ_CSIRKE, 200, playerid); GiveHealth(playerid, 20); }
					case 4: { Cselekves(playerid, "rendelt egy NaturAqua ásványvizet"); BizPenz(BIZ_CSIRKE, 100, playerid); GiveHealth(playerid, 15); }
					case 5: { Cselekves(playerid, "rendelt egy Csirkecombot"); BizPenz(BIZ_CSIRKE, 200, playerid); GiveHealth(playerid, 40); }
					case 6: { Cselekves(playerid, "rendelt egy Csirkemellt"); BizPenz(BIZ_CSIRKE, 225, playerid); GiveHealth(playerid, 40); }
					case 7: { Cselekves(playerid, "rendelt egy Csirkeszárnyat"); BizPenz(BIZ_CSIRKE, 250, playerid); GiveHealth(playerid, 40); }
					case 8: { Cselekves(playerid, "rendelt egy Csirkemájat"); BizPenz(BIZ_CSIRKE, 300, playerid); GiveHealth(playerid, 40); }
					case 9: { Cselekves(playerid, "rendelt egy Sûlt csirkelábat"); BizPenz(BIZ_CSIRKE, 200, playerid); GiveHealth(playerid, 30); }
					case 10: { Cselekves(playerid, "rendelt egy Húslevest"); BizPenz(BIZ_CSIRKE, 400, playerid); GiveHealth(playerid, 50); }
					case 11: { Cselekves(playerid, "rendelt egy adag Sûltkrumplit"); BizPenz(BIZ_CSIRKE, 150, playerid); GiveHealth(playerid, 30); }
					case 12: { Cselekves(playerid, "rendelt egy Csirkés szendvicset"); BizPenz(BIZ_CSIRKE, 350, playerid); GiveHealth(playerid, 50); }
					case 13: { Cselekves(playerid, "rendelt egy Csirkemellfilét"); BizPenz(BIZ_CSIRKE, 300, playerid); GiveHealth(playerid, 40); }
					case 14: { Cselekves(playerid, "rendelt egy Palacsintát"); BizPenz(BIZ_CSIRKE, 250, playerid); GiveHealth(playerid, 30); }
					case 15: { Cselekves(playerid, "rendelt egy kis Gesztenye pürét"); BizPenz(BIZ_CSIRKE, 350, playerid); GiveHealth(playerid, 30); }
					case 16: { Cselekves(playerid, "rendelt egy kis Madártejet"); BizPenz(BIZ_CSIRKE, 400, playerid); GiveHealth(playerid, 30); }
					//case : { Cselekves(playerid, ""); BizPenz(BIZ_CSIRKE, , playerid); GiveHealth(playerid, ); }
					default: Msg(playerid, "Nincs ilyen az étlapon!");
				}
			}
            case IsAt_Etterem:
			{
				if(params != 1)
				{
					Msg2(playerid, "======================================[ Étterem ]======================================", COLOR_WHITE);
					Msg2(playerid, "Italok: [1]Coca Cola(200Ft), [2]Sprite(200Ft), [3]Fanta(200Ft), [4]NaturAqua(100Ft)", COLOR_GREY);
					Msg2(playerid, "Étlap: [5]Csirkecsomb(200Ft), [6]Csirkemell(225Ft), [7]Csirkeszárny(250Ft), [8]Csirkemáj(300Ft), [9]Sûlt csirkeláb(200Ft), [10]Húsleves(400Ft)", COLOR_GREY);
					Msg2(playerid, "Étlap: [11]Sûltkrumpli(150Ft), [12]Csirkés szendvics(350Ft), [13]Csirkemellfilé(300Ft)", COLOR_GREY);
					Msg2(playerid, "Desszertek: [14]Palacsinta(250Ft), [15]Gesztenyepüré(350Ft), [16]Madártej(400Ft)", COLOR_GREY);
					//Msg2(playerid, "", COLOR_GREY);
					return 1;
				}

				if(!IsNumeric(param[1]))
					return Msg(playerid, "Nincs ilyen az étlapon!");

				new kaja = strval(param[1]);
				switch(kaja)
				{
					case 1: { Cselekves(playerid, "rendelt egy Coca Colát"); BizPenz(BIZ_ETTEREM, 200, playerid); GiveHealth(playerid, 20); }
					case 2: { Cselekves(playerid, "rendelt egy Spritot"); BizPenz(BIZ_ETTEREM, 200, playerid); GiveHealth(playerid, 20); }
					case 3: { Cselekves(playerid, "rendelt egy Fantát"); BizPenz(BIZ_ETTEREM, 200, playerid); GiveHealth(playerid, 20); }
					case 4: { Cselekves(playerid, "rendelt egy NaturAqua ásványvizet"); BizPenz(BIZ_ETTEREM, 100, playerid); GiveHealth(playerid, 15); }
					case 5: { Cselekves(playerid, "rendelt egy Csirkecombot"); BizPenz(BIZ_ETTEREM, 200, playerid); GiveHealth(playerid, 40); }
					case 6: { Cselekves(playerid, "rendelt egy Csirkemellt"); BizPenz(BIZ_ETTEREM, 225, playerid); GiveHealth(playerid, 40); }
					case 7: { Cselekves(playerid, "rendelt egy Csirkeszárnyat"); BizPenz(BIZ_ETTEREM, 250, playerid); GiveHealth(playerid, 40); }
					case 8: { Cselekves(playerid, "rendelt egy Csirkemájat"); BizPenz(BIZ_ETTEREM, 300, playerid); GiveHealth(playerid, 40); }
					case 9: { Cselekves(playerid, "rendelt egy Sûlt csirkelábat"); BizPenz(BIZ_ETTEREM, 200, playerid); GiveHealth(playerid, 35); }
					case 10: { Cselekves(playerid, "rendelt egy Húslevest"); BizPenz(BIZ_ETTEREM, 400, playerid); GiveHealth(playerid, 40); }
					case 11: { Cselekves(playerid, "rendelt egy adag Sûltkrumplit"); BizPenz(BIZ_ETTEREM, 150, playerid); GiveHealth(playerid, 40); }
					case 12: { Cselekves(playerid, "rendelt egy Csirkés szendvicset"); BizPenz(BIZ_ETTEREM, 350, playerid); GiveHealth(playerid, 35); }
					case 13: { Cselekves(playerid, "rendelt egy Csirkemellfilét"); BizPenz(BIZ_ETTEREM, 300, playerid); GiveHealth(playerid, 40); }
					case 14: { Cselekves(playerid, "rendelt egy Palacsintát"); BizPenz(BIZ_ETTEREM, 250, playerid); GiveHealth(playerid, 30); }
					case 15: { Cselekves(playerid, "rendelt egy kis Gesztenye pürét"); BizPenz(BIZ_ETTEREM, 350, playerid); GiveHealth(playerid, 25); }
					case 16: { Cselekves(playerid, "rendelt egy kis Madártejet"); BizPenz(BIZ_ETTEREM, 400, playerid); GiveHealth(playerid, 25); }
                    //case 18: { Cselekves(playerid, "rendelt egy Húslevest"); BizPenz(BIZ_ETTEREM, 400, playerid); GiveHealth(playerid, 15); }
					//case : { Cselekves(playerid, ""); BizPenz(BIZ_CSIRKE, , playerid); GiveHealth(playerid, ); }
					default: Msg(playerid, "Nincs ilyen az étlapon!");
				}
			}
			case IsAt_HotDog:
			{
				if(params != 1)
				{
					Msg2(playerid, "====================[ HotDog Stand ]====================", COLOR_WHITE);
					Msg2(playerid, "Üdítõk: [1]Coca Cola(200Ft), [2]Fanta(200Ft), [3]Ásványvíz(100Ft)", COLOR_GREY);
					Msg2(playerid, "Kaják: [4]HotDog(300Ft), [5]Hamburger(350Ft), [6]Gyros(400Ft)", COLOR_GREY);
					//Msg2(playerid, "", COLOR_GREY);
					return 1;
				}

				if(!IsNumeric(param[1]))
					return Msg(playerid, "Nincs ilyen az étlapon!");

				new kaja = strval(param[1]);
				switch(kaja)
				{
					case 1: { Cselekves(playerid, "vett egy Coca Colát"); GiveHealth(playerid, 20); GiveMoney(playerid, -200); }
					case 2: { Cselekves(playerid, "vett egy Fantát"); GiveHealth(playerid, 20); GiveMoney(playerid, -200); }
					case 3: { Cselekves(playerid, "vett egy Ásványvizet"); GiveHealth(playerid, 10); GiveMoney(playerid, -100); }
					case 4: { Cselekves(playerid, "vett egy Hotdogot"); GiveHealth(playerid, 40); GiveMoney(playerid, -300); }
					case 5: { Cselekves(playerid, "vett egy Hamburgert"); GiveHealth(playerid, 50); GiveMoney(playerid, -350); }
					case 6: { Cselekves(playerid, "vett egy Gyrost"); GiveHealth(playerid, 60); GiveMoney(playerid, -400); }
					default: Msg(playerid, "Nincs ilyen az étlapon!");
				}
			}
			default:
			{
				if(PlayerToPoint(15, playerid, -1863.6401,318.2285,-41.7493))
				{
					new kaja = strval(param[1]);
					switch(kaja)
					{
						case 1: { Cselekves(playerid, "vett egy Coca Colát"); GiveHealth(playerid, 20); GiveMoney(playerid, -200); FrakcioInfo[LMUNKA_RIPORTER][fPenz] += 200;}
						case 2: { Cselekves(playerid, "vett egy Fantát"); GiveHealth(playerid, 20); GiveMoney(playerid, -200); FrakcioInfo[LMUNKA_RIPORTER][fPenz] += 200;}
						case 3: { Cselekves(playerid, "vett egy Ásványvizet"); GiveHealth(playerid, 10); GiveMoney(playerid, -100); FrakcioInfo[LMUNKA_RIPORTER][fPenz] += 100;}
						case 4: { Cselekves(playerid, "vett egy Szendvicset"); GiveHealth(playerid, 30); GiveMoney(playerid, -300); FrakcioInfo[LMUNKA_RIPORTER][fPenz] += 300;}
						case 5: { Cselekves(playerid, "vett egy Melegszendvicset"); GiveHealth(playerid, 50); GiveMoney(playerid, -400); FrakcioInfo[LMUNKA_RIPORTER][fPenz] += 400;}
						case 6: { Cselekves(playerid, "vett egy Hamburgert"); GiveHealth(playerid, 40); GiveMoney(playerid, -350); FrakcioInfo[LMUNKA_RIPORTER][fPenz] += 350;}
						case 7: { Cselekves(playerid, "vett egy szelet sonkás pizzát"); GiveHealth(playerid, 30); GiveMoney(playerid, -400); FrakcioInfo[LMUNKA_RIPORTER][fPenz] += 400;}
						default: 
						{
							Msg(playerid, "/menu [1-7]");
							Msg2(playerid, "Üdítõk: [1]Coca Cola(200Ft), [2]Fanta(200Ft), [3]Ásványvíz(100Ft)", COLOR_GREY);
							Msg2(playerid, "Kaják: [4]Szendvics(300Ft), [5]Melegszendvics(400Ft), [6]Hamburger(350Ft), [7]Sonkás pizzaszelet(400Ft)", COLOR_GREY);	
						}
					}
				}
				else return Msg(playerid, "Itt nem lehet enni!");
			}	
		}
	}

	if(egyezik(cmd, "/race", true))
	{
		if(params < 1)
		{
			if(Admin(playerid, 1338))
			{
				Msg(playerid, "========== Gates Race Mod ==========", false);
				Msg(playerid, "Parancs: /race [funkció] [adat1] [adat2]", false);
				Msg(playerid, "Funkciók: load, start, join, build", false);
			}
			else
			{
				Msg(playerid, "========== Gates Race Mod ==========", false);
				Msg(playerid, "Parancs: /race [funkció] [adat1] [adat2]", false);
				Msg(playerid, "Funkciók: join, cancel, status, tuning", false);
			}
			return 1;
		}

		new slot;

		if(egyezik(param[1], "helyezések'") || egyezik(param[1], "helyezesek"))
		{
			SendClientMessage(playerid, COLOR_WHITE,"====================[ Utóbbi Verseny Nyertesei ]====================");
			
			if(rNyeremeny1 == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Szerver restart óta nem volt verseny!");
				return 1;
			}
			
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[1.]: %s | Nyeremény: %dFt", rHelyezes1, rNyeremeny1);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[2.]: %s | Nyeremény: %dFt", rHelyezes2, rNyeremeny2);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[3.]: %s | Nyeremény: %dFt", rHelyezes3, rNyeremeny3);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[4.]: %s | Nyeremény: %dFt", rHelyezes4, rNyeremeny4);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[5.]: %s | Nyeremény: %dFt", rHelyezes5, rNyeremeny5);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[6.]: %s | Nyeremény: %dFt", rHelyezes6, rNyeremeny6);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[7.]: %s | Nyeremény: %dFt", rHelyezes7, rNyeremeny7);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[8.]: %s | Nyeremény: %dFt", rHelyezes8, rNyeremeny8);
			return 1;
		}
		
		if(egyezik(param[1], "tuning"))
		{
			if(PlayerRaceInfo[playerid][xVersenyen] == NINCS) return Msg(playerid, "Nem vagy versenyen");
			if(RaceStartnal(playerid) == NINCS) return Msg(playerid, "Nem vagy egy verseny startjánál sem, vagy a verseny már elindult");
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return Msg(playerid, "Sofõrned kell lenned!");

			ShowTuningDialog(playerid);
		}
		else if(egyezik(param[1], "load"))
		{
			if(!IsScripter(playerid)) return 1;

			if(params < 3)
				Msg(playerid, "Parancs: /race load [slot] [versenynév]", false);
			else
			{
				slot = strval(param[2]);
				if(HibasRaceSlot(playerid, slot)) return 1;
				if(RaceInfo[slot][rStatusz] == RACE_INDUL || RaceInfo[slot][rStatusz] == RACE_ELINDULT) return Msg(playerid, "Ezen a sloton épp indítás folyik, vagy megy a verseny");

				new wherex[80];
				Format(wherex, "snev='%s'", param[3]);
				if(Mysql_Num(SQL_DB_Verseny, wherex) == 1)
				{
					new query[128], adat[2000], datax[60][60];
					Format(query, "SELECT * FROM %s WHERE %s", SQL_DB_Verseny, wherex);
					mysql_query(query);
					mysql_store_result();
					mysql_fetch_row(adat, "|");
					mysql_free_result();

					split(adat, datax, '|');

					strmid(RaceInfo[slot][rSaveNev], datax[53], 0, strlen(datax[53]), 64);
					strmid(RaceInfo[slot][rNev], datax[54], 0, strlen(datax[54]), 64);
					RaceInfo[slot][rCP] = strval(datax[55]);

					new CK[3][40], ck;

					for(new x = 0; x <= 52; x++)
					{
						split(datax[x], CK, ',');

						if(x == 0)
						{
							RaceStart[slot][0] = floatstr(CK[0]);
							RaceStart[slot][1] = floatstr(CK[1]);
							RaceStart[slot][2] = floatstr(CK[2]);
						}
						else if(x == 1)
						{
							RaceCel[slot][0] = floatstr(CK[0]);
							RaceCel[slot][1] = floatstr(CK[1]);
							RaceCel[slot][2] = floatstr(CK[2]);
						}
						else
						{
							ck = x - 2;
							if(ck >= RaceInfo[slot][rCP])
							{
								RaceCP[slot][ck][0] = 0.0;
								RaceCP[slot][ck][1] = 0.0;
								RaceCP[slot][ck][2] = 0.0;
							}
							else
							{
								RaceCP[slot][ck][0] = floatstr(CK[0]);
								RaceCP[slot][ck][1] = floatstr(CK[1]);
								RaceCP[slot][ck][2] = floatstr(CK[2]);
							}
						}
					}

					RaceInfo[slot][rStatusz] = RACE_BETOLTVE;
					SendFormatMessage(playerid, COLOR_WHITE, "Race %s betöltve - Checkpointok: %d [slot: %d]", RaceInfo[slot][rNev], RaceInfo[slot][rCP], slot);
					return 1;

				}
				else
					return Msg(playerid, "Nincs ilyen verseny!");
			}
		}
		else if(egyezik(param[1], "start"))
		{
			if(!IsScripter(playerid)) return 1;
			if(params < 4)
				return Msg(playerid, "Parancs: /race start [slot] [hány másodperc mulva] [nevezési díj]", false);
			else
			{
				slot = strval(param[2])
				new ido = strval(param[3]);
				new dij = strval(param[4]);
				if(HibasRaceSlot(playerid, slot)) return 1;

				if(RaceInfo[slot][rStatusz] == RACE_NINCS) return Msg(playerid, "A verseny nincs betöltve!");
				if(RaceInfo[slot][rStatusz] == RACE_INDUL) return Msg(playerid, "A verseny most indul!");
				if(RaceInfo[slot][rStatusz] == RACE_ELINDULT) return Msg(playerid, "A verseny már el van indítva!");
				if(RaceInfo[slot][rStatusz] == RACE_EPITES) return Msg(playerid, "Ez a verseny építés alatt van!");
				if((ido < 1 || ido > 720) && ido != -1) return Msg(playerid, "Minimum 1perc, és maximum 12 óra!");

				if(params > 4)
				{
					new Float:szorzo = floatstr(param[5]);
					if(szorzo < 1.0 || szorzo > 5000000.0)
						return Msg(playerid, "Minimum 1.0 és max 5000000.0!", false);
					RaceInfo[slot][rSzorzo] = szorzo;
				}
				else
					RaceInfo[slot][rSzorzo] = 1.0;

				RaceInfo[slot][rDij] = dij;
				
				if(ido == -1) RaceInfo[slot][rIndul] = 10;
				else RaceInfo[slot][rIndul] = ido*60;
				
				RaceInfo[slot][rNyeremeny] = 0;
				RaceInfo[slot][rBeert] = 0;
				RaceInfo[slot][rStatusz] = RACE_INDUL;
				
				new uzenet[128], uzenet2[128], uzenet3[128];
				format(uzenet, 128, "Új verseny indul %s múlva", FormatTime(ido*60));
				format(uzenet2, 128, "Név: %s | Nevezési díj: %dFt | Nyereményszorzó: %.1f*", RaceInfo[slot][rNev], dij, RaceInfo[slot][rSzorzo]);
				format(uzenet3, 128, "A verseny helyének megtalálásához használd a GPS-ed (( /gps race %d )), majd ha odaértél csatlakozz! (( /race join ))", slot);
				
				foreach(Jatekosok, p)
				{
					if(!LegalisSzervezetTagja(p) || p == playerid)
					{
						SendClientMessage(p, COLOR_WHITE, "========== See City Racing Team ==========");
						SendClientMessage(p, COLOR_LIGHTBLUE, uzenet);
						SendClientMessage(p, COLOR_LIGHTBLUE, uzenet2);
						SendClientMessage(p, COLOR_LIGHTBLUE, uzenet3);
						SendClientMessage(p, COLOR_YELLOW, "Megjegyzés: Óvakodj a rendõröktõl!");
					}
				}
				
				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] != NINCS || LegalisSzervezetTagja(x)) continue;

					if(RaceInfo[slot][rCP] > 0)
						SetPlayerRaceCheckpoint(x, 0, RaceStart[slot][0], RaceStart[slot][1], RaceStart[slot][2], RaceCP[slot][0][0], RaceCP[slot][0][1], RaceCP[slot][0][2], RACECPMERET);
					else
						SetPlayerRaceCheckpoint(x, 0, RaceStart[slot][0], RaceStart[slot][1], RaceStart[slot][2], RaceCel[slot][0], RaceCel[slot][1], RaceCel[slot][2], RACECPMERET);
				}
				return 1;
			}
		}
		else if(egyezik(param[1], "cancel"))
		{
			if(PlayerRaceInfo[playerid][xVersenyen] == NINCS) Msg(playerid, "Nem vagy versenyen");
			
			Msg(playerid, "Visszaléptél a versenytõl");
			Cselekves(playerid, "visszalépett a versenytõl");
			
			PlayerRaceInfo[playerid][xVersenyen] = NINCS;
			DisablePlayerRaceCheckpoint(playerid);
			
			VersenyVege(playerid);
			return 1;
		}
		else if(egyezik(param[1], "join"))
		{
			if(PlayerRaceInfo[playerid][xVersenyen] != NINCS)
				return Msg(playerid, "Versenyen vagy!");

			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return Msg(playerid, "Csak sofõrként versenyezhetsz!");
			
			if(IsAPlane(veh)) return Msg(playerid, "Repülõvel nem versenyezhetsz!");

			new race = RaceStartnal(playerid);
			if(race == -1)
				return Msg(playerid, "Nem vagy egy verseny startjánál sem");
			else
			{
				new ido = RaceInfo[race][rIndul];

				if(ido > 300)
					return Msg(playerid, "Csak az inditást megelõzõ 5 percben csatlakozhatsz!");

				new dij = RaceInfo[race][rDij];
				if(GetMoney(playerid) < dij && PlayerInfo[playerid][pBankSzamla] == 0 || GetMoney(playerid) < dij && PlayerInfo[playerid][pBankSzamla] > 0 && PlayerInfo[playerid][pAccount] < dij)
				{
					SendFormatMessage(playerid, COLOR_LIGHTRED, "Nincs elég pénzed a nevezésre! A nevezés ára %dFt", RaceInfo[race][rDij]);
					return 1;
				}

				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Csatakoztál a versenyhez! A verseny %s múlva indul", FormatTime(RaceInfo[race][rIndul]));
				PlayerRaceInfo[playerid][xVersenyen] = race;
				PlayerRaceInfo[playerid][xCP] = RACE_CP_START;

				if(GetVehicleComponentInSlot(veh, CARMODTYPE_NITRO) == 1010) PlayerRaceTuning[playerid][tNitroVolt] = true;
				if(GetVehicleComponentInSlot(veh, CARMODTYPE_HYDRAULICS) == 1087) PlayerRaceTuning[playerid][tHidrVolt] = true;

				RaceInfo[race][rNyeremeny] += floatround(float(dij) * RaceInfo[race][rSzorzo]);
				if(GetMoney(playerid) >= dij) GiveMoney(playerid, -dij);
				else
				{
					PlayerInfo[playerid][pAccount] -= dij;
					Msg(playerid, "A pénz a számládról vonódott le");
				}

				//PlayerRaceInfo[playerid][xKocsi] = veh;
				//Msg(playerid, "FIGYELMEZTETÉS! Csak ezzel a kocsival versenyezhetsz! Ha más kocsival akarsz versenyezni, jelentkezz újra! (( /race cancel ))");

				Cselekves(playerid, "jelentkezett a versenyre");

				SetPlayerRaceCP(playerid);
				return 1;
			}
		}
		else if(egyezik(param[1], "build"))
		{
			if(!IsScripter(playerid)) return 1;
			if(PlayerRaceInfo[playerid][xVersenyen] != NINCS)
				return Msg(playerid, "Versenyen vagy!");
			else
			{
				if(params < 3)
				{
					Msg(playerid, "Parancs: /race build [slot] [alparancs]", false);
					Msg(playerid, "Alparancsok: startcreate, stopcreate, edit, start, finish, cp, next, back, save", false);
					Msg(playerid, "Info: Startcreate > Az építés elkezdése | Deletecreate > Az építés befejezése (nem menti) | Edit > Egy létezõ pálya szerkesztése", false);
					return 1;
				}
				slot = strval(param[2]);
				if(HibasRaceSlot(playerid, slot)) return 1;
				if(RaceInfo[slot][rStatusz] != RACE_NINCS && RaceInfo[slot][rStatusz] != RACE_BETOLTVE && RaceInfo[slot][rStatusz] != RACE_EPITES && RaceInfo[slot][rStatusz] != RACE_VEGE)
					return Msg(playerid, "Ezen a sloton épp verseny indul, vagy verseny indult");

				if(egyezik(param[3], "startcreate"))
				{
					if(PlayerRaceInfo[playerid][xEpites] != NINCS)
						return Msg(playerid, "Már építesz!");

					PlayerRaceInfo[playerid][xEpites] = slot;
					PlayerRaceInfo[playerid][xEpitesCP] = 0;
					for(new c = 0; c < RACEMAXCP; c++)
					{
						RaceCP[slot][c][0] = 0.0;
						RaceCP[slot][c][1] = 0.0;
						RaceCP[slot][c][2] = 0.0;
					}

					Msg(playerid, "Elkezdted az építést! Parancsok: start, finish, cp, next, back, save - Perjel nélkül írandó!", false);
				}
				else if(egyezik(param[3], "stopcreate"))
				{
					if(PlayerRaceInfo[playerid][xEpites] == NINCS)
						return Msg(playerid, "Nem építesz!");

					PlayerRaceInfo[playerid][xEpites] = NINCS;
					Msg(playerid, "Befejezted az építést!");
				}
				else if(egyezik(param[3], "edit"))
				{
					if(RaceInfo[slot][rStatusz] != RACE_BETOLTVE)
						return Msg(playerid, "Ezen a RaceSloton nincs betöltve Race pálya!");

					PlayerRaceInfo[playerid][xEpites] = slot;
					PlayerRaceInfo[playerid][xEpitesCP] = RaceInfo[slot][rCP];

					SendFormatMessage(playerid, COLOR_LIGHTRED, "[Slot %d] %s szerkesztése elkezdõdött - CPk száma: %d", slot, RaceInfo[slot][rSaveNev], RaceInfo[slot][rCP]);
					Msg(playerid, "Parancsok: start, finish, next, back, save - Perjel nélkül írandó!", false);
				}
			}
		}
		else if(egyezik(param[1], "stop"))
		{
			if(!IsScripter(playerid)) return 1;
			if(params < 2)
				return Msg(playerid, "Parancs: /race stop [slot]", false);
			else
			{
				slot = strval(param[2])
				if(HibasRaceSlot(playerid, slot)) return 1;

				new statusz = RaceInfo[slot][rStatusz];
				if(statusz != RACE_ELINDULT && statusz != RACE_INDUL) return Msg(playerid, "Ezen a sloton nincs verseny elindítva!");

				RaceInfo[slot][rStatusz] = RACE_VEGE;

				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == slot)
					{
						PlayerRaceInfo[x][xVersenyen] = NINCS;
						DisablePlayerRaceCheckpoint(x);
					}
				}
				
				new uzenet[128];
				if(statusz == RACE_ELINDULT)
					format(uzenet, 128, "A %s versenynek vége", RaceInfo[slot][rNev]);
				else
					format(uzenet, 128, "%s verseny lefújva", RaceInfo[slot][rNev]);
				
				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == slot || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== See City Racing Team ==========");
						SendClientMessage(x, COLOR_WHITE, uzenet);
					}
				}
				
				return 1;
			}
		}
		else if(egyezik(param[1], "status"))
		{
			if(LegalisSzervezetTagja(playerid) && !Admin(playerid, 1337) && PlayerRaceInfo[playerid][xVersenyen] == NINCS)
				return Msg(playerid, "Ezt sajnos nem használhatod, inkább az utcát figyeld, hogy van-e gyorshajtó ;)");
				
			SendClientMessage(playerid, COLOR_WHITE, "========== See City Racing Team ==========");
			new talalt;
			for(new x = 0; x < RACESLOTOK; x++)
			{
				if(RaceInfo[x][rStatusz] == RACE_INDUL)
				{
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "(( /gps race %d )) %s - Nevezési díj: %dFt - Státusz: Indítás alatt (%s)", x, RaceInfo[x][rNev], RaceInfo[x][rDij], FormatTime(RaceInfo[x][rIndul]));
					talalt++;
				}
				else if(RaceInfo[x][rStatusz] == RACE_ELINDULT)
				{
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "(( /gps race %d )) %s - Státusz: Elindult", x, RaceInfo[x][rNev], RaceInfo[x][rDij]);
					talalt++;
				}
			}
			if(!talalt)
				Msg(playerid, "Jelenleg nem zajlik verseny", false);
		}
		else
		{
			if(IsScripter(playerid))
			{
				Msg(playerid, "========== See Race Mod ==========", false);
				Msg(playerid, "Parancs: /race [funkció] [adat1] [adat2]", false);
				Msg(playerid, "Funkciók: load, start, join, build", false);
			}
			else
			{
				Msg(playerid, "========== See Race Mod ==========", false);
				Msg(playerid, "Parancs: /race [funkció]", false);
				Msg(playerid, "Funkciók: join, status", false);
			}
			return 1;
		}

		return 1;
	}

	if(egyezik(cmd, "/gps"))
	{
		new f[32], hazszam = NINCS;

		if(params >= 1)
			strmid(f, param[1], 0, strlen(param[1]));
		if(params >= 2)
		{
			if(strlen(param[2]) < 5)
				hazszam = strval(param[2]);
		}

		if(params < 1)
		{
   			SendClientMessage(playerid, COLOR_LIGHTRED, "** A használatához GPS lokátor kell! Használata: /gps [név]");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bekapcsolás: /gps be | Kikapcsolás: /gps ki | Törlés: /gps töröl");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Személyes: ház [id], házam, kocsim");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Fõbb helyek: LSvárosháza, SFvárosháza, kórház, LSPD, SFPD, LSbank, SFbank");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Szórakozóhelyek: alhambra, pigpen, kocsma, paintball(pb)");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* (24/7)LS Boltok: bolt1, bolt2, bolt3, bolt4, bolt5");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* (24/7)SF Boltok: sfbolt1, sfbolt2, sfbolt3, sfbolt4");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Zöldségesek: LSzöldséges");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Kaszinók: Triadkaszino, Vagoskaszino");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Fegyverboltok: LSfegyverbolt");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Egyéb: fort, lottózó, sflottózó ,parkoló");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Gyárak: LSgyár, SFgyár");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Drog/Mati: LSmûanyag, SFmûanyag, LSdrog, SFdrog");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Egyéb: fort, lottózó, parkoló, farm, fûnyírók, kukásautók, TuningMûhely");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Verseny: race [versenyszám]");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Edzõtermek: Box, Cobra");
			//SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Hotel(ek): LSHotel, SFHotel");
			SendClientMessage(playerid, COLOR_LIGHTRED, "_____ A parancsok ékezet nélkül is mûködnek _____");
			return 1;
		}

  		if(PlayerInfo[playerid][pLokator] == 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs GPS Lokátorod...");
			return 1;
		}

		if(strcmp(f, "be", true) == 0)
		{
		    PlayerInfo[playerid][pGPS] = 1;
		 	GameTextForPlayer(playerid, "~g~GPS Lokator bekapcsolva", 3000, 1);
		    return 1;
	 	}

		if(PlayerInfo[playerid][pGPS] == 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "A GPS Lokátorod nincs bekapcsolva!");
		    return 1;
		}

		if(egyezik(f, "race"))
		{
			if(params < 2)
				return Msg(playerid, "Parancs: /gps race [szám]", false);
			
			if(LegalisSzervezetTagja(playerid)) return 1;

			new slots = strval(param[2]);
			if(slots < 0 || slots >= RACESLOTOK)
				return Msg(playerid, "Nincs ilyen verseny! Nézd meg a versenyeket > /race status", false);
			if(RaceInfo[slot][rStatusz] != RACE_INDUL)
				return Msg(playerid, "Nincs ilyen verseny elindítva! Nézd meg a versenyeket > /race status", false);

			//SetPlayerRaceCheckpoint(playerid, 2, RaceStart[slot][0], RaceStart[slot][1], RaceStart[slot][2], 0.0, 0.0, 0.0, RACECPMERET);
			SetPlayerCheckpoint(playerid, RaceStart[slot][0], RaceStart[slot][1], RaceStart[slot][2], RACECPMERET);

			return 1;
		}

	 	if(strcmp(f, "ki", true) == 0)
		{
		    PlayerInfo[playerid][pGPS] = 0;
		 	GameTextForPlayer(playerid, "~r~GPS Lokator kikapcsolva", 3000, 1);
			DisablePlayerCheckpoint(playerid);
		    return 1;
	 	}

		if(strcmp(f, "töröl", true) == 0 || strcmp(f, "torol", true) == 0)
		{
			DisablePlayerCheckpoint(playerid);
		    SendClientMessage(playerid, COLOR_YELLOW2, "A jel törölve!");
		    return 1;
	 	}

		if(strcmp(f, "LSmûanyag", true) == 0 || strcmp(f, "LSmuanyag", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 90.869789, -184.411666, 1.484375, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "SFmûanyag", true) == 0 || strcmp(f, "SFmuanyag", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -1688.1918,-17.7540,3.5547, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "LShegy", true) == 0 || strcmp(f, "LSdrog", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 2575.528564, -634.857604, 135.663269, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "LSgyár", true) == 0 || strcmp(f, "LSgyar", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 2770.6802,-1628.3042,12.1775, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "box", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 2229.7043,-1721.6252,13.5648, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "cobra", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -2269.5808,-156.0327,35.3203, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "SFdrog", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -1713.2587,577.2521,26.1177, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "SFgyár", true) == 0 || strcmp(f, "SFgyar", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -2730.4705,73.9224,4.3359, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "parkoló", true) == 0 || strcmp(f, "parkolo", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1105.812255,-1740.831054,13.410290, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "lottózó", true) == 0 || strcmp(f, "lottozo", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1631.565063,-1171.809692,24.078125, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "SFlottózó", true) == 0 || strcmp(f, "SFlottozo", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -2719.9099,127.7292,7.0391, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "TuningMûhely", true) == 0 || strcmp(f, "TuningMuhely", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, BizzInfo[BIZ_TUNING][bEntranceX], BizzInfo[BIZ_TUNING][bEntranceY], BizzInfo[BIZ_TUNING][bEntranceZ], 2.5);
		    return 1;
	 	}

		if(strcmp(f, "fort", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 215.038833, 1862.826782, 13.140625, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "LSzöldséges", true) == 0 || strcmp(f, "LSzoldseges", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 2089.889160, -1929.772338, 13.539438, 2.5);
		    return 1;
	 	}

	 	/*if(strcmp(f, "LVzöldséges", true) == 0 || strcmp(f, "LVzoldseges", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 2534.393798, 2290.933593, 10.820312, 2.5);
		    return 1;
	 	}*/

		if(strcmp(f, "bolt5", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1352.155395, -1758.993896, 13.507812, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "bolt4", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1000.178466, -920.070983, 42.328125, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "bolt3", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1929.136352, -1776.348022, 13.546875, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "bolt2", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1315.415283, -897.763916, 39.578125, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "bolt1", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1833.166992, -1842.764892, 13.578125, 2.5);
		    return 1;
	 	}

	  	if(strcmp(f, "sfbolt4", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -2649.8318,375.9586,6.1563, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "sfbolt3", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -1675.8326,431.8753,7.1797, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "sfbolt2", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -2032.6232,161.5709,29.0461, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "sfbolt1", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -2419.4363,969.6541,45.2969, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "Triadkaszino", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1022.5274, -1122.4132, 23.8713, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "paintball", true) == 0 || strcmp(f, "pb", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1310.138427, -1367.927124, 13.542382, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "kocsma", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 2309.525146, -1644.028930, 14.827047, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "pigpen", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 2421.187500, -1220.471313, 25.483589, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "alhambra", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1835.928222, -1683.014282, 13.369256, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "LSfegyverbolt", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1791.430053, -1165.298095, 23.828125, 2.5);
		    return 1;
	 	}

	 	/*if(strcmp(f, "LVfegyverbolt", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 2158.384521, 943.048889, 10.820312, 2.5);
		    return 1;
	 	}*/

	  	if(strcmp(f, "lsbank", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1462.376342, -1012.533569, 26.843750, 2.5);
		    return 1;
	 	}

	  	if(strcmp(f, "sfbank", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -1942.973876, 556.252868, 35.171875, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "lspd", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1554.461669, -1675.288452, 16.195312, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "Vagoskaszino", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 2164.952148, 2164.281982, 10.820312, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "kórház", true) == 0 || strcmp(f, "korhaz", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1173.374511, -1323.456665, 15.392642, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "LSvárosháza", true) == 0 || strcmp(f, "LSvaroshaza", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1480.788696, -1771.192138, 18.795755, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "SFvárosháza", true) == 0 || strcmp(f, "SFvaroshaza", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -2765.3301,375.4839,6.3359, 2.5);
		    return 1;
	 	}

	  	if(strcmp(f, "SFPD", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -1617.0458,682.9008,7.1875, 2.5);
		    return 1;
	 	}

	 	if(strcmp(f, "farm", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -106.1506,11.5836,3.1094, 3.5);
		    return 1;
	 	}

	 	/*if(strcmp(f, "LSHotel", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 2232.6213,-1159.8348,25.8906, 3.5);
		    return 1;
	 	}

	 	if(strcmp(f, "SFHotel", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, -2425.4722,337.6092,37.0020, 3.5);
		    return 1;
	 	}*/

	 	if(strcmp(f, "fûnyírók", true) == 0 || strcmp(f, "fûnyírok", true) == 0 || strcmp(f, "funyirok", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1960.6050,-1243.9281,19.9550, 3.5);
		    return 1;
	 	}
	 	
		if(strcmp(f, "kukásautók", true) == 0 || strcmp(f, "kukásautok", true) == 0 || strcmp(f, "kukasautok", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 1609.5735,-1535.8796,13.6261, 3.5);
		    return 1;
	 	}


		if(strcmp(f, "matifel", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 2068.9170, -1588.9677, 13.4914, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "matile", true) == 0)
		{
		    SetPlayerCheckpoint(playerid, 379.0809, -2020.8119, 7.8301, 2.5);
		    return 1;
	 	}

		if(strcmp(f, "ház", true) == 0 || strcmp(f, "haz", true) == 0)
		{
			if(params < 2 || hazszam == NINCS)
				return SendClientMessage(playerid, COLOR_GREY, "Használata: /gps ház [házszám]");

			if(hazszam < 0 || hazszam >= sizeof(HouseInfo))
			{
				SendClientMessage(playerid, COLOR_RED, "Nincs ilyen ház");
				return 1;
			}

			if(HouseInfo[hazszam][Van] != 1)
			{
			    SendClientMessage(playerid, COLOR_RED, "Nincs ilyen ház");
			    return 1;
			}

		    SetPlayerCheckpoint(playerid, HouseInfo[hazszam][hEntrancex], HouseInfo[hazszam][hEntrancey], HouseInfo[hazszam][hEntrancez], 3);
			return 1;
		}

		if(strcmp(f, "házam", true) == 0 || strcmp(f, "hazam", true) == 0)
		{
			if(PlayerInfo[playerid][pPhousekey] != NINCS)
				SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez], 4.0);
			else
				GameTextForPlayer(playerid, "~w~Nincs hazad", 3000, 1);
		    return 1;
	 	}

	 	if(strcmp(f, "kocsim", true) == 0)
	 	{
			new
				kocsi = PlayerInfo[playerid][pPcarkey],
				kocsi2 = PlayerInfo[playerid][pPcarkey2]
			;
			
			new kell = 1;
			if(kocsi2 != NINCS)
			{
				if(params < 2)
					return Msg(playerid, "Használata: /gps kocsim [1/2]");
				
				kell = strval(param[2]);
				if(kell != 1 && kell != 2)
					return Msg(playerid, "Használata: /gps kocsim [1/2]");
			}
			
			if(kell == 1)
			{
				new Float:x, Float:y, Float:z;
				GetVehiclePos(CarInfo[kocsi][cId], x, y, z);
				SetPlayerCheckpoint(playerid, x, y, z, 5);
				
				Msg(playerid, "Megjelölve a radaron");
			}
			else if(kell == 2)
			{
				new Float:x, Float:y, Float:z;
				GetVehiclePos(CarInfo[kocsi2][cId], x, y, z);
				SetPlayerCheckpoint(playerid, x, y, z, 5);
				
				Msg(playerid, "Megjelölve a radaron");
			}
			else
				GameTextForPlayer(playerid, "~w~Nincs kocsid", 3000, 1);
			return 1;
	 	}

	 	else
	 	{
	 	    SendClientMessage(playerid, COLOR_LIGHTRED, "Hm...???");
		}
		return 1;
	}


	if(egyezik(cmd, "/adminalnevbe"))
	{
		if(!IsHitman(playerid) && !Admin(playerid, 1337) || IsHitman(playerid) && !Admin(playerid, 1)) return 1;
		if(!Admin(playerid, 1337)) return 1;
		if(params != 1) return 1;

		new be = strval(param[1]);

		if(be == 0)
		{
			PlayerInfo[playerid][pAdminAlnevBe] = 0;
			Msg(playerid, "Admin álnév kikapcsolva");
		}
		else if(be == 1)
		{
			PlayerInfo[playerid][pAdminAlnevBe] = 1;
			Msg(playerid, "Admin álnév bekapcsolva");
		}

		return 1;
	}

	if(strcmp(cmd, "/adminalnev", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsHitman(playerid) && !Admin(playerid, 1337) || IsHitman(playerid) && !Admin(playerid, 1)) return 1;
		    new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;

			if(strlen(result) > MAX_PLAYER_NAME)
			{
				SendFormatMessage(playerid, COLOR_GRAD1, "Maximum %d karakter!", MAX_PLAYER_NAME);
				return 1;
			}

			strmid(PlayerInfo[playerid][pAdminAlnev], result, 0, strlen(result), 25);
			format(string, sizeof(string), "Az új álneved mostantól %s!", result);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		return 1;
	}

	if(egyezik(cmd, "/adatok"))
	{
		if(Logged(playerid) || Registered(playerid)) return Msg(playerid, "Te már regisztrálva vagy!");
		if(RegAdatok[playerid]) return Msg(playerid, "Már kitöltötted!");

		Msg(playerid, "==============================");
		Msg(playerid, "Nemed? (fiú/lány)", false);
		RegistrationStep[playerid] = 1;

		return 1;
	}

    /*if(strcmp(cmd, "/jailall", true) == 0)
	{
		if(!Admin(playerid, 1)) return 1;

		if(params != 1) return Msg(playerid, "/jailall [leaderes meló] [idõ] [oka]");

		new rangnev[32], munka, rang, leader;

		leader = strval(param[1]) - 1;

		if(leader < 1 || leader > sizeof(Szervezetneve))
			return Msg(playerid, "Nincs ilyen szervezet!");

		SendFormatMessage(playerid, COLOR_WHITE, "========== %s ==========", Szervezetneve[leader][0]);

		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || IsPlayerNPC(x) || PlayerInfo[x][pMember] != PlayerInfo[playerid][pLeader]) continue;

			munka = PlayerInfo[x][pMember] - 1;
			rang = PlayerInfo[x][pRank];

			if(rang <= 0) rangnev = Rangok[munka][0];
			else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
			else rangnev = Rangok[munka][7];

			SendFormatMessage(playerid, COLOR_GREY, "[%d]%s - %s (%d)", x, PlayerName(x), rangnev, rang);
		}

		SendFormatMessage(playerid, COLOR_WHITE, "========== %s ==========", Szervezetneve[leader][0]);

		return 1;
	}*/

    if(strcmp(cmd, "/aranks", true) == 0)
	{
		if(!Admin(playerid, 1)) return 1;

		if(params != 1) return Msg(playerid, "/aranks [leaderes meló]");

		new rangnev[32], rang, leader;

		leader = strval(param[1]) - 1;

		if(leader < 0 || leader >= sizeof(Szervezetneve))// || (leader+1) == LMUNKA_HITMAN)
			return Msg(playerid, "Nincs ilyen szervezet!");

		SendFormatMessage(playerid, COLOR_WHITE, "========== %s ==========", Szervezetneve[leader][0]);

		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || IsPlayerNPC(x) || PlayerInfo[x][pMember] != (leader+1) || IsClint(x)) continue;

			rang = PlayerInfo[x][pRank];

			if(rang <= 0) rangnev = Rangok[leader][0];
			else if(rang >= 1 && rang <= 12) rangnev = Rangok[leader][rang];
			else rangnev = Rangok[leader][12];

			SendFormatMessage(playerid, COLOR_GREY, "[%d]%s - %s (%d)", x, PlayerName(x), rangnev, rang);
		}

		SendFormatMessage(playerid, COLOR_WHITE, "========== %s ==========", Szervezetneve[leader][0]);

		return 1;
	}

	if(egyezik(cmd, "/reg"))
	{
		if(!Admin(playerid, 1)) return 1;
		if(params != 2) return Msg(playerid, "/reg [player] [regelhet igen/nem]");

		new player = ReturnUser(param[1]);

		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos");
		if(Logged(player)) return Msg(playerid, "Már regisztrált");

		if(egyezik(param[2], "igen"))
		{
			if(RegEngedely[player] == 1)
				return Msg(playerid, "Már van engedélye!");

			RegEngedely[player] = 1;
			Msg(player, "Admin megengedte, hogy regisztrálj. Használd a /register parancsot a regisztrációhoz.");
			Msg(playerid, "Engedélyezted a regisztrálást a játékosnak.");
			Format(string, "<< %s engedélyezte a regisztrációt neki %s  >>", AdminName(playerid), PlayerName(player));
			ABroadCast(COLOR_LIGHTRED, string, 1);
			return 1;
		}
		if(egyezik(param[2], "nem"))
		{
			if(RegEngedely[player] == 0)
				return Msg(playerid, "Nincs engedélye!");

			RegEngedely[player] = 0;
			Msg(player, "Admin viszavonta a regisztrációs lehetõségedet.");
			Msg(playerid, "Vissza utasítottad a regisztrálsát a játékosnak.");
			Format(string, "<< %s tiltotta a regisztrációt neki %s  >>", AdminName(playerid), PlayerName(player));
			ABroadCast(COLOR_LIGHTRED, string, 1);
			return 1;
		}
		else
			Msg(playerid, "/reg [player] [regelhet igen/nem]");

		return 1;
	}

	if(egyezik(cmd, "/hazcheck"))
	{
		if(params != 1) return 1;

		for(new x = 0; x <= strval(param[1]); x++)
		{
			if(HouseInfo[x][Van] == 0)
				SendFormatMessage(playerid, COLOR_WHITE, "%d nincs!", x);
		}

		return 1;
	}

	if(egyezik(cmd, "/felújításkérelem") || egyezik(cmd, "/felujitaskerelem"))
	{
		if(!AMT(playerid, MUNKA_EPITESZ)) return Msg(playerid, "Nem vagy építész!");

		if(params != 1) return Msg(playerid, "Használata: /felújításkérelem [játékosnév / id]");

		new player;
		player = ReturnUser(param[1]);

		if(player != INVALID_PLAYER_ID)
		{
			format(string, sizeof(string), "* Felajánlottad hogy felújítod a házat.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Felajánlották hogy felújítják a házad! (/accept felujitas) hogy elfogadd.");
			SendClientMessage(player, COLOR_LIGHTBLUE, string);
			FelujitasElfogadas[player] = playerid;
		}
		return 1;
	}

	if(egyezik(cmd, "/felújítás") || egyezik(cmd, "/felujitas"))
	{
		if(!AMT(playerid, MUNKA_EPITESZ)) return Msg(playerid, "Nem vagy építész!");

		new haz = HaznalVan(playerid);
		if(haz == -1)
			return Msg(playerid, "Nem vagy a ház bejáratánál!");

		if(!Online(HouseInfo[haz][hOwner]))
			return Msg(playerid, "Nincs fennt a ház tulaja!");

		if(!egyezik(HouseInfo[haz][hOwner], PlayerName(playerid)) && FelujitasElfogadas[playerid] != NINCS)
			return Msg(playerid, "A tulaj (még) nem járult hozzá a ház felújításához!");

		new belsostring[1024];
		for(new x = 1; x < sizeof(BelsoArak); x++)
			format(belsostring, sizeof(belsostring), "%s%d\t%dFt\n", belsostring, x, BelsoArak[x]);

		ShowPlayerDialog(playerid, DIALOG_BELSO, DIALOG_STYLE_LIST, "Felújítás", belsostring, "Felújít", "Mégse");

		return 1;
	}


	if(egyezik(cmd, "/válasz") || egyezik(cmd, "/valasz") || egyezik(cmd, "/vsz") || egyezik(cmd, "/vá"))
	{
		if(!Admin(playerid, 1) && !IsAS(playerid)) return 1;
		if(params < 2) return Msg(playerid, "/válasz [játékos] [üzenet]");

		new player = ReturnUser(strtok(cmdtext, idx));
		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");

		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')) { idx++; }
		new offset = idx;
		new result[96];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
		result[idx - offset] = cmdtext[idx];
		idx++;
		}
		result[idx - offset] = EOS;

		if(!strlen(result))
			return Msg(playerid, "/válasz [játékos] [üzenet]");

		//SendClientMessage(player, COLOR_YELLOW, " ===== Az admin(segéd) üzent =====");
		if(Admin(playerid, 1337))
			SendFormatMessage(player, COLOR_LIGHTGREEN, "FõAdmin %s: %s", AdminName(playerid) ,(result));
		else if(Admin(playerid, 1))
			SendFormatMessage(player, COLOR_LIGHTGREEN, "Admin %s: %s", AdminName(playerid), (result));
		else
			SendFormatMessage(player, COLOR_LIGHTGREEN, "AdminSegéd %s: %s", AdminName(playerid), (result));

		Format(tmp, " %s válaszolt neki: %s | Üzenet: %s", AdminName(playerid), PlayerName(player), (result));
		ABroadCast(COLOR_YELLOW, tmp, 0);

		return 1;
	}

	if(egyezik(cmd, "/noas"))
	{
		if(!Admin(playerid, 4)) return 1;
		if(noas == 1)
		{
			noas = 0;
			Msg(playerid, "Az adminsegéd chat bekapcsolva");
		}
		else
		{
			noas = 1;
			Msg(playerid, "Az adminsegéd chat kikapcsolva");
		}
	}

	if(egyezik(cmd, "/info"))
	{
		if(params != 1)
			return Msg(playerid, "Használata: /info [be/ki] - Ezzel a monitor alján lévõ információs csíkot kapcsolhatod ki");

		if(egyezik(param[1], "ki"))
			TextDrawHideForPlayer(playerid, InfoTextDraw[playerid]);
		else if(egyezik(param[1], "be"))
			TextDrawShowForPlayer(playerid, InfoTextDraw[playerid]);
		else
			Msg(playerid, "Használata: /info [be/ki]");

		return 1;
	}
	
	if(egyezik(cmd, "/infoblokk"))
	{
		if(params != 1)
			return Msg(playerid, "Használata: /infoblokk [be/ki] - Ezzel a pénz alatt lévõ információs blokkot kapcsolhatod ki");

		if(egyezik(param[1], "ki"))
			TextDrawHideForPlayer(playerid, InfoTextDraw2[playerid]);
		else if(egyezik(param[1], "be"))
			TextDrawShowForPlayer(playerid, InfoTextDraw2[playerid]);
		else
			Msg(playerid, "Használata: /infoblokk [be/ki]");

		return 1;
	}
	
	if(egyezik(cmd, "/penz") || egyezik(cmd, "/pénz"))
	{
		if(params != 1)
			return Msg(playerid, "Használata: /pénz [be/ki] - Ezzel a forint jelzõt kapcsolhatod ki");

		if(egyezik(param[1], "ki"))
			TextDrawHideForPlayer(playerid, MoneyTxt[playerid]);
		else if(egyezik(param[1], "be"))
			TextDrawShowForPlayer(playerid, MoneyTxt[playerid]);
		else
			Msg(playerid, "Használata: /pénz [be/ki] - Ezzel a forint jelzõt kapcsolhatod ki");

		return 1;
	}

    if(egyezik(cmd, "/betölt"))
	{
	    if(!IsScripter(playerid)) return 1;
		if(params != 1)
			return Msg(playerid, "Használata: /betölt [mit] | bandaszéf, ajtók | rayw edit: benyakutak, atmek");

		if(egyezik(param[1], "bandaszéf"))
			LoadFrakcio();
		else if(egyezik(param[1], "ajtók"))
			LoadAjtok();
		else if(egyezik(param[1], "benyakutak"))
			LoadBenzinKutak();
		else if(egyezik(param[1], "atmek"))
			LoadATM();
		else
			Msg(playerid, "Használata: /betölt [mit] | bandaszéf, ajtók");

		return 1;
	}

    if(egyezik(cmd, "/mentés"))
	{
	    if(!IsScripter(playerid)) return 1;
		if(params != 1)
			return Msg(playerid, "Használata: /mentés [mit] | bandaszéf");

		if(egyezik(param[1], "bandaszéf"))
			SaveFrakcio();
		else
			Msg(playerid, "Használata: /mentés [mit] | bandaszéf");

		return 1;
	}

    if(egyezik(cmd, "/riporter"))
	{
		if(params != 1)
			return Msg(playerid, "Használata: /riporter [be/ki]");

		if(egyezik(param[1], "ki"))
			rtelo = 0;
		else if(egyezik(param[1], "be"))
			rtelo = 1;
		else
			Msg(playerid, "Használata: /riporter [be/ki]");

		return 1;
	}

	if(egyezik(cmd, "/jail"))
	{
		if(!Admin(playerid, 1)) return 1;
		if(params < 4) return Msg(playerid, "/jail [név / id]  [LSPD / Fort / Admin / Kórház]  [Idõ(perc)] [Oka]");

		new player = ReturnUser(param[1]);
		new ido = strval(param[3]);
		strtok(cmdtext, idx); strtok(cmdtext, idx); strtok(cmdtext, idx);
		
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[128];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		
		if(strlen(result) > 50) return Msg(playerid, "Maximum 50 karakter hossz! Fogalmazz röviden!");
		if(!EngedelyezettKarakterek(result)) return Msg(playerid, "Helytelen karakterek a szövegben!");

		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos");

		if(egyezik(param[2], "lspd"))
		{
			SendFormatMessage(player, COLOR_LIGHTRED, "Egy Adminisztrátor bezárt a börtönbe - Oka: %s", result);
			Msg(playerid, "Bezártad a játékost a börtönbe!");
			Format(string, "<< %s bezárta %s-t (LSPD) Idõ: %dp | Oka: %s >>", AdminName(playerid), PlayerName(player), ido, result);
			ABroadCast(COLOR_LIGHTRED, string, 1);
			Jail(player, "set", ido*60, "lspd", result);
			return 1;
		}
		else if(egyezik(param[2], "fort"))
		{
			SendFormatMessage(player, COLOR_LIGHTRED, "Egy Adminisztrátor bezárt a börtönbe - Oka: %s", result);
			Msg(playerid, "Bezártad a játékost a börtönbe!");
			Format(string, "<< %s bezárta %s-t (Fort) Idõ: %dp | Oka: %s >>", AdminName(playerid), PlayerName(player), ido, result);
			ABroadCast(COLOR_LIGHTRED, string, 1);
			Jail(player, "set", ido*60, "fort", result);
			return 1;
		}
		else if(egyezik(param[2], "admin"))
		{
			SendFormatMessage(player, COLOR_LIGHTRED, "Egy Adminisztrátor bezárt a börtönbe - Oka: %s", result);
			Msg(playerid, "Bezártad a játékost a börtönbe!");
			Format(string, "<< %s bezárta %s-t (Admin) Idõ: %dp | Oka: %s >>", AdminName(playerid), PlayerName(player), ido, result);
			ABroadCast(COLOR_LIGHTRED, string, 1);
			Jail(player, "set", ido*60, "ajail", result);
			if(ido > 15) SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s adminjailt kapott %s által | Oka: %s", PlayerName(player), AdminName(playerid), result);
			return 1;
		}
		else if(egyezik(param[2], "korhaz") || egyezik(param[2], "kórház"))
		{
			SendFormatMessage(player, COLOR_LIGHTRED, "Egy Adminisztrátor bezárt a börtönbe - Oka: %s", result);
			Msg(playerid, "Bezártad a játékost a kórházba!");
			Format(string, "<< %s bezárta %s-t (Kórház) Idõ: %dp | Oka: %s >>", AdminName(playerid), PlayerName(player), ido, result);
			ABroadCast(COLOR_LIGHTRED, string, 1);
			Jail(player, "set", ido*60, "korhaz", "");
			return 1;
		}
		else
			Msg(playerid, "/jail [név / id]  [LSPD / Fort / Admin / Kórház]  [Idõ(perc)] [Oka]");

		return 1;
	}
	
	if(egyezik(cmd, "/set"))
	{
		if(!Admin(playerid, 1)) return 1;
		if(params < 4) return Msg(playerid, "/set [Jármû / Játékos] [Int / VW] [Szám] [PlayerID / Rendszám]");
		if(egyezik(param[1], "játékos") || egyezik(param[1], "jatekos"))
		{
			new player = ReturnUser(param[4]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos");
			if(egyezik(param[2], "inti") || egyezik(param[2], "int"))
			{
				new inti = strval(param[3]);
				if(inti < 0) return 1;
				SetPlayerInterior(player, inti);
				ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s átállította az Interiorját(%d) neki: %s >>", AdminName(playerid), inti, PlayerName(player));
			}
			if(egyezik(param[2], "vw"))
			{
				new vw = strval(param[3]);
				if(vw < 0) return 1;
				SetPlayerVirtualWorld(player, vw);
				ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s átállította a VWjét(%d) neki: %s >>", AdminName(playerid), vw, PlayerName(player));
			}
		}
		if(egyezik(param[1], "Jármû") || egyezik(param[1], "Jarmu"))
		{
			new kocsi = strval(param[4]);
			if(!IsVehicleConnected(kocsi)) return Msg(playerid, "Nincs ilyen jármû");
			if(egyezik(param[2], "inti") || egyezik(param[2], "int"))
			{
				new inti = strval(param[3]);
				if(inti < 0) return 1;
				SetVehicleInterior(kocsi, inti);
				ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s átállította %d rendszámú jármû Interiorját erre: %d >>", AdminName(playerid), kocsi, inti);
			}
			if(egyezik(param[2], "vw"))
			{
				new vw = strval(param[3]);
				if(vw < 0) return 1;
				SetVehicleVW(kocsi, vw);
				ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s átállította %d rendszámú jármû VWjét erre: %d >>", AdminName(playerid), kocsi, vw);
			}
		}
	}
	
	if(egyezik(cmd, "/auncuff"))
	{
		if(!Admin(playerid, 3)) return 1;
		if(params < 1) return Msg(playerid, "/auncuff [Játékos Neve / ID]");
		new player = ReturnUser(param[1]);
		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
		if(PlayerCuffed[player] == 0) return Msg(playerid, "A játékos nincs megbilincselve.");
		Bilincs(player, 0);
		ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s levette a bilincset róla: %s >>", AdminName(playerid), PlayerName(player));
		GameTextForPlayer(player, "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Az admin levette a bilincsed!", 3000, 3);
	}
	
	if(egyezik(cmd, "/kártya") || egyezik(cmd, "/kartya"))
	{
		if(!LMT(playerid, LMUNKA_ONKORMANYZAT)) return Msg(playerid, "Nem vagy az önkormányzat tagja!");
		if(params < 1) return Msg(playerid, "/kártya [felmutat / megnéz]");
		if(egyezik(param[1], "Felmutat"))
		{
			if(params < 2) return Msg(playerid, "/kártya felmutat [játékos]");
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
			if(player == playerid) return Msg(playerid, "Ha megakarod nézni a kártyád: /kártya Megnéz");
			if(GetDistanceBetweenPlayers(playerid,player) > 3) return Msg(playerid, "Õ nincs a közeledben!");
			new rang = PlayerInfo[playerid][pRank], munka, rangja[32];
			if(PlayerInfo[playerid][pLeader] >= 1 && PlayerInfo[playerid][pLeader] < 200)
				munka = PlayerInfo[playerid][pLeader] - 1;
			else
				munka = PlayerInfo[playerid][pMember] - 1;

			if(rang <= 0) rangja = Rangok[munka][0];
			else if(rang >= 1 && rang <= 12) rangja = Rangok[munka][rang];
			else rangja = Rangok[munka][12];
			
			SendClientMessage(player, COLOR_WHITE, "============[Önkormányzati kártya]============");
			SendFormatMessage(player, COLOR_LIGHTGREEN, "* %s", PlayerName(playerid));
			SendFormatMessage(player, COLOR_LIGHTGREEN, "* %s", rangja);
			Cselekves(playerid, "felmutatta az önkormányzati kártyáját valakinek.");
		}
		if(egyezik(param[1], "Megnéz") || egyezik(param[1], "Megnez"))
		{
			new rang = PlayerInfo[playerid][pRank], munka, rangja[32];
			if(PlayerInfo[playerid][pLeader] >= 1 && PlayerInfo[playerid][pLeader] < 200)
				munka = PlayerInfo[playerid][pLeader] - 1;
			else
				munka = PlayerInfo[playerid][pMember] - 1;

			if(rang <= 0) rangja = Rangok[munka][0];
			else if(rang >= 1 && rang <= 12) rangja = Rangok[munka][rang];
			else rangja = Rangok[munka][12];
			
			SendClientMessage(playerid, COLOR_WHITE, "============[Önkormányzati kártya]============");
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* %s", PlayerName(playerid));
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* %s", rangja);
			Cselekves(playerid, "megnézte az önkormányzati kártyáját.");
		}
	}
	
	if(egyezik(cmd, "/jelvény") || egyezik(cmd, "/jelveny"))
	{
		if(!IsACop(playerid)) return Msg(playerid, "Nem vagy rendõr.");
		if(params < 1) return Msg(playerid, "/Jelvény [Felmutat / Megnéz]");
		new player = ReturnUser(param[2]);
		if(egyezik(param[1], "felmutat"))
		{
			if(params < 2) return Msg(playerid, "/Jelvény Felmutat [Játékos Neve / ID]");
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
			if(player == playerid) return Msg(playerid, "Ha megakarod nézni a jelvényed: ('/Jelvény Megnéz')");
			if(GetDistanceBetweenPlayers(playerid,player) > 3) return Msg(playerid, "Õ nincs a közeledben!");
			new szneve[32];
			new rangja[32];
			
			if(PlayerInfo[playerid][pMember] > 0)
			{
				new szam = PlayerInfo[playerid][pMember] - 1;
				szneve = Szervezetneve[szam][0];
			}
			if(PlayerInfo[playerid][pLeader] > 0)
			{
				new szam = PlayerInfo[playerid][pLeader] - 1;
				szneve = Szervezetneve[szam][0];
			}
			if(PlayerInfo[playerid][pMember] >= 1 || PlayerInfo[playerid][pLeader] >= 1)
			{
				new rang = PlayerInfo[playerid][pRank], munka;
				if(PlayerInfo[playerid][pLeader] >= 1 && PlayerInfo[playerid][pLeader] < 200)
					munka = PlayerInfo[playerid][pLeader] - 1;
				else
					munka = PlayerInfo[playerid][pMember] - 1;

				if(rang <= 0) rangja = Rangok[munka][0];
				else if(rang >= 1 && rang <= 12) rangja = Rangok[munka][rang];
				else rangja = Rangok[munka][12];
			}
			SendFormatMessage(player, COLOR_LIGHTBLUE, "* Felmutattad a jelvényed neki: %s", PlayerName(player));
			SendClientMessage(player, COLOR_LIGHTBLUE, "==========[Jelvény]==========");
			SendFormatMessage(player, COLOR_LIGHTGREEN, "* %s", PlayerName(playerid));
			SendFormatMessage(player, COLOR_LIGHTGREEN, "* %s", szneve);
			SendFormatMessage(player, COLOR_LIGHTGREEN, "* %s", rangja);
			Cselekves(playerid, "felmutatta a jelvényét valakinek...");
			return 1;
		}
		if(egyezik(param[1], "megnéz") || egyezik(param[1], "megnez"))
		{
			new szneve[32];
			new rangja[32];
			
			if(PlayerInfo[playerid][pMember] > 0)
			{
				new szam = PlayerInfo[playerid][pMember] - 1;
				szneve = Szervezetneve[szam][0];
			}
			if(PlayerInfo[playerid][pLeader] > 0)
			{
				new szam = PlayerInfo[playerid][pLeader] - 1;
				szneve = Szervezetneve[szam][0];
			}
			if(PlayerInfo[playerid][pMember] >= 1 || PlayerInfo[playerid][pLeader] >= 1)
			{
				new rang = PlayerInfo[playerid][pRank], munka;
				if(PlayerInfo[playerid][pLeader] >= 1 && PlayerInfo[playerid][pLeader] < 200)
					munka = PlayerInfo[playerid][pLeader] - 1;
				else
					munka = PlayerInfo[playerid][pMember] - 1;

				if(rang <= 0) rangja = Rangok[munka][0];
				else if(rang >= 1 && rang <= 12) rangja = Rangok[munka][rang];
				else rangja = Rangok[munka][12];
			}
			
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "==========[Jelvény]==========");
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* %s", PlayerName(playerid));
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* %s", szneve);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* %s", rangja);
			Cselekves(playerid, "megnézte a jelvényét...");
			return 1;
		}
	}

	if(egyezik(cmd, "/útlevél") || egyezik(cmd, "/utlevel"))
	{
		if(params < 1) return Msg(playerid, "/útlevél [Felmutat / Megvesz[50,000Ft]]");

		new player = ReturnUser(param[2]);

		if(egyezik(param[1], "Felmutat"))
		{
		    if(params < 2) return Msg(playerid, "/útlevél Felmutat [Játékos Neve / ID]");
		    if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos");
		    if(GetDistanceBetweenPlayers(playerid,player) > 3) return Msg(playerid, "Õ nincs a közeledben!");
			Msg(playerid, "Felmutattad az útleveled!");
			new Ervenyes = PlayerInfo[playerid][pUtlevel];
			format(string, sizeof(string), "================[Útlevél]================");
			SendClientMessage(player, COLOR_WHITE, string);
			format(string, sizeof(string), "Neve: %s", PlayerName(playerid));
			SendClientMessage(player, COLOR_WHITE, string);
			if(Ervenyes > 0)
			{
				format(string, sizeof(string), "Útlevele: Érvényes %d Hónapig((Óráig))", Ervenyes);
				SendClientMessage(player, COLOR_WHITE, string);
			}
			else
			{
				format(string, sizeof(string), "Útlevele: Érvénytelen.");
				SendClientMessage(player, COLOR_WHITE, string);
			}
			Cselekves(playerid, "elõvette az egyik iratát és felmutatta...");
			return 1;
		}
		else if(egyezik(param[1], "Megvesz"))
		{
		    if(!PlayerToPoint(2, playerid, 362.3623,209.2845,1008.3828)) return Msg(playerid, "Városházán elsõ iroda jobra! [50,000Ft] [Rendvédelmiseknek Ingyenes] [48 Hónapig érvényes((Óra))]");
			if(PlayerInfo[playerid][pUtlevel] > 0) return Msg(playerid, "Már van útleveled!");
			if(IsACop(playerid))
			{
			    Msg(playerid, "Útlevél megvéve! [48 Hónapig érvényes((Óra))] [Ingyen Volt]");
				PlayerInfo[playerid][pUtlevel] = 48;
				Cselekves(playerid, "vett egy útlevelet...");
				return 1;
			}
			if(GetMoney(playerid) < 50000) return Msg(playerid, "Útlevél ára: 50,000Ft");
			Msg(playerid, "Útlevél megvéve! [48 Hónapig érvényes((Óra))]");
			PlayerInfo[playerid][pUtlevel] = 48;
			Cselekves(playerid, "vett egy útlevelet...");
			GiveMoney(playerid, -50000);
			return 1;
		}
		else
			Msg(playerid, "/útlevél [Felmutat / Megvesz[50,000Ft]]");

		return 1;
	}

	if(egyezik(cmd, "/fegyverek"))
	{
		if(!IsACop(playerid)) return Msg(playerid, "Nem tartozol rendvédelmis szervezethez.");
		if(!Munkarang(playerid, 2) && !LMT(playerid, LMUNKA_FBI)) return Msg(playerid, "Minimum 2-es rangra van szükséged.");
		if(params != 1) return Msg(playerid, "/fegyverek [Játékos Neve / ID]");
		new player = ReturnUser(param[1]);
		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos");
		if(GetDistanceBetweenPlayers(playerid,player) > 3) return Msg(playerid, "Õ nincs a közeledben!");
		SendFormatMessage(playerid, COLOR_LIGHTRED, "===========[%s Fegyverei]===========", PlayerName(player));
		new fegyverek[96], coordsstring[256], fegyverek2[96], fegyok, fegyo, ammo, ammo2[8];
		for(new x = 0; x < 13; x++)
		{
			GetPlayerWeaponData(player, x, fegyo, ammo);
			if(x == 0 && fegyo != 1) continue;
			
			if(ammo > 0) Format(ammo2, "[%d]", ammo);
			else ammo2[0] = EOS;
			
			if(ammo != 0)
			{
				fegyok++;
				if(fegyok < 6)
					if(fegyok == 1)
						Format(fegyverek, "(%d)%s%s", fegyo, aWeaponNames[fegyo], ammo2);
					else
						Format(fegyverek, "%s, (%d)%s%s", fegyverek, fegyo, aWeaponNames[fegyo], ammo2);
				else
					if(fegyok == 6)
						Format(fegyverek2, "Fegyverek: (%d)%s%s", fegyo, aWeaponNames[fegyo], ammo2);
					else
						Format(fegyverek2, "%s, (%d)%s%s", fegyverek2, fegyo, aWeaponNames[fegyo], ammo2);
			}
		}
		
		if(fegyok < 1)
			fegyverek = "Nincs fegyvere.";
			
		format(coordsstring, sizeof(coordsstring), "Fegyverek: %s", fegyverek);
		SendClientMessage(playerid, COLOR_GRAD3, coordsstring);
		
		if(fegyok >= 6)
			SendClientMessage(playerid, COLOR_GRAD4, fegyverek2);
	}
	
	if(egyezik(cmd, "/szonda"))
	{
		if(params != 1) return Msg(playerid, "/szonda [Játékos Neve / ID]");

		new player = ReturnUser(param[1]);
		new Jatekos = playerid;

		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
		if(player == playerid) return Msg(playerid, "Magadat??");

		if(!IsACop(playerid)) return Msg(playerid, "Nem vagy rendõr!");

        if(GetDistanceBetweenPlayers(playerid,player) > 3) return Msg(playerid, "Õ nincs a közeledben!");

        if(IsACop(player)) return Msg(playerid, "Zsarut akarsz szondáztatni?");

        Szondaztat[player] = Jatekos;
		format(string, sizeof(string), "[Gates]: Megkérted %s-t hogy fújja meg a szondát!", PlayerName(player));
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		format(string, sizeof(string), "[Gates]: %s megkért hogy fújd meg a szondát, ha nem fújod meg bevihet!(/fúj)", PlayerName(playerid));
		SendClientMessage(player, COLOR_LIGHTRED, string);
		Cselekves(playerid, "elõvette a szondát...");

		return 1;
	}

	if(egyezik(cmd, "/fúj") || egyezik(cmd, "/fuj"))
	{
		if(Szondaztat[playerid] == NINCS) return Msg(playerid, "Nem adtak át szondát...Mit akarsz megfújni?");
		if(Szondaztat[playerid] == INVALID_PLAYER_ID)
		{
			Msg(playerid, "Már nincs ilyen játékos");
			Szondaztat[playerid] = NINCS;
			return 1;
		}

        if(GetDistanceBetweenPlayers(playerid,Szondaztat[playerid]) > 3) return Msg(playerid, "Õ nincs a közeledben!");

		format(string, sizeof(string), "[Gates]: Megfújtad a szondát!");
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		format(string, sizeof(string), "[Gates]: %s megfújta a szondát!", PlayerName(playerid));
		SendClientMessage(Szondaztat[playerid], COLOR_LIGHTRED, string);
		if(PlayerDrunk[playerid] > 3)
		{
		    Msg(Szondaztat[playerid], "Eredmény: Ittas");
		}
		else Msg(Szondaztat[playerid], "Eredmény: Józan");
		Szondaztat[playerid] = NINCS;

		return 1;
	}

    if(egyezik(cmd, "/iban"))
	{
	    if(!Admin(playerid, 2)) return 1;
		if(params != 1) return Msg(playerid, "/lban [Játékos Neve / ID]");

		new player = ReturnUser(param[1]);
		//new Jatekos = playerid;

		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");

		if(IsClint(player) && player != playerid)
		{
			SendFormatMessage(player, COLOR_YELLOW, "<< %s ki akar bannolni /ibanal >>", PlayerName(playerid));
			Msg(playerid, "Nincs ilyen játékos");
			return 1;
		}
		
		if(player == playerid) return Msg(playerid, "Magadat??");
		if(PlayerInfo[playerid][pAdmin] < PlayerInfo[player][pAdmin]) return Msg(playerid, "Nagyobb admint mint te? Hülye vagy?");

		format(string, sizeof(string), "[Gates]: %s bannolva %s által örökre![IP]", PlayerName(player), AdminName(playerid));
		BanLog(string);
		ABroadCast(COLOR_LIGHTRED, string, 1);
		SendFormatMessage(player, COLOR_LIGHTRED, "Kilettél bannolva %s által.", AdminName(playerid));
        SeeBan(player, 0, playerid, "/iban", true);
        Kick(player);
		return 1;
	}

    if(egyezik(cmd, "/kban"))
	{
	    if(!Admin(playerid, 2)) return 1;
		if(params != 1) return Msg(playerid, "/kban [Játékos Neve / ID]");

		new player = ReturnUser(param[1]);
		//new Jatekos = playerid;

		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");

		if(IsClint(player) && player != playerid)
		{
			SendFormatMessage(player, COLOR_YELLOW, "<< %s ki akar bannolni /kbanal >>", PlayerName(playerid));
			Msg(playerid, "Nincs ilyen játékos");
			return 1;
		}

		if(player == playerid) return Msg(playerid, "Magadat??");
		if(PlayerInfo[playerid][pAdmin] < PlayerInfo[player][pAdmin]) return Msg(playerid, "Nagyobb admint mint te? Hülye vagy?");

		format(string, sizeof(string), "[Gates]: %s bannolva %s által örökre![Karakter]", PlayerName(player), AdminName(playerid));
		BanLog(string);
		ABroadCast(COLOR_LIGHTRED, string, 1);
		SendFormatMessage(player, COLOR_LIGHTRED, "Kilettél bannolva %s által.", AdminName(playerid));
        SeeBan(player, 0, playerid, "/kban", false);
        Kick(player);
		return 1;
	}

	/*if(egyezik(cmd, "/kölni") || egyezik(cmd, "/kolni"))
	{
		if(params != 1) return Msg(playerid, "/kölni [Játékos Neve / ID]");
		new jatekos = ReturnUser(param[1]);
		if(jatekos == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
		if(jatekos == playerid) return Msg(playerid, "Magadat?-.-");
		if(GetDistanceBetweenPlayers(playerid,jatekos) > 5) return Msg(playerid, "Õ nincs a közeledben!");
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Megszeretnéd locsolni %s-t.", PlayerName(jatekos));
		SendFormatMessage(jatekos, COLOR_LIGHTBLUE, "* %s megszeretne locsolni.(Elfogadás: /accept locsolás)", PlayerName(playerid));
		Locsolas[playerid] = jatekos;
		Locsolniakar[jatekos] = playerid;
	}
	
	if(egyezik(cmd, "/tojás") || egyezik(cmd, "/tojas"))
	{
		if(params != 1) return Msg(playerid, "/tojás [Játékos Neve / ID]");
		new jatekos = ReturnUser(param[1]);
		if(jatekos == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
		if(jatekos == playerid) return Msg(playerid, "Magadnak?-.-");
		if(GetDistanceBetweenPlayers(playerid,jatekos) > 5) return Msg(playerid, "Õ nincs a közeledben!");
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Átadtál egy tojást neki: %s", PlayerName(jatekos));
		SendFormatMessage(jatekos, COLOR_LIGHTBLUE, "* %s átadott egy tojást", PlayerName(playerid));
		Cselekves(playerid, "átadott egy tojást valakinek...");
	}*/
	if(egyezik(cmd, "/mellény") ||egyezik(cmd, "/melleny"))
	{
		if(FloodCheck(playerid)) return 1;
		if(params != 2) return Msg(playerid, "/mellény [berak / kivesz / megnéz] [Slot (1-3)]");
        new kocsi;
        kocsi = GetClosestVehicle(playerid);
		new Float:tav = GetDistanceToVehicle(playerid, kocsi);
        new ferohely;
		ferohely= strval(param[2]);
		if(ferohely < 1 || ferohely > 3) return Msg(playerid, "Slot 1-3");
		if(tav >= 3) return Msg(playerid, "Nincs a közeledbe jármû...");
		if(egyezik(param[1], "berak"))
		{
		    new Float:armor;
			GetPlayerArmour(playerid, armor);
			new pancel;
			pancel = floatround(armor);
			if(pancel == 0) return Msg(playerid, "Nincs mellényed!");
			new x = ferohely + 16;
			if(CuccokAKocsiban[kocsi][x] != 0) return Msg(playerid, "A jármûben már van mellény!");
			if(Locked(kocsi)) return Msg(playerid, "A jármû zárva");
			if(IsABicikli(kocsi)) return Msg(playerid, "Biciklin?");
			CuccokAKocsiban[kocsi][x] = pancel;
			Msg(playerid, "Beraktál egy mellényt a jármûbe");
			Cselekves(playerid, "elrejtett egy mellényt a jármûbe...");
			SetPlayerArmour(playerid, 0);
			CsomagTartoMentes();
			return 1;
		}
		else if(egyezik(param[1], "kivesz"))
		{
			new x = ferohely + 16;
			if(Locked(kocsi)) return Msg(playerid, "A jármû zárva");
			if(IsABicikli(kocsi)) return Msg(playerid, "Biciklin?");
			if(CuccokAKocsiban[kocsi][x] == 0) return Msg(playerid, "A jármûben már van mellény!");
			new pancel = CuccokAKocsiban[kocsi][x];
			Msg(playerid, "Kivettél egy mellényt a jármûbõl");
			Cselekves(playerid, "kivett egy mellényt a jármûbõl...");
			SetPlayerArmour(playerid, pancel);
			CuccokAKocsiban[kocsi][x] = 0;
			CsomagTartoMentes();
			return 1;
		}
		else if(egyezik(param[1], "megnéz") || egyezik(param[1], "megnez"))
		{
			new x = ferohely + 16;
			if(Locked(kocsi)) return Msg(playerid, "A jármû zárva");
			if(IsABicikli(kocsi)) return Msg(playerid, "Biciklin?");
			if(CuccokAKocsiban[kocsi][x] == 0) return Msg(playerid, "Itt nincs mellény!");
			new pancel = CuccokAKocsiban[kocsi][x];
			SendFormatMessage(playerid, COLOR_LIGHTRED, "* Mellény állapota: %d százalék", pancel);
			Cselekves(playerid, "bele nézett a csomagtartóba.", 1);
			return 1;
		}
		else
			Msg(playerid, "/mellény [berak / kivesz / megnéz] [Slot (1-3)]");
		return 1;
	}
	if(egyezik(cmd, "/weapon"))
	{
		if(FloodCheck(playerid)) return 1;
		if(params != 2) return Msg(playerid, "/weapon [berak / kivesz / megnéz] [Slot (1-3)]");
        new kocsi;
        kocsi = GetClosestVehicle(playerid);
		new Float:tav = GetDistanceToVehicle(playerid, kocsi);
        new ferohely;
		ferohely= strval(param[2]);
		if(ferohely < 1 || ferohely > 3) return Msg(playerid, "Slot 1-3");
		if(egyezik(param[1], "berak"))
		{
		    new FegyverID;
			FegyverID = GetPlayerWeapon(playerid);
	        new FegyverTolteny;
			FegyverTolteny = GetPlayerAmmo(playerid);

		    if(tav >= 3) return Msg(playerid, "Nincs a közeledbe jármû...");
			
			if(PlayerPaintballing[playerid] != 0) return Msg(playerid, "Mi a faszért használsz ki bugot?");

			if(ferohely == 1)
			{
				if(FegyverID != 0 && FegyverTolteny != 0)
				{
					if(CuccokAKocsiban[kocsi][4] != 0 && CuccokAKocsiban[kocsi][5] != 0) return Msg(playerid, "A jármûben már van fegyver!");
					if(Locked(kocsi)) return Msg(playerid, "A jármû zárva");
					if(IsABicikli(kocsi)) return Msg(playerid, "Biciklin?");

					CuccokAKocsiban[kocsi][4] = FegyverID;
					CuccokAKocsiban[kocsi][5] = FegyverTolteny;
					Msg(playerid, "Beraktál egy fegyvert a jármûbe");
					Cselekves(playerid, "elrejtett egy fegyvert a jármûbe...");
					FegyverElvesz(playerid, FegyverID);
					CsomagTartoMentes();
				}
				else
				{
					Msg(playerid, "Nincs fegyver nálad");
				}
			}
			else if(ferohely == 2)
			{
				if(FegyverID != 0 && FegyverTolteny != 0)
				{
					if(CuccokAKocsiban[kocsi][6] != 0 && CuccokAKocsiban[kocsi][7] != 0) return Msg(playerid, "A jármûben már van fegyver!");
					if(Locked(kocsi)) return Msg(playerid, "A jármû zárva");
					if(IsABicikli(kocsi)) return Msg(playerid, "Biciklin?");

					CuccokAKocsiban[kocsi][6] = FegyverID;
					CuccokAKocsiban[kocsi][7] = FegyverTolteny;
					Msg(playerid, "Beraktál egy fegyvert a jármûbe");
					Cselekves(playerid, "elrejtett egy fegyvert a jármûbe...");
					FegyverElvesz(playerid, FegyverID);
					CsomagTartoMentes();
				}
				else
				{
					Msg(playerid, "Nincs fegyver nálad");
				}
			}
			else if(ferohely == 3)
			{
				if(FegyverID != 0 && FegyverTolteny != 0)
				{
					if(CuccokAKocsiban[kocsi][8] != 0 && CuccokAKocsiban[kocsi][9] != 0) return Msg(playerid, "A jármûben már van fegyver!");
					if(Locked(kocsi)) return Msg(playerid, "A jármû zárva");
					if(IsABicikli(kocsi)) return Msg(playerid, "Biciklin?");

					CuccokAKocsiban[kocsi][8] = FegyverID;
					CuccokAKocsiban[kocsi][9] = FegyverTolteny;
					Msg(playerid, "Beraktál egy fegyvert a jármûbe");
					Cselekves(playerid, "elrejtett egy fegyvert a jármûbe...");
					FegyverElvesz(playerid, FegyverID);
					CsomagTartoMentes();
				}
				else
				{
					Msg(playerid, "Nincs fegyver nálad");
				}
			}
			if(FegyverID == 16 || FegyverID == 26 || FegyverID == 27 || FegyverID == 34 || FegyverID == 35 || FegyverID == 36)
			{
				new uzenet[200];
				Format(uzenet, "<< %s %s-t(%d töltény) rakott egy jármûbe(ID: %d) >>", PlayerName(playerid), aWeaponNames[FegyverID], FegyverTolteny, kocsi);
				ABroadCast(COLOR_LIGHTRED, uzenet, 1);
			}
			return 1;
		}
		else if(egyezik(param[1], "kivesz"))
		{
		    if(tav >= 3) return Msg(playerid, "Nincs a közeledbe jármû...");

			if(Locked(kocsi)) return Msg(playerid, "A jármû zárva");
			if(IsABicikli(kocsi)) return Msg(playerid, "Biciklin?");

			if(ferohely == 1)
			{
				if(CuccokAKocsiban[kocsi][4] != 0 && CuccokAKocsiban[kocsi][5] != 0)
				{
					new FegyverID;
					FegyverID = CuccokAKocsiban[kocsi][4];
					new FegyverTolteny;
					FegyverTolteny = CuccokAKocsiban[kocsi][5];
					Msg(playerid, "Kivettél egy fegyvert a jármûbõl");
					Cselekves(playerid, "kivett egy fegyvert a jármûbõl...");
					GiveWeapon(playerid, FegyverID, FegyverTolteny);
					CuccokAKocsiban[kocsi][4] = 0;
					CuccokAKocsiban[kocsi][5] = 0;
					CsomagTartoMentes();
					return 1;
				}
				else
				{
					Msg(playerid, "Itt nincs fegyver");
				}
			}
			else if(ferohely == 2)
			{
				if(CuccokAKocsiban[kocsi][6] != 0 && CuccokAKocsiban[kocsi][7] != 0)
				{
					new FegyverID;
					FegyverID = CuccokAKocsiban[kocsi][6];
					new FegyverTolteny;
					FegyverTolteny = CuccokAKocsiban[kocsi][7];
					Msg(playerid, "Kivettél egy fegyvert a jármûbõl");
					Cselekves(playerid, "kivett egy fegyvert a jármûbõl...");
					GiveWeapon(playerid, FegyverID, FegyverTolteny);
					CuccokAKocsiban[kocsi][6] = 0;
					CuccokAKocsiban[kocsi][7] = 0;
					CsomagTartoMentes();
					return 1;
				}
				else
				{
					Msg(playerid, "Itt nincs fegyver");
				}
			}
			else if(ferohely == 3)
			{
				if(CuccokAKocsiban[kocsi][8] != 0 && CuccokAKocsiban[kocsi][9] != 0)
				{
					new FegyverID;
					FegyverID = CuccokAKocsiban[kocsi][8];
					new FegyverTolteny;
					FegyverTolteny = CuccokAKocsiban[kocsi][9];
					Msg(playerid, "Kivettél egy fegyvert a jármûbõl");
					Cselekves(playerid, "kivett egy fegyvert a jármûbõl...");
					GiveWeapon(playerid, FegyverID, FegyverTolteny);
					CuccokAKocsiban[kocsi][8] = 0;
					CuccokAKocsiban[kocsi][9] = 0;
					CsomagTartoMentes();
					return 1;
				}
				else
				{
					Msg(playerid, "Itt nincs fegyver");
				}
			}
		}	
		else if(egyezik(param[1], "megnéz") || egyezik(param[1], "megnez"))
		{
				if(tav >= 3) return Msg(playerid, "Nincs a közeledbe jármû...");

				if(Locked(kocsi)) return Msg(playerid, "A jármû zárva");
				if(IsABicikli(kocsi)) return Msg(playerid, "Biciklin?");

				if(ferohely == 1)
				{
					if(CuccokAKocsiban[kocsi][4] != 0 && CuccokAKocsiban[kocsi][5] != 0)
					{
						new FegyverID;
						FegyverID = CuccokAKocsiban[kocsi][4];
						new FegyverTolteny;
						FegyverTolteny = CuccokAKocsiban[kocsi][5];
						SendFormatMessage(playerid, COLOR_LIGHTRED, "* Fegyver Név: %s, Töltény: %d", aWeaponNames[FegyverID], FegyverTolteny);
						Cselekves(playerid, "bele nézett a csomagtartóba.", 1);
						return 1;
					}
					else
					{
						Msg(playerid, "Itt nincs fegyver");
					}
				}
				else if(ferohely == 2)
				{
					if(CuccokAKocsiban[kocsi][6] != 0 && CuccokAKocsiban[kocsi][7] != 0)
					{
						new FegyverID;
						FegyverID = CuccokAKocsiban[kocsi][6];
						new FegyverTolteny;
						FegyverTolteny = CuccokAKocsiban[kocsi][7];
						SendFormatMessage(playerid, COLOR_LIGHTRED, "* Fegyver Név: %s, Töltény: %d", aWeaponNames[FegyverID], FegyverTolteny);
						Cselekves(playerid, "bele nézett a csomagtartóba.", 1);
						return 1;
					}
					else
					{
						Msg(playerid, "Itt nincs fegyver");
					}
				}
				else if(ferohely == 3)
				{
					if(CuccokAKocsiban[kocsi][8] != 0 && CuccokAKocsiban[kocsi][9] != 0)
					{
						new FegyverID;
						FegyverID = CuccokAKocsiban[kocsi][8];
						new FegyverTolteny;
						FegyverTolteny = CuccokAKocsiban[kocsi][9];
						SendFormatMessage(playerid, COLOR_LIGHTRED, "* Fegyver Név: %s, Töltény: %d", aWeaponNames[FegyverID], FegyverTolteny);
						Cselekves(playerid, "bele nézett a csomagtartóba.", 1);
						return 1;
					}
					else
					{
						Msg(playerid, "Itt nincs fegyver");
					}
				}
		}
		else
			Msg(playerid, "/weapon [berak / kivesz / megnéz] [Slot (1-3)]");

		return 1;
	}

	if(egyezik(cmd, "/nefuccsebebazdmeg"))
	{
	    if(!Admin(playerid, 1)) return 1;
		if(params != 1) return 1;
		if(AdminJelszoMegadva[playerid] == 1) return Msg(playerid, "Már megadtad!");

		if(!egyezik(param[1], "FincsiPirítós!", true))
		{
			//format(string, sizeof(string), "[!!FIGYELMEZTETÉS!!]: %s kilett bannolva a rendszer által, oka: Nem tudta az admin jelszót!", PlayerName(playerid)); BanLog(string);
			//SeeBan(playerid, 0, true);
			Kick(playerid);
			//ABroadCast(COLOR_LIGHTRED, string, 1);
			return 1;
		}

		AdminJelszoMegadva[playerid] = 1;
		Msg(playerid, "Admin Jelszó Elfogadva!");

		return 1;
	}

	if(egyezik(cmd, "/edzés") || egyezik(cmd, "/edzes"))
	{
	    if(!PlayerToPoint(20.0,playerid,765.9343,0.2761,1000.7173) && !PlayerToPoint(20.0,playerid,768.2826,-36.1077,1000.6865)) return Msg(playerid, "Nem vagy Edzõterembe!");
		if(params != 1) return Msg(playerid, "Használata: /edzés [Box / Kungfu / Kneehead / Elbow]");
		if(Edzik[playerid] == 1) return Msg(playerid, "Jelenleg Edzel!");
		if(egyezik(param[1], "Box"))
		{
		    if(!PlayerToPoint(20.0,playerid,765.9343,0.2761,1000.7173)) return Msg(playerid, "Nem vagy a Grove edzõteremben.");
		    if(PlayerInfo[playerid][pStilus] == 1) return Msg(playerid, "Ezt már meg tanultad!");
			Msg(playerid, "Elkezdted a Box edzést! Ha már ez elött megtanultál valamit, azt elfelejted!");
			Cselekves(playerid, "elkezdett edzeni...");
   			TogglePlayerControllable(playerid, 0);
			OnePlayAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
			OnePlayAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
			GameTextForPlayer(playerid, "Edzel, varj...", 120000, 1);
			TanultStilus[playerid] = 1;
            SetTimerEx("Edzes", 120000, false, "ii", playerid);
		}
		else if(egyezik(param[1], "kungfu"))
		{
		    if(!PlayerToPoint(20.0,playerid,768.2826,-36.1077,1000.6865)) return Msg(playerid, "Nem vagy a Cobra edzõteremben.");
		    if(PlayerInfo[playerid][pStilus] == 2) return Msg(playerid, "Ezt már meg tanultad!");
		    if(Edzik[playerid] == 1) return Msg(playerid, "Jelenleg Edzel!");
			Msg(playerid, "Elkezdted a Kungfu edzést! Ha már ez elött megtanultál valamit, azt elfelejted!");
			Cselekves(playerid, "elkezdett edzeni...");
			TogglePlayerControllable(playerid, 0);
			OnePlayAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
			OnePlayAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
			GameTextForPlayer(playerid, "Edzel, varj...", 120000, 1);
			TanultStilus[playerid] = 2;
			SetTimerEx("Edzes", 120000, false, "ii", playerid);
		}
		else if(egyezik(param[1], "kneehead"))
		{
		    if(!PlayerToPoint(20.0,playerid,768.2826,-36.1077,1000.6865)) return Msg(playerid, "Nem vagy a Cobra edzõteremben.");
		    if(PlayerInfo[playerid][pStilus] == 3) return Msg(playerid, "Ezt már meg tanultad!");
		    if(Edzik[playerid] == 1) return Msg(playerid, "Jelenleg Edzel!");
			Msg(playerid, "Elkezdted a Kneehead edzést! Ha már ez elött megtanultál valamit, azt elfelejted!");
			Cselekves(playerid, "elkezdett edzeni...");
			TogglePlayerControllable(playerid, 0);
			OnePlayAnim(playerid,"FIGHT_D","FightD_2",4.0,0,1,1,0,0);
			OnePlayAnim(playerid,"FIGHT_D","FightD_2",4.0,0,1,1,0,0);
			OnePlayAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
			GameTextForPlayer(playerid, "Edzel, varj...", 120000, 1);
			TanultStilus[playerid] = 3;
			SetTimerEx("Edzes", 120000, false, "ii", playerid);
		}
		/*else if(egyezik(param[1], "grabkick"))
		{
		    if(PlayerInfo[playerid][pStilus] == 4) return Msg(playerid, "Ezt már meg tanultad!");
			Msg(playerid, "Elkezdted a Grabkick edzést! Ha már ez elött megtanultál valamit, azt elfelejted!");
			Cselekves(playerid, "elkezdett edzeni...");
			OnePlayAnim(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0);
			GameTextForPlayer(playerid, "Edzel, varj...", 60000, 1);
			TanultStilus[playerid] = 4;
			SetTimerEx("Edzes", 60000, false, "ii", playerid);
		}*/
        else if(egyezik(param[1], "elbow"))
		{
		    if(!PlayerToPoint(20.0,playerid,768.2826,-36.1077,1000.6865)) return Msg(playerid, "Nem vagy a Cobra edzõteremben.");
		    if(PlayerInfo[playerid][pStilus] == 5) return Msg(playerid, "Ezt már meg tanultad!");
		    if(Edzik[playerid] == 1) return Msg(playerid, "Jelenleg Edzel!");
			Msg(playerid, "Elkezdted az Elbow edzést! Ha már ez elött megtanultál valamit, azt elfelejted!");
			Cselekves(playerid, "elkezdett edzeni...");
			TogglePlayerControllable(playerid, 0);
			OnePlayAnim(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
			OnePlayAnim(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
			OnePlayAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
			GameTextForPlayer(playerid, "Edzel, varj...", 120000, 1);
			TanultStilus[playerid] = 5;
			SetTimerEx("Edzes", 120000, false, "ii", playerid);
		}
		else
			Msg(playerid, "Használata: /edzés [Box / Kungfu / Kneehead / Elbow]");

		return 1;
	}

	if(egyezik(cmd, "/pda"))
	{
		if(!LMT(playerid, LMUNKA_FBI)) return 1;
		if(Belepve[playerid] == 1)
		{
			SendFormatMessage(playerid, Pink, "Server Disconnected. Jó munkát %s Ügynök.", PlayerName(playerid));
			Belepve[playerid] = 0;
		}
		else
		{
			SetTimerEx("Fbikapcsolodas", 5000, false, "d", playerid);
			SendFormatMessage(playerid, Pink, "Kapcsolodás a központi szerverre. Kérem várjon.", PlayerName(playerid));
		}
	}
	if(egyezik(cmd, "/harcstílus") || egyezik(cmd, "/harcstilus"))
	{
	    if(PlayerInfo[playerid][pStilus] < 1) return Msg(playerid, "Nem tanultál meg semmilyen Harc Stílust!");
		if(params != 1) return Msg(playerid, "Használata: /harcstílus [Normál / Box / Kungfu / Kneehead / Elbow]");

        if(egyezik(param[1], "Normál") || egyezik(param[1], "Normal"))
		{
		    Msg(playerid, "Átáltál más harc stílusra!");
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
		}
		else if(egyezik(param[1], "Box"))
		{
		    if(PlayerInfo[playerid][pStilus] != 1) return Msg(playerid, "Nem ismered ezt a harc stílust!");
		    Msg(playerid, "Átáltál más harc stílusra!");
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
		}
		else if(egyezik(param[1], "Kungfu"))
		{
		    if(PlayerInfo[playerid][pStilus] != 2) return Msg(playerid, "Nem ismered ezt a harc stílust!");
		    Msg(playerid, "Átáltál más harc stílusra!");
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		}
		else if(egyezik(param[1], "Kneehead"))
		{
		    if(PlayerInfo[playerid][pStilus] != 3) return Msg(playerid, "Nem ismered ezt a harc stílust!");
		    Msg(playerid, "Átáltál más harc stílusra!");
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		}
		/*else if(egyezik(param[1], "Grabkick"))
		{
		    if(PlayerInfo[playerid][pStilus] != 4) return Msg(playerid, "Nem ismered ezt a harc stílust!");
		    Msg(playerid, "Átáltál más harc stílusra!");
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
		}*/
        else if(egyezik(param[1], "Elbow"))
		{
		    if(PlayerInfo[playerid][pStilus] != 5) return Msg(playerid, "Nem ismered ezt a harc stílust!");
		    Msg(playerid, "Átáltál más harc stílusra!");
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		}
		else
			Msg(playerid, "Használata: /harcstílus [Normál / Box / Kungfu / Kneehead / Elbow]");

		return 1;
	}


    /*if(egyezik(cmd, "/öv") || egyezik(cmd, "/ov"))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Kocsiban kell ülnöd!");
		if(IsABicikli(GetPlayerVehicleID(playerid))) return Msg(playerid, "Biciklin?");
		if(params != 1) return Msg(playerid, "/öv [becsatol / kicsatol]");

		if(egyezik(param[1], "becsatol"))
		{
			if(ov[playerid] == 1) return Msg(playerid, "A biztonságiöv már bevan csatolva!");
			Msg(playerid, "Biztonságiöv becsatolva.");
			ov[playerid] = 1;
			Cselekves(playerid, "becsatolta az övét");
			return 1;
		}
		else if(egyezik(param[1], "kicsatol"))
		{
			if(ov[playerid] == 0) return Msg(playerid, "A biztonságiöv besincs csatolva!");
			Msg(playerid, "Biztonságiöv kicsatolva.");
			ov[playerid] = 0;
			Cselekves(playerid, "kicsatolta az övét");
			return 1;
		}
		else
			Msg(playerid, "/öv [becsatol / kicsatol]");

		return 1;
	}*/
	if(egyezik(cmd, "/háztipus") || egyezik(cmd, "/haztipus"))
	{
		if(!Admin(playerid, 1337)) return 1;
		new h = HaznalVan(playerid);
		if(h == NINCS) return Msg(playerid, "Nem vagy ház bejáratánál.");
		if(params < 1)
		{
			Msg(playerid, "/háztipus [Tipus]");
			Msg(playerid, "1: Los Santos, 2: San Fierro");
			Msg(playerid, "3: GazdagNegyed, 4: Falu, 5: Tanya");
			return 1;
		}
		new t = strval(param[1]);
		if(t < 1 || t > 5) return 1;
		HouseInfo[h][hTipus] = t;
		HazUpdate(h, HAZ_Tipus, t);
		SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Ház (%d) tipusa átírva. (%d)", h, t);
		return 1;
	}
	if(egyezik(cmd, "/adó") || egyezik(cmd, "/ado"))
	{
		if(params < 1) return Msg(playerid, "/Adó [Bevallás / Befizet / Ellenõrzés]");
		if(egyezik(param[1], "Bevallás") || egyezik(param[1], "Bevallas"))
		{
			if(!PlayerToPoint(1, playerid, 354.9763,154.1686,1025.7964))
			{			
				Msg(playerid, "Nem vagy a városháza 3. emeletén.");
				SetPlayerCheckpoint(playerid, 354.9763,154.1686,1025.7964, 1);
				return 1;
			}	
			if(PlayerInfo[playerid][pAdoKitoltve] == 1) return Msg(playerid, "Te már kitöltötted az adóbevallásod.");
			if(PlayerInfo[playerid][pPayDay] < 1800) return Msg(playerid, "Csak a fizetés elõtti másfél órában tudod bevallani az adódat!");
			HolTart[playerid] = 0;
			ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_INPUT, "Adóbevallás", "Hány éve él a városban((Level = Év))?", "Tovább","Mégse");
			TogglePlayerControllable(playerid, false);
			Cselekves(playerid, "elkezdte kitölteni az adóbevallását", 1);
		}
		if(egyezik(param[1], "Befizet"))
		{
			if(!PlayerToPoint(1, playerid, 354.9763,154.1686,1025.7964))
			{			
				Msg(playerid, "Nem vagy a városháza 3. emeletén.");
				SetPlayerCheckpoint(playerid, 354.9763,154.1686,1025.7964, 1);
				return 1;
			}	
			if(PlayerInfo[playerid][pAdoKitoltve] == 0) return Msg(playerid, "Nem adtad be az adóbevallásod.");
			if((PlayerInfo[playerid][pAdo] - PlayerInfo[playerid][pAdoFizetve]) == 0) return Msg(playerid, "Te már kifizetted az adód.");
			if(PlayerInfo[playerid][pPayDay] < 1800) return Msg(playerid, "Csak a fizetés elõtti másfél órában tudod befizetni az adódat!");
			HolTart[playerid] = 5;
			new u[50];
			format(u, sizeof(u), "Az adód %dFt\n", PlayerInfo[playerid][pAdo]);
			ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_INPUT, "Adóbefizetés", u, "Befizet","Mégse");
			
		}
		if(egyezik(param[1], "Ellenõrzés") || egyezik(param[1], "Ellenorzes"))
		{
			if(!PlayerToPoint(1, playerid, 363.1144,152.3946,1025.7964) && !PlayerToPoint(1, playerid, 228.702, 114.702, 1003.218))
			{			
				Msg(playerid, "Nem vagy adóellenõrzési helyen");
				return 1;
			}
			new kik[4000];
			if(LMT(playerid, LMUNKA_ONKORMANYZAT) && Munkarang(playerid, 4) || LMT(playerid, LMUNKA_VPOP) && PlayerInfo[playerid][pRank] >= 5)
			{
				new j = 0;
				for(new p = 0; p < MAX_PLAYERS; p++)
				{
					if(!RendesJatekos(p) || LMT(p, LMUNKA_KATONA) || LMT(p, LMUNKA_FBI) || LMT(p, LMUNKA_SCPD) || LMT(p, LMUNKA_ONKORMANYZAT) || PlayerInfo[p][pJailed] != 0) continue;
					if(!PlayerInfo[p][pAdoEllenorizve] && PlayerInfo[p][pPayDay] < 1800 )
					{
						j++;
						DialogIDk[playerid][j] = p;
						Format(kik, "%s[ID:%d]%s\n", kik, p, PlayerName(p));
					}
				}
				if(j == 0) return Msg(playerid, "Senki nem töltötte ki az adóbevallását.");
				HolTart[playerid] = 4;
				ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_LIST, "Adóellenõrzés", kik, "Ellenõrzés","Mégse");
			}
			else return Msg(playerid, "Nem vagy adóellenõr!");
		}
	}
	if(egyezik(cmd, "/csere"))
	{
		if(params < 1) return Msg(playerid, "/Csere [Ház, Jármû, Biznisz]");
		if(egyezik(param[1], "elfogad"))
		{
			if(MitCsere[playerid] != NINCS)
			{
				if(Csere[playerid] == INVALID_PLAYER_ID)
				{
					Msg(playerid, "A játékos már nem online.");
					Csere[playerid] = NINCS;
					MitCsere[playerid] = NINCS;
				}
				new player = Csere[playerid];
				if(MitCsere[playerid] == 1)
				{
					if(PlayerInfo[playerid][pPcarkey] == NINCS)
					{
						MitCsere[playerid] = NINCS;
						Csere[playerid] = NINCS;
						return 1;
					}
					if(PlayerInfo[Csere[playerid]][pPcarkey] == NINCS)
					{
						MitCsere[playerid] = NINCS;
						Csere[playerid] = NINCS;
						return 1;
					}
					new nev[MAX_PLAYER_NAME], nev2[MAX_PLAYER_NAME];
					Format(nev, "%s", PlayerName(playerid));
					Format(nev2, "%s", PlayerName(player));
					strmid(CarInfo[PlayerInfo[player][pPcarkey]][cOwner], nev, 0, strlen(nev), 25);
					strmid(CarInfo[PlayerInfo[playerid][pPcarkey]][cOwner], nev2, 0, strlen(nev2), 25);
					CarUpdate(PlayerInfo[player][pPcarkey], CAR_Owner);
					CarUpdate(PlayerInfo[playerid][pPcarkey], CAR_Owner);

					CorrectPlayerDatas(playerid);
					CorrectPlayerDatas(player);
					
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Elcserélted a jármûved vele: %s", PlayerName(player));
					SendFormatMessage(player, COLOR_LIGHTGREEN, "* Elcserélted a jármûved vele: %s", PlayerName(playerid));
					MitCsere[playerid] = NINCS;
					Csere[playerid] = NINCS;
				}
				if(MitCsere[playerid] == 2)
				{
					if(PlayerInfo[playerid][pPcarkey2] == NINCS)
					{
						MitCsere[playerid] = NINCS;
						Csere[playerid] = NINCS;
						return 1;
					}
					if(PlayerInfo[Csere[playerid]][pPcarkey2] == NINCS)
					{
						MitCsere[playerid] = NINCS;
						Csere[playerid] = NINCS;
						return 1;
					}
					new nev[MAX_PLAYER_NAME], nev2[MAX_PLAYER_NAME];
					Format(nev, "%s", PlayerName(playerid));
					Format(nev2, "%s", PlayerName(player));
					strmid(CarInfo[PlayerInfo[player][pPcarkey2]][cOwner], nev, 0, strlen(nev), 25);
					strmid(CarInfo[PlayerInfo[playerid][pPcarkey2]][cOwner], nev2, 0, strlen(nev2), 25);
					CarUpdate(PlayerInfo[player][pPcarkey2], CAR_Owner);
					CarUpdate(PlayerInfo[playerid][pPcarkey2], CAR_Owner);

					CorrectPlayerDatas(playerid);
					CorrectPlayerDatas(player);
					
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Elcserélted a jármûved vele: %s", PlayerName(player));
					SendFormatMessage(player, COLOR_LIGHTGREEN, "* Elcserélted a jármûved vele: %s", PlayerName(playerid));
					MitCsere[playerid] = NINCS;
					Csere[playerid] = NINCS;
				}
				if(MitCsere[playerid] == 3)
				{
					if(PlayerInfo[playerid][pPhousekey] == NINCS)
					{
						MitCsere[playerid] = NINCS;
						Csere[playerid] = NINCS;
						return 1;
					}
					if(PlayerInfo[Csere[playerid]][pPhousekey] == NINCS)
					{
						MitCsere[playerid] = NINCS;
						Csere[playerid] = NINCS;
						return 1;
					}
					new nev[MAX_PLAYER_NAME], nev2[MAX_PLAYER_NAME];
					Format(nev, "%s", PlayerName(playerid));
					Format(nev2, "%s", PlayerName(player));
					strmid(HouseInfo[PlayerInfo[player][pPhousekey]][hOwner], nev, 0, strlen(nev), MAX_PLAYER_NAME);
					strmid(HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], nev2, 0, strlen(nev2), MAX_PLAYER_NAME);
					HazUpdate(PlayerInfo[player][pPhousekey], HAZ_Owner);
					HazUpdate(PlayerInfo[playerid][pPhousekey], HAZ_Owner);

					CorrectPlayerDatas(playerid);
					CorrectPlayerDatas(player);
					
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Elcserélted a házad vele: %s", PlayerName(player));
					SendFormatMessage(player, COLOR_LIGHTGREEN, "* Elcserélted a házad vele: %s", PlayerName(playerid));
					MitCsere[playerid] = NINCS;
					Csere[playerid] = NINCS;
				}
				if(MitCsere[playerid] == 4)
				{
					if(PlayerInfo[playerid][pPhousekey2] == NINCS)
					{
						MitCsere[playerid] = NINCS;
						Csere[playerid] = NINCS;
						return 1;
					}
					if(PlayerInfo[Csere[playerid]][pPhousekey2] == NINCS)
					{
						MitCsere[playerid] = NINCS;
						Csere[playerid] = NINCS;
						return 1;
					}
					new nev[MAX_PLAYER_NAME], nev2[MAX_PLAYER_NAME];
					Format(nev, "%s", PlayerName(playerid));
					Format(nev2, "%s", PlayerName(player));
					strmid(HouseInfo[PlayerInfo[player][pPhousekey2]][hOwner], nev, 0, strlen(nev), MAX_PLAYER_NAME);
					strmid(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner], nev2, 0, strlen(nev2), MAX_PLAYER_NAME);
					HazUpdate(PlayerInfo[player][pPhousekey2], HAZ_Owner);
					HazUpdate(PlayerInfo[playerid][pPhousekey2], HAZ_Owner);

					CorrectPlayerDatas(playerid);
					CorrectPlayerDatas(player);
					
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Elcserélted a házad vele: %s", PlayerName(player));
					SendFormatMessage(player, COLOR_LIGHTGREEN, "* Elcserélted a házad vele: %s", PlayerName(playerid));
					MitCsere[playerid] = NINCS;
					Csere[playerid] = NINCS;
				}
				if(MitCsere[playerid] == 5)
				{
					if(PlayerInfo[playerid][pPbiskey] == NINCS)
					{
						MitCsere[playerid] = NINCS;
						Csere[playerid] = NINCS;
						return 1;
					}
					if(PlayerInfo[Csere[playerid]][pPbiskey] == NINCS)
					{
						MitCsere[playerid] = NINCS;
						Csere[playerid] = NINCS;
						return 1;
					}
					new nev[MAX_PLAYER_NAME], nev2[MAX_PLAYER_NAME];
					Format(nev, "%s", PlayerName(playerid));
					Format(nev2, "%s", PlayerName(player));
					strmid(BizzInfo[PlayerInfo[player][pPbiskey]][bOwner], nev, 0, strlen(nev), MAX_PLAYER_NAME);
					strmid(BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], nev2, 0, strlen(nev2), MAX_PLAYER_NAME);
					BizUpdate(PlayerInfo[player][pPbiskey], BIZ_Owner);
					BizUpdate(PlayerInfo[playerid][pPbiskey], BIZ_Owner);
					
					CorrectPlayerDatas(playerid);
					CorrectPlayerDatas(player);
					
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Elcserélted a bizniszed vele: %s", PlayerName(player));
					SendFormatMessage(player, COLOR_LIGHTGREEN, "* Elcserélted a bizniszed vele: %s", PlayerName(playerid));
					MitCsere[playerid] = NINCS;
					Csere[playerid] = NINCS;
				}
				Cselekves(playerid, "elcserélt valamit", 1);
			}
			else return Msg(playerid, "Nem ajánlottak cserét.");
		}
		if(egyezik(param[1], "Jármû") || egyezik(param[1], "Jarmu"))
		{
			if(PlayerInfo[playerid][pPcarkey2] != NINCS)
			{	
				if(params < 2) return Msg(playerid, "/Csere Jármû [1/2]");
			}
			new melyik = strval(param[2]);
			new player;
			player = GetClosestPlayer(playerid);
			
			if(GetDistanceBetweenPlayers(playerid, player) > 2) return Msg(playerid, "A közeledben nincs senki!");
				
			if(IsPlayerNPC(player)) return Msg(playerid, "NPC...");
				
			if(!Logged(player)) return Msg(playerid, "Nincs belépve!");
				
			if(PlayerInfo[playerid][pPcarkey] == NINCS) return Msg(playerid, "Neked nincs jármûved.");
			if(PlayerInfo[player][pPcarkey] == NINCS) return Msg(playerid, "Neki nincs jármûve.");
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Elszeretnéd cserélni vele(%s) a jármûveteket.", PlayerName(player));
			SendFormatMessage(player, COLOR_LIGHTGREEN, "* %s elszeretné cserélni a jármûveteket. (Elfogadás:(/csere elfogad))", PlayerName(playerid));
			Cselekves(playerid, "elszeretné cserélni a jármûvét valakivel.", 1);
			Csere[player] = playerid;
			if(PlayerInfo[playerid][pPcarkey2] != NINCS)
			{
				if(melyik < 1 || melyik > 2) return 1;
				if(melyik == 1)
					MitCsere[player] = 1;
				else
					MitCsere[player] = 2;
					
				return 1;	
			}
			MitCsere[player] = 1;
		}
		if(egyezik(param[1], "Ház") || egyezik(param[1], "Haz"))
		{
			if(PlayerInfo[playerid][pPhousekey2] != NINCS)
			{	
				if(params < 2) return Msg(playerid, "/Csere Ház [1/2]");
			}
			new melyik = strval(param[2]);
			new player;
			player = GetClosestPlayer(playerid);
			
			if(GetDistanceBetweenPlayers(playerid, player) > 2) return Msg(playerid, "A közeledben nincs senki!");
				
			if(IsPlayerNPC(player)) return Msg(playerid, "NPC...");
				
			if(!Logged(player)) return Msg(playerid, "Nincs belépve!");
				
			if(PlayerInfo[playerid][pPhousekey] == NINCS && PlayerInfo[playerid][pPhousekey2] == NINCS) return Msg(playerid, "Neked nincs házad.");
			if(PlayerInfo[player][pPhousekey] == NINCS && PlayerInfo[playerid][pPhousekey2] == NINCS) return Msg(playerid, "Neki nincs háza.");
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Elszeretnéd cserélni vele(%s) a házatok.", PlayerName(player));
			SendFormatMessage(player, COLOR_LIGHTGREEN, "* %s elszeretné cserélni a házatok. (Elfogadás:(/csere elfogad))", PlayerName(playerid));
			Cselekves(playerid, "elszeretné cserélni a házát valakivel.", 1);
			Csere[player] = playerid;
			if(PlayerInfo[playerid][pPhousekey2] != NINCS)
			{
				if(melyik < 1 || melyik > 2) return 1;
				if(melyik == 1)
					MitCsere[player] = 3;
				else
					MitCsere[player] = 4;
					
				return 1;
			}
			MitCsere[player] = 3;
				
		}
		if(egyezik(param[1], "Biznisz"))
		{
			new player;
			player = GetClosestPlayer(playerid);
			
			if(GetDistanceBetweenPlayers(playerid, player) > 2) return Msg(playerid, "A közeledben nincs senki!");
				
			if(IsPlayerNPC(player)) return Msg(playerid, "NPC...");
				
			if(!Logged(player)) return Msg(playerid, "Nincs belépve!");
				
			if(PlayerInfo[playerid][pPbiskey] == NINCS) return Msg(playerid, "Neked nincs bizniszed.");
			if(PlayerInfo[player][pPbiskey] == NINCS) return Msg(playerid, "Neki nincs biznisze.");
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Elszeretnéd cserélni vele(%s) a bizniszeteket.", PlayerName(player));
			SendFormatMessage(player, COLOR_LIGHTGREEN, "* %s elszeretné cserélni a bizniszeteket. (Elfogadás:(/csere elfogad))", PlayerName(playerid));
			Cselekves(playerid, "elszeretné cserélni a bizniszét valakivel.", 1);
			Csere[player] = playerid;
			MitCsere[player] = 5;
		}
	}
	if(egyezik(cmd, "/beépül") || egyezik(cmd, "/beepul"))
	{
		if(!LMT(playerid, LMUNKA_FBI)) return 1;
		if(LMT(playerid, LMUNKA_FBI)) return Msg(playerid, "/pda..");
		if(!Munkarang(playerid, 4)) return Msg(playerid, "Minimum 4es rang.");
		if(LMT(playerid, LMUNKA_FBI) && !PlayerToPoint(30.0, playerid, 285.105, 182.403, 1007.179)) return Msg(playerid, "Az FBI Fõépületében kell lenned.");
		if(params < 1) return Msg(playerid, "/beépül [ruha]");
		new ruha = strval(param[1]);
		if(!IsValidSkin(ruha)) return !Msg(playerid, "Nincs ilyen ruha!");
		SetPlayerSkin(playerid, ruha);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Felvettél egy álruhát.");
		new uzi[128];
		Format(uzi, "HQ: %s felvett egy álruhát.", PlayerName(playerid));
		SendFamilyMessage(LMUNKA_FBI, COLOR_DBLUE, uzi);
	}
	if(egyezik(cmd, "/álnév"))
	{
			if(!LMT(playerid, LMUNKA_FBI) && !Admin(playerid, 1337)) return 1;
			//if(LMT(playerid, LMUNKA_FBI) && !PlayerToPoint(30.0, playerid, 285.105, 182.403, 1007.179)) return Msg(playerid, "Az FBI Fõépületében kell lenned.");
			if(LMT(playerid, LMUNKA_FBI)) return Msg(playerid, "/pda..");
			if(LMT(playerid, LMUNKA_FBI) && !Munkarang(playerid, 4)) return Msg(playerid, "Minimum 4es rang.");
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;

			if(!strlen(result) && PlayerInfo[playerid][pHamisNev] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használata: /álnév [újnév]");
				return 1;
			}

			if(!strlen(result) && PlayerInfo[playerid][pHamisNev] != 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Újra a régi neved van!");
				PlayerInfo[playerid][pHamisNev] = 0;
				return 1;
			}

			if(strlen(result) > MAX_PLAYER_NAME)
			{
				SendFormatMessage(playerid, COLOR_GRAD1, "Maximum %d karakter!", MAX_PLAYER_NAME);
				return 1;
			}

			PlayerInfo[playerid][pHamisNev] = result;
			format(string, sizeof(string), "Az új álneved mostantól %s!", result);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	if(egyezik(cmd, "/benzin"))
	{
		if(params < 1) return Msg(playerid, "/Benzin [Szállítás / Infó / Feltölt]");
		if(egyezik(param[1], "Infó") || egyezik(param[1], "Info"))
		{
			new kocsi = GetClosestVehicle(playerid, false);
			if(GetDistanceToVehicle(playerid, kocsi) > 6.0) return Msg(playerid, "Nincs a közeledben a benzin szállító.");
			if(GetVehicleModel(kocsi) != 584) return Msg(playerid, "Ez nem benzin szállító!");
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[Benzinszállitás]: Benzin mennyiség (literben): %dl/%dl", Benzin[kocsi], MAX_BENZIN_SZALLITAS);
		}
		if(egyezik(param[1], "Szállítás") || egyezik(param[1], "Szallitas"))
		{
			if(!AMT(playerid, MUNKA_KAMIONOS)) return Msg(playerid, "Nem vagy kamionos.");
			new trailer = GetClosestVehicle(playerid, false);
			BenzintSzallit[playerid] = true;
			if(BenzintSzallit[playerid]) 
			{
				new kut = IsAtGasStation(playerid);
				if(kut == NINCS) return Msg(playerid, "Nem vagy benzinkútnál.");
				if(BenzinKutak[kut][bBenzin] == BenzinKutak[kut][bMaxBenzin]) return Msg(playerid, "Ez a benzinkút tele van.");
				if(params < 2) 
				{
					SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: /Benzin Szállítás [Liter(1-%d)]", Benzin[trailer]);
					return 1;
				}
				new liter = strval(param[2]);
				if(liter < 1 || liter > Benzin[trailer])
				{
					SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: /Benzin Szállítás [Liter(1-%d)]", Benzin[trailer]);
					return 1;
				}
				if((BenzinKutak[kut][bBenzin] + liter) > BenzinKutak[kut][bMaxBenzin])
				{
					SendFormatMessage(playerid, COLOR_LIGHTRED, "* A kútban %d/%d liter benzin van, a cég nem engedi hogy többet tölts!", BenzinKutak[kut][bBenzin], BenzinKutak[kut][bMaxBenzin]);
					return 1;
				}
				BenzinKutak[kut][bBenzin] += liter;
				Benzin[trailer] -= liter;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* A cég felvásárolt %d liter benzint. Benzinmennyiség: %dl/10000l", liter, BenzinKutak[kut][bBenzin]);
				new szorzo = Rand(1, 3);
				new mennyitszoroz = Rand(200, 350);
				new cash = (liter * mennyitszoroz * szorzo);
				format(string, sizeof(string), "~g~~h~+%dFt", cash);
				GameTextForPlayer(playerid, string, 5000, 1);
				PlayerInfo[playerid][pPayCheck] += cash;
		
					
				return 1;
			}
			if(!PlayerToPoint(10.0, playerid, -2535.1458,1829.7527,8.4020))
			{
				Msg(playerid, "Térképed jelzi hol kell felvenni.");
				SetPlayerCheckpoint(playerid, -2535.1458,1829.7527,8.4020, 10.0);
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy jármûben.");
			new kocsi = GetPlayerVehicleID(playerid);
			if(!IsATruck(kocsi)) return Msg(playerid, "Kamionban kell lenned.");
			if(GetDistanceToVehicle(playerid, trailer) > 13) return Msg(playerid, "Vedd fel a benzines tartájt.");
			if(GetVehicleModel(trailer) != 584) return Msg(playerid, "Ez nem benzin szállító!");
			if(Benzin[trailer] < 1) return Msg(playerid, "Nincs feltöltve a szállító, töltsd fel. (/benzin feltölt)");
			BenzintSzallit[playerid] = true;
			Msg(playerid, "Vidd valamelyik benzinkúthoz és írd be újra a parancsot(/benzin szállítás)");
		}
		if(egyezik(param[1], "feltölt"))
		{
			if(!AMT(playerid, MUNKA_KAMIONOS)) return Msg(playerid, "Nem vagy kamionos.");
			if(!PlayerToPoint(10.0, playerid, -2535.1458,1829.7527,8.4020))
			{
				Msg(playerid, "Térképed jelzi hol kell felvenni.");
				SetPlayerCheckpoint(playerid, -2535.1458,1829.7527,8.4020, 10.0);
				return 1;
			}
			if(params < 2)
			{
				SendFormatMessage(playerid,  COLOR_LIGHTRED, "[Gates]: /benzin Feltölt [Liter(1-%d)]", MAX_BENZIN_SZALLITAS);
				return 1;
			}
			new trailer = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, trailer) > 6.0) return Msg(playerid, "Álj a trailerhez");
			if(GetVehicleModel(trailer) != 584) return Msg(playerid, "Ez nem benzin szállító!");
			if(Benzin[trailer] > MAX_BENZIN_SZALLITAS) return Msg(playerid, "A tartály tele van");
			new liter = strval(param[2]);
			if(liter < 1 || liter > MAX_BENZIN_SZALLITAS) return Msg(playerid, "Hibás liter szám.");
			new penz = (liter * 190);
			if((Benzin[trailer] + liter) > MAX_BENZIN_SZALLITAS) return Msg(playerid, "Ennyi benzin nem fér bele.");
			GiveMoney(playerid, -penz);
			Freeze(playerid, 300);
			Benzin[trailer] += liter;
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "[Benzinszállitás]: Feltöltve: %dl benzin | Ára: %d Forint | Benzin(trailerben): %dl/500l", liter, penz, Benzin[trailer]);
			Msg(playerid, "Ne felejtsd el aláirni a papirokat amint feltöltötted a traileredet!! /benzin szállitás");
		}
	}
	if(egyezik(cmd, "/benzinkút") || egyezik(cmd, "/benzinkut"))
	{
		if(!Admin(playerid, 1337))
		{
			if(params < 1)
			{
				Msg(playerid, "/Benzinkút [Funkció]");
				Msg(playerid, "Funkció(k): szint, bevétel, infó, adat, bérlés");
				return 1;
			}
		}
		else
		{
			if(params < 1)
			{
				Msg(playerid, "/Benzinkút [Funkció]");
				Msg(playerid, "Funkció(k): Áthelyez, Go, Infó, aInfó, bérlés,  || resi - NE HASZNÁLD HA NEM TUDOD MIRE JÓ");
				Msg(playerid, "RayW edit: szint, bevétel, jövedelem, infó2");
				return 1;
			}
		}
	
		if(egyezik(param[1], "infó2") || egyezik(param[1], "info2"))
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "============[ Benzinkút Információk II ]============");
			SendClientMessage(playerid, COLOR_WHITE, "/benzinkút bevétel -- bekapcsolja a bevétel logolását");
			SendClientMessage(playerid, COLOR_WHITE, "/benzinkút jövedelem -- bekapcsolja a jövedelem rendszert");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "=========[ Benzinkút Jövedelem/Szint rendszer ]=========");
			SendClientMessage(playerid, COLOR_WHITE, "Benzinkút szintjétõl függõen X bevételt kapsz 30 másodpercenként");
			SendClientMessage(playerid, COLOR_WHITE, "A fejlesztések ára a benzinkút szintjétõl függ!");
			SendClientMessage(playerid, COLOR_WHITE, "Negativumként 3 percenként csökken a benzin mennyisége.");
			SendClientMessage(playerid, COLOR_WHITE, "Maximális benzinkút szint: 10lvl");
		}
		if(egyezik(param[1], "jövedelem"))
		{
			new bid = IsAtGasStation(playerid);
			if(bid == NINCS) return Msg(playerid, "Nem vagy benzinkútnál.");
			if(!egyezik(PlayerName(playerid), BenzinKutak[bid][bBerlo]) && !egyezik(PlayerName(playerid), BizzInfo[BIZ_OLAJ][bOwner]) && !egyezik(PlayerName(playerid), BizzInfo[BIZ_OLAJ][bExtortion])) return Msg(playerid, "Ez a benzinkút nem a tiéd, vagy nincs benzinkutad..");
			
			if(benzinkutjovedelem[playerid] == 0)
			{
				benzinkutjovedelem[playerid] = 1;
				SendClientMessage(playerid, COLOR_GREY, "[Benzinkút] Bekapcsoltad a benzinkút jövedelem rendszerét..!");
				SendClientMessage(playerid, COLOR_GREY, "[Benzinkút] /benzinkút infó2 - bõvebb leirás");
			}
			else
			{
				benzinkutjovedelem[playerid] = 0;
				SendClientMessage(playerid, COLOR_GREY, "[Benzinkút] Kikapcsoltad a benzinkút jövedelmét!");
			}
		}
		if(egyezik(param[1], "bevétel"))
		{
			new bid = IsAtGasStation(playerid);
			if(bid == NINCS) return Msg(playerid, "Nem vagy benzinkútnál.");
			if(!egyezik(PlayerName(playerid), BenzinKutak[bid][bBerlo]) && !egyezik(PlayerName(playerid), BizzInfo[BIZ_OLAJ][bOwner]) && !egyezik(PlayerName(playerid), BizzInfo[BIZ_OLAJ][bExtortion])) return Msg(playerid, "Ez a benzinkút nem a tiéd, vagy nincs benzinkutad..");
				
			if(benzinkutjovedelem[playerid] == 1)
			{
				if(benzinkutlogolas[playerid] == 0)
				{
					benzinkutlogolas[playerid] = 1;
					SendClientMessage(playerid, COLOR_GREY, "[Benzinkútlog] Bekapcsoltad a bevétel logolását, 30 másodpercenként kapod az értesitést!");
					SendClientMessage(playerid, COLOR_GREY, "[Benzinkútlog] Értesitést csak akkor kapsz ha közel vagy a benzinkutadhoz!");
				}
				else
				{
					benzinkutlogolas[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREY, "[Benzinkútlog] Kikapcsoltad a bevétel logolást!");
				}
			}
			else
			{
				Msg(playerid, "Elõször a jövedelem rendszert kapcsold be! (/benzinkút jövedelem)");
			}
		}
		if(egyezik(param[1],"szint"))
		{
			if(params < 2) return Msg(playerid, "/benzinkút szint [fejleszt / ara / leirás]");
			if(egyezik(param[2], "fejleszt"))
			{
				new bid = IsAtGasStation(playerid);
				if(bid == NINCS) return Msg(playerid, "Nem vagy benzinkútnál.");
				if(!egyezik(PlayerName(playerid), BenzinKutak[bid][bBerlo]) && !egyezik(PlayerName(playerid), BizzInfo[BIZ_OLAJ][bOwner]) && !egyezik(PlayerName(playerid), BizzInfo[BIZ_OLAJ][bExtortion]) && !IsScripter(playerid)) return Msg(playerid, "Ez a benzinkút nem a tiéd.");
				
				if(BenzinKutak[bid][bSzint] == 10) return SendClientMessage(playerid, COLOR_YELLOW, "Elérted a maximális benzinkút szintet! (Max lvl10)");
				
				new mennyibe;
				new szintje;
				switch(BenzinKutak[bid][bSzint])
				{
					case 0: { mennyibe = 5000000; szintje = 1; }
					case 1: { mennyibe = 15000000; szintje = 2; }
					case 2: { mennyibe = 30000000; szintje = 3; }
					case 3: { mennyibe = 60000000; szintje = 4; }
					case 4: { mennyibe = 100000000; szintje = 5; }
					case 5: { mennyibe = 130000000; szintje = 6; }
					case 6: { mennyibe = 160000000; szintje = 7; }
					case 7: { mennyibe = 200000000; szintje = 8; }
					case 8: { mennyibe = 240000000; szintje = 9; }
					case 9: { mennyibe = 300000000; szintje = 10; }
				}
				if(PlayerInfo[playerid][pAccount] < mennyibe) return Msg(playerid, "Nincs elég pénzed!");
			
				PlayerInfo[playerid][pAccount] -= mennyibe;
				BenzinKutak[bid][bSzint] = szintje;
				SendClientMessage(playerid, COLOR_WHITE, "Fejlesztés: Sikeresen fejlesztetted a benzinkutadat!");
				SendFormatMessage(playerid, COLOR_WHITE, "Fejlesztés: Új szint: %dlvl | Ennyibe került: %dFt", szintje, mennyibe);
				SaveBenzinKutak();
			}
			if(egyezik(param[2], "ara") || egyezik(param[2], "ára"))
			{
				new bid = IsAtGasStation(playerid);
				if(bid == NINCS) return Msg(playerid, "Nem vagy benzinkútnál.");
				if(!egyezik(PlayerName(playerid), BenzinKutak[bid][bBerlo]) && !egyezik(PlayerName(playerid), BizzInfo[BIZ_OLAJ][bOwner]) && !egyezik(PlayerName(playerid), BizzInfo[BIZ_OLAJ][bExtortion]) && !IsScripter(playerid)) return Msg(playerid, "Ez a benzinkút nem a tiéd.");
				
				new mennyiazara;
				switch(BenzinKutak[bid][bSzint])
				{
					case 0: mennyiazara = 5000000;
					case 1: mennyiazara = 15000000;
					case 2: mennyiazara = 30000000;
					case 3: mennyiazara = 60000000;
					case 4: mennyiazara = 100000000;
					case 5: mennyiazara = 130000000;
					case 6: mennyiazara = 160000000;
					case 7: mennyiazara = 200000000;
					case 8: mennyiazara = 240000000;
					case 9: mennyiazara = 300000000;
					case 10: SendClientMessage(playerid, COLOR_YELLOW, "Fejlesztés: Elérted a maximális benzinkút szintet! (max 10lvl)");
				}
				SendFormatMessage(playerid, COLOR_WHITE, "Fejlesztés: Következõ szint ára: %dFt", mennyiazara);
			}
			if(egyezik(param[2], "leirás") || egyezik(param[2], "leiras"))
			{
			
			}
		}
		if(egyezik(param[1], "resi"))
		{
			for(new b = 0; b < MAX_BENZINKUT; b++)
			{
					new benyaneve[32] = "Benzinkut";
					new benyaberlo[32] = "NINCS";
					BenzinKutak[b][bMaxBenzin] = 10000;
					BenzinKutak[b][bBenzin] = 500;
					BenzinKutak[b][bSzint] = 0;
					BenzinKutak[b][bBenzinAra] = 200;
					strmid(BenzinKutak[b][bNev], benyaneve, 0, strlen(benyaneve), 255);
					strmid(BenzinKutak[b][bBerlo], benyaberlo, 0, strlen(benyaberlo), 255);
					Msg(playerid, "Benzinkutak nullázva..");
					SaveBenzinKutak();
			}
		}
		if(egyezik(param[1], "adat"))
		{
			new bid = IsAtGasStation(playerid);
			if(bid == NINCS) return Msg(playerid, "Nem vagy benzinkútnál.");
			if(!egyezik(PlayerName(playerid), BenzinKutak[bid][bBerlo]) && !egyezik(PlayerName(playerid), BizzInfo[BIZ_OLAJ][bOwner]) && !egyezik(PlayerName(playerid), BizzInfo[BIZ_OLAJ][bExtortion]) && !IsScripter(playerid)) return Msg(playerid, "Ez a benzinkút nem a tiéd.");
			if(params < 2) return Msg(playerid, "/Benzinkút adat [Név / Széf / Ár]");
			if(egyezik(param[2], "benzin"))
			{
				if(!Admin(playerid, 1339)) return 1;
				if(params < 3) return Msg(playerid, "/Benzinkút adat benzin [liter]");
				new liter = strval(param[3]);
				if(liter < 0 || liter > 5000) return 1;
				BenzinKutak[bid][bBenzin] = liter;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Liter szám átírva - %dl", liter);
			}
			if(egyezik(param[2], "ár"))
			{
				if(params < 3)
				{
					Msg(playerid, "/Benzinkút adat ár [összeg]");
					SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Jelenleg %dFt a benzinára.", BenzinKutak[bid][bBenzinAra]);
					return 1;
				}
				new osszeg = strval(param[3]);
				if(osszeg < 200 || osszeg > 400) return Msg(playerid, "Minimum 200Ft, Maximum 400Ft.");
				BenzinKutak[bid][bBenzinAra] = osszeg;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* A benzin ára most már %dFt", BenzinKutak[bid][bBenzinAra]);
				SaveBenzinKutak();
			}
			if(egyezik(param[2], "Széf"))
			{
				if(params < 4)
				{
					Msg(playerid, "/Benzinkút adat széf [be / ki] [összeg]");
					SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Jelenleg %dFt van benne.", BenzinKutak[bid][bSzef]);
					SaveBenzinKutak();
					return 1;
				}
				new osszeg = strval(param[4]);
				if(osszeg < 1) return Msg(playerid, "Te mit csinálsz??");
				if(egyezik(param[3], "be"))
				{
					if(GetMoney(playerid) < osszeg) return Msg(playerid, "Nincs elég pénzed.");
					GiveMoney(playerid, -osszeg);
					BenzinKutak[bid][bSzef] += osszeg;
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Beraktál a széfbe %dFt-ot, most %dFt van benne.", osszeg, BenzinKutak[bid][bSzef]);
					SaveBenzinKutak();
				}
				if(egyezik(param[3], "ki"))
				{
					if(BenzinKutak[bid][bSzef] < osszeg) return Msg(playerid, "Nincs elég pénz a széfben.");
					GiveMoney(playerid, osszeg);
					BenzinKutak[bid][bSzef] -= osszeg;
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Kivettél a széfbõl %dFt-ot, most %dFt van benne.", osszeg, BenzinKutak[bid][bSzef]);
					SaveBenzinKutak();
				}
			}
			if(egyezik(param[2], "Név"))
			{
				if(params < 3)
				{
					Msg(playerid, "/Benzinkút adat név [név]");
					SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Jelenleg %s a neve.", BenzinKutak[bid][bNev]);
					return 1;
				}
				strtok(cmdtext, idx); strtok(cmdtext, idx);
		
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(SpecKarakterek(result, ","))
					return Msg(playerid, "A névben nem lehet vesszõ!");
					
				strmid(BenzinKutak[bid][bNev], result, 0, strlen(result), 255);
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Benzinkút neve %s lett.", result);
				SaveBenzinKutak();
			}
		}
		if(egyezik(param[1], "bérlés"))
		{
			if(params < 2) return Msg(playerid, "/benzinkút bérlés [kiad/felmond]");
			new bid = IsAtGasStation(playerid);
			if(bid == NINCS) return Msg(playerid, "Nem vagy benzinkútnál.");
			if(egyezik(param[2], "kiad"))
			{
				if(strlen(BenzinKutak[bid][bBerlo]) == NINCS)
				{
					if(params < 3) return Msg(playerid, "/benzinkút bérlés kiad [játékos]");
					new player = ReturnUser(param[3]);
					if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
					if(GetDistanceBetweenPlayers(playerid, player) > 2)
						return Msg(playerid, "Nincs a közeledben!");
					strmid(BenzinKutak[bid][bBerlo], PlayerName(player), 0, strlen(PlayerName(player)), 255);
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Bérbe adtad ezt a benzinkútat neki: %s", PlayerName(player));
					SendClientMessage(player, COLOR_LIGHTGREEN, "* Te lettél ennek a benzinkútnak a tulaja.");
					SaveBenzinKutak();
				}
				else
				{
					Msg(playerid, "Ezt a benzinkútat már bérlik.");
				}
			}
			if(egyezik(param[2], "felmond"))
			{
				if(strlen(BenzinKutak[bid][bBerlo]) < 1) return Msg(playerid, "Ezt a benzinkútat nem bérlik.");
				if(!Online(BenzinKutak[bid][bBerlo])) return Msg(playerid, "A játékos nem online.");
				new player = ReturnUser(BenzinKutak[bid][bBerlo]);
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Felbontottad a szerzõdést, a bérlõ %s volt.", BenzinKutak[bid][bBerlo]);
				SendFormatMessage(player, COLOR_YELLOW, "SMS: %s tulaja/másodtulaja felbontotta a szerzõdést veled. Feladó: %s", BizzInfo[BIZ_OLAJ][bMessage], BizzInfo[BIZ_OLAJ][bMessage]);
				strmid(BenzinKutak[bid][bBerlo], PlayerName(playerid), 0, 1, 255);
				SaveBenzinKutak();
			}
			if(egyezik(param[2], "afelmond"))
			{
				if(strlen(BenzinKutak[bid][bBerlo]) < 1) return Msg(playerid, "Ezt a benzinkútat nem bérlik.");
				//if(!Online(BenzinKutak[bid][bBerlo])) return Msg(playerid, "A játékos nem online.");
				//new player = ReturnUser(BenzinKutak[bid][bBerlo]);
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Felbontottad a szerzõdést, a bérlõ %s volt.", BenzinKutak[bid][bBerlo]);
				//SendFormatMessage(player, COLOR_YELLOW, "SMS: %s tulaja/másodtulaja felbontotta a szerzõdést veled. Feladó: %s", BizzInfo[BIZ_OLAJ][bMessage], BizzInfo[BIZ_OLAJ][bMessage]);
				strmid(BenzinKutak[bid][bBerlo], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 255);
				SaveBenzinKutak();
			}
		}
		if(egyezik(param[1], "Info") || egyezik(param[1], "Infó"))
		{
			new b = 0;
			for(new k = 0; k < MAX_BENZINKUT; k++)
			{
				if(PlayerToPoint(BenzinKutak[k][bTav], playerid, BenzinKutak[k][bPosX], BenzinKutak[k][bPosY], BenzinKutak[k][bPosZ]))
				{
					b = 1;
					SendFormatMessage(playerid, COLOR_WHITE, "============[ %s ]============", BenzinKutak[k][bNev]);
					if(strlen(BenzinKutak[k][bBerlo]) < 1) 
						SendFormatMessage(playerid, COLOR_LIGHTGREEN, "** Tulajdonos: %s - Ár: %dFt/liter **", BizzInfo[BIZ_OLAJ][bOwner], BenzinKutak[k][bBenzinAra]);
					else
						SendFormatMessage(playerid, COLOR_LIGHTGREEN, "** Tulajdonos: %s - Ár: %dFt/liter **", BenzinKutak[k][bBerlo], BenzinKutak[k][bBenzinAra]);
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "** Benzin mennyiség: %dl/%dl **", BenzinKutak[k][bBenzin], BenzinKutak[k][bMaxBenzin]);
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "** Benzinkút szintje: %dlvl **", BenzinKutak[k][bSzint]);
					return 1;
				}
			}
			if(b < 1) return Msg(playerid, "Nem vagy benzinkútnál.");
		}
		if(egyezik(param[1], "aInfo") || egyezik(param[1], "aInfó"))
		{
			if(!Admin(playerid, 1337)) return 1;
			if(params < 2) return Msg(playerid, "/Benzinkút aInfó [Benzinkút ID]");
			new bid = strval(param[2]);
			if(bid < 0 || bid > MAX_BENZINKUT)
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Az ID nem lehet kissebb mint 0, és nem lehet nagyobb mint %d", MAX_BENZINKUT);
				return 1;
			}
			SendFormatMessage(playerid, COLOR_LIGHTRED, "============[Benzinkút Infó - %s]============", BenzinKutak[bid][bNev]);
			if(strlen(BenzinKutak[bid][bBerlo]) < 1) 
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Tulaj: %s - %dFt/liter", BizzInfo[BIZ_OLAJ][bOwner], BenzinKutak[bid][bBenzinAra]);
				else
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Tulaj: %s - %dFt/liter", BenzinKutak[bid][bBerlo], BenzinKutak[bid][bBenzinAra]);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* A kúton %d/%d liter benzin van.", BenzinKutak[bid][bBenzin], BenzinKutak[bid][bMaxBenzin]);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Koordínáta: X: %f | Y: %f | Z: %f | HatóTávolság: %f", BenzinKutak[bid][bPosX], BenzinKutak[bid][bPosY], BenzinKutak[bid][bPosZ], BenzinKutak[bid][bTav]);
		}
		if(egyezik(param[1], "áthelyez") || egyezik(param[1], "athelyez"))
		{
			if(!Admin(playerid, 1337)) return 1;
			if(params < 3)
			{
				Msg(playerid, "/Benzinkút Áthelyez [Benzinkút ID] [HatóTávolság]");
				Msg(playerid , "Milyelött átrakod, nézd meg hogy nem-e van már valahova lerakva! (/benzinkút go id)");
				Msg(playerid , "Átlagos távolság: 5-10");
				return 1;
			}
			new bid = strval(param[2]);
			new Float:tav = strval(param[3]);
			if(tav < 1) return Msg(playerid, "A távolság nem lehet kissebb mint 1.");
			if(bid < 0 || bid > MAX_BENZINKUT)
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Az ID nem lehet kissebb mint 0, és nem lehet nagyobb mint %d", MAX_BENZINKUT);
				return 1;
			}
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			BenzinKutak[bid][bPosX] = X;
			BenzinKutak[bid][bPosY] = Y;
			BenzinKutak[bid][bPosZ] = Z;
			BenzinKutak[bid][bTav] = tav;
			ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s lerakott/áthelyezett egy benzinkútat >>", AdminName(playerid));
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* %d számú benzinkút átrakva! (Koordínáta: X: %f | Y: %f | Z: %f | HatóTávolság: %f)", bid, X, Y, Z, tav);
			SaveBenzinKutak();
		}
		if(egyezik(param[1], "Go"))
		{
			if(!Admin(playerid, 1337)) return 1;
			if(params < 2) return Msg(playerid, "/Benzinkút Go [Benzinkút ID]");
			new bid = strval(param[2]);
			if(bid < 0 || bid > MAX_BENZINKUT)
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Az ID nem lehet kissebb mint 0, és nem lehet nagyobb mint %d", MAX_BENZINKUT);
				return 1;
			}
			SetPlayerPos(playerid,  BenzinKutak[bid][bPosX], BenzinKutak[bid][bPosY], BenzinKutak[bid][bPosZ]);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Teleportálva a %d számú benzinkúthoz.. (Koordínáta: X: %f | Y: %f | Z: %f | HatóTávolság: %f)", bid, BenzinKutak[bid][bPosX], BenzinKutak[bid][bPosY], BenzinKutak[bid][bPosZ], BenzinKutak[bid][bTav]);
		}
	}
	
	//===================== PÉNZ LEKÖTÉS =====================
	if(egyezik(cmd, "/betétlekötés"))
	{
		if(params < 1)
		{
			Msg(playerid, "/betétlekötés [leköt / kivesz / futamidõ / infó]");
			return 1;
		}
		
		if(egyezik(param[1], "leköt"))
		{
			if(PlayerInfo[playerid][pLekotottpenz] == 0)
			{
				if(params < 2) return Msg(playerid, "/betétlekötés leköt [MENNYIT?]");
				new mennyit = strval(param[2]);
				
				if(PlayerInfo[playerid][pAccount] < mennyit) return Msg(playerid, "Nincs ennyi pénzed..");
				
				if(mennyit < 100000 || mennyit >= 50000000) return Msg(playerid, "Minimum 100.000Ft és maximum 50millió Ft.");
				
				if(params < 3) return Msg(playerid, "/betétlekötés leköt mennyit futamidõ");
				//SendFormatMessage(playerid, COLOR_LIGHTRED, "/betétlekötés leköt %d [futamidõ] (hány fizetésre)", mennyit);
				new futamideje = strval(param[3]);
				
				if(futamideje < 1 || futamideje >= 10) return Msg(playerid, "Minimum 1 fizetés és maximum 10 fizetésre kérhetsz futamidõt!");
				//SendFormatMessage(playerid, COLOR_LIGHTRED, "Minimum 1 fizetés és maximum 10 fizetésre kérhetsz futamidõt! Hibás: %d", futamideje);
				
				//========= ha minden sikeres =========
				PlayerInfo[playerid][pLekotottpenz] = mennyit;
				PlayerInfo[playerid][pAccount] -= mennyit;
				PlayerInfo[playerid][pFutamido] = futamideje;
				SendFormatMessage(playerid, COLOR_WHITE, "[Betétlekötés]: Lekötött pénz: %d Forint. | Futamidõ: %d fizetés", mennyit, futamideje);
			}
			else
			{
				Msg(playerid, "Már kötöttél szerzõdést a bankkal..");
			}
		}
		if(egyezik(param[1], "futamidõ"))
		{
			if(PlayerInfo[playerid][pLekotottpenz] != 0)
			{
				SendFormatMessage(playerid, COLOR_WHITE, "[Betétlekötés]: Futamidõd: %d fizetés", PlayerInfo[playerid][pFutamido]);
				SendFormatMessage(playerid, COLOR_WHITE, "[Betétlekötés]: Pénz kivételénél %d forintot kapnál vissza!", PlayerInfo[playerid][pLekotottpenz]/3);
			}
			else
			{
				Msg(playerid, "Nem kötöttél még szerzõdést a bankkal..");
			}
		}
		if(egyezik(param[1], "kivesz"))
		{
			if(PlayerInfo[playerid][pLekotottpenz] != 0)
			{
				new megkapja = PlayerInfo[playerid][pLekotottpenz]/3;
				PlayerInfo[playerid][pAccount] += megkapja;
				SendFormatMessage(playerid, COLOR_WHITE, "[Betétlekötés]: Visszakapott pénz: %d Forint.", megkapja);
				PlayerInfo[playerid][pFutamido] = 0;
				PlayerInfo[playerid][pLekotottpenz] = 0;
			}
			else
			{
				Msg(playerid, "Nem kötöttél még szerzõdést a bankkal..");
			}
		}
		if(egyezik(param[1], "infó"))
		{
			SendClientMessage(playerid, COLOR_WHITE, "=========[ INFORMÁCIÓ=========");
			SendClientMessage(playerid, COLOR_GREY, "Pénz lekötése: Lekötsz X pénzt, azt elveszi tõled a rendszer, és helyette fizetéseknél + kamatot kapsz.");
			SendClientMessage(playerid, COLOR_GREY, "Pénz kivétele: A lekötött pénzed 1/3-át kapod vissza. Tehát 100.000ft esetében 33.333ft");
			SendClientMessage(playerid, COLOR_GREY, "Futamidõ: Fizetésekben méri, tehát 2 óránként.");
		}
	}
			
	
	/*if(egyezik(cmd, "/cég"))
	{
		if(params < 1)
		{
			Msg(playerid, "/cég [létrehoz / adat / infó]");
			return 1;
		}
		
		if(egyezik(param[1], "létrehoz"))
		{
			foreach(Cegek, b)
			{
				if(egyezik(PlayerName(playerid), Ceg[b][cTulaj]))
				{
					Msg(playerid, "Már van céged!");
				}
			}
			if(GetMoney(playerid) < 10000000) return Msg(playerid, "Nincs elég pénzed! (10 millió forint)");
			
			new cegid = strval(param[2]);
			if(params < 2)
			{
				Msg(playerid, "/cég létrehoz [cégid] [neve]");
				Msg(playerid, "Cég ID: 1-20");
				return 1;
			}
			if(cegid < 1 || cegid >= MAX_CEG) return Msg(playerid, "Hibás Cég ID..");
			
			if(params < 3)
			{
				Msg(playerid, "/cég létrehoz cégid [neve]");
				return 1;
			}
			strtok(cmdtext, idx); strtok(cmdtext, idx);
		
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(SpecKarakterek(result, ","))
					return Msg(playerid, "A névben nem lehet vesszõ!");
					
				
			//new cegnev = strval(param[3]);
			//if(cegnev < 3 || cegnev >= 64) return Msg(playerid, "Legalább 3 karakterû és maximum 64 lehet.");
			
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			
			strmid(Ceg[cegid][cNev], result, 0, strlen(result), 255);
			strmid(Ceg[cegid][cTulaj], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 255);
			Ceg[cegid][cSzint] = 1;
			Ceg[cegid][cSzef] = 0;
			Ceg[cegid][cPosX] = X;
			Ceg[cegid][cPosY] = Y;
			Ceg[cegid][cPosZ] = Z;
			GiveMoney(playerid, -10000000);
			
			new cegiras[512];
			format(cegiras, sizeof(cegiras), "%s\nTulajdonos: %s\nFejlesztségi szintje: %d", Ceg[cegid][cNev], Ceg[cegid][cTulaj], Ceg[cegid][cSzint]);
			cegtextek[idx] = Create3DTextLabel(cegiras, 0x22AAFFFF, Ceg[cegid][cPosX], Ceg[cegid][cPosY], Ceg[cegid][cPosZ]+0.5, 25.0, 0, 0);
			cegpickup[idx] = CreateDynamicMapIcon(Ceg[cegid][cPosX], Ceg[cegid][cPosY], Ceg[cegid][cPosZ], 41, 0, NINCS, NINCS, NINCS, 300.0);
			
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Cég Információ]: Sikeresen elinditottad a saját cégedet!");
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "[Cég Információ]: Cégnév: %s | Tulajdonos: %s | Cég Fejlesztségi szintje: %dlvl", Ceg[cegid][cNev], Ceg[cegid][cTulaj], Ceg[cegid][cSzint]);
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "[Cég Információ]: Cég kasszájában található pénz: %d", Ceg[cegid][cSzef]);
			SendFormatMessage(playerid, COLOR_GREY, "Céged poziciója: X: %d | Y: %d | Z: %d", X, Y, Z);
			
			SaveCeg();
		}
		foreach(Cegek, b)
		{
			if(egyezik(PlayerName(playerid), Ceg[b][cTulaj]))
			{
				if(egyezik(param[1], "adat"))
				{
					if(params < 2)
					{
						Msg(playerid, "/cég adat [név / hely]");
						return 1;
					}
					
						if(PlayerToPoint(2, playerid, Ceg[b][cPosX], Ceg[b][cPosY], Ceg[b][cPosZ]) && egyezik(PlayerName(playerid), Ceg[b][cTulaj]))
						{
							if(egyezik(param[2], "név"))
							{
								strtok(cmdtext, idx); strtok(cmdtext, idx);
		
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[64];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(SpecKarakterek(result, ","))
								return Msg(playerid, "A névben nem lehet vesszõ!");
							
								strmid(Ceg[b][cNev], result, 0, strlen(result), 255);
								
								SendFormatMessage(playerid, COLOR_LIGHTBLUE, "[Cég Információ]: Megváltoztattad a céged nevét: %s", Ceg[b][cNev]);
								
								SaveCeg();
							}
						}
					if(egyezik(param[2], "hely"))
					{
								if(params < 3)
								{
									Msg(playerid, "/cég adat hely [jelenlegi / áthelyez]");
									return 1;
								}
					
								if(egyezik(param[3], "jelenlegi"))
								{
									SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Cég Információ]: Céged jelenlegi székhelye jelölve a térképen!");
									SetPlayerCheckpoint(playerid, Ceg[b][cPosX], Ceg[b][cPosY], Ceg[b][cPosZ], 5);
								}
								if(egyezik(param[3], "áthelyez"))
								{
									new Float:cX, Float:cY, Float:cZ;
									GetPlayerPos(playerid, cX, cY, cZ);
										
									Ceg[b][cPosX] = cX;
									Ceg[b][cPosY] = cY;
									Ceg[b][cPosZ] = cZ;
												
									SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Cég Információ]: Megváltoztattad a céged székhelyét!");
									SendFormatMessage(playerid, COLOR_GREY, "Céged új poziciója: X: %d | Y: %d | Z: %d", cX, cY, cZ);
												
									SaveCeg();
								}
					}
					
				}
			}
			else
			{
				Msg(playerid, "Nincs céged!");
			}
		}
	}
*/
	if(egyezik(cmd, "/atm"))
	{
		if(!IsScripter(playerid)) return 1;
		if(params < 1)
		{
			Msg(playerid, "/atm [funkció]");
			Msg(playerid, "Funkciók: Go, pos");
			Msg(playerid, "RayW edit: /atm make");
			return 1;
		}
		if(egyezik(param[1], "make"))
		{
				//if(ATM[atmid][aPosX] != 0 && PlayerInfo[playerid][pAdmin] >= 1338) return Msg(playerid, "Ezt már lerakták. Ha tényleg ezt akarod elõbb töröld ki!");
				new Float:X, Float:Y, Float:Z, Float:A;
				GetPlayerPos(playerid, X, Y, Z);
				GetPlayerFacingAngle(playerid, A);
				new atmid = strval(param[2]);

				if(atmid < 0 || atmid >= MAX_ATM) return Msg(playerid, "Hibás ATM ID.");
				if(params < 2)
				{
					if(atmid == NINCS) return Msg(playerid, "Nincs szabad hely!");
				}
				
				ATM[atmid][aPosX] = X;
				ATM[atmid][aPosY] = Y;
				ATM[atmid][aPosZ] = Z;
				ATM[atmid][aPosA] = A;
				if(ATM[atmid][aObjectID] > 0)
					if(IsValidDynamicObject(ATM[atmid][aObjectID])) DestroyDynamicObject(ATM[atmid][aObjectID]), ATM[atmid][aObjectID]=INVALID_OBJECT_ID;
				ATM[atmid][aObjectID] = CreateDynamicObject(2942, X, Y, Z-0.3, 0.0, 0.0, ATM[atmid][aPosA]);

				SendFormatMessage(playerid,  COLOR_LIGHTGREEN, "* ATM lerakva. (ID: %d - Koordínáta: X: %.2f | Y: %.2f | Z: %.2f | A: %.2f ", atmid, ATM[atmid][aPosX], ATM[atmid][aPosY], ATM[atmid][aPosZ], ATM[atmid][aPosA]);
				atmtextek[idx] = Create3DTextLabel("Bankautomata", 0x22AAFFFF, ATM[atmid][aPosX], ATM[atmid][aPosY], ATM[atmid][aPosZ]+0.5, 25.0, 0, 0);
				atmpickup[idx] = CreateDynamicMapIcon(ATM[atmid][aPosX], ATM[atmid][aPosY], ATM[atmid][aPosZ], 52, 0, NINCS, NINCS, NINCS, 300.0);
				
				Streamer_Update(playerid);
				SetPlayerPos(playerid, X, Y, Z+2.0);
				SaveATM();
		}
		if(egyezik(param[1], "go"))
		{
			if(params < 2) return Msg(playerid, "/atm go [ATM ID]");
			new atmid = strval(param[2]);
			if(atmid < 0 || atmid > MAX_ATM) return Msg(playerid, "Hibás ATM ID.");
			SetPlayerPos(playerid, ATM[atmid][aPosX], ATM[atmid][aPosY], ATM[atmid][aPosZ]);
			SendFormatMessage(playerid,  COLOR_LIGHTGREEN, "* Teleportáltál az ATM-hez. (ID: %d - Koordínáta: X: %f | Y: %f | Z: %f) ", atmid, ATM[atmid][aPosX], ATM[atmid][aPosY], ATM[atmid][aPosZ]);
		}
		if(egyezik(param[1], "pos"))
		{
			if(params < 2) return Msg(playerid, "/atm pos [ATM ID]");
			new atmid = strval(param[2]);
			if(atmid < 0 || atmid > MAX_ATM) return Msg(playerid, "Hibás ATM ID.");
			new Float:X, Float:Y, Float:Z, Float:A;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			ATM[atmid][aPosX] = X;
			ATM[atmid][aPosY] = Y;
			ATM[atmid][aPosZ] = Z;
			ATM[atmid][aPosA] = A+180;
			if(ATM[atmid][aObjectID] > 0)
				DestroyDynamicObject(ATM[atmid][aObjectID]);
			ATM[atmid][aObjectID] = CreateDynamicObject(2942, X, Y, Z-0.3, 0.0, 0.0, ATM[atmid][aPosA]);
			SendFormatMessage(playerid,  COLOR_LIGHTGREEN, "* ATM áthelyezve. (ID: %d - Koordínáta: X: %f | Y: %f | Z: %f) ", atmid, ATM[atmid][aPosX], ATM[atmid][aPosY], ATM[atmid][aPosZ]);
			
			Delete3DTextLabel(atmtextek[atmid]);
			DestroyDynamicMapIcon(atmpickup[atmid]);
			atmtextek[idx] = Create3DTextLabel("Bankautomata", 0x22AAFFFF, ATM[atmid][aPosX], ATM[atmid][aPosY], ATM[atmid][aPosZ]+0.5, 25.0, 0, 0);
			atmpickup[idx] = CreateDynamicMapIcon(ATM[atmid][aPosX], ATM[atmid][aPosY], ATM[atmid][aPosZ], 52, 0, NINCS, NINCS, NINCS, 300.0);
			SetPlayerPos(playerid, X+2, Y, Z);
			SaveATM();
		}
	}
	if(egyezik(cmd, "/széf") || egyezik(cmd, "/szef"))
	{
		if(Civil(playerid) && !IsScripter(playerid)) return Msg(playerid, "Nem tartozol frakcióhoz.");
		new Melo = PlayerInfo[playerid][pMember];
		if(params < 1)
		{
			if(!Admin(playerid, 1338) && SzefEngedely[playerid] != 1) return Msg(playerid, "/Széf [Be / Ki / Minrang(Leadernek) / Megnéz]");
			Msg(playerid, "/Széf [Be / Ki / Minrang(Leadernek) / Pos / Megnéz / Go / Objectnulla / Resi]");
			return 1;
		}
		if(egyezik(param[1], "engedély"))
		{
			if(!IsScripter(playerid)) return 1;
			if(params < 2) return Msg(playerid, "/Széf Engedély [Játékos Neve / ID]");
			new jatekos = ReturnUser(param[2]);
			if(jatekos == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
			if(!Admin(jatekos, 5)) return Msg(playerid, "A játékosnak legalább 5ös szintû adminnak kell lennie.");
			if(SzefEngedely[jatekos] == 0)
			{
				SzefEngedely[jatekos] = 1;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Engedélyezted %s-nak/nek.", PlayerName(jatekos));
				SendFormatMessage(jatekos, COLOR_LIGHTGREEN, "* Engedélyt kaptál a széfekhez %s-tõl", PlayerName(playerid));
			}
			else
			{
				SzefEngedely[jatekos] = 0;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Tiltottad %s-nak/nek.", PlayerName(jatekos));
				SendFormatMessage(jatekos, COLOR_LIGHTGREEN, "* %s elvette az engedélyed a széfektõl.", PlayerName(playerid));
			}
		}
		if(egyezik(param[1], "objectnulla"))
		{
			if(!IsScripter(playerid)) return 1;
			if(params < 2) return Msg(playerid, "/Széf Objectnulla [Biztos törlöd?(Ha igen: 'igen')]");
			if(egyezik(param[2], "igen"))
			{
				for(new x = 0; x < MAX_FRAKCIO; x++)
				{
					if(FrakcioInfo[x][fObject] != 0)
					{
						DestroyDynamicObject(FrakcioInfo[x][fObjectID]);
						FrakcioInfo[x][fObject] = 0; 
						FrakcioInfo[x][fObjectID] = 0;
					}	
				}
				Msg(playerid, "Kész");
			}	
		}
		if(egyezik(param[1], "Resi"))
		{
			if(!Admin(playerid, 1338) && SzefEngedely[playerid] != 1) return 1;
			SzefToltes();
			Msg(playerid, "Széf objectek újra töltve.");
		}
		/*if(egyezik(param[1], "Létrehoz"))
		{
			if(params < 2) 
			{
				Msg(playerid, "/Széf Létrehoz [Új Frakció Szám]");
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Jelenlegi Frakció Szám: %d", FrakcioSzam);
				return 1;
			}
			new szam = strval(param[2]);
			if(szam < 1) return Msg(playerid, "Hát lehet hogy ezt nem kéne...");
			FrakcioSzam = szam;
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Frakció Szám átírva! Régi: %d, Új: %d", (FrakcioSzam - szam), FrakcioSzam);
		}*/
		if(egyezik(param[1], "Go"))
		{
			if(!Admin(playerid, 1338) && SzefEngedely[playerid] != 1) return 1;
			if(params < 2) return Msg(playerid, "/Széf Go [Munka]");
			new munka = strval(param[2]);
			SetPlayerPos(playerid, FrakcioInfo[munka][fPosX], FrakcioInfo[munka][fPosY], FrakcioInfo[munka][fPosZ]);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Teleportálva a %d számú széfhez. Pos: %f, %f, %f", munka, FrakcioInfo[munka][fPosX], FrakcioInfo[munka][fPosY], FrakcioInfo[munka][fPosZ]);
		}
		if(egyezik(param[1], "Amegnéz"))
		{
			if(!Admin(playerid, 1338) && SzefEngedely[playerid] != 1) return 1;
			if(params < 2) return Msg(playerid, "/Széf Amegnéz [Munka]");
			new munka = strval(param[2]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "===========[Széf Tartalma]===========");
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Pénz: %dFt - Kaja: %ddb", FrakcioInfo[munka][fPenz], FrakcioInfo[munka][fKaja]);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Material: %ddb - Heroin: %dg", FrakcioInfo[munka][fMati], FrakcioInfo[munka][fHeroin]);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Kokain: %dg - Marihuana: %dg", FrakcioInfo[munka][fKokain], FrakcioInfo[munka][fMarihuana]);
		}
		if(egyezik(param[1], "Megnéz")  || egyezik(param[1], "Megnez"))
		{
			if(!PlayerToPoint(3, playerid, FrakcioInfo[Melo][fPosX], FrakcioInfo[Melo][fPosY], FrakcioInfo[Melo][fPosZ])) return Msg(playerid, "Nem vagy a széf közelében.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "===========[Széf Tartalma]===========");
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Pénz: %dFt - Kaja: %ddb", FrakcioInfo[Melo][fPenz], FrakcioInfo[Melo][fKaja]);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Material: %ddb - Heroin: %dg", FrakcioInfo[Melo][fMati], FrakcioInfo[Melo][fHeroin]);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Kokain: %dg - Marihuana: %dg", FrakcioInfo[Melo][fKokain], FrakcioInfo[Melo][fMarihuana]);
			Cselekves(playerid, "megnézte a széfet...", 1);
		}
		if(egyezik(param[1], "Pos"))
		{
			if(!Admin(playerid, 1338) && SzefEngedely[playerid] != 1) return 1;
			if(params < 3) return Msg(playerid, "/Széf Pos [Munka] [Object Legyen?(0 - nem, 1 - igen)]");
			new munka = strval(param[2]);
			new objectlegyen = strval(param[3]);
			if(munka > MAX_FRAKCIO) return 1;
			if(objectlegyen < 0 || objectlegyen > 1) return 1;
			new Float:X, Float:Y, Float:Z, Float:A;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			/*if(objectlegyen)
			{
				if(FrakcioInfo[munka][fObject] != 0) DestroyDynamicObject(FrakcioInfo[munka][fObject]);
				
				FrakcioInfo[munka][fObject] = CreateDynamicObject(2332, X, Y, Z-0.6, 0.0, 0.0, A+180);
			}
			else
			{			
				DestroyDynamicObject(FrakcioInfo[munka][fObject]);
				FrakcioInfo[munka][fObject] = 0;
			}*/	
			FrakcioInfo[munka][fObject] = objectlegyen;
			FrakcioInfo[munka][fPosX] = X;
			FrakcioInfo[munka][fPosY] = Y;
			FrakcioInfo[munka][fPosZ] = Z;
			FrakcioInfo[munka][fPosA] = A+180;
			if(objectlegyen)
			{
				if(FrakcioInfo[munka][fObjectID] != 0)
				{
					DestroyDynamicObject(FrakcioInfo[munka][fObjectID]);
				}	
				FrakcioInfo[munka][fObjectID] = CreateDynamicObject(2332, X, Y, Z-0.6, 0.0, 0.0, FrakcioInfo[munka][fPosA]);
			}	
			else
			{
				if(FrakcioInfo[munka][fObjectID] != 0)
				{
					DestroyDynamicObject(FrakcioInfo[munka][fObjectID]);
					FrakcioInfo[munka][fObjectID] = 0;
				}
			}		
				
			if(objectlegyen) SzefToltes();
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Széf átrakva. Munka: %d, Object: %d, Pos: %f, %f, %f", munka, objectlegyen, X, Y, Z);
		}
		if(egyezik(param[1], "Minrang"))
		{
			if(PlayerInfo[playerid][pLeader] < 1) return Msg(playerid, "Kizárólag Leadernek!");
			if(params < 2)
			{
				if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_KATONA)) Msg(playerid, "/Széf Minrang [Rang(0-12)]");
				else Msg(playerid, "/Széf Minrang [Rang(0-7)]");
				
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Jelenleg %d rangtól lehet kivenni.", FrakcioInfo[Melo][fMinrang]);
				return 1;
			}
			new rang = strval(param[2]);
			if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_KATONA))
			{
				if(rang < 0 || rang > 12) return Msg(playerid, "0-12ig!");
			}
			else if(LMT(playerid, LMUNKA_COLUMBIA))
			{
				if(rang < 0 || rang > 10) return Msg(playerid, "0-10ig!");
			}
			else if(LMT(playerid, LMUNKA_CAMORRA))
			{
				if(rang < 0 || rang > 9) return Msg(playerid, "0-9ig!");
			}
			else if(LMT(playerid, LMUNKA_YAKUZA))
			{
				if(rang < 0 || rang > 8) return Msg(playerid, "0-8ig!");
			}
			else
			{
				if(rang < 0 || rang > 7) return Msg(playerid, "0-7ig!");
			}
			FrakcioInfo[Melo][fMinrang] = rang;
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* A széfbõl mostantól %d rangtól lehet kivenni.", rang);
		}
		if(egyezik(param[1], "Be"))
		{
			if(params < 3) 
			{
				Msg(playerid, "/Széf Be [Mit] [Mennyit]");
				Msg(playerid, "Amiket lehet: Pénz, Material(Mati), Heroin, Kokain, Marihuana, Kaja");
				return 1;
			}
			new Mennyit = strval(param[3]);
			new Mati = PlayerInfo[playerid][pMats];
			new Heroin = PlayerInfo[playerid][pHeroin];
			new Kokain = PlayerInfo[playerid][pKokain];
			new Marihuana = PlayerInfo[playerid][pMarihuana];
			new Kaja = PlayerInfo[playerid][pKaja];
			new Penz = GetMoney(playerid);
			if(Mennyit < 0) return Msg(playerid, "Minuszt?");
			if(!PlayerToPoint(3, playerid, FrakcioInfo[Melo][fPosX], FrakcioInfo[Melo][fPosY], FrakcioInfo[Melo][fPosZ])) return Msg(playerid, "Nem vagy a széf közelében.");
			if(egyezik(param[2], "Pénz") || egyezik(param[2], "Penz"))
			{
				if(Penz < Mennyit) return Msg(playerid, "Nincs elég pénzed.");
				GiveMoney(playerid, -Mennyit);
				FrakcioInfo[Melo][fPenz] += Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Beraktál %dFt-ot a széfbe.", Mennyit);
			}
			if(egyezik(param[2], "Material") || egyezik(param[2], "Mati"))
			{
				if(Mati < Mennyit) return Msg(playerid, "Nincs elég materialod.");
				PlayerInfo[playerid][pMats] -= Mennyit;
				FrakcioInfo[Melo][fMati] += Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Beraktál %ddb Materialt a széfbe.", Mennyit);
			}
			if(egyezik(param[2], "Heroin"))
			{
				if(Heroin < Mennyit) return Msg(playerid, "Nincs elég heroinod.");
				PlayerInfo[playerid][pHeroin] -= Mennyit;
				FrakcioInfo[Melo][fHeroin] += Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Beraktál %dg Heroint a széfbe.", Mennyit);
			}
			if(egyezik(param[2], "Kokain"))
			{
				if(Kokain < Mennyit) return Msg(playerid, "Nincs elég kokainod.");
				PlayerInfo[playerid][pKokain] -= Mennyit;
				FrakcioInfo[Melo][fKokain] += Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Beraktál %dg Kokaint a széfbe.", Mennyit);
			}
			if(egyezik(param[2], "Marihuana"))
			{
				if(Marihuana < Mennyit) return Msg(playerid, "Nincs elég marihuanád.");
				PlayerInfo[playerid][pMarihuana] -= Mennyit;
				FrakcioInfo[Melo][fMarihuana] += Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Beraktál %dg Marihuanát a széfbe.", Mennyit);
			}
			if(egyezik(param[2], "Kaja"))
			{
				if(Kaja < Mennyit) return Msg(playerid, "Nincs elég kajád.");
				PlayerInfo[playerid][pKaja] -= Mennyit;
				FrakcioInfo[Melo][fKaja] += Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Beraktál %ddb Kaját a széfbe.", Mennyit);
			}
		}
		if(egyezik(param[1], "Ki"))
		{
			if(PlayerInfo[playerid][pRank] < FrakcioInfo[Melo][fMinrang])
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Nem elég nagy a rangod, minimum rang: %d", FrakcioInfo[Melo][fMinrang]);
				return 1;
			}
			if(params < 3) 
			{
				Msg(playerid, "/Széf Ki [Mit] [Mennyit]");
				Msg(playerid, "Amiket lehet: Pénz, Material(Mati), Heroin, Kokain, Marihuana, Kaja");
				return 1;
			}
			new Mennyit = strval(param[3]);
			new Mati = FrakcioInfo[Melo][fMati];
			new Heroin = FrakcioInfo[Melo][fHeroin];
			new Kokain = FrakcioInfo[Melo][fKokain];
			new Marihuana = FrakcioInfo[Melo][fMarihuana];
			new Kaja = FrakcioInfo[Melo][fKaja];
			new Penz = FrakcioInfo[Melo][fPenz];
			if(Mennyit < 0) return Msg(playerid, "Minuszt?");
			if(!PlayerToPoint(3, playerid, FrakcioInfo[Melo][fPosX], FrakcioInfo[Melo][fPosY], FrakcioInfo[Melo][fPosZ])) return Msg(playerid, "Nem vagy a széf közelében.");
			if(egyezik(param[2], "Pénz") || egyezik(param[2], "Penz"))
			{
				if(Penz < Mennyit) return Msg(playerid, "Nincs elég pénz a széfben.");
				GiveMoney(playerid, Mennyit);
				FrakcioInfo[Melo][fPenz] -= Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Kivettél %dFt-ot a széfbõl.", Mennyit);
			}
			if(egyezik(param[2], "Material") || egyezik(param[2], "Mati"))
			{
				if(Mati < Mennyit) return Msg(playerid, "Nincs elég material a széfben.");
				if((PlayerInfo[playerid][pMats] + Mennyit) > MAXMATI) return Msg(playerid, "Nem fér el nálad.");
				PlayerInfo[playerid][pMats] += Mennyit;
				FrakcioInfo[Melo][fMati] -= Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Kivettél %ddb Materialt a széfbõl.", Mennyit);
			}
			if(egyezik(param[2], "Heroin"))
			{
				if(Heroin < Mennyit) return Msg(playerid, "Nincs elég heroin a széfben.");
				if((PlayerInfo[playerid][pHeroin] + Mennyit) > MAXHEROIN) return Msg(playerid, "Nem fér el nálad.");
				PlayerInfo[playerid][pHeroin] += Mennyit;
				FrakcioInfo[Melo][fHeroin] -= Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Kivettél %dg Heroint a széfbõl.", Mennyit);
			}
			if(egyezik(param[2], "Kokain"))
			{
				if(Kokain < Mennyit) return Msg(playerid, "Nincs elég kokain a széfben.");
				if((PlayerInfo[playerid][pKokain] + Mennyit) > MAXKOKAIN) return Msg(playerid, "Nem fér el nálad.");
				PlayerInfo[playerid][pKokain] += Mennyit;
				FrakcioInfo[Melo][fKokain] -= Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Kivettél %dg Kokaint a széfbõl.", Mennyit);
			}
			if(egyezik(param[2], "Marihuana"))
			{
				if(Marihuana < Mennyit) return Msg(playerid, "Nincs elég marihuána a széfben.");
				if((PlayerInfo[playerid][pMarihuana] + Mennyit) > MAXMARIHUANA) return Msg(playerid, "Nem fér el nálad.");
				PlayerInfo[playerid][pMarihuana] += Mennyit;
				FrakcioInfo[Melo][fMarihuana] -= Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Kivettél %dg Marihuanát a széfbõl.", Mennyit);
			}
			if(egyezik(param[2], "Kaja"))
			{
				if(Kaja < Mennyit) return Msg(playerid, "Nincs elég kaja a széfben.");
				if((PlayerInfo[playerid][pKaja] + Mennyit) > MAXKAJA) return Msg(playerid, "Nem fér el nálad.");
				PlayerInfo[playerid][pKaja] += Mennyit;
				FrakcioInfo[Melo][fKaja] -= Mennyit;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Kivettél %ddb Kaját a széfbõl.", Mennyit);
			}
			SaveFrakcio();
		}
	}
	if(egyezik(cmd, "/szerelés"))
	{
		if(!AMT(playerid, MUNKA_SZERELO)) return Msg(playerid, "Nem vagy autószerelõ!");
		if(!PlayerToPoint(3, playerid,BizzInfo[BIZ_TUNING][bEntranceX], BizzInfo[BIZ_TUNING][bEntranceY], BizzInfo[BIZ_TUNING][bEntranceZ]))
		{
			Msg(playerid, "Nem vagy a HQn! A GPS-ed mutatja.");
			SetPlayerCheckpoint(playerid, BizzInfo[BIZ_TUNING][bEntranceX], BizzInfo[BIZ_TUNING][bEntranceY], BizzInfo[BIZ_TUNING][bEntranceZ], 2);
			return 1;
		}
		if(JobDuty[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Most már nem vagy szolgálatban mint autószerelõ.");
			JobDuty[playerid] = 0;
			Mechanics -= 1;
			if(PlayerInfo[playerid][pChar] > 0 && OnDuty[playerid] || PlayerInfo[playerid][pChar] > 0 && !LegalisSzervezetTagja(playerid) && !Civil(playerid))
			{
				SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
			}
			else
			{
				SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
			}	
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Szolgáltaba áltál mint autószerelõ.");
			SendClientMessageToAll(COLOR_LIGHTBLUE, "* Autószerelõ szolgálatban.");
			JobDuty[playerid] = 1;
			Mechanics += 1;
			SetPlayerSkin(playerid, 50);
		}
	}
	if(egyezik(cmd, "/zero"))
	{
		if(!Admin(playerid, 1337)) return 1;
		if(TilosOlni == 0)
		{
			TilosOlni = 1;
			SendClientMessageToAll(COLOR_LIGHTBLUE, "============[Zero Tolerancia]============");
			SendClientMessageToAll(COLOR_LIGHTRED, "* Zero tolerancia bekapcsolva!");
			SendClientMessageToAll(COLOR_LIGHTRED, "* Amíg ez érvényben van, tilos ölni, aki megszegi automata 2 óra jail!");
		}
		else
		{
			TilosOlni = 0;
			SendClientMessageToAll(COLOR_LIGHTBLUE, "============[Zero Tolerancia]============");
			SendClientMessageToAll(COLOR_LIGHTRED, "* Zero tolerancia kikapcsolva!");
		}
	}
	
	if(egyezik(cmd, "/putto") || egyezik(cmd, "/puttó"))
	{
		  if(!PlayerToPoint(10.0, playerid, 830.5727,3.6759,1004.1797)) return Msg(playerid, "Nem vagy lottózóban!");
		  if(VanSzelvenye[playerid] == 1)
		  {
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Már van szelvényed!(Számok: %d, %d, %d, %d, %d, %d, %d, B:%d)", PSzam1[playerid], PSzam2[playerid], PSzam3[playerid], PSzam4[playerid], PSzam5[playerid], PSzam6[playerid], PSzam7[playerid], PSzam8[playerid]);
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Sorsolás %d Perc múlva.", PSorsolas/60);
			return 1;
		  }
		  if(GetMoney(playerid) < 500) return Msg(playerid, "500Ft egy szelvény...");
		  if(params < 8) return Msg(playerid, "/puttó [Szám1] [Szám2] [Szám3] [Szám4] [Szám5] [Szám6] [Szám7] [B(1-4)]");
		  new szam1 = strval(param[1]);
		  new szam2 = strval(param[2]);
		  new szam3 = strval(param[3]);
		  new szam4 = strval(param[4]);
		  new szam5 = strval(param[5]);
		  new szam6 = strval(param[6]);
		  new szam7 = strval(param[7]);
		  new szam8 = strval(param[8]);
		  
		  if(szam1 < 1 || szam1 > 20) return Msg(playerid, "1-20");
		  if(szam2 < 1 || szam2 > 20) return Msg(playerid, "1-20");
		  if(szam3 < 1 || szam3 > 20) return Msg(playerid, "1-20");
		  if(szam4 < 1 || szam4 > 20) return Msg(playerid, "1-20");
		  if(szam5 < 1 || szam5 > 20) return Msg(playerid, "1-20");
		  if(szam6 < 1 || szam6 > 20) return Msg(playerid, "1-20");
		  if(szam7 < 1 || szam7 > 20) return Msg(playerid, "1-20");
		  if(szam8 < 1 || szam8 > 4) return Msg(playerid, "1-4");
		  
		  if(szam2 == szam1 || szam2 == szam3 || szam2 == szam4 || szam2 == szam5 || szam2 == szam6 || szam2 == szam7) return Msg(playerid, "2 ugyan olyan számot nem jelölhetsz be.");
		  if(szam3 == szam1 || szam3 == szam2 || szam3 == szam4 || szam3 == szam5 || szam3 == szam6 || szam3 == szam7) return Msg(playerid, "2 ugyan olyan számot nem jelölhetsz be.");
		  if(szam4 == szam1 || szam4 == szam2 || szam4 == szam3 || szam4 == szam5 || szam4 == szam6 || szam4 == szam7) return Msg(playerid, "2 ugyan olyan számot nem jelölhetsz be.");
		  if(szam5 == szam1 || szam5 == szam2 || szam5 == szam3 || szam5 == szam4 || szam5 == szam6 || szam5 == szam7) return Msg(playerid, "2 ugyan olyan számot nem jelölhetsz be.");
		  if(szam6 == szam1 || szam6 == szam2 || szam6 == szam3 || szam6 == szam4 || szam6 == szam5 || szam6 == szam7) return Msg(playerid, "2 ugyan olyan számot nem jelölhetsz be.");
		  if(szam7 == szam1 || szam7 == szam2 || szam7 == szam3 || szam7 == szam4 || szam7 == szam5 || szam7 == szam6) return Msg(playerid, "2 ugyan olyan számot nem jelölhetsz be.");

		  PSzam1[playerid] = szam1;
		  PSzam2[playerid] = szam2;
		  PSzam3[playerid] = szam3;
		  PSzam4[playerid] = szam4;
		  PSzam5[playerid] = szam5;
		  PSzam6[playerid] = szam6;
		  PSzam7[playerid] = szam7;
		  PSzam8[playerid] = szam8;

		  SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Puttó szelvény megvéve.(Ára: 500Ft)");
		  GiveMoney(playerid, -500);
		  SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Megjelölt számok: %d, %d, %d, %d, %d, %d, %d, B:%d", szam1, szam2, szam3, szam4, szam5, szam6, szam7, szam8);
		  SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Sorsolás %d Perc múlva.", PSorsolas/60);
		  VanSzelvenye[playerid] = 1;
	}
	if(egyezik(cmd, "/öröktuning") || egyezik(cmd, "/oroktuning") || egyezik(cmd, "/öt") || egyezik(cmd, "/ot"))
	{
		if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "A jármû mellett kell állnod");
		if(params < 1) return Msg(playerid, "/öröktuning [Alien / XFLOW / Kerék / Matrica / Levesz]");
		if(!PlayerToPoint(3, playerid, -1917.3201,304.5225,41.0469)) return Msg(playerid, "Nem vagy tuning mûhelyben."); 
		if(egyezik(param[1], "levesz"))
		{
			if(params < 2) return Msg(playerid, "/öröktuning levesz [Kerék / Kasztni / Matrica]");
			new kocsi, vs;
			kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 5.5) return Msg(playerid, "Nincs a közelben a jármû!");
			
			vs = IsAVsKocsi(kocsi);
			if(vs == NINCS) return Msg(playerid, "Ez nem V-s!");
			if(!egyezik(CarInfo[vs][cOwner], PlayerName(playerid))) return Msg(playerid, "Ez nem a tied!");
			if(egyezik(param[2], "Kerék") || egyezik(param[2], "Kerek"))
			{
				CarInfo[vs][cKerek] = 0;
				CarUpdate(vs, CAR_Kerek);
				Msg(playerid, "Kerék leszedve.");
			}
			if(egyezik(param[2], "Kasztni"))
			{
				CarInfo[vs][cTuning] = 0;
				CarUpdate(vs, CAR_Tuning);
				Msg(playerid, "Kasztni leszedve.");
			}
			if(egyezik(param[2], "Matrica"))
			{
				CarInfo[vs][cMatrica] = 3;
				CarUpdate(vs, CAR_Matrica);
				Msg(playerid, "Matrica leszedve.");
			}
		}
		if(egyezik(param[1], "matrica"))
		{
			if(params < 2)
			{
				Msg(playerid, "/öröktuning matrica [1-4] - 4 = leveszi a matricát.");
				Msg(playerid, "Figyelmeztetés: Csak lowrider és tuning kocsikra, ha másra rakod a pénzt nem kapod vissza!");
				return 1;
			}
			new matrica = strval(param[2]);
			if(matrica < 1 || matrica > 4) return Msg(playerid, "1-4 legyen a matrica száma.");
			if(GetMoney(playerid) < 15000000) return Msg(playerid, "15 Millió KPba...");
			new kocsi, vs;
			kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 5.5) return Msg(playerid, "Nincs a közelben a jármû!");
			
			vs = IsAVsKocsi(kocsi);
			if(vs == NINCS) return Msg(playerid, "Ez nem V-s!");
			if(!egyezik(CarInfo[vs][cOwner], PlayerName(playerid))) return Msg(playerid, "Ez nem a tied!");
			GiveMoney(playerid, -15000000);
			ChangeVehiclePaintjob(kocsi, (matrica - 1));
			CarInfo[vs][cMatrica] = (strval(param[2]) - 1);
			CarUpdate(vs, CAR_Matrica);
			BizPenz(BIZ_TUNING, 15000000);
			Msg(playerid, "Matrica felrakva.");
		}
		if(egyezik(param[1], "Alien"))
		{ 
			if(GetMoney(playerid) < 5000000) return Msg(playerid, "5 Millió KPba...");
			//new tuningstyle = 1;
			new kocsi, vs;
			kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 5.5) return Msg(playerid, "Nincs a közelben a jármû!");
			
			vs = IsAVsKocsi(kocsi);
			if(vs == NINCS) return Msg(playerid, "Ez nem V-s!");
			if(!egyezik(CarInfo[vs][cOwner], PlayerName(playerid))) return Msg(playerid, "Ez nem a tied!");
			if(CarInfo[vs][cModel] == 560)
			{
				CarInfo[vs][cTuning] = 1;
				Msg(playerid, "Alien Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
			if(CarInfo[vs][cModel] == 562)
			{
				CarInfo[vs][cTuning] = 1;
				Msg(playerid, "Alien Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
			if(CarInfo[vs][cModel] == 559)
			{
				CarInfo[vs][cTuning] = 1;
				Msg(playerid, "Alien Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
			if(CarInfo[vs][cModel] == 558)
			{
				CarInfo[vs][cTuning] = 1;
				Msg(playerid, "Alien Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
			if(CarInfo[vs][cModel] == 561)
			{
				CarInfo[vs][cTuning] = 1;
				Msg(playerid, "Alien Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
			if(CarInfo[vs][cModel] == 565)
			{
				CarInfo[vs][cTuning] = 1;
				Msg(playerid, "Alien Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
		}
		if(egyezik(param[1], "Xflow"))
		{ 
			if(GetMoney(playerid) < 5000000) return Msg(playerid, "5 Millió KPba...");
			//new tuningstyle = 2;
			new kocsi, vs;
			kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 5.5) return Msg(playerid, "Nincs a közelben a jármû!");
			
			vs = IsAVsKocsi(kocsi);
			if(vs == NINCS) return Msg(playerid, "Ez nem V-s!");
			if(!egyezik(CarInfo[vs][cOwner], PlayerName(playerid))) return Msg(playerid, "Ez nem a tied!");
			if(CarInfo[vs][cModel] == 560)
			{
				CarInfo[vs][cTuning] = 2;
				Msg(playerid, "Xflow Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
			if(CarInfo[vs][cModel] == 562)
			{
				CarInfo[vs][cTuning] = 2;
				Msg(playerid, "Xflow Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
			if(CarInfo[vs][cModel] == 559)
			{
				CarInfo[vs][cTuning] = 2;
				Msg(playerid, "Xflow Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
			if(CarInfo[vs][cModel] == 558)
			{
				CarInfo[vs][cTuning] = 2;
				Msg(playerid, "Xflow Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
			if(CarInfo[vs][cModel] == 561)
			{
				CarInfo[vs][cTuning] = 2;
				Msg(playerid, "Xflow Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
			if(CarInfo[vs][cModel] == 565)
			{
				CarInfo[vs][cTuning] = 2;
				Msg(playerid, "Xflow Tuning felszerelve(Resizni kell a kocsit hogy rajta legyen).");
				GiveMoney(playerid, -5000000);
				BizPenz(BIZ_TUNING, 5000000);
				CarUpdate(vs, CAR_Tuning);
			}
		}
		if(egyezik(param[1], "kerék") || egyezik(param[1], "kerek"))
		{
			if(GetMoney(playerid) < 50000) return Msg(playerid, "50,000Ft KPban...");
			new kocsi, vs;
			kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 5.5) return Msg(playerid, "Nincs a közelben a jármû!");
			
			vs = IsAVsKocsi(kocsi);
			if(vs == NINCS) return Msg(playerid, "Ez nem V-s!");
			if(!egyezik(CarInfo[vs][cOwner], PlayerName(playerid))) return Msg(playerid, "Ez nem a tied!");
			if(params < 2) return Msg(playerid, "/öröktuning kerék [1-13]");
			new kerek = strval(param[2]);
			if(kerek < 1 || kerek > 13) return Msg(playerid, "Kerék csak 1-13 lehet.");
			Msg(playerid, "Kerék felszerelve(Resizni kell a kocsit hogy rajta legyen).");
			new k = kerek+1072;
			CarInfo[vs][cKerek] = k;
			GiveMoney(playerid, -50000);
			BizPenz(BIZ_TUNING, 50000);
			CarUpdate(vs, CAR_Kerek);
		}
		/*if(egyezik(param[1], "Matrica"))
		{
			if(!Admin(playerid, 5)) return 1;
			new kocsi, vs;
			kocsi = GetPlayerVehicleID(playerid);
			
			vs = IsAVsKocsi(kocsi);
			if(vs == NINCS) return Msg(playerid, "Ez nem V-s!");
			if(!egyezik(CarInfo[vs][cOwner], PlayerName(playerid)) & !IsScripter(playerid)) return Msg(playerid, "Ez nem a tied!");
			
			if(CarInfo[vs][cModel] == 536 || CarInfo[vs][cModel] == 535 || CarInfo[vs][cModel] == 534 || CarInfo[vs][cModel] == 560 || CarInfo[vs][cModel] == 562 || CarInfo[vs][cModel] == 559 || CarInfo[vs][cModel] == 558 || CarInfo[vs][cModel] == 561 || CarInfo[vs][cModel] == 565)
			{
				//if(GetMoney(playerid) < 50000) return Msg(playerid, "50,000Ft KPban...");
				if(params < 2) return Msg(playerid, "/öröktuning matrica [0-2] (Ha leakarod szedni írd: 'leszed')");
				if(egyezik(param[2], "leszed"))
				{
					Msg(playerid, "Matrica leszedve.");
					Matrica[kocsi] = 3;
					ChangeVehiclePaintjob(kocsi, 3);
					MatricaMentes();
					return 1;
				}
				new matrica = strval(param[2]);
				if(matrica < 0 || matrica > 2) return Msg(playerid, "Matrica 0-2");
				ChangeVehiclePaintjob(kocsi, matrica);
				Msg(playerid, "Matrica kész.");
				Matrica[kocsi] = matrica;
				MatricaMentes();
			}
			else Msg(playerid, "Erre nem lehet...");
		}*/
	}
	/*if(egyezik(cmd, "/szolgáltató") || egyezik(cmd, "/szolgaltato")) // Nincs kész \\
	{
		if(params != 1) return Msg(playerid, "/Szolgáltató [Pannon / Vodafone / T-mobile]");
		if(egyezik(param[1], "pannon"))
		{
			if(PlayerInfo[playerid][pTelefonSzolgaltato] == 1) return Msg(playerid, "Ugyan ennél a szolgáltatónál vagy.");
			if(GetMoney(playerid) <  3000) return Msg(playerid, "Egy pannon kártya 3000Ft-ba kerül.");
			GiveMoney(playerid, -3000);
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Mostantól a pannonnál vagy! (%dFt / Perc)", BizzInfo[BIZ_PANNON][bEntranceCost]);
			new MobilSzam = Rand(1000000, 9000000);
			PlayerInfo[playerid][pPnumber] = ;
		}
	}*/
	if(egyezik(cmd, "/út") || egyezik(cmd, "/ut"))
	{
		if(!IsACop(playerid)) return Msg(playerid, "Nem vagy rendõr.");
		if(OnDuty[playerid]!=1) return Msg(playerid, "Nem vagy szolgálatba.");
		if(!Munkarang(playerid, 6) && !LMT(playerid, LMUNKA_FBI) && !Admin(playerid, 1337)) return Msg(playerid, "Minimum 6os rang.");
		new IrjaKi = true;
		if(params < 1) return Msg(playerid, "/Út [Lezár / Megnyit]");
		if(egyezik(param[1], "lezár") || egyezik(param[1], "lezar"))
		{
			if(LezartUtat[playerid] != 0) return Msg(playerid, "Már zártál le utat.");
			//if(params != 2) return Msg(playerid, "/Út Lezár");
			//new tipus = strval(param[2]);
			new tipus2 = NINCS;
			//if(tipus < 1 || tipus > 2) return Msg(playerid, "Tipus 1-2");*/
			tipus2 = 981;
			//if(tipus == 2) tipus2 = 16437;
			//if(tipus == 3) tipus2 = 981;
			new Float:x, Float:y, Float:z, Float:a, Float:X, Float:Y;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, a);
			GetXYInFrontOfPlayer(playerid, X, Y, 5.0); // Elé rakja le
			
			/*if(tipus2 == 16437)
				LezartUtat[playerid] = CreateDynamicObject(tipus2, X, Y, Z+3, 0.0, 0.0, A+180);
			else*/
			LezartUtat[playerid] = CreateDynamicObject(tipus2, X, Y, z, 0.0, 0.0, a+180);
			LezartUtX[playerid] = X;
			LezartUtY[playerid] = Y;
			LezartUtZ[playerid] = z;
			
			SetPlayerPos(playerid, x, y, z+0.1); // Hogy a streamer frissitse a játékost
			
			Msg(playerid, "Út lezárva, ha elakarod tüntetni írd be: ('/út megnyit')");
			new utlezaras[128];
			Format(utlezaras, "[Útlezárás (Figyelmeztetés)][%d]%s lezárt egy utat.", playerid, PlayerName(playerid));
			ABroadCast(COLOR_LIGHTRED, utlezaras, 1);
			if(IrjaKi == 1)
			{
				Format(utlezaras, "HQ: %s lezárt egy út szakaszt.", PlayerName(playerid));
				SendFamilyMessage(LMUNKA_SCPD, COLOR_DBLUE, utlezaras);
				SendFamilyMessage(LMUNKA_FBI, COLOR_DBLUE, utlezaras);
				SendFamilyMessage(LMUNKA_SFPD, COLOR_DBLUE, utlezaras);
				SendFamilyMessage(LMUNKA_VPOP, COLOR_DBLUE, utlezaras);
				SendFamilyMessage(LMUNKA_KATONA, COLOR_DBLUE, utlezaras);
			}	
		}
		if(egyezik(param[1], "megnyit"))
		{
			if(!PlayerToPoint(15, playerid, LezartUtX[playerid], LezartUtY[playerid], LezartUtZ[playerid]))
			{
				Msg(playerid, "Nem vagy a lezárt útnál, a gps-ed mutatja.");
				SetPlayerCheckpoint(playerid, LezartUtX[playerid], LezartUtY[playerid], LezartUtZ[playerid], 15);
				return 1;
			}
			DestroyDynamicObject(LezartUtat[playerid]);
			LezartUtat[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			Msg(playerid, "Út megnyitva.");
			new utlezaras[128];
			Format(utlezaras, "HQ: %s megnyitott egy útszakaszt.", PlayerName(playerid));
			SendFamilyMessage(LMUNKA_SCPD, COLOR_DBLUE, utlezaras);
			SendFamilyMessage(LMUNKA_FBI, COLOR_DBLUE, utlezaras);
			SendFamilyMessage(LMUNKA_SFPD, COLOR_DBLUE, utlezaras);
			SendFamilyMessage(LMUNKA_VPOP, COLOR_DBLUE, utlezaras);
			SendFamilyMessage(LMUNKA_KATONA, COLOR_DBLUE, utlezaras);
		}
	}
	if(egyezik(cmd, "/molotov"))
	{
		if(Szint(playerid) < 15) return Msg(playerid, "Minimum 15-ös szint.");
		if(params < 1) return Msg(playerid, "/Molotov [Készít]");
		if(egyezik(param[1], "készít") || egyezik(param[1], "keszit"))
		{
			if(PlayerInfo[playerid][pFuel] < 1) return Msg(playerid, "Benzines kannád üres.");
			if(params != 2)
			{
				Msg(playerid, "/Molotov Készít [Menyit]");
				Msg(playerid, "1db molotov koktélhoz 2 liter benzin kell és 1db gyújto.");
				return 1;
			}	
			new menyit = strval(param[2]);
			new menyikell = menyit*2;
			if(menyikell > PlayerInfo[playerid][pFuel])
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Enyi molotov koktélhoz %d Liter benzin kell, neked csak %d liter van.", menyikell, PlayerInfo[playerid][pFuel]);
				return 1;
			}
			if(UresUveg[playerid] < menyit)
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Nincs elég üres üveged!(%d van csak), %d kell.", UresUveg[playerid], menyit);
				return 1;
			}
			new gyujto = PlayerInfo[playerid][pGyujto] - menyit;
			if(gyujto < 0) return Msg(playerid, "Nincs elég gyújtod.");
			UresUveg[playerid] -= menyit;
			PlayerInfo[playerid][pFuel] -= menyikell;
			PlayerInfo[playerid][pGyujto] -= menyit;
			/*new molotov[128];
			Format(molotov, "[Molotov Koktél (Figyelmeztetés)][%d]%s csinált %d üveg molotov koktélt.", playerid, PlayerName(playerid), menyit);
			ABroadCast(COLOR_LIGHTRED, molotov, 1);*/
			GiveWeapon(playerid, 18, menyit);
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Készítettél egy  %d üveg molotov koktélt.", menyit);
			Cselekves(playerid, "molotov koktélt csinált.", 1);
		}
	}
	if(egyezik(cmd, "/lehallgat"))
	{
		if(!IsHitman(playerid) && !LMT(playerid, LMUNKA_FBI)) return 1;
		if(LMT(playerid, LMUNKA_FBI) && !PlayerToPoint(30.0, playerid, 285.105, 182.403, 1007.179) && !IsHitman(playerid)) return Msg(playerid, "Az FBI Fõépületében kell lenned.");
		if(LMT(playerid, LMUNKA_FBI) && !IsHitman(playerid)) return Msg(playerid, "/pda..");
		if(LMT(playerid, LMUNKA_FBI) && !Munkarang(playerid, 4)) return Msg(playerid, "Minimum 4es rang.");
		if(params != 2) return Msg(playerid, "/lehallgat [Rádió] [Állómás]");
		if(egyezik(param[1], "rádió") || egyezik(param[1], "radio"))
		{
			new Allomas = strval(param[2]);
			if(egyezik(param[2], "kikapcsol") || egyezik(param[2], "off"))
			{
				Msg(playerid, "Kikapcsolva");
				RadioHallgatas[playerid] = NINCS;
				return 1;
			}
			if(Allomas < 1 || Allomas > MAX_FRAKCIO) 
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Rádió állomások: 1-%d", MAX_FRAKCIO);
				return 1;
			}
			RadioHallgatas[playerid] = Allomas;
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Csatlakozás sikeres. Állomás: %d", Allomas);
			SendClientMessage(playerid, COLOR_LIGHTRED, "=============[Rádió Adatok]=============");
			/*if(Allomas == 0)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "* Szervezet Neve: Közös");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Ha nem akarod tovább hallgatni kapcsold ki!((/lehallgat Rádió Kikapcsol))");
				Cselekves(playerid, "átkapcsolt a rádióján.", 1);
				RadioHallgatas[playerid] = 0;
				return 1;
			}*/
			new szneve[32];
			new szam = RadioHallgatas[playerid] - 1;
			szneve = Szervezetneve[szam][0];
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Szervezet Neve: %s", szneve);
			new menyien = 0;
			for(new oj = 0; oj < MAX_PLAYERS; oj++)
			{
				if(PlayerInfo[oj][pMember] == RadioHallgatas[playerid] || PlayerInfo[oj][pLeader] == RadioHallgatas[playerid]) menyien++;
			}
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* A rádiót %d-an/en hallgatják.", menyien);
			SendClientMessage(playerid, COLOR_YELLOW, "* Kikapcsoláshoz: /lehallgat rádió kikapcsol");
			Cselekves(playerid, "átkapcsolt a rádióján.", 1);
		}
	}
	if(egyezik(cmd, "/méreg") || egyezik(cmd, "/mereg"))
	{
		if(!IsHitman(playerid) && !IsScripter(playerid)) return 1;
		if(params != 1) return Msg(playerid, "/méreg [Játékos Neve / ID]");
		new player;
		player = ReturnUser(param[1]);
		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
		if(GetDistanceBetweenPlayers(playerid,player) > 2) return Msg(playerid, "A játékos nincs a közelben.");
		if(Mergezve[player] > 0) return Msg(playerid, "Ez a játékos már megvan mérgezve.");
		SetTimerEx("Mergezes", 10000, false, "ii", player);
		Mergezve[player] = 10;
		KiMergezte[player] = playerid;
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Megmérgezted %s-t, hamarosan hatni fog!", PlayerName(player));
		Cselekves(playerid, "elõveszi a tût és bele nyomja a célpont nyakába.", 1);
		Cselekves(playerid, "-t megmérgeztek.", 1);
		SendClientMessage(player, COLOR_LIGHTRED, "* Megmérgeztek!");
	}
	if(egyezik(cmd, "/adat"))
	{
		if(!AMT(playerid, MUNKA_DETEKTIV) && !IsHitman(playerid) && !Admin(playerid, 1)) return Msg(playerid, "Nem vagy detektív.");
		if(params != 1) return Msg(playerid, "/adat [Játékos Neve / ID]");
		new player;
		player = ReturnUser(param[1]);
		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
		ShowDetektivPlayerStats(playerid, player);
	}
	if(egyezik(cmd, "/robbant") || egyezik(cmd, "/robbant"))
	{
		if(!Admin(playerid, 1337)) return 1;

		if(params != 1) return Msg(playerid, "Használata: /robbant [játékosnév / id]");

		new player;
		player = ReturnUser(param[1]);

		if(player != INVALID_PLAYER_ID)
		{
			if(Admin(playerid, 1337) || PlayerInfo[playerid][pAdmin] >= PlayerInfo[player][pAdmin])
			{
				format(string, sizeof(string), "* Felrobbantottad a játékost.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				Format(string, "<< %s felrobbantotta %s-t >>", AdminName(playerid), PlayerName(player));
			}
			else
			{
				format(string, sizeof(string), "* Felrobbantottad a magad.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				Format(string, "<< %s felrobbantotta magát >>", AdminName(playerid));
				player = playerid;
			}
			ABroadCast(COLOR_LIGHTRED, string, 1);
			SetHealth(player, 0);
			new Float:x, Float:y, Float:z;
			GetPlayerPos(player, x, y, z);
			CreateExplosion(x, y, z, 7, 10);
		}
		return 1;
	}
	/*if(egyezik(cmd, "/flucks"))
	{
		if(!egyezik(PlayerName(playerid), "Darryl_F_Gates") && !egyezik(PlayerName(playerid), "Yuas_Kitagawa")) return 1;
		PlayerInfo[playerid][pClint] = 2;
		Msg(playerid, "Kész");
	}*/
	/*if(egyezik(cmd, "/seercon"))
	{
	    if(!Admin(playerid, 1338)) return 1;
		if(params < 1) return Msg(playerid, "/seercon [reloadfs(Objectek)]");

        if(egyezik(param[1], "reloadfs"))
		{
			SendRconCommand("reloadfs Objectek");
			Msg(playerid, "Objectek újra töltve.");
		}
		else
		    Msg(playerid, "/seercon [reloadfs(Objectek)]");

		return 1;
	}*/

	/*if(egyezik(cmd, "/hotel"))
	{
		if(params != 1) return Msg(playerid, "/hotel [(Szoba)Bérlés[1000Ft/Óra] / (Szoba)Lemondás]");

        if(egyezik(param[1], "Bérlés") || egyezik(param[1], "Berles"))
		{
			if(PlayerInfo[playerid][pPhousekey] != NINCS) return Msg(playerid, "Van saját / bérelt házad!");
           	if(!PlayerToPoint(3, playerid, -2425.4722,337.6092,37.0020) && !PlayerToPoint(3, playerid, 2232.6213,-1159.8348,25.8906)) return Msg(playerid, "Nem vagy hotel bejáratánál!");
			new Penzem = GetMoney(playerid);
			if(Penzem - 1000 < 0) return Msg(playerid, "Szoba bérléséhez 1000Ft-ra van szükséged!");
			if(PlayerToPoint(3, playerid, -2425.4722,337.6092,37.0020))
			{
    			PlayerInfo[playerid][pPhousekey] = 1000;
				Msg(playerid, "Kibéreltél egy szobát a San Fierroi Hotelbe!");
				SetPlayerVirtualWorld(playerid, 2);
				Tele(playerid, 2228.3096,-1150.4865,1025.7969);
				SetPlayerVirtualWorld(playerid, 1);
				GiveMoney(playerid, -1000);
				Cselekves(playerid, "kibérelt egy szobát...");
			}
			else
			{
			    PlayerInfo[playerid][pPhousekey] = 1001;
				Msg(playerid, "Kibéreltél egy szobát a Los Santosi Hotelbe!");
				Tele(playerid, 2228.3096,-1150.4865,1025.7969);
				SetPlayerVirtualWorld(playerid, 1);
				GiveMoney(playerid, -1000);
			}
		}
		else if(egyezik(param[1], "Lemondás") || egyezik(param[1], "Lemondas"))
		{
		    if(!PlayerToPoint(3, playerid, -2425.4722,337.6092,37.0020) && !PlayerToPoint(3, playerid, 2232.6213,-1159.8348,25.8906)) return Msg(playerid, "Nem vagy hotel bejáratánál!");
			if(!PlayerInfo[playerid][pPhousekey] == 1000 && !PlayerInfo[playerid][pPhousekey] == 1001) return Msg(playerid, "Nem bérelsz hotelt!");
           	PlayerInfo[playerid][pPhousekey] = NINCS;
           	Msg(playerid, "Lemondtad a bérlést!");
           	Cselekves(playerid, "lemondta a szoba bérlést...");
		}
		return 1;
	}*/
	if(strcmp(cmd, "/hitmanrádió", true) == 0 || strcmp(cmd, "/hr", true) == 0)
	{
	    if(IsHitman(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				Msg(playerid, "/HitmanRádió [Szöveg]");
				return 1;
			}

			if(SzovegEllenorzes(playerid, result, "/hr"))
				return 1;

			if(PlayerInfo[playerid][pHitmanNev] == 0)
			{
				format(string, sizeof(string), "** Új Ügynök: %s **", result);
				SendHitmanRadioMessage(COLOR_LIGHTBLUE, string);
			}
			else
			{
			    format(string, sizeof(string), "** %s: %s **", PlayerInfo[playerid][pHitmanNev],  result);
				SendHitmanRadioMessage(COLOR_LIGHTBLUE, string);
			}
			format(string, sizeof(string), "[Rádió]Valaki mondja: %s", result);
			ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		return 1;
	}
	
	if(strcmp(cmd, "/hitmanrádiób", true) == 0 || strcmp(cmd, "/hrb", true) == 0)
	{
	    if(IsHitman(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				Msg(playerid, "/HitmanRádió [Szöveg]");
				return 1;
			}

			if(SzovegEllenorzes(playerid, result, "/hrb", ELLENORZES_MINDKETTO))
				return 1;

			if(PlayerInfo[playerid][pHitmanNev] == 0)
			{
				format(string, sizeof(string), "** Új Ügynök: (( %s )) **", result);
				SendHitmanRadioMessage(COLOR_LIGHTBLUE, string);
			}
			else
			{
			    format(string, sizeof(string), "** %s: (( %s )) **", PlayerInfo[playerid][pHitmanNev],  result);
				SendHitmanRadioMessage(COLOR_LIGHTBLUE, string);
			}
			format(string, sizeof(string), "[Rádió]Valaki mondja: (( %s ))", result);
			ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		return 1;
	}
	
	if(egyezik(cmd, "/hitman"))
	{
	    if(!IsDirector(playerid)) return 1;
		if(params < 1) return Msg(playerid, "/Hitman [Viadal / Megbízás / Felvesz / Kirúg]");
		
		if(egyezik(param[1], "megbízás"))
		{
			if(params < 2) return Msg(playerid, "/hitman megbízás [célpont] [játékos]");
			new player = ReturnUser(param[3]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nem aktív játékos");
			new celpont = ReturnUser(param[2]);
			if(celpont == INVALID_PLAYER_ID) return Msg(playerid, "Nem aktív játékos");
			if(PlayerInfo[celpont][pHeadValue] < 1) return Msg(playerid, "Ezen a játékoson nincs vérdíj");
			if(HitmanDuty[player] > NINCS) return Msg(playerid, "Neki már van egy megbízása");
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Megbíztad %s-t hogy ölje meg %s-t %dFt-ért.", PlayerName(player), PlayerName(celpont), PlayerInfo[celpont][pHeadValue]);
			SendFormatMessage(player, COLOR_YELLOW, "SMS: Megbízást kaptál! Célpont: %s, Fizetés: %dFt, Feladó: Hitman", PlayerName(celpont), PlayerInfo[celpont][pHeadValue]);
			HitmanDuty[player] = celpont;
		}

        if(egyezik(param[1], "Felvesz"))
		{
		    if(!IsDirector(playerid)) return 1;
			if(params != 2) return Msg(playerid, "/Hitman Felvesz [Játékos Neve / ID]");
            new player;
			player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
			if(IsHitman(player)) return Msg(playerid, "Õ már hitman!");
			PlayerInfo[player][pHitman] = 1;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: %s-t felvetted a Hitmanekhez! Ne felejts el nevet adni neki![/HitmanNév]", PlayerName(player));
			Msg(player, "Hitman lettél! Segítségért: (/help)");
			return 1;
		}
		else if(egyezik(param[1], "Kirúg") || egyezik(param[1], "Kirug"))
		{
		    if(!IsDirector(playerid)) return 1;
		    if(params != 2) return Msg(playerid, "/Hitman Kirúg [Játékos Neve / ID]");
            new player;
			player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
			if(!IsHitman(player)) return Msg(playerid, "Õ nem hitman!");
			PlayerInfo[player][pHitman] = 0;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: %s-t kirúgtad a Hitmanektõl!", PlayerName(player));
			Msg(player, "A fõnököd aktivált egy bombát a testedben.");
			if(ConnectedToPC[player] > 0)
		 		ConnectedToPC[player] = 0;
		 	
		 	if(HitmanDuty[player] > 0)
				HitmanDuty[player] = 0;
		 	
			SetHealth(player, 0);
			new Float:x, Float:y, Float:z;
			GetPlayerPos(player, x, y, z);
			CreateExplosion(x, y, z, 7, 10);
			return 1;
		}
		if(egyezik(param[1], "Viadal"))
		{
		    if(!IsDirector(playerid)) return 1;
		    if(params < 2) return Msg(playerid, "/Hitman Viadal [Indít / Benevez] [Játékos Neve / ID]");
		    if(egyezik(param[2], "Indít") || egyezik(param[2], "Indit"))
		    {
				if(BVStart == 1) return Msg(playerid, "Már Folyamatban van egy viadal!");
				for(new x = 0; x < MAX_PLAYERS; x++)
				{
				    if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || BViadal[x] != 1) continue;
				    SendClientMessage(x, COLOR_YELLOW, "SMS: A Viadal megkezdõdõtt! A versenyzõket látod a radaron! Csak egy maradhat!| Feladó: Hitman Director");
				    SendFormatMessage(x, COLOR_YELLOW, "SMS: Fõnyeremény: %dFt és Hitman tagság | Feladó: Hitman Director", BVPenz);
					Msg(x, " Mj.: Ha meghalsz, kilépsz, automatikusan kiszállsz a versenybõl", false, COLOR_YELLOW);
				}
				BVStart = 1;
				Msg(playerid, "A Viadal megkezdõdõtt!");
		    }
		    else if(egyezik(param[2], "Benevez"))
		    {
		        if(params != 3) return Msg(playerid, "/Hitman Viadal Benevez [Játékos Neve / ID]");
				new player;
				player = ReturnUser(param[3]);
				if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
				//if(IsHitman(player)) return Msg(playerid, "A játékos már hitman, nem nevezheted be!");
				if(BViadal[player] == 1) return Msg(playerid, "Ezt a játékost már benevezted.");
				BViadal[player] = 1;
				BVPenz += 100000;
				BVJatekosok++;
				Msg(playerid, "Benevezted a viadalra.");
				/*new BVuzi[256];
				format(BVuzi, sizeof(BVuzi), "SMS: Beneveztünk téged egy viadalra, verseny kezdetéig NE ölj meg senkit. | Feladó: Hitman Director");*/
    			SendClientMessage(player, COLOR_YELLOW, "SMS: Beneveztünk téged egy viadalra, a viadal az utolsó emberig tart, ha nyersz, pénzt és bérgyilkosi címet kapsz | Feladó: Hitman Director");
			}
			else if(egyezik(param[2], "idõ") || egyezik(param[2], "ido"))
			{
				if(params != 3) return Msg(playerid, "/hitman viadal idõ [idõ]");
				new ido;
				ido = strval(param[3]);
				if(ido < 5 || ido > 7200) return Msg(playerid, "Az érték 5 és 7200 között lehet");
				
				SendFormatMessage(playerid, COLOR_WHITE, " Új idõ: %dmp", ido);
				BVIdo = ido;
				
				return 1;
			}
			return 1;
		}
		/*else if(egyezik(param[1], "Név") || egyezik(param[1], "Nev"))
		{
		    if(!IsDirector(playerid)) return 1;
		    if(params != 3) return Msg(playerid, "/Hitman Név [Játékos Neve / ID] [Név]");
            new player;
			player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
			if(!IsHitman(player)) return Msg(playerid, "Õ nem hitman!");
			new UjNevRang;
			UjNevRang = strlen(param[3]);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Elnevezted %s-t![%s]", PlayerName(player), UjNevRang);
			SendFormatMessage(player, COLOR_LIGHTRED, "[Gates]: Director Elnevezett![%s]", UjNevRang);

			return 1;
		}*/

		return 1;
	}
	
	if(egyezik(cmd, "/privát") || egyezik(cmd, "/privat"))
	{
		// Playerid = Te | Player = Tulaj
		if(params != 2) return Msg(playerid, "/Privát [Játékos Neve / ID] [Összeg]");
        new player;
		player = ReturnUser(param[1]);
		new Menyiert;
		Menyiert = strval(param[2]);
	 	new biznisz = BizbeVan(playerid);
		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
		if(PlayerInfo[player][pPbiskey] != BIZ_PIGPEN) return Msg(playerid, "Csak a biznisz tulaja adhat engedélyt!");
		if(biznisz != BIZ_PIGPEN) return Msg(playerid, "Nem vagy a PigPenben!");
		if(GetDistanceBetweenPlayers(playerid,player) > 5) return Msg(playerid, "Nincs a közeledben a játékos!");
		if(Menyiert < 5000) return Msg(playerid, "Minimum 5000Ft.");
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Beakarsz menni a privát szobába %dFt-ért.", Menyiert);
  		SendFormatMessage(player, COLOR_LIGHTBLUE, "* %s beakar menni a privát szobába %dFt-ért. Elfogadás:(/accept privát)", PlayerName(player), Menyiert);
  		PrivatAjanlat[player] = playerid;
		PrivatAr[player] = Menyiert;
  		return 1;
	}

	/*if(egyezik(cmd, "/vizsgáztat") || egyezik(cmd, "/vizsgaztat"))
	{
		if(!LMT(playerid, LMUNKA_OKTATO)) return Msg(playerid, "Nem vagy oktató!");
		if(!Munkarang(playerid, 1)) return Msg(playerid, "Minimum 1-es rang kell hogy használhasd!");
		if(params != 2) return Msg(playerid, "/Vizsgáztat [Játékos Neve / ID] [Összeg]");
        new player;
		player = ReturnUser(param[1]);
		new Menyiert;
		Menyiert = strval(param[2]);
		if(Menyiert < 80000 || Menyiert > 400000) return Msg(playerid, "Minimum 80 ezer, maximum 400 ezer!");
		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
		if(GetDistanceBetweenPlayers(playerid,player) > 5) return Msg(playerid, "Nincs a közeledben a játékos!");
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Felajánlottad %s-nak/nek hogy levizsgáztatod %dFt-ért.", PlayerName(player), Menyiert);
        SendFormatMessage(player, COLOR_LIGHTBLUE, "* Oktató: %s felajánlotta hogy levizsgáztat %dFt-ért. Elfogadás:(/accept Vizsga)", PlayerName(playerid), Menyiert);
        VizsgaAjanlat[player] = playerid;
        VizsgaAr[player] = Menyiert;
		return 1;
	}*/
	if(egyezik(cmd, "/vizsgáztat") || egyezik(cmd, "/vizsgaztat"))
	{
		if(!LMT(playerid, LMUNKA_OKTATO)) return Msg(playerid, "Nem vagy oktató!");
		if(!Munkarang(playerid, 1)) return Msg(playerid, "Minimum 1-es rang kell hogy használhasd!");
		if(params < 2)
		{
			Msg(playerid, "/Vizsgáztat [Játékos Neve / ID] [Mire]");
			SendClientMessage(playerid,COLOR_LIGHTRED,"Jogosítványok: Autó, Motor, Kamion, Repülõ, Hajó, Fegyver, Horgász");
			return 1;
		}
        new player = ReturnUser(param[1]);
		if(!IsPlayerConnected(player)) return Msg(playerid, "A játékos nem Online.");
		if(GetDistanceBetweenPlayers(playerid, player) > 2) return Msg(playerid, "A játékos nincs a közeledbe");
		if(egyezik(param[2], "auto") || egyezik(param[2], "autó"))
		{
			if(!Munkarang(playerid, 1)) return Msg(playerid, "Minimum 1-es rang kell hogy használhasd!");
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Felajánlottad %s-nak/nek hogy levizsgáztatod autóra.", PlayerName(player));
			SendFormatMessage(player, COLOR_LIGHTBLUE, "* Oktató: %s felajánlotta hogy levizsgáztat autóra %dFt-ért. Elfogadás:(/accept Vizsga)", PlayerName(playerid), Autojogsi);
			VizsgaAjanlat[player] = playerid;
			Vizsgafajta[player] = 1;
			VizsgaAr[player] = Autojogsi;
			Tanulofelpenz[player] = floatround(float(Autojogsi) / 2.0);
		}
		else if(egyezik(param[2], "motor"))		
		{
			if(!Munkarang(playerid, 2)) return Msg(playerid, "Minimum 2-es rang kell hogy használhasd!");
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Felajánlottad %s-nak/nek hogy levizsgáztatod motorra.", PlayerName(player));
			SendFormatMessage(player, COLOR_LIGHTBLUE, "* Oktató: %s felajánlotta hogy levizsgáztat motorra %dFt-ért. Elfogadás:(/accept Vizsga)", PlayerName(playerid), Motorjogsi);
			VizsgaAjanlat[player] = playerid;
			Vizsgafajta[player] = 2;
			VizsgaAr[player] = Motorjogsi;
			Tanulofelpenz[player] = floatround(float(Motorjogsi) / 2.0);
		}
		else if(egyezik(param[2], "kamion"))
		{
			if(!Munkarang(playerid, 4)) return Msg(playerid, "Minimum 4-es rang kell hogy használhasd!");
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Felajánlottad %s-nak/nek hogy levizsgáztatod kamionra.", PlayerName(player));
			SendFormatMessage(player, COLOR_LIGHTBLUE, "* Oktató: %s felajánlotta hogy levizsgáztat kamionra %dFt-ért. Elfogadás:(/accept Vizsga)", PlayerName(playerid), Kamionjogsi);
			VizsgaAjanlat[player] = playerid;
			Vizsgafajta[player] = 3;
			VizsgaAr[player] = Kamionjogsi;
			Tanulofelpenz[player] = floatround(float(Kamionjogsi) / 2.0);
		}
		else if(egyezik(param[2], "hajó") || egyezik(param[2], "hajo"))
		{
			if(!Munkarang(playerid, 3)) return Msg(playerid, "Minimum 3-as rang kell hogy használhasd!");
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Felajánlottad %s-nak/nek hogy levizsgáztatod hajóra.", PlayerName(player));
			SendFormatMessage(player, COLOR_LIGHTBLUE, "* Oktató: %s felajánlotta hogy levizsgáztat hajóra %dFt-ért. Elfogadás:(/accept Vizsga)", PlayerName(playerid), Hajojogsi);
			VizsgaAjanlat[player] = playerid;
			Vizsgafajta[player] = 4;
			VizsgaAr[player] = Hajojogsi;
			Tanulofelpenz[player] = floatround(float(Hajojogsi) / 2.0);
		}
		else if(egyezik(param[2], "fegyver"))
		{
			if(!Munkarang(playerid, 5)) return Msg(playerid, "Minimum 5-ös rang kell hogy használhasd!");
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Felajánlottad %s-nak/nek hogy vizsgázzon lövészetbõl.", PlayerName(player));
			SendFormatMessage(player, COLOR_LIGHTBLUE, "* Oktató: %s felajánlotta hogy levizsgáztat lövészetbõl %dFt-ért. Elfogadás:(/accept Vizsga)", PlayerName(playerid), Fegyverjogsi);
			VizsgaAjanlat[player] = playerid;
			Vizsgafajta[player] = 5;
			VizsgaAr[player] = Fegyverjogsi;
			Tanulofelpenz[player] = floatround(float(Fegyverjogsi) / 2.0);
		}
		else if(egyezik(param[2], "horgász") || egyezik(param[2], "horgasz"))
		{
			if(!Munkarang(playerid, 1)) return Msg(playerid, "Minimum 1-es rang kell hogy használhasd!");
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Felajánlottad %s-nak/nek hogy adsz neki horgászengedélyt.", PlayerName(player));
			SendFormatMessage(player, COLOR_LIGHTBLUE, "* Oktató: %s felajánlotta hogy ad neked horgászengedélyt %dFt-ért. Elfogadás:(/accept Vizsga)", PlayerName(playerid), Horgaszjogsi);
			VizsgaAjanlat[player] = playerid;
			Vizsgafajta[player] = 6;
		}
		else if(egyezik(param[2], "repülõ") || egyezik(param[2], "repulo") || egyezik(param[2], "repülö"))
		{
			if(!Munkarang(playerid, 4)) return Msg(playerid, "Minimum 4-es rang kell hogy használhasd!");
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Felajánlottad %s-nak/nek hogy levizsgáztatod repülõre.", PlayerName(player));
			SendFormatMessage(player, COLOR_LIGHTBLUE, "* Oktató: %s felajánlotta hogy levizsgáztat repülõre %dFt-ért. Elfogadás:(/accept Vizsga)", PlayerName(playerid), Repulojogsi);
			VizsgaAjanlat[player] = playerid;
			Vizsgafajta[player] = 7;
			VizsgaAr[player] = Repulojogsi;
			Tanulofelpenz[player] = floatround(float(Repulojogsi) / 2.0);
		}
	}
	
		
		
		
	if(egyezik(cmd, "/bank"))
	{
		if(!egyezik(PlayerName(playerid), BankTulaj) && !egyezik(PlayerName(playerid), BankMasodTulaj) && !IsScripter(playerid)) return Msg(playerid, "Kizárólag a tulajnak / másodtulajnak!");
		if(params < 1) return Msg(playerid, "/Bank [Info / (Pénz)Kivétel / (Pénz)Befizet]");
		if(egyezik(param[1], "Info"))
		{
			Msg(playerid, "==========[Bank Info]==========", false);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Tulaj: %s - Másodtulaj: %s", BankTulaj, BankMasodTulaj);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Széf: %dFt", BankSzef);
			return 1;
		}
		if(egyezik(param[1], "befizet"))
		{
			if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187)) return Msg(playerid, "Nem vagy bankba!");
			if(params < 2) return Msg(playerid, "/Bank Befizetés [Összeg]");
			new osszeg = strval(param[2]);
			if(osszeg < 1) return Msg(playerid, "Normális összegett!");
			if(GetMoney(playerid) < osszeg) return Msg(playerid, "Nincs nálad ennyi pénz!");
			BankSzef += osszeg;
			GiveMoney(playerid, -osszeg);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Befizettél %dFt-ot a széfbe, most %dFt van benne.", osszeg, BankSzef);
			Cselekves(playerid, "pénzt rakott be a bank széfjébe...");
			return 1;
		}
		if(egyezik(param[1], "kivétel") || egyezik(param[1], "kivetel"))
		{
			if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187)) return Msg(playerid, "Nem vagy bankba!");
			if(params < 2) return Msg(playerid, "/Bank Kivétel [Összeg]");
			new osszeg = strval(param[2]);
			if(osszeg < 1) return Msg(playerid, "Normális összegett!");
			if((BankSzef - osszeg) < 0) return Msg(playerid, "Ennyi pénz nincs a széfben!");
			BankSzef -= osszeg;
			GiveMoney(playerid, osszeg);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Kivettél %dFt-ot a széfbõl, maradt %dFt.", osszeg, BankSzef);
			Cselekves(playerid, "pénzt vett ki a bank széfjébõl...");
			return 1;
		}
		if(egyezik(param[1], "tulaj"))
		{
			if(!IsScripter(playerid)) return 1;
			if(params < 2) return Msg(playerid, "/Bank Tulaj [Játékos Neve / ID]");
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
			strmid(BankTulaj, PlayerName(player), 0, strlen(PlayerName(player)), 255);
			SaveBankAdatok();
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Az új bank tulaj: %s", BankTulaj);
			SendClientMessage(player, COLOR_LIGHTGREEN, "* Te lettél az új bank tulaj!");
			return 1;
		}
		if(egyezik(param[1], "másodtulaj") || egyezik(param[1], "masodtulaj"))
		{
			if(params < 2) return Msg(playerid, "/Bank MásodTulaj [Játékos Neve / ID]");
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
			strmid(BankMasodTulaj, PlayerName(player), 0, strlen(PlayerName(player)), 255);
			SaveBankAdatok();
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Az új bank tulaj: %s", BankMasodTulaj);
			SendClientMessage(player, COLOR_LIGHTGREEN, "* Te lettél az új bank másodtulaj!");
			return 1;
		}
	}
    if(egyezik(cmd, "/c4"))
	{
		if(Szint(playerid) < 10) return Msg(playerid, "10es szinttõl!");
		if(LegalisSzervezetTagja(playerid)) return Msg(playerid, "Legális szervezet tagja vagy! Ezért nem vehetsz C4-et...");
		if(params != 1) return Msg(playerid, "Használata: /C4 [Vesz / Felszerel / Robbant]");

        if(egyezik(param[1], "Vesz"))
		{
			if(PlayerInfo[playerid][pC4] != 0) return Msg(playerid, "Már van C4-ed!");
            new fbolt = BizbeVan(playerid);
			if(fbolt == BIZ_GS1 || fbolt == BIZ_GS2)
			{
				if(GetMoney(playerid) < 100000) return Msg(playerid, "Ahoz hogy megvedd a C4-et, 100,000Ft-ra van szükséged!");
				Msg(playerid, "Megvetted a C4-et! Ára: 100,000Ft");
				PlayerInfo[playerid][pC4] = 1;
				GiveMoney(playerid, -100000);
				Cselekves(playerid, "vett egy C4-et...", 1);
				new bizben = BizbeVan(playerid);
				BizPenz(bizben, 100000);
				BizzInfo[bizben][bProducts] -= 3;
				return 1;
			}
			else
			{
			    Msg(playerid, "Nem vagy fegyverboltban!");
			    return 1;
			}
		}
		else if(egyezik(param[1], "Felszerel"))
		{
			if(PlayerInfo[playerid][pC4] == 0) return Msg(playerid, "Nincs C4-ed!");
			if(Bortonben(playerid))
			{
			    Msg(playerid, "C4-et börtönben? Nem kéne...");
			    return 1;
			}
			if(IsAt(playerid, IsAt_Korhaz))
			{
			    Msg(playerid, "C4-et kórházban? Nem kéne...");
			    return 1;
			}
			if(C4Lerakva[playerid] == 1 || C4Kocsiban[playerid] != NINCS) return Msg(playerid, "Már raktál le C4-et!");
			if(PlayerToPoint(2, playerid, 2144.5300292969, 1626.8874511719, 994.06573486328))
			{
				if(MikorRabolhato > 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Nem rég rabolták!");
					return 1;
				}
				if(ZsarukOnline() < 5) return Msg(playerid, "Nem robbanthatod fel, mert nincs elég online rendõr!");
				
				C4Lerakva[playerid] = 1;
				Msg(playerid, "Elkezted felszerelni a széf ajtajára a C4-et, várj!");
				Freeze(playerid, 6000);
				ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
				ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
				SetTimerEx("c4szereles", 6000, false, "i", playerid);
				Cselekves(playerid, "elkezdett felszerelni egy C4-et a széf ajtajára...");
				return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
  				new kocsim = GetPlayerVehicleID(playerid);
				C4Kocsiban[playerid] = kocsim;
				SetTimerEx("c4szereles", 6000, false, "ii", playerid);
				Msg(playerid, "Elkezted felszerelni a C4-et a kocsiba!");
				Freeze(playerid, 6000);
				Cselekves(playerid, "elkezdett felszerelni egy C4-et a kocsiba...", 1);
				return 1;
			}
			else
			{
				SetTimerEx("c4szereles", 6000, false, "ii", playerid);
				Msg(playerid, "Elkezdted felszerelni a C4-et!");
				Cselekves(playerid, "elkezdett felszerelni egy C4-et...", 1);
				Freeze(playerid, 6000);
				ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
			}
			return 1;
		}
		else if(egyezik(param[1], "Robbant"))
		{
			if(PlayerInfo[playerid][pC4] == 0) return Msg(playerid, "Nincs C4-ed!");
			if(C4Lerakva[playerid] == 0 && C4Kocsiban[playerid] == NINCS) return Msg(playerid, "Nem raktál le C4-et!");
			if(C4Kocsiban[playerid] != NINCS)
			{
			    new kocsi = C4Kocsiban[playerid];
				new Float:x, Float:y, Float:z;
				GetVehiclePos(kocsi, x, y, z);
				CreateExplosion(x, y, z, 7, 50);
				C4Kocsiban[playerid] = NINCS;
				PlayerInfo[playerid][pC4] = 0;
				Msg(playerid, "C4 felrobbantva!");
				Cselekves(playerid, "felrobbantott egy C4-et...");
			}
			else
			{
                CreateExplosion(C4X[playerid], C4Y[playerid], C4Z[playerid], 7, 50);
				C4Lerakva[playerid] = 0;
				C4X[playerid] = 0.000000;
				C4Y[playerid] = 0.000000;
				C4Z[playerid] = 0.000000;
				PlayerInfo[playerid][pC4] = 0;
				Msg(playerid, "C4 felrobbantva!");
				Cselekves(playerid, "felrobbantott egy C4-et...");
			}
			new c4uzi[128];
			Format(c4uzi, "[C4 Figyelmeztetés][%d]%s robbantott egy C4-et.", playerid, PlayerName(playerid));
			ABroadCast(COLOR_LIGHTRED, c4uzi, 1);
			return 1;
		}
        else if(egyezik(param[1], "Pos"))
		{
			if(!IsScripter(playerid)) return 1;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "C4 Pos: %f, %f, %f", C4X[playerid], C4Y[playerid], C4Z[playerid]);
			return 1;
		}
		return 1;
	}

    if(egyezik(cmd, "/bankszámla") || egyezik(cmd, "/bankszamla"))
	{
		if(PlayerInfo[playerid][pZarolva] == 1) return Msg(playerid, "A számlád levan zárolva.");
		if(params < 1)
		{
			Msg(playerid, "/bankszámla [Nyit / Belép / (Pénz)Befizetés / (Pénz)Kivétel / Utalás / Jelszóváltás]");
			Msg(playerid, "Hitelt szeretnél felvenni? (/hitel)");
			return 1;
		}
		if(egyezik(param[1], "Zárolás") || egyezik(param[1], "Zarolas"))
		{
			if(!LMT(playerid, LMUNKA_FBI)) return 1;
			if(LMT(playerid, LMUNKA_FBI)) return Msg(playerid, "/pda..");
			if(!PlayerToPoint(30.0, playerid, 285.105, 182.403, 1007.179)) return Msg(playerid, "Az FBI Fõépületében kell lenned.");
			if(params < 2) return Msg(playerid, "/bankszámla zárolás [számlaszám]");
			new uzenet[100];
			new bsz = strval(param[2]);
			new player = BankSzamla(bsz);
			if(BankSzamla(bsz) == NINCS)
				return Msg(playerid, "Nincs ilyen bankszámlaszám");
			if(PlayerInfo[player][pZarolva] == 1)
			{
				Msg(playerid, "Feloldottad a zárolást a számláról.");
				Format(uzenet, "HQ: %s feloldotta a zárolást egy bankszámláról(Számlaszám: %d)", PlayerName(playerid), bsz);
				SendFamilyMessage(LMUNKA_FBI, COLOR_DBLUE, uzenet);
				PlayerInfo[player][pZarolva] = 0;
				Msg(player, "Az FBI feloldotta a zárolást a számládról.");
				return 1;
			}
			if(PlayerInfo[player][pZarolva] == 0)
			{
				Msg(playerid, "Lezároltad a számlát.");
				Format(uzenet, "HQ: %s lezárt egy számlát(Számlaszám: %d)", PlayerName(playerid), bsz);
				SendFamilyMessage(LMUNKA_FBI, COLOR_DBLUE, uzenet);
				PlayerInfo[player][pZarolva] = 1;
				Msg(player, "Az FBI lezárolta a számlád.");
				return 1;
			}
		}
		else if(egyezik(param[1], "Nyit"))
		{
			if(PlayerInfo[playerid][pBankSzamla] != 0) return Msg(playerid, "Már van bankszámlád!");
			if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187)) return Msg(playerid, "Nem vagy bankba!");
			if(GetMoney(playerid) < 10000) return Msg(playerid, "Bankszámla nyitáshoz 10,000Ft-ra van szükséged!");
			new SzamlaSzam = 10000 + random(89999);
			new SzamlaSzamJelszo = 1000 + random(8999);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Bankszámla nyitás sikeres! SzámlaSzámod: %d | Jelszó: %d", SzamlaSzam, SzamlaSzamJelszo);
			PlayerInfo[playerid][pBankSzamla] = 1;
			PlayerInfo[playerid][pBankSzamlaSzam] = SzamlaSzam;
			PlayerInfo[playerid][pBankSzamlaJelszo] = SzamlaSzamJelszo;
			GiveMoney(playerid, -10000);
			BankSzef += 10000;
			Cselekves(playerid, "nyitott egy bankszámlát...");
			return 1;
		}
		else if(egyezik(param[1], "Belép") || egyezik(param[1], "Belep"))
		{
			if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187) && !IsAt(playerid, IsAt_ATM)) return Msg(playerid, "Nem vagy bankba / ATMnél!");
			if(IsPlayerInAnyVehicle(playerid))
			{
				Msg(playerid, "Jármûbõl akarod használni az ATM-et?");
				return 1;
			}
			if(params < 3) return Msg(playerid, "/bankszámla Belép [SzámlaSzám] [SzámlaJelszó]");
   			new MegadottSzamlaSzam;
			MegadottSzamlaSzam = strval(param[2]);

			new player = BankSzamla(MegadottSzamlaSzam);
			if(player == NINCS || !IsPlayerConnected(player))
				return Msg(playerid, "Nincs ilyen bankszámlaszám");

			new MegadottSzamlaJelszo;
			MegadottSzamlaJelszo = strval(param[3]);

		    if(PlayerInfo[player][pBankSzamlaJelszo] == MegadottSzamlaJelszo)
		    {
				if(player != playerid)
				{
					new ok[64];
					Format(ok, "Be akart lépni %s számlájára", PlayerName(player));
					SeeKick(playerid, ok);
					return 1;
				}
			
				SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Belépés sikeres! Számlán található összeg: %dFt", PlayerInfo[player][pAccount]);
				CsatlakozottSzamla[playerid] = MegadottSzamlaSzam;
				Cselekves(playerid, "belépett egy bankszámlára...");
			}
			else
			{
			    Msg(playerid, "Hiba Történt!");
			    return 1;
			}

			return 1;
		}
		else if(egyezik(param[1], "Befizetés") || egyezik(param[1], "Befizetes"))
		{
			if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187) && !IsAt(playerid, IsAt_ATM)) return Msg(playerid, "Nem vagy bankba / ATMnél!");
			if(IsPlayerInAnyVehicle(playerid))
			{
				Msg(playerid, "Jármûbõl akarod használni az ATM-et?");
				return 1;
			}
			if(CsatlakozottSzamla[playerid] == NINCS) return Msg(playerid, "Elöször bekell lépned egy számlára!");
			if(params < 2) return Msg(playerid, "/bankszámla Befizetés [Összeg]");
			new BefizetendoOsszeg;
			BefizetendoOsszeg = strval(param[2]);
			if(BefizetendoOsszeg < 10000) return Msg(playerid, "Minimum 10,000Ft");
			new player = BankSzamla(CsatlakozottSzamla[playerid]);
            if(BankSzamla(CsatlakozottSzamla[playerid]) == NINCS) return Msg(playerid, "Hiba Történt!");

			if(GetMoney(playerid) < BefizetendoOsszeg) return Msg(playerid, "Nincs nálad enyi pénz!");
			
			new UjOsszeg, RegiOsszeg, koltseg;
			koltseg = floatround(float(BefizetendoOsszeg) * 0.01);
			if(koltseg < 500) koltseg = 500;
			BankSzef += koltseg * KAMATSZORZO;
			
			PlayerInfo[player][pAccount]+= (BefizetendoOsszeg - koltseg);
			UjOsszeg = PlayerInfo[player][pAccount];
			RegiOsszeg = PlayerInfo[player][pAccount] - BefizetendoOsszeg;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Befizetés sikeres! Régi Összeg: %dFt, Új Összeg: %dFt, Kezelési költség: %dFt (1%%)", RegiOsszeg, UjOsszeg, koltseg);
			GiveMoney(playerid, -BefizetendoOsszeg);
			return 1;
		}
        else if(egyezik(param[1], "Kivétel") || egyezik(param[1], "Kivetel"))
		{
			if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187) && !IsAt(playerid, IsAt_ATM)) return Msg(playerid, "Nem vagy bankba / ATMnél!");
			if(IsPlayerInAnyVehicle(playerid))
			{
				Msg(playerid, "Jármûbõl akarod használni az ATM-et?");
				return 1;
			}
			if(CsatlakozottSzamla[playerid] == NINCS) return Msg(playerid, "Elöször bekell lépned egy számlára!");
			if(params < 2) return Msg(playerid, "/bankszámla Kivétel [Összeg]");
			new KivettOsszeg;
			KivettOsszeg = strval(param[2]);
			if(KivettOsszeg < 10000) return Msg(playerid, "Minimum 10,000Ft");
			new player = BankSzamla(CsatlakozottSzamla[playerid]);
			if(BankSzamla(CsatlakozottSzamla[playerid]) == NINCS) return Msg(playerid, "Hiba Történt!");

   			if(GetMoney(playerid) >= MAXPENZ) return Msg(playerid, "Ennyi pénz nem fér el nálad!");
   			if(PlayerInfo[player][pAccount] < KivettOsszeg) return Msg(playerid, "Nincs ennyi pénz a számlán!");
			
			new UjOsszeg, RegiOsszeg, koltseg;
			koltseg = floatround(float(KivettOsszeg) * 0.01);
			if(koltseg < 500) koltseg = 500;
			BankSzef += koltseg * KAMATSZORZO;
			
			PlayerInfo[player][pAccount]-= KivettOsszeg;
			
			UjOsszeg = PlayerInfo[player][pAccount];
			RegiOsszeg = PlayerInfo[player][pAccount] + KivettOsszeg;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Sikeres kivétel! Régi Összeg: %dFt, Új Összeg: %dFt, Kezelési költség: %dFt (1%%)", RegiOsszeg, UjOsszeg, koltseg);
			GiveMoney(playerid, KivettOsszeg);
			return 1;
		}
        else if(egyezik(param[1], "Utalás") || egyezik(param[1], "Utalas"))
		{
			if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187) && !IsAt(playerid, IsAt_ATM)) return Msg(playerid, "Nem vagy bankba / ATMnél!");
			if(IsPlayerInAnyVehicle(playerid))
			{
				Msg(playerid, "Jármûbõl akarod használni az ATM-et?");
				return 1;
			}
			if(CsatlakozottSzamla[playerid] == NINCS) return Msg(playerid, "Elöször bekell lépned egy számlára!");
			if(params < 2) return Msg(playerid, "/bankszámla Utalás [SzámlaSzám] [Összeg]");
			new Szamla;
			Szamla = strval(param[2]);
			new osszeg;
			osszeg = strval(param[3]);
			if(osszeg < 10000) return Msg(playerid, "Minimum 10,000Ft");
			/*if(osszeg < 0)
			{
				Msg(playerid, "Ezt bebuktad...Ne várj unbant!");
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s ki lett bannolva a rendszer által | Oka: Bugot akarsz kihasználni? Nem szép dolog...", PlayerName(playerid));
				SeeBan(playerid, 0, true);
				SeeBan(playerid, 0, false);
				Kick(playerid);
				return 1;
			}*/
			if(osszeg < 1 || osszeg > 100000000) return Msg(playerid, "Összeg nem lehet 1Ft-nál kissebb, és 100,000,000Ft-nál nagyobb...");
			if(Szamla == 0102)
			{
			    if(!AMT(playerid, MUNKA_AUTOKERESKEDO))
					return Msg(playerid, "Nem vagy autókereskedõ!");

				if(osszeg < 1)	return Msg(playerid, "-.-");
				if(osszeg > RendelesPenz)
				{
					SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFtot kell utalnod, ennél többre nincs szükség.", RendelesPenz);
					return 1;
				}
				if(osszeg == RendelesPenz)
					SendFormatMessage(playerid, COLOR_GREY, "Átutaltál %dFtot, így a teljes összeg be lett fizetve. Az import cég ~15 órán ((15perc)) belül megérkezik a kocsival a kikötõbe!", osszeg);
				else
					SendFormatMessage(playerid, COLOR_GREY, "Átutaltál %dFtot, már csak %dFtot kell befizetned!", osszeg, (RendelesPenz - moneys));

				RendelesPenz -= osszeg;
				PlayerInfo[playerid][pAccount] -= osszeg;
				BizPenz(BIZ_IMPORT, osszeg);

				if(RendelesPenz <= 0)
					RendelesAlatt = 2;
				//SaveStuff();
				return 1;
			}
			new player = BankSzamla(Szamla), sajatszamla = BankSzamla(CsatlakozottSzamla[playerid]);
			if(player == NINCS)
				return Msg(playerid, "Nincs ilyen számla!");

			if(PlayerInfo[sajatszamla][pAccount] < osszeg) return Msg(playerid, "Ez kicsit sok lenne...");
			/*new penz = PlayerInfo[player][pAccount] += osszeg;
			if(penz > MAXERTEK) return Msg(playerid, "Enyi pénz nem fér el a bankszámláján.");*/

			new koltseg;
			koltseg = floatround(float(osszeg) * 0.01);
			if(koltseg < 500) koltseg = 500;
			BankSzef += koltseg * KAMATSZORZO;

			PlayerInfo[player][pAccount] += osszeg;
			PlayerInfo[sajatszamla][pAccount] -= osszeg;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Utaltál %dFt-ot neki: %s, kezelési költség %dFt (1%%)", osszeg, PlayerName(player), koltseg);
            SendFormatMessage(player, COLOR_LIGHTRED, "[Gates]: %s utalt %dFt-t", PlayerName(playerid), osszeg);
			if(osszeg > 5000000)
			{
			    Format(string, "Figyelem: %s utalt neki: %s, %dFt-t!", PlayerName(playerid), PlayerName(player), osszeg);
				ABroadCast(COLOR_LIGHTRED, string, 1);
			}
			return 1;
		}
		else if(egyezik(param[1], "Jelszóváltás") || egyezik(param[1], "Jelszovaltas"))
		{
 		   if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187)) return Msg(playerid, "Nem vagy bankba/ATMnél!");
		   if(CsatlakozottSzamla[playerid] == NINCS) return Msg(playerid, "Min akarsz jelszót váltani?");
		   if(GetMoney(playerid) < 50000) return Msg(playerid, "A jelszóváltáshoz 50.000FT-ra lesz szükséged");
		   new UjJelszo = 1000 + random(8999);
		   PlayerInfo[playerid][pBankSzamlaJelszo] = UjJelszo;
		   GiveMoney(playerid, -50000);
		   BankSzef += 50000;
		   SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Jelszóváltás sikeres, új jelszó: %d", UjJelszo);
		   Cselekves(playerid, "jelszót váltott a számláján...");
		 }  
        else if(egyezik(param[1], "Töröl"))
		{
			if(!IsScripter(playerid)) return 1;
			PlayerInfo[playerid][pBankSzamla] = 0;
			PlayerInfo[playerid][pBankSzamlaSzam] = 0;
			PlayerInfo[playerid][pBankSzamlaJelszo] = 0;
			Msg(playerid, "Törölted a bankszámlád!");
			return 1;
		}
		else
			Msg(playerid, "/bankszámla [Nyit / Belép / (Pénz)Befizetés / (Pénz)Kivétel / Utalás / Jelszóváltás]");

		return 1;
	}

    if(egyezik(cmd, "/felvesz"))
	{
		if(params < 1) return Msg(playerid, "/felvesz [Fizetés / Mûanyag]");

		if(FloodCheck(playerid)) return 1;

		if(egyezik(param[1], "Fizetés") || egyezik(param[1], "Fizetes"))
		{
			if(PlayerInfo[playerid][pBankSzamla] != 0) return Msg(playerid, "Van bankszámlád, a fizetést oda kapod...");
			if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187)) return Msg(playerid, "Nem vagy bankba!");
			if(PlayerInfo[playerid][pPayCheck] < 10000) return Msg(playerid, "Legalább 10,000Ft-nak kell lennie a fizetésednek!");
			GiveMoney(playerid, PlayerInfo[playerid][pPayCheck]);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Fizetés felvéve! Összeg: %dFt", PlayerInfo[playerid][pPayCheck]);
            PlayerInfo[playerid][pPayCheck] = 0;
            Cselekves(playerid, "felvette a fizetését...");
			return 1;
		}
		else if(egyezik(param[1], "Mûanyag") || egyezik(param[1], "Muanyag"))
		{
			if(!PlayerToPoint(3, playerid, 90.638587, -183.727081, 1.484375) && !PlayerToPoint(3, playerid,	-1688.1918,-17.7540,3.5547)) return Msg(playerid, "Nem vagy mûanyag felvevõ helyen!");

			if(PlayerInfo[playerid][pMuanyag] >= MAXMUANYAG) return Msg(playerid, "Enyi mûanyagot nem bírsz el!");

	    	if(GetMoney(playerid) < 500) return Msg(playerid, "Nincs elég pénzed! (500Ft)");
    		GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Felvettel 1 muanyagdobozt...", 3000, 3);
			PlayerInfo[playerid][pMuanyag]++;
			GiveMoney(playerid, -500);
			Cselekves(playerid, "felvett egy mûanyagdobozt...");
			return 1;
		}
		else
			Msg(playerid, "/felvesz [Fizetés / Mûanyag]");

		return 1;
	}

	if(egyezik(cmd, "/oktatók") || egyezik(cmd, "/oktatok"))
	{
		new oktatok;

		Msg(playerid, "========== Oktatók ==========", false, COLOR_WHITE);

		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || IsPlayerNPC(x) || PlayerInfo[x][pMember] != LMUNKA_OKTATO || PlayerInfo[x][pRank] < 1 || OnDuty[x] == 0) continue;
			oktatok++;
			SendFormatMessage(playerid, COLOR_GREY, "%s | Tel.: %d | Rang: %d", PlayerName(x), PlayerInfo[x][pPnumber], PlayerInfo[x][pRank]);
		}

		if(oktatok < 1) Msg(playerid, "Jelenleg nincs szolgálatban oktató, vagy csak tanuló tanár / tanársegéd van");
		Msg(playerid, "========== Oktatók ==========", false, COLOR_WHITE);

		return 1;
	}
	if(strcmp(cmd, "/objdel", true) == 0)
	{
		if(!IsScripter(playerid)) return 1;

		if(params != 1) return Msg(playerid, "/objdel [meddig]");

		new mennyi;
		mennyi = strval(GetParam(cmdtext, 1));

		for(new x = 0; x < mennyi; x++)
			DestroyDynamicObject(x);

		return 1;
	}

	if(strcmp(cmd, "/hq", true) == 0)
	{
		if(!IsPlayerConnected(playerid)) return 1;
		if(!MunkaLeader(playerid, LMUNKA_SCPD) && !MunkaLeader(playerid, LMUNKA_FBI) && !MunkaLeader(playerid, LMUNKA_KATONA) && !MunkaLeader(playerid, LMUNKA_SFPD))
			return Msg(playerid, "Nem vagy SCPD / FBI / Katona leader!");

		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')) { idx++; }
		new offset = idx;
		new result[128];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
		result[idx - offset] = cmdtext[idx];
		idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Használat: /hq [üzeneted]");
			return 1;
		}
		format(string, sizeof(string), "HQ: %s, vége", result);
		SendRadioMessage(PlayerInfo[playerid][pLeader], TEAM_BLUE_COLOR, string);

		return 1;
	}
		
	if(strcmp(cmd, "/kivanitt", true) == 0)
	{
		if(!Admin(playerid, 1)) return 1;

		new Float:tav = 4, emberek, txt[256], Float:tavolsag;

		if(params >= 1) tav = floatstr(GetParam(cmdtext, 1));

		if(tav < 1 || tav > 5000.0) return Msg(playerid, "A táv hosza 1 és 1000.0 között lehet!");

		SendClientMessage(playerid, COLOR_WHITE, "=============== A közelben lévõ emberek ===============");
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(x != playerid && IsPlayerConnected(x) && Logged(x))
			{
				tavolsag = GetDistanceBetweenPlayers(playerid, x);
				if(tavolsag <= tav)
				{
					emberek++;
					if(!IsHitman(x) || IsHitman(x) && IsScripter(playerid))
					{
						if(emberek % 4 != 0)
						{
							if(emberek % 4 == 1)
								format(txt, sizeof(txt), "%s [%.2f]", PlayerName(x), tavolsag);
							else
								format(txt, sizeof(txt), "%s, %s [%.2f]", txt, PlayerName(x), tavolsag);
						}
						else
						{
							format(txt, sizeof(txt), "%s, %s [%.2f]", txt, PlayerName(x), tavolsag);
							SendClientMessage(playerid, COLOR_GREY, txt);
						}
					}
					else
					{
						if(emberek % 4 != 0)
						{
							if(emberek % 4 == 1)
								format(txt, sizeof(txt), "Hitman [%.2f]", tavolsag);
							else
								format(txt, sizeof(txt), "%s, Hitman [%.2f]", txt, PlayerName(x), tavolsag);
						}
						else
						{
							format(txt, sizeof(txt), "%s, Hitman [%.2f]", txt, PlayerName(x), tavolsag);
							SendClientMessage(playerid, COLOR_GREY, txt);
						}
					}
				}
			}
			if(x == (MAX_PLAYERS - 1) && emberek % 4 != 0)
			{
				//format(txt, sizeof(txt), "%s, %s [%.2f]", txt, PlayerName(x), tavolsag);
				SendClientMessage(playerid, COLOR_GREY, txt);
			}
		}

		if(emberek < 1)
			SendClientMessage(playerid, COLOR_LIGHTRED, "A közelben nincs senki...");
		SendClientMessage(playerid, COLOR_WHITE, "=============== A közelben lévõ emberek ===============");

		return 1;
	}


	if(strcmp(cmd, "/igénylések", true) == 0)
	{
		if(!Admin(playerid, 1337)) return 1;
		if(!IsScripter(playerid)) return 1;

		if(params < 1) return SendClientMessage(playerid, COLOR_GREY, "Használata: /igénylések [be/ki]");

		tmp = GetParam(cmdtext, 1);

		if(strcmp(tmp, "be", true) == 0)
		{
			if(IgenylesEngedelyezve == 0)
			{
				IgenylesEngedelyezve = 1;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Engedélyezted az igényléseket!");
				SendClientMessageToAll(COLOR_LIGHTGREEN, "A Házmesterek Zrt. úgy döntött, hogy épít házakat kérésre");
			}
			else
				SendClientMessage(playerid, COLOR_GREY, "Engedélyezve van!");
		}
		else if(strcmp(tmp, "ki", true) == 0)
		{
			if(IgenylesEngedelyezve == 1)
			{
				IgenylesEngedelyezve = 0;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Letiltottad az igényléseket!");
				SendClientMessageToAll(COLOR_LIGHTRED, "A Házmesterek Zrt. úgy döntött, nem kíván több házat építeni!");
			}
			else
				SendClientMessage(playerid, COLOR_GREY, "Tiltva van!");
		}
		else
			SendFormatMessage(playerid, COLOR_GREY, "Használata: /igénylések [be/ki] - %s", tmp);

		return 1;
	}

	if(strcmp(cmd, "/igénytörlése", true) == 0)
	{
		if(!Admin(playerid, 1337)) return 1;

		new hazak = sizeof(HouseInfo);
		for(new i = 0; i < hazak; i++)
		{
			if(HouseInfo[i][Van] == 0) continue;

			if(PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
				if(HouseInfo[i][hCsak] == 1)
				{
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "[Gates] utca %d igényelhetõsége törölve, így bárki megveheti!", i);
					SendFormatMessageToAll(COLOR_LIGHTRED, "Házmesterek Zrt: A cég úgydöntött törli a [Gates] utca %d ház igényelhetõségét, így bárki megveheti! Ára %dFt", i, HouseInfo[i][hValue]);
					HouseInfo[i][hCsak] = 0;
				}
				else
					SendClientMessage(playerid, COLOR_GREY, "Ezt a házat bárki megveheti...");
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "Nem vagy a ház bejáratánál!");
		return 1;
	}

	if(strcmp(cmd, "/tuning", true) == 0)
	{
		if(!AMT(playerid, MUNKA_SZERELO)) return Msg(playerid, "Nem vagy autószerelõ.");
        if(!PlayerToPoint(3, playerid, -1917.3201,304.5225,41.0469)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy a tuning mûhelybe!");
		if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "A jármû mellett kell állnod");
		if(BizzInfo[BIZ_TUNING][bProducts] < 1)
		{
			GameTextForPlayer(playerid, "~r~Nincsenek alkatreszek", 5000, 1);
			return 1;
		}
		//if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
		new kocsim;
		kocsim = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, kocsim) > 5.5) return Msg(playerid, "Nincs a közelben a jármû!");
		new penzem;
		penzem = GetMoney(playerid);
		//new kocsi;
		//kocsi = GetVehicleModel(kocsim);
		tmp = strtok(cmdtext, idx);
		//new biz;
		//biz = BIZ_TUNING;
		if(!strlen(tmp))
		{
            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "Üdv a tuning mûhelyben!");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Használata: /tuning [komponens]");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Komponensek:");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nitro: 65.000FT");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Hidraulika: 35.000FT");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "XFLOW(Sultan, Jester, Uranus, Flash, Stratum, Elegy): 75.000FT");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "ALIEN(Sultan, Jester, Uranus, Flash, Stratum, Elegy): 75.000FT");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Kerék: 7.000Ft");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Festés + Javítás: 5.000Ft");
			//SendClientMessage(playerid, COLOR_LIGHTBLUE, "Matrica: 30000Ft");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "__________________________________");
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
			return 1;
		}
		if(tuningolo[playerid] > 0) return Msg(playerid, "Jelenleg tuningolsz, megkell várnod amíg elkészül.");

		if(strcmp(tmp, "nitro", true) == 0 || strcmp(tmp, "nitró", true) == 0)
		{
			if(penzem < 65000)
			{
            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed!");
            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
            return 1;
			}
			tuningolo[playerid] = 1;
			Freeze(playerid, 36000);
			SetTimerEx("AlapTuning", 36000, false, "i", playerid);
			/*AddVehicleComponent(kocsim, 1010);
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "10x Nitró felszerelve!");
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
			GiveMoney(playerid, -65000);
			BizPenz(biz, 65000);
			BizzInfo[BIZ_TUNING][bProducts] -= 10;*/
		}

		else if(strcmp(tmp, "hidraulika", true) == 0)
		{
		    if(penzem < 35000)
			{
            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed!");
            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
            return 1;
			}
			tuningolo[playerid] = 2;
			Freeze(playerid, 36000);
			SetTimerEx("AlapTuning", 36000, false, "i", playerid);
			/*AddVehicleComponent(kocsim, 1087);
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Hidraulika felszerelve!");
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
			GiveMoney(playerid, -35000);
			BizPenz(biz, 35000);
			BizzInfo[BIZ_TUNING][bProducts] -= 15;*/
		}

		else if(strcmp(tmp, "kerek", true) == 0 || strcmp(tmp, "kerék", true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GREY, "Használata: /tuning kerék [1-13]");

			new kerek = strval(tmp);
			if(penzem < 7000)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				return 1;
			}
			if(kerek < 1 || kerek > 13) return SendClientMessage(playerid, COLOR_GREY, "Ehhh... Te mit akarsz? Meglett mondva hogy 1-13");
			Tkerek[playerid] = (kerek + 1072); 
			tuningolo[playerid] = 6;
			Freeze(playerid, 36000);
			SetTimerEx("AlapTuning", 36000, false, "i", playerid);
			/*AddVehicleComponent(kocsim, (kerek + 1072));
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Új kerék felrakva!");
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
			GiveMoney(playerid, -7000);
			BizPenz(biz, 7000);
			BizzInfo[BIZ_TUNING][bProducts] -= 5;*/
		}

        else if(strcmp(tmp, "ALIEN", true) == 0)
		{
		    if(penzem < 75000)
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed!");
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
	            return 1;
			}
			tuningolo[playerid] = 3;
			Freeze(playerid, 36000);
			SetTimerEx("AlapTuning", 36000, false, "i", playerid);
			/*if(kocsi == 560)
			{
				AddVehicleComponent(kocsim, 1026);
				AddVehicleComponent(kocsim, 1027);
				AddVehicleComponent(kocsim, 1032);
				AddVehicleComponent(kocsim, 1169);
				AddVehicleComponent(kocsim, 1138);
				AddVehicleComponent(kocsim, 1141);
				AddVehicleComponent(kocsim, 1028);
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
			else if(kocsi == 562)
			{
				AddVehicleComponent(kocsim, 1034);
				AddVehicleComponent(kocsim, 1038);
				AddVehicleComponent(kocsim, 1036);
				AddVehicleComponent(kocsim, 1040);
				AddVehicleComponent(kocsim, 1147);
				AddVehicleComponent(kocsim, 1149);
	            AddVehicleComponent(kocsim, 1171);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
            else if(kocsi == 559)
			{
				AddVehicleComponent(kocsim, 1065);
				AddVehicleComponent(kocsim, 1067);
				AddVehicleComponent(kocsim, 1069);
				AddVehicleComponent(kocsim, 1071);
				AddVehicleComponent(kocsim, 1159);
				AddVehicleComponent(kocsim, 1160);
	            AddVehicleComponent(kocsim, 1162);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
            else if(kocsi == 558)
			{
				AddVehicleComponent(kocsim, 1088);
				AddVehicleComponent(kocsim, 1090);
				AddVehicleComponent(kocsim, 1092);
				AddVehicleComponent(kocsim, 1094);
				AddVehicleComponent(kocsim, 1164);
				AddVehicleComponent(kocsim, 1166);
	           	AddVehicleComponent(kocsim, 1168);
	 			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
			else if(kocsi == 561)
			{
				AddVehicleComponent(kocsim, 1055);
				AddVehicleComponent(kocsim, 1056);
				AddVehicleComponent(kocsim, 1058);
				AddVehicleComponent(kocsim, 1062);
				AddVehicleComponent(kocsim, 1064);
				AddVehicleComponent(kocsim, 1154);
	 			AddVehicleComponent(kocsim, 1155);
	 			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
			else if(kocsi == 565)
			{
				AddVehicleComponent(kocsim, 1046);
				AddVehicleComponent(kocsim, 1047);
				AddVehicleComponent(kocsim, 1049);
				AddVehicleComponent(kocsim, 1051);
				AddVehicleComponent(kocsim, 1054);
				AddVehicleComponent(kocsim, 1150);
				AddVehicleComponent(kocsim, 1153);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
			else
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sultan,Jester,Uranus,Flash,Stratum,Elegy kocsikra!");
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
	            return 1;
			}*/
		}

        else if(strcmp(tmp, "XFLOW", true) == 0)
		{
		    if(penzem < 75000)
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed!");
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
	            return 1;
			}
			tuningolo[playerid] = 4;
			Freeze(playerid, 36000);
			SetTimerEx("AlapTuning", 36000, false, "i", playerid);
            /*if(kocsi == 560)
			{
				AddVehicleComponent(kocsim, 1029);
				AddVehicleComponent(kocsim, 1030);
				AddVehicleComponent(kocsim, 1031);
				AddVehicleComponent(kocsim, 1133);
				AddVehicleComponent(kocsim, 1139);
				AddVehicleComponent(kocsim, 1140);
				AddVehicleComponent(kocsim, 1170);
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
			else if(kocsi == 562)
			{
				AddVehicleComponent(kocsim, 1035);
				AddVehicleComponent(kocsim, 1037);
				AddVehicleComponent(kocsim, 1039);
				AddVehicleComponent(kocsim, 1041);
				AddVehicleComponent(kocsim, 1146);
				AddVehicleComponent(kocsim, 1148);
	            AddVehicleComponent(kocsim, 1172);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
            else if(kocsi == 559)
			{
				AddVehicleComponent(kocsim, 1066);
				AddVehicleComponent(kocsim, 1068);
				AddVehicleComponent(kocsim, 1070);
				AddVehicleComponent(kocsim, 1072);
				AddVehicleComponent(kocsim, 1158);
				AddVehicleComponent(kocsim, 1161);
	            AddVehicleComponent(kocsim, 1173);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
            else if(kocsi == 558)
			{
				AddVehicleComponent(kocsim, 1089);
				AddVehicleComponent(kocsim, 1091);
				AddVehicleComponent(kocsim, 1093);
				AddVehicleComponent(kocsim, 1095);
				AddVehicleComponent(kocsim, 1163);
				AddVehicleComponent(kocsim, 1165);
	 			AddVehicleComponent(kocsim, 1167);
	 			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
			else if(kocsi == 561)
			{
				AddVehicleComponent(kocsim, 1057);
				AddVehicleComponent(kocsim, 1059);
				AddVehicleComponent(kocsim, 1050);
				AddVehicleComponent(kocsim, 1061);
				AddVehicleComponent(kocsim, 1063);
				AddVehicleComponent(kocsim, 1156);
	            AddVehicleComponent(kocsim, 1157);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
			else if(kocsi == 565)
			{
				AddVehicleComponent(kocsim, 1045);
				AddVehicleComponent(kocsim, 1048);
				AddVehicleComponent(kocsim, 1050);
				AddVehicleComponent(kocsim, 1052);
				AddVehicleComponent(kocsim, 1053);
				AddVehicleComponent(kocsim, 1151);
	            AddVehicleComponent(kocsim, 1152);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
			}
			else
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sultan,Jester,Uranus,Flash,Stratum,Elegy kocsikra tudok csak!");
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
	            return 1;
			}*/
		}

        else if(strcmp(tmp, "festes", true) == 0 || strcmp(tmp, "festés", true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GREY, "Használata: /tuning festés [0-139]");

			new szin = strval(tmp);
			if(penzem < 5000)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				return 1;
			}
			if(szin < 0 || szin > 139) return SendClientMessage(playerid, COLOR_GREY, "Ehhh... Te mit akarsz? Meglett mondva hogy 0-139");
			Tszin[playerid] = szin;
			tuningolo[playerid] = 5;
			Freeze(playerid, 36000);
			SetTimerEx("AlapTuning", 36000, false, "i", playerid);
			/*SetVehicleColor(kocsim, szin, szin);
			RepairVehicle(kocsim);
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Kocsi átfestve!");
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
			GiveMoney(playerid, -5000);
			BizPenz(biz, 5000);
			BizzInfo[BIZ_TUNING][bProducts] -= 20;*/
		}
		
		return 1;
	}
	if(strcmp(cmd, "/atuning", true) == 0)
	{
        if(!Admin(playerid, 4)) return SendClientMessage(playerid, COLOR_GREY, "Csak szeretnéd! ((o.O))");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
		new kocsim;
		kocsim = GetPlayerVehicleID(playerid);
		new kocsi;
		kocsi = GetVehicleModel(kocsim);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Használata: /tuning [komponens]");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Komponensek:");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nitro: Ingyenes");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Hidraulika: Ingyenes");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "XFLOW(Sultan, Jester, Uranus, Flash, Stratum, Elegy): Ingyenes");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "ALIEN(Sultan, Jester, Uranus, Flash, Stratum, Elegy): Ingyenes");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Kerék: Ingyenes");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Festés + Javítás: Ingyenes");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Matrica: Ingyenes");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "__________________________________");
			SendClientMessage(playerid, COLOR_RED, "\\KOCSI RESPAWN UTÁN ELTÛNIK A TUNING!//");
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
			return 1;
		}
		if(egyezik(param[1], "matrica"))
		{
			if(params < 2) return Msg(playerid, "/atuning matrica [0-5]");
			new matrica = strval(param[2]);
			if(matrica < 0 || matrica > 5) return 1;
			ChangeVehiclePaintjob(kocsim, matrica);
			Msg(playerid, "Matrica felrakva.");
		}
		else if(strcmp(tmp, "nitro", true) == 0 || strcmp(tmp, "nitró", true) == 0)
		{
			new sofor = KocsiSofor(kocsim); if(sofor != NINCS && PlayerRaceInfo[sofor][xVersenyen] != NINCS || PlayerRaceInfo[playerid][xVersenyen] != NINCS) return Msg(playerid, "Nem használhatod!");
			
			AddVehicleComponent(kocsim, 1010);
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: 10x Nitró felszerelve!");
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
		}

		else if(strcmp(tmp, "hidraulika", true) == 0)
		{
			new sofor = KocsiSofor(kocsim); if(sofor != NINCS && PlayerRaceInfo[sofor][xVersenyen] != NINCS || PlayerRaceInfo[playerid][xVersenyen] != NINCS) return Msg(playerid, "Nem használhatod!");
			AddVehicleComponent(kocsim, 1087);
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: Hidraulika felszerelve!");
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
		}

		else if(strcmp(tmp, "kerek", true) == 0 || strcmp(tmp, "kerék", true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GREY, "Használata: /tuning kerék [1-13]");

			new kerek = strval(tmp);

			if(kerek < 1 || kerek > 13) return SendClientMessage(playerid, COLOR_GREY, "Ehhh... Te mit akarsz? Meglett mondva hogy 1-13");
			AddVehicleComponent(kocsim, (kerek + 1072));
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: Új kerék felrakva!");
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
		}

        else if(strcmp(tmp, "ALIEN", true) == 0)
		{
			if(kocsi == 560)
			{
				AddVehicleComponent(kocsim, 1026);
				AddVehicleComponent(kocsim, 1027);
				AddVehicleComponent(kocsim, 1032);
				AddVehicleComponent(kocsim, 1169);
				AddVehicleComponent(kocsim, 1138);
				AddVehicleComponent(kocsim, 1141);
				AddVehicleComponent(kocsim, 1028);
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
			else if(kocsi == 562)
			{
				AddVehicleComponent(kocsim, 1034);
				AddVehicleComponent(kocsim, 1038);
				AddVehicleComponent(kocsim, 1036);
				AddVehicleComponent(kocsim, 1040);
				AddVehicleComponent(kocsim, 1147);
				AddVehicleComponent(kocsim, 1149);
	            AddVehicleComponent(kocsim, 1171);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
            else if(kocsi == 559)
			{
				AddVehicleComponent(kocsim, 1065);
				AddVehicleComponent(kocsim, 1067);
				AddVehicleComponent(kocsim, 1069);
				AddVehicleComponent(kocsim, 1071);
				AddVehicleComponent(kocsim, 1159);
				AddVehicleComponent(kocsim, 1160);
	            AddVehicleComponent(kocsim, 1162);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
            else if(kocsi == 558)
			{
				AddVehicleComponent(kocsim, 1088);
				AddVehicleComponent(kocsim, 1090);
				AddVehicleComponent(kocsim, 1092);
				AddVehicleComponent(kocsim, 1094);
				AddVehicleComponent(kocsim, 1164);
				AddVehicleComponent(kocsim, 1166);
	           	AddVehicleComponent(kocsim, 1168);
	 			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
			else if(kocsi == 561)
			{
				AddVehicleComponent(kocsim, 1055);
				AddVehicleComponent(kocsim, 1056);
				AddVehicleComponent(kocsim, 1058);
				AddVehicleComponent(kocsim, 1062);
				AddVehicleComponent(kocsim, 1064);
				AddVehicleComponent(kocsim, 1154);
	 			AddVehicleComponent(kocsim, 1155);
	 			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
			else if(kocsi == 565)
			{
				AddVehicleComponent(kocsim, 1046);
				AddVehicleComponent(kocsim, 1047);
				AddVehicleComponent(kocsim, 1049);
				AddVehicleComponent(kocsim, 1051);
				AddVehicleComponent(kocsim, 1054);
				AddVehicleComponent(kocsim, 1150);
				AddVehicleComponent(kocsim, 1153);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
			else
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Szerelõ: Sultan,Jester,Uranus,Flash,Stratum,Elegy kocsikra!");
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
	            return 1;
			}
		}

        else if(strcmp(tmp, "XFLOW", true) == 0)
		{
            if(kocsi == 560)
			{
				AddVehicleComponent(kocsim, 1029);
				AddVehicleComponent(kocsim, 1030);
				AddVehicleComponent(kocsim, 1031);
				AddVehicleComponent(kocsim, 1133);
				AddVehicleComponent(kocsim, 1139);
				AddVehicleComponent(kocsim, 1140);
				AddVehicleComponent(kocsim, 1170);
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
			else if(kocsi == 562)
			{
				AddVehicleComponent(kocsim, 1035);
				AddVehicleComponent(kocsim, 1037);
				AddVehicleComponent(kocsim, 1039);
				AddVehicleComponent(kocsim, 1041);
				AddVehicleComponent(kocsim, 1146);
				AddVehicleComponent(kocsim, 1148);
	            AddVehicleComponent(kocsim, 1172);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
            else if(kocsi == 559)
			{
				AddVehicleComponent(kocsim, 1066);
				AddVehicleComponent(kocsim, 1068);
				AddVehicleComponent(kocsim, 1070);
				AddVehicleComponent(kocsim, 1072);
				AddVehicleComponent(kocsim, 1158);
				AddVehicleComponent(kocsim, 1161);
	            AddVehicleComponent(kocsim, 1173);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
            else if(kocsi == 558)
			{
				AddVehicleComponent(kocsim, 1089);
				AddVehicleComponent(kocsim, 1091);
				AddVehicleComponent(kocsim, 1093);
				AddVehicleComponent(kocsim, 1095);
				AddVehicleComponent(kocsim, 1163);
				AddVehicleComponent(kocsim, 1165);
	 			AddVehicleComponent(kocsim, 1167);
	 			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
			else if(kocsi == 561)
			{
				AddVehicleComponent(kocsim, 1057);
				AddVehicleComponent(kocsim, 1059);
				AddVehicleComponent(kocsim, 1050);
				AddVehicleComponent(kocsim, 1061);
				AddVehicleComponent(kocsim, 1063);
				AddVehicleComponent(kocsim, 1156);
	            AddVehicleComponent(kocsim, 1157);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
			else if(kocsi == 565)
			{
				AddVehicleComponent(kocsim, 1045);
				AddVehicleComponent(kocsim, 1048);
				AddVehicleComponent(kocsim, 1050);
				AddVehicleComponent(kocsim, 1052);
				AddVehicleComponent(kocsim, 1053);
				AddVehicleComponent(kocsim, 1151);
	            AddVehicleComponent(kocsim, 1152);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
				RepairVehicle(kocsim);
			}
			else
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Szerelõ: Sultan,Jester,Uranus,Flash,Stratum,Elegy kocsikra tudok csak!");
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
	            return 1;
			}
		}

        else if(strcmp(tmp, "festes", true) == 0 || strcmp(tmp, "festés", true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GREY, "Használata: /tuning festés [0-139]");

			new szin = strval(tmp);
			if(szin < 0 || szin > 139) return SendClientMessage(playerid, COLOR_GREY, "Ehhh... Te mit akarsz? Meglett mondva hogy 0-139");
			
			new szin2; tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) szin2 = szin;
			else szin2 = strval(tmp);
			if(szin2 < 0 || szin2 > 139) return SendClientMessage(playerid, COLOR_GREY, "Ehhh... Te mit akarsz? Meglett mondva hogy 0-139");
			
			SetVehicleColor(kocsim, szin, szin2);
			RepairVehicle(kocsim);
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szerelõ: Kocsid átfestve!");
			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Admin Tuning]================");
		}

		return 1;
	}
	if(strcmp(cmd, "/engedély", true) == 0 || strcmp(cmd, "/engedely", true) == 0)
	{
		new neve[MAX_PLAYER_NAME];
		neve = PlayerName(playerid);

		if(!LMT(playerid, LMUNKA_FBI)) return 1;

		new akcio[256];

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GREY, "Használata: /engedély [ad/elvesz] [név/id]");

		akcio = tmp;
		if(strcmp(akcio, "ad", true) && strcmp(akcio, "elvesz", true))
			return SendClientMessage(playerid, COLOR_GREY, "Használata: /engedély [ad] [név/id]");

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GREY, "Használata: /engedély [ad/elvesz] [név/id]");

		new kinek = ReturnUser(tmp);
		if(IsPlayerConnected(kinek) && kinek != INVALID_PLAYER_ID)
		{
			if(strcmp(akcio, "ad", true) == 0)
			{
				if(Engedely[kinek] == 1)
					return SendClientMessage(playerid, COLOR_GREY, "Neki már van engedélye!");

				Engedely[kinek] = 1;
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Adtál neki engedélyt, hogy beléphessen: %s", PlayerName(kinek));
				SendClientMessage(kinek, COLOR_LIGHTBLUE, "Kaptál engedélyt a kocsitárolóba lépésre. Ha kijössz az engedély elveszlik!");
			}
			else if(strcmp(akcio, "elvesz", true) == 0)
			{
				if(Engedely[kinek] == 0)
					return SendClientMessage(playerid, COLOR_GREY, "Neki nincs engedélye!");

				Engedely[kinek] = 0;
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Elvetted %s engedélyét", PlayerName(kinek));
				SendClientMessage(kinek, COLOR_LIGHTBLUE, "Elvették a belépési engedélyedet!");
			}
		}

		return 1;
	}

	if(strcmp(cmd, "/jelszovaltas", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GREY, "Használata: /jelszovaltas [jelszó] | FONTOS: A jelszó ne tartalmazzon ékezetet,szóközt,és speciális karaktereket.");

		new jelszo[64];
		strmid(jelszo, tmp, 0, strlen(cmdtext), 255);
		strmid(PlayerInfo[playerid][pKey], jelszo, 0, strlen(jelszo));

		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Az új jelszó beállítva!");
		PlayerUpdate(playerid, "Pass='%s'", jelszo);
		new uzenet[100];
		Format(uzenet, "<< %s jelszót váltott >>", PlayerName(playerid));
		ABroadCast(COLOR_LIGHTRED, uzenet, 1);
		return 1;
	}

	/*if(strcmp(cmd, "/lefoglal", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(!IsACop(playerid) && !Admin(playerid, 1)) return Msg(playerid, "Nem vagy rendõr.");
		if(FloodCheck(playerid)) return 1;
		new kocsi = GetClosestVehicle(playerid);

		if(GetDistanceToVehicle(playerid, kocsi) > 5) return Msg(playerid, "Nincs a közelben jármû.");
		
		if(Locked(kocsi)) return Msg(playerid, "A jármû zárva.");

		PutPlayerInVehicle(playerid, kocsi, 0);
		Msg(playerid, "Jármû lefoglalva.");
		Cselekves(playerid, "lefoglalt egy jármûvet...", 1);
		Lefoglalt[playerid] = 1;
		new uzenet[200];
		Format(uzenet, "<< %s lefoglalt egy jármûvet(%s) >>", PlayerName(playerid), GetVehicleModelName(GetVehicleModel(kocsi)));
		ABroadCast(COLOR_LIGHTRED, uzenet, 1);
		return 1;
	}*/

	if(strcmp(cmd, "/alefoglal", true) == 0)
	{
		if(!Admin(playerid, 5)) return 1;
		new kocsi = GetClosestVehicle(playerid);

		if(GetDistanceToVehicle(playerid, kocsi) > 5) return Msg(playerid, "Nincs a közelben jármû.");

		if(!IsClint(playerid))
			ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s lefoglalt egy jármûvet! Rendszám: %d / Model: %s >>", PlayerName(playerid), kocsi, GetVehicleModelName(kocsi, true));

		PutPlayerInVehicle(playerid, kocsi, 0);
		Msg(playerid, "Jármû lefoglalva.");
		Cselekves(playerid, "lefoglalt egy jármûvet...", 1);
		Lefoglalt[playerid] = 1;

		return 1;
	}

	if(strcmp(cmd, "/vontat", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(veh == -1) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
		if(Bikes(veh)) return Msg(playerid, "Persze...");
		new Vontatokocsi;
		for(new x = 0; x < sizeof(Vontatokocsik); x++){ if(pveh == Vontatokocsik[x]) {Vontatokocsi = 1; break;} }
		if(!Vontatokocsi) return SendClientMessage(playerid, COLOR_GREY, "Ezzel a kocsival nem lehet vontatni!");

		new kocsi = GetClosestVehicle(playerid, false);

		if(GetDistanceToVehicle(playerid, kocsi) > 10) return SendClientMessage(playerid, COLOR_GREY, "A közelben nincs jármû!");

		if(GetVehicleTrailer(veh) == 0)
			AttachTrailerToVehicle(kocsi, veh);
		else
			DetachTrailerFromVehicle(veh);

		return 1;
	}
	/*if(strcmp(cmd,"/rejtekhely",true)==0)
	{
		new x_nr[256];
		x_nr = strtok(cmdtext, idx);
		if(!strlen(x_nr))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Használat: /rejtekhely [hova]");
			SendClientMessage(playerid, COLOR_WHITE, "Használható: gyár, városháza, bank, vissza");
			return 1;
		}
  		if(strcmp(x_nr,"városháza",true) == 0)
		{
		    if(PlayerToPoint(15, playerid, 260.7486,70.1920,1003.2422))
			{
				SetTimerEx("maszas2", 15000, false, "ii", playerid);
		 		SendClientMessage(playerid, COLOR_YELLOW, "A csöveken keresztül mászól a városházához");
 		 		maszas[playerid] = 1;
 		 		SetPlayerInterior(playerid, 2);
				return 1;
			}
		}
		else if(strcmp(x_nr,"gyár",true) == 0)
		{
		    if(PlayerToPoint(15, playerid, 260.7486,70.1920,1003.2422))
			{
				SetTimerEx("maszas2", 15000, false, "ii", playerid);
 				SendClientMessage(playerid, COLOR_YELLOW, "A csöveken keresztül mászól a gyárhoz");
  				maszas[playerid] = 2;
				return 1;
			}
		}
		else if(strcmp(x_nr,"bank",true) == 0)
		{
		    if(PlayerToPoint(15, playerid, 260.7486,70.1920,1003.2422))
			{
				SetTimerEx("maszas2", 15000, false, "ii", playerid);
	 			SendClientMessage(playerid, COLOR_YELLOW, "A csöveken keresztül mászól a bankhoz");
 	 			maszas[playerid] = 3;
				return 1;
			}
		}
		else if(strcmp(x_nr,"vissza",true) == 0)
		{
		    if(PlayerToPoint(15, playerid,366.7386,196.2833,1014.1797) || PlayerToPoint(15, playerid,1519.7733,-1016.9778,23.8567) || PlayerToPoint(15, playerid,2543.2458,-1281.4784,1054.6406))
			{
				SetTimerEx("maszas2", 15000, false, "ii", playerid);
	 			SendClientMessage(playerid, COLOR_YELLOW, "A csöveken keresztül visszamászól lspd-re");
		 		maszas[playerid] = 4;
				return 1;
			}
		}
	}*/
    if(strcmp(cmd,"/eldob",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(NemMozoghat(playerid)) return Msg(playerid, "A-a!");
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /eldob [mit]");
    			SendClientMessage(playerid, COLOR_WHITE, "Használható: Fegyverek, materials, heroin, kokain, marihuana, mûanyag, telefon");
				return 1;
			}
		    if(strcmp(x_nr,"fegyverek",true) == 0)
			{
                ResetWeapon(playerid);
 				format(string, sizeof(string), "* Valaki eldobja fegyvereit.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if(strcmp(x_nr,"telefon",true) == 0)
			{
                PlayerInfo[playerid][pPnumber] = 0;
 				format(string, sizeof(string), "* Valaki eldobja a telefonját.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if(strcmp(x_nr,"cserje",true) == 0)
			{
                PlayerInfo[playerid][pCserje] = 0;
 				format(string, sizeof(string), "* Valaki eldobja a cserjéit.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if(strcmp(x_nr,"mák",true) == 0 || strcmp(x_nr, "mak", true) == 0)
			{
                PlayerInfo[playerid][pMak] = 0;
 				format(string, sizeof(string), "* Valaki eldobja a mákjait.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}			
			if(strcmp(x_nr,"cannabis",true) == 0)
			{
                PlayerInfo[playerid][pCannabis] = 0;
 				format(string, sizeof(string), "* Valaki eldobja a cannabist a zsebébõl.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else if(strcmp(x_nr,"mûanyag",true) == 0 || strcmp(x_nr, "muanyag", true) == 0)
			{
                PlayerInfo[playerid][pMuanyag] = 0;
 				format(string, sizeof(string), "* Valaki eldobja a mûanyagokat.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}

			else if(strcmp(x_nr,"materials",true) == 0)
			{
                PlayerInfo[playerid][pMats] = 0;
                format(string, sizeof(string), "* Valaki eldobja a materialjait.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else if(strcmp(x_nr,"heroin",true) == 0)
			{
                PlayerInfo[playerid][pHeroin] = 0;
                format(string, sizeof(string), "* Valaki eldobja a heroinjait.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else if(strcmp(x_nr,"kokain",true) == 0)
			{
                PlayerInfo[playerid][pKokain] = 0;
                format(string, sizeof(string), "* Valaki eldobja a kokainjait.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else if(strcmp(x_nr,"marihuana",true) == 0)
			{
                PlayerInfo[playerid][pMarihuana] = 0;
                format(string, sizeof(string), "* Valaki eldobja a marihuanjait.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else if(strcmp(x_nr,"kevlar",true) == 0 || strcmp(x_nr,"mellény",true) == 0 || strcmp(x_nr,"melleny",true) == 0)
			{
                SetPlayerArmour(playerid, 0);
                format(string, sizeof(string), "* Valaki eldobja a golyóálló mellényét.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/úttisztítás", true) == 0 || strcmp(cmd, "/uttisztitas", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
		if(!AMT(playerid, MUNKA_UTTISZTITO)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy úttisztitó!");
		if(!IsKocsi(veh, "Uttisztito")) return SendClientMessage(playerid, COLOR_GREY, "Ez nem úttisztitó kocsi!");

		if(!PlayerToPoint(100.0, playerid, 1946.825, -2085.823, 13.253))
			return Msg(playerid, "Menj a munkahelyre!");

		new csekkpont, Float:x, Float:y, Float:z;
		if(Munkaban[playerid] != MUNKA_UTTISZTITO)
		{
			csekkpont = random(sizeof(UttisztitoCheckpointok));
			Munkaban[playerid] = MUNKA_UTTISZTITO;
			MunkaCheckpoint[playerid] = csekkpont;
			MunkaCheckpoint2[playerid] = NINCS;

			GetPlayerPos(playerid, MunkaStarthely[playerid][0], MunkaStarthely[playerid][1], MunkaStarthely[playerid][2]);

			x = UttisztitoCheckpointok[csekkpont][0];
			y = UttisztitoCheckpointok[csekkpont][1];
			z = UttisztitoCheckpointok[csekkpont][2];
			SetPlayerCheckpoint(playerid, x, y, z, 5);

			SendClientMessage(playerid, COLOR_LIGHTGREEN, "A munkát elkezdted. Menj, tisztítsd az utat a checkpont felé.");
		}
		else
		{
			Munkaban[playerid] = NINCS;
			MunkaCheckpoint[playerid] = NINCS;
			DisablePlayerCheckpoint(playerid);

			SendClientMessage(playerid, COLOR_LIGHTGREEN, "A munkát befejezted. A munkádért kapott pénzt fizetéskor megkapod!");
		}
		return 1;
	}
		
    if(strcmp(cmd, "/farmerkedés", true) == 0 || strcmp(cmd, "/farmerkedes", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
		if(!AMT(playerid, MUNKA_FARMER)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy farmer!");
		if(!IsKocsi(veh, "Farmer")) return SendClientMessage(playerid, COLOR_GREY, "Ez nem traktor!");

		if(!PlayerToPoint(100.0, playerid, 20.476, -11.302, 2.822))
			return Msg(playerid, "Menj a munkahelyre!");

		new csekkpont, Float:x, Float:y, Float:z;
		if(Munkaban[playerid] != MUNKA_FARMER)
		{
			csekkpont = random(sizeof(FarmerCheckpointok));
			Munkaban[playerid] = MUNKA_FARMER;
			MunkaCheckpoint[playerid] = csekkpont;
			MunkaCheckpoint2[playerid] = NINCS;

			GetPlayerPos(playerid, MunkaStarthely[playerid][0], MunkaStarthely[playerid][1], MunkaStarthely[playerid][2]);

			x = FarmerCheckpointok[csekkpont][0];
			y = FarmerCheckpointok[csekkpont][1];
			z = FarmerCheckpointok[csekkpont][2];
			SetPlayerCheckpoint(playerid, x, y, z, 5);

			SendClientMessage(playerid, COLOR_LIGHTGREEN, "A munkát elkezdted. Menj át a checkpointokon.");
		}
		else
		{
			Munkaban[playerid] = NINCS;
			MunkaCheckpoint[playerid] = NINCS;
			DisablePlayerCheckpoint(playerid);

			SendClientMessage(playerid, COLOR_LIGHTGREEN, "A munkát befejezted. A munkádért kapott pénzt fizetéskor megkapod!");
		}
		return 1;
	}
    if(strcmp(cmd, "/fûnyírás", true) == 0 || strcmp(cmd, "/funyiras", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
		if(!AMT(playerid, MUNKA_FUNYIRO)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy fûnyíró!");
		if(!IsKocsi(veh, "Funyiro")) return SendClientMessage(playerid, COLOR_GREY, "Ez nem fûnyíró!");
		
		if(!PlayerToPoint(50.0, playerid, 1960.394, -1237.911, 19.663))
			return Msg(playerid, "Menj a munkahelyre!");

		new csekkpont, Float:x, Float:y, Float:z;
		if(Munkaban[playerid] != MUNKA_FUNYIRO)
		{
			csekkpont = random(sizeof(FarmerCheckpointok));
			Munkaban[playerid] = MUNKA_FUNYIRO;
			MunkaCheckpoint[playerid] = csekkpont;
			MunkaCheckpoint2[playerid] = NINCS;

			GetPlayerPos(playerid, MunkaStarthely[playerid][0], MunkaStarthely[playerid][1], MunkaStarthely[playerid][2]);

			x = FunyiroCheckpointok[csekkpont][0];
			y = FunyiroCheckpointok[csekkpont][1];
			z = FunyiroCheckpointok[csekkpont][2];
			SetPlayerCheckpoint(playerid, x, y, z, 5);

			SendClientMessage(playerid, COLOR_LIGHTGREEN, "A munkát elkezdted. Menj át a checkpointokon.");
		}
		else
		{
			Munkaban[playerid] = NINCS;
			MunkaCheckpoint[playerid] = NINCS;
			DisablePlayerCheckpoint(playerid);

			SendClientMessage(playerid, COLOR_LIGHTGREEN, "A munkát befejezted. A munkádért kapott pénzt fizetéskor megkapod!");
		}
		return 1;
	}

	if(egyezik(cmd, "/kukás") || egyezik(cmd, "/kukas"))
	{
		if(Nincsbelepve(playerid)) return 1;
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
		if(!AMT(playerid, MUNKA_KUKAS)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy Kukás!");
		if(!IsKocsi(veh, "Kukas")) return SendClientMessage(playerid, COLOR_GREY, "Ez nem kukásautó!");

		new csekkpont, Float:x, Float:y, Float:z;
		if(Munkaban[playerid] != MUNKA_KUKAS)
		{
			csekkpont = random(sizeof(FarmerCheckpointok));
			Munkaban[playerid] = MUNKA_KUKAS;
			MunkaCheckpoint[playerid] = csekkpont;
			MunkaCheckpoint2[playerid] = NINCS;

			GetPlayerPos(playerid, MunkaStarthely[playerid][0], MunkaStarthely[playerid][1], MunkaStarthely[playerid][2]);

			x = KukasCheckpointok[csekkpont][0];
			y = KukasCheckpointok[csekkpont][1];
			z = KukasCheckpointok[csekkpont][2];
			SetPlayerCheckpoint(playerid, x, y, z, 5);

			SendClientMessage(playerid, COLOR_LIGHTGREEN, "A munkát elkezdted. Menj át a checkpointokon.");
		}
		else
		{
			Munkaban[playerid] = NINCS;
			MunkaCheckpoint[playerid] = NINCS;
			DisablePlayerCheckpoint(playerid);

			SendClientMessage(playerid, COLOR_LIGHTGREEN, "A munkát befejezted. A munkádért kapott pénzt fizetéskor megkapod!");
		}
		return 1;
	}



	/*if(strcmp(cmd, "/checkprop", true) == 0)
	{
		if(!IsScripter(playerid)) return 1;
		if(params != 2) return Msg(playerid, "Használata: /checkprop [ház/kocsi] [hány darabot]");
		new darab = strval(param[2]);
		if(darab < 1 || darab > 5) return Msg(playerid, "1 és 5 között!");
		checkprop = darab;

		if(egyezik(param[1], "ház") || egyezik(param[1], "haz"))
		{
			SendClientMessage(playerid, COLOR_GREY, "Lellenõrizted a házakat... ha lesz olyan ház aminek a tulaja rég nem lépett be, eladja...");
			Checkprop(DP_Haz);
		}
		else if(egyezik(param[1], "kocsi"))
		{
			SendClientMessage(playerid, COLOR_GREY, "Lellenõrizted a kocsiat... ha lesz olyan kocsi aminek a tulaja rég nem lépett be, eladja...");
			Checkprop(DP_Kocsi);
		}
		else
			Msg(playerid, "Használata: /checkprop [ház/kocsi]");

		return 1;
	}*/

	if(strcmp(cmd, "/visz", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;

		if(Visz[playerid] != NINCS)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Elengedted");
			Visz[playerid] = NINCS;
			return 1;
		}

		new jatekos;
		if(params > 0)
			jatekos = strval(param[1]);
		else
			jatekos = GetClosestPlayer(playerid);

		if(PlayerCuffed[jatekos] == 2 && !IsACop(playerid))
			return Msg(playerid, "Nem vagy rendõr!");
			
		if(Bortonben(jatekos)) return Msg(playerid, "Nem kéne...igy a rácsokon keresztül...");
		
		if(PlayerCuffed[jatekos] != 2 && !Leutve[jatekos])
			return Msg(playerid, "A játékos nincs megbilincselve / leütve");

		if(!IsPlayerConnected(jatekos)) return 1;

		if(ProxDetectorS(5, playerid, jatekos))
		{
			Visz[playerid] = jatekos;
			SendClientMessage(playerid, COLOR_GREY, "Megfogtad és viszed...");
			TogglePlayerControllable(jatekos, false);
			
			if(!Leutve[jatekos])
				ApplyAnimation(jatekos,"SWORD","sword_block",50.0,0,1,1,1,1);
		}
		else
			Msg(playerid, "Nincs senki a közeledben!");
		return 1;
	}

	if(strcmp(cmd, "/gotovaros", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					SetVehiclePos(veh, 3827.723,-1386.674,3.879);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 3827.723,-1386.674,3.879);
				}
				SendClientMessage(playerid, COLOR_RED, "   Teleportáltál !");
				SetPlayerInterior(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/asellcar", true) == 0)
	{
		if(!Admin(playerid, 1337)) return 1;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Használat: /asellcar [carid]");
			return 1;
		}
		
		new testcar = strval(tmp);		
		if(testcar < 0 || testcar >= MAXVSKOCSI) return 1;
		
		if(!InaktivCucc(testcar, INAKTIV_KOCSI) && !IsClint(playerid))
			return Msg(playerid, "Ez még NEM eladható!");
			
		CarInfo[testcar][cOwned] = 0;
		CarUpdate(testcar, CAR_Owned);
		SendFormatMessage(playerid, COLOR_WHITE, "Kocsi: %d rendszámú kocsi eladva - Régi tulaj: %s", testcar, CarInfo[testcar][cOwner]);
		return 1;
	}
	if(strcmp(cmd, "/v", true) == 0 || strcmp(cmd, "/vehicle", true) == 0) // By Ellis
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Nincsbelepve(playerid)) return 1;

	        new x_nr[64];
	        x_nr = strtok(cmdtext, idx);
	        if(!strlen(x_nr))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Használata: (/v)ehicle [funkció]");
	            SendClientMessage(playerid, COLOR_WHITE, "Funkciók: park, zár, szin, elad, vesz");
	            return 1;
	        }
			if(egyezik(x_nr, "elad"))
			{
				new kocsi = PlayerInfo[playerid][pPcarkey], kocsi2 = PlayerInfo[playerid][pPcarkey2];
				if(kocsi == NINCS && kocsi2 == NINCS && JarmuKulcs[playerid] == NINCS)
					return Msg(playerid, "Nincs jármûved!");

				new player, car;
				player = GetClosestPlayer(playerid);
				
				if(GetDistanceBetweenPlayers(playerid, player) > 2)
					return Msg(playerid, "A közeledben nincs senki!");
					
				if(IsPlayerNPC(player))
					return Msg(playerid, "Persze, majd az NPC elkocsikázik vele mi ? -.-");
					
				if(!Logged(player))
					return Msg(playerid, "Nincs belépve!");
				
				car = GetClosestVehicle(playerid);
				
				if(GetDistanceToVehicle(playerid, car) > 5.5) 
					return Msg(playerid, "Nincs a közelben a jármûved!");
					
				new vs = IsAVsKocsi(car);
				if(vs == NINCS)
					return Msg(playerid, "Ez nem V-s!");
					
				if(CarInfo[vs][cOwned] != 1)
					return 1;
					
				if(!egyezik(PlayerName(playerid), CarInfo[vs][cOwner]))
					return Msg(playerid, "Ez nem a tied!");
					
				Cselekves(playerid, "megír egy adásvételi szerzõdést, és átnyújtja az autókereskedõnek.");
				Msg(playerid, "El szeretnéd adni a jármûvedet az autókereskedõnek.", false, COLOR_LIGHTGREEN);
				SendFormatMessage(player, COLOR_LIGHTGREEN, "%s eladná neked a jármûvét - Model: %s", PlayerName(playerid), GetVehicleModelName(GetVehicleModel(car)));
				KereskedoKocsiVetel[player] = playerid;
				KereskedoKocsi[player] = vs;

				return 1;
			}
			else if(egyezik(x_nr, "vesz"))
			{
				new kocsi = PlayerInfo[playerid][pPcarkey], kocsi2 = PlayerInfo[playerid][pPcarkey2];
				if(kocsi != NINCS)
					if(PlayerInfo[playerid][pPremiumPont] > 0 && kocsi2 != NINCS || PlayerInfo[playerid][pPremiumPont] < 1)
						return Msg(playerid, "Már van jármûved!");

				new player;
				player = KereskedoKocsiElad[playerid];
				if(player == NINCS || !IsPlayerConnected(player) || IsPlayerNPC(player) || !Logged(player)) return 1;
				new car = KereskedoKocsi[playerid];
				if(CarInfo[car][cOwned] != 0) return 1;
				
				if(GetDistanceBetweenPlayers(playerid, player) > 2)
					return Msg(playerid, "Nincs a közeledben!");
					
				if(kocsi != NINCS && Biztos[playerid] != 1)
				{
					Msg(playerid, "Biztos, hogy meg szeretnéd venni? Ezzel fehasználsz egy prémiumpontot, amiért házat is vehetnél. Ha igen, írd be újra a parancsot!");
					Biztos[playerid] = 1;
					return 1;
				}
				Biztos[playerid] = 0;
				
				if(kocsi != NINCS)
				{
					PlayerInfo[playerid][pPremiumPont]--;
					Msg(playerid, "Egy prémiumpont levonva");
				}

				CarInfo[car][cOwned] = 1;
				new nev[MAX_PLAYER_NAME];
				Format(nev, "%s", PlayerName(playerid));
				strmid(CarInfo[car][cOwner], nev, 0, strlen(nev), 25);
				//CarUpdate(car, "Eladva='1', Tulaj='%s'", nev);
				CarUpdate(car, CAR_Owned, CAR_Owner);

				CorrectPlayerDatas(playerid);

				Cselekves(playerid, "aláírta az adásvételi szerzõdést, és vett egy jûrmûvet.");
				Msg(playerid, "Gratulálunk, megvetted a jármûvet!.", false, COLOR_LIGHTGREEN);
				SendFormatMessage(player, COLOR_LIGHTGREEN, "%s megvette a jármûvet - Model: %s", PlayerName(playerid), GetVehicleModelName(GetVehicleModel(CarInfo[car][cId])));
				KereskedoKocsiElad[playerid] = NINCS;

				return 1;
			}
	        else if(strcmp(x_nr,"park",true) == 0)
	        {
	            new Float:x, Float:y, Float:z, Float:a, carid;

				carid = GetClosestVehicle(playerid);
				if(GetDistanceToVehicle(playerid, carid) > 5.5)
					return Msg(playerid, "A közeledben nincs jármû!");

				new kocsi = IsAVsKocsi(carid);

				if(kocsi == NINCS)
					return SendClientMessage(playerid, COLOR_GREY, "Ez nem V-s jármû!");
					
				GetVehiclePos(carid, x, y, z);
				GetVehicleZAngle(carid, a);

				format(string, sizeof(string), "~n~~g~Leparkoltad");
				GameTextForPlayer(playerid, string, 10000, 3);

				ParkCar(kocsi, x, y, z, a);
				
				if(IsPlayerInVehicle(playerid, carid))
				{
					TogglePlayerControllable(playerid, 1);
					SetPlayerPos(playerid,x,y,z+1);
				}
					
				return 1;
	        }

	        else if(strcmp(x_nr,"zár",true) == 0 || egyezik(x_nr, "zar") || egyezik(x_nr, "lock"))
	        {
                new carid;
				carid = GetClosestVehicle(playerid);
				if(GetDistanceToVehicle(playerid, carid) > 5.5)
					return Msg(playerid, "A közeledben nincs jármû!");
				
				new vs;
				vs = IsAVsKocsi(carid);
				
				if(vs == NINCS)
					return Msg(playerid, "Ez nem V-s!");
				if(CarInfo[vs][cOwned] != 1 || !egyezik(CarInfo[vs][cOwner], PlayerName(playerid)) && JarmuKulcs[playerid] != vs)
					return Msg(playerid, "Ez nem a tied!");

				if(CarInfo[vs][cLock] == 1)
				{
					UnLockCar(carid);
					format(string, sizeof(string), "~w~Jarmu~n~~g~nyitva");
					GameTextForPlayer(playerid, string, 4000, 3);
					CarInfo[vs][cLock] = 0;

					format(string, sizeof(string), "* Valaki kinyitotta a jármûvét.");
					ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					LockCar(carid);
					format(string, sizeof(string), "~w~Jarmu~n~~r~zarva");
					GameTextForPlayer(playerid, string, 4000, 3);
					CarInfo[vs][cLock] = 1;
					format(string, sizeof(string), "* Valaki bezárta a jármûvét.");
					ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}

				//CarUpdate(vs, "Zarva='%d'", CarInfo[vs][cLock]);
				CarUpdate(vs, CAR_Lock);
				return 1;
	        }
	        else if(strcmp(x_nr,"color",true) == 0 || egyezik(x_nr, "szin") || egyezik(x_nr, "szín"))
	        {
				new kocsi, vs;
				kocsi = GetClosestVehicle(playerid);
				if(GetDistanceToVehicle(playerid, kocsi) > 5.5)
					return Msg(playerid, "A közeledben nincs jármû!");
				
				vs = IsAVsKocsi(kocsi);
				if(vs == NINCS)
					return Msg(playerid, "Ez nem V-s!");

	        	tmp = strtok(cmdtext, idx);
	        	if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használata: /v szin [szín1] [szín2] - A színek megtekinthetõek a wikipédián!");
					return 1;
				}

				new color1 = strval(tmp);
				if(color1 < 0 && color1 > 126)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "A szín minimum 0 és max 126 lehet!");
			    	return 1;
				}

				tmp = strtok(cmdtext, idx);
	        	if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használata: /v szin [szín1] [szín2] - A színek megtekinthetõek a wikipédián!");
					return 1;
				}

				new color2 = strval(tmp);
				if(color2 < 0 && color2 > 126)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "A szín minimum 0 és max 126 lehet!");
			    	return 1;
				}

				if(CarInfo[vs][cColorOne] != color1 || CarInfo[vs][cColorTwo] != color2)
					CarInfo[vs][cPainted] = 1;
				else
					CarInfo[vs][cPainted] = 0;

       			CarInfo[vs][cColorOne] = color1;
                CarInfo[vs][cColorTwo] = color2;

				BizPenz(BIZ_FIXCAR, 50000);

                GameTextForPlayer(playerid, "~w~Ujrafestve!~n~~r~-50,000Ft", 5000, 1);
				SetVehicleColor(kocsi, color1, color2);
				
				//CarUpdate(vs, "Szin1='%d', Szin2='%d'", color1, color2);
				CarUpdate(vs, CAR_ColorOne, CAR_ColorTwo);

				return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Használata: (/v)ehicle [funkció]");
	            SendClientMessage(playerid, COLOR_WHITE, "Funkciók: park, zár, szin, elad, vesz");
	            return 1;
	        }
	    }
	    return 1;
	}

	if(strcmp(cmd, "/rendszám", true) == 0 || strcmp(cmd, "/rendszam", true) == 0)
	{
	    if(Nincsbelepve(playerid)) return 1;
	    if(!IsPlayerInAnyVehicle(playerid))
		{
			veh = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, veh) > 5.0)
				return Msg(playerid, "Nincs jármû a közeledben");
		}

	    SendFormatMessage(playerid, COLOR_GREY, "A kocsi rendszáma: %d", veh);
	    return 1;
	}

	if(strcmp(cmd, "/eladóházak", true) == 0 || strcmp(cmd, "/eladohazak", true) == 0)
	{
	    if(Nincsbelepve(playerid)) return 1;

	    new h, eddig, osszeselado;
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "================ Eladó házak ================");
	    format(string, sizeof(string), "Eladó:");
	    for(h = 0; h < MAXHAZ; h++)
	    {
	        if(HouseInfo[h][Van] == 1)
	        {
	            if(HouseInfo[h][hOwned] == 0)
	            {
	                eddig++;
	                osszeselado++;
	                if(HouseInfo[h][hCsak] != 1)
		                format(string, sizeof(string), "%s %d", string, h);
					else
					    format(string, sizeof(string), "%s %d[%s]", string, h, HouseInfo[h][hCsakneki]);

	                if(eddig == MAXHAZPERSOR)
	                {
		                SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		                format(string, sizeof(string), "Eladó:");
		                eddig = 0;
	                }
	            }
	        }

            if((h+1) == MAXHAZ)
            {
                if(osszeselado == 0)
                	SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs eladó ház!");
				else if(eddig > 0)
    				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            }
	    }
	    SendClientMessage(playerid, COLOR_GREY, "Ahhoz, hogy megkeresd: /gps ház [házszám]");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "============================================");
	    return 1;
	}



	if(strcmp(cmd, "/eladókocsik", true) == 0 || strcmp(cmd, "/eladokocsik", true) == 0)
	{
	    if(Nincsbelepve(playerid)) return 1;
	    if(!Admin(playerid, 1337)) return 1;

	    new h, eddig, osszeselado;
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "================ Eladó kocsik ================");
	    format(string, sizeof(string), "Eladó:");
	    for(h = 0; h < MAXVSKOCSI; h++)
	    {
	        if(CarInfo[h][Van] == 1)
	        {
	            if(CarInfo[h][cOwned] == 0)
	            {
	                eddig++;
	                osszeselado++;
	                format(string, sizeof(string), "%s %d[%d]", string, h, CarInfo[h][cId]);

	                if(eddig == MAXHAZPERSOR)
	                {
		                SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		                format(string, sizeof(string), "Eladó:");
		                eddig = 0;
	                }
	            }
	        }

            if((h+1) == MAXVSKOCSI)
            {
                if(osszeselado == 0)
                	SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs eladó kocsi!");
				else if(eddig > 0)
    				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            }
	    }
	    SendClientMessage(playerid, COLOR_GREY, "Ahhoz, hogy megkeresd: /gotocar [kocsiszám]");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "============================================");
	    return 1;
	}

	if(strcmp(cmd, "/getip", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(!Admin(playerid, 1337)) return 1;

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		    return SendClientMessage(playerid, COLOR_GREY, "Használata: /getip [név/id]");

		new playa = ReturnUser(tmp);
		if(IsPlayerConnected(playa))
	    {
	        if(playa != INVALID_PLAYER_ID)
	        {
	            new ip[16];
	            GetPlayerName(playa, playername, sizeof(playername));
	            GetPlayerIp(playa, ip, sizeof(ip));

				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "A játékos IP címe: %s", ip);
				return 1;
			}
	    }

	    return 1;
	}

	if(strcmp(cmd, "/getskin2", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(!IsHitman(playerid) && !Admin(playerid, 1))
			return SendClientMessage(playerid, COLOR_GREY, "Nem vagy hitman!");

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		    return SendClientMessage(playerid, COLOR_GREY, "Használata: /getskin2 [név/id]");

		new playa = ReturnUser(tmp);
		if(IsPlayerConnected(playa))
	    {
	        if(playa != INVALID_PLAYER_ID)
	        {
	            new skin = GetPlayerSkin(playa);
	            SetPlayerSkin(playerid, skin);
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Ezen az emberen ez a skin van: %d | És automatikusan átöltöztél ebbe!", skin);
				return 1;
			}
	    }

	    return 1;
	}

	if(strcmp(cmd, "/getskin", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(!IsHitman(playerid) && !Admin(playerid, 1))
			return SendClientMessage(playerid, COLOR_GREY, "Nem vagy hitman!");

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		    return SendClientMessage(playerid, COLOR_GREY, "Használata: /getskin [név/id]");

		new playa = ReturnUser(tmp);
		if(IsPlayerConnected(playa))
	    {
	        if(playa != INVALID_PLAYER_ID)
	        {
	            new skin = GetPlayerSkin(playa);
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Ezen az emberen ez a skin van: %d", skin);
				return 1;
			}
	    }

	    return 1;
	}

	if(strcmp(cmd, "/kiszed", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;

		new playa = GetClosestPlayer(playerid);
		
		if(params > 0)
			playa = ReturnUser(param[1]);

		if(IsPlayerConnected(playa))
	    {
	        if(playa != INVALID_PLAYER_ID)
	        {
				if(IsPlayerNPC(playa)) return SendClientMessage(playerid, COLOR_GREY, "NPC-t nem!");

	            if(ProxDetectorS(2.5, playerid, playa))
	            {					
					if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Kocsiban vagy!");
					if(IsPlayerInAnyVehicle(playa))
					{
						new kocsi = GetClosestVehicle(playa);
						if(Locked(kocsi)) return Msg(playerid, "A jármû zárva");
						
						if(GetVehicleModel(kocsi) == 427 && PlayerInfo[playa][pJailed] == 2)
						{
							PlayerInfo[playa][pJailed] = 0;
							PlayerInfo[playa][pJailTime] = 0;
						}
						
						new Float:x, Float:y, Float:z;
						GetPlayerPos(playerid, x, y, z);
						Tele(playa, x + 0.5, y + 0.5, z, false);
						Animbanemrakhato[playa] = 0;
						format(string, sizeof(string), "* Valakit kirángattak a jármûbõl");
						
						if(GetPlayerState(playa) == PLAYER_STATE_DRIVER)
							UnFreeze(playa);
						
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
						SendClientMessage(playerid, COLOR_GREY, "Nincs kocsiban!");
				}
				else
					SendClientMessage(playerid, COLOR_GREY, "Nincs senki a közelben!");
			}
	    }

	    return 1;
	}

	if(strcmp(cmd, "/berant2", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(!IsPlayerInAnyVehicle(playerid)) return 1;

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Használat: /berant [szék(1-3)]");
			return 1;
		}
		new newcar = GetPlayerVehicleID(playerid);
		new szek;
		new playa = GetClosestPlayer(playerid);

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
			szek = 1;
		else
		    szek = strval(tmp);

		if(szek < 1 || szek > 3)
		    return SendClientMessage(playerid, COLOR_GREY, "A szék 1-3 lehet! (1. Anyósülés, 2. hátsó bal, 3. hátsó jobb)");

		if(PlayerInfo[playerid][pConnectTime] < 10)
        {
            SendClientMessage(playerid, COLOR_GREY, " Minimum 10 játszott óra!");
            return 1;
        }

		if(IsPlayerConnected(playa))
	    {
	        if(playa != INVALID_PLAYER_ID)
	        {
	            if(ProxDetectorS(5, playerid, playa))
	            {
					if(!IsPlayerInAnyVehicle(playa))
					{
						if(PlayerToPoint(100, playerid, 1477.1985,-1804.2847,13.5469))
						{
							Msg(playerid, "Városháza környékén akarod berántani?");
							return 1;
						}
						else if(PlayerToPoint(80, playerid, 1596.8505,-1677.9633,5.8906))
						{
							Msg(playerid, "LSPD környékén akarod berántani?");
							return 1;
						}
						else if(PlayerToPoint(50, playerid, 1214.0414,-1324.4862,13.5670))
						{
							Msg(playerid, "Kórház elõtt akarod berántani?");
							return 1;
						}
						else if(PlayerToPoint(250, playerid, 175.1913,1904.2084,18.2397))
						{
							Msg(playerid, "Fort környékén akarod berántani?");
							return 1;
						}
						else if(PlayerToPoint(140, playerid, -1593.2107,727.9420,-4.9063))
						{
							Msg(playerid, "SFPD környékén akarod berántani?");
							return 1;
						}
						TogglePlayerControllable(playa, 1);
						PutPlayerInVehicle(playa, newcar, szek);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Valakit berántottak a közelben...");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
						SendClientMessage(playerid, COLOR_GREY, "Kocsiban van!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "A Játékos túl messze van!");
				}
			}
	    }

	    return 1;
	}

	if(strcmp(cmd, "/berant", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(!IsPlayerInAnyVehicle(playerid)) return 1;

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Használat: /berant [playerid/PartOfName] [szék(1-3)]");
			return 1;
		}
		new newcar = GetPlayerVehicleID(playerid);
		new playa, szek;
		playa = ReturnUser(tmp);

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
			szek = 1;
		else
		    szek = strval(tmp);

		if(szek < 1 || szek > 3)
		    return SendClientMessage(playerid, COLOR_GREY, "A szék 1-3 lehet! (1. Anyósülés, 2. hátsó bal, 3. hátsó jobb)");

		if(PlayerInfo[playerid][pConnectTime] < 10)
        {
            SendClientMessage(playerid, COLOR_GREY, " Minimum 10 játszott óra!");
            return 1;
        }

		if(IsPlayerConnected(playa))
	    {
	        if(playa != INVALID_PLAYER_ID)
	        {
	            if(ProxDetectorS(5, playerid, playa))
	            {
					if(!IsPlayerInAnyVehicle(playa))
					{
						if(PlayerToPoint(100, playerid, 1477.1985,-1804.2847,13.5469))
						{
							Msg(playerid, "Városháza környékén akarod berántani?");
							return 1;
						}
						else if(PlayerToPoint(80, playerid, 1596.8505,-1677.9633,5.8906))
						{
							Msg(playerid, "LSPD környékén akarod berántani?");
							return 1;
						}
						else if(PlayerToPoint(50, playerid, 1214.0414,-1324.4862,13.5670))
						{
							Msg(playerid, "Kórház elõtt akarod berántani?");
							return 1;
						}
						else if(PlayerToPoint(250, playerid, 175.1913,1904.2084,18.2397))
						{
							Msg(playerid, "Fort környékén akarod berántani?");
							return 1;
						}
						else if(PlayerToPoint(140, playerid, -1593.2107,727.9420,-4.9063))
						{
							Msg(playerid, "SFPD környékén akarod berántani?");
							return 1;
						}
						TogglePlayerControllable(playa, 1);
						PutPlayerInVehicle(playa, newcar, szek);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Valakit berántottak a közelben...");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
						SendClientMessage(playerid, COLOR_GREY, "Kocsiban van!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "A Játékos túl messze van!");
				}
			}
	    }

	    return 1;
	}

	if(strcmp(cmd, "/hitmannev", true) == 0 || strcmp(cmd, "/hitmannév", true) == 0)
	{
		if(!IsDirector(playerid)) return 1;

		if(params != 2) return Msg(playerid, "/HitmanNév [Játékos Neve / ID] [Új Név]");

		new id = ReturnUser(param[1]);

		if(id == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
		if(!IsHitman(id)) return Msg(playerid, "Játékos nem hitman!");

		strmid(PlayerInfo[id][pHitmanNev], param[2], 0, strlen(param[2]), MAX_PLAYER_NAME);
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Hitman: Új nevet adtál neki: %s [%s]", PlayerName(id), param[2]);
		SendFormatMessage(id, COLOR_LIGHTBLUE, "Hitman: Új nevet kaptál! [%s]", param[2]);

		return 1;
	}

	if(strcmp(cmd, "/knevvaltas", true) == 0)
	{
		if(!Admin(playerid, 1337) && !IsDirector(playerid)) return 1;

		if(params != 2) return SendClientMessage(playerid, COLOR_GREY, "Használata: /knevvaltas [kinek] [újnév]");

		new id = ReturnUser(GetParam(cmdtext, 1));

		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Nincs ilyen játékos!");

		new nev[MAX_PLAYER_NAME];
		nev = GetParam(cmdtext, 2);

		if(!IsValidNameFromString(nev)) return SendClientMessage(playerid, COLOR_GREY, "Ez nem RP-s név!");

		if(strlen(nev) > MAX_PLAYER_NAME)
		{
		    SendFormatMessage(playerid, COLOR_LIGHTRED, "Max %d karakter!", MAX_PLAYER_NAME);
			return 1;
		}
		if(FoglaltNev(nev))
			return Msg(playerid, "Foglalt!");

		new reginev[MAX_PLAYER_NAME];
		reginev = PlayerName(id);
		if(!IsHitman(id) && !IsScripter(id))
		{
			format(string, sizeof(string), "[K]%s -> %s", reginev, nev);
			NevLog(string);
			format(string, sizeof(string), "[Kényszerített névváltás]%s átírta %s nevét erre: %s", AdminName(playerid), reginev, nev);
			ABroadCast(COLOR_LIGHTBLUE, string, 1);
		}
		
		Nevvaltas(id, nev);

		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Átírtad %s nevét erre: %s", reginev, nev);
		SendFormatMessage(id, COLOR_LIGHTBLUE, "Az admin átírta a neved. Új neved: %s", nev);

		return 1;
	}

	if(strcmp(cmd, "/nevvaltas", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(NevvaltasiEngedely[playerid] == 0) return 1;
		tmp = GetParam(cmdtext, 1);

		if(params != 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Használata: /nevvaltas [új neved]");
		    return 1;
  		}

		GetPlayerName(playerid, playername, sizeof(playername));

		if(!IsValidNameFromString(tmp))
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Hibás név");
		    return 1;
		}
		if(strlen(tmp) > 20)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Max 20 karakter!");
			return 1;
		}
		if(FoglaltNev(tmp))
			return Msg(playerid, "Foglalt!");
		
		format(string, sizeof(string), "%s nevet váltott! Új neve %s", AdminName(playerid), tmp);
		ABroadCast(COLOR_LIGHTBLUE, string, 1);
		format(string, sizeof(string), "%s -> %s", playername, tmp);
		NevLog(string);

		Nevvaltas(playerid, tmp);
		NevvaltasiEngedely[playerid] = 0;

		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Nevet váltottál! Régi neved %s volt, új neved %s", playername, tmp);

		return 1;
	}

	if(strcmp(cmd, "/anevvaltas", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(!Admin(playerid, 1337)) return 1;

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GREY, "Használata: /anevvaltas [kinek]");
		    SendClientMessage(playerid, COLOR_GREY, "Ezzel engedélyezed valakinek a névváltást!");
		    return 1;
  		}
  		new id = ReturnUser(tmp);
		if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id))
		    return SendClientMessage(playerid, COLOR_GREY, "Nincs ilyen felhasználó!");

		GetPlayerName(id, playername, sizeof(playername));
		GetPlayerName(playerid, sendername, sizeof(playername));
		
		if(!NevvaltasiEngedely[id])
		{
			NevvaltasiEngedely[id] = 1;
			SendClientMessage(id, COLOR_LIGHTBLUE, "Egy admin engedélyezte a névváltást! >> /nevvaltas");
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Engedélyezted a névváltást neki: %s", playername);
			Format(tmp, "<< %s engedélyezte a névváltást neki: %s >>", AdminName(playerid), AdminName(id));
		}
		else
		{
			NevvaltasiEngedely[id] = 0;
			SendClientMessage(id, COLOR_LIGHTBLUE, "Egy admin elvette a névváltási engedélyed");
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Elvetted a névváltási engedélyt tõle: %s", playername);
			Format(tmp, "<< %s elvette a névváltási engedélyt tõle: %s >>", AdminName(playerid), AdminName(id));
		}

		ABroadCast(COLOR_LIGHTRED, tmp, 1);

		return 1;
	}

	/*if(strcmp(cmd, "/crashtele", true) == 0 || strcmp(cmd, "/ct", true) == 0)
	{
	    if(Nincsbelepve(playerid)) return 1;

		if(PlayerInfo[playerid][pCrash] == 1)
		{
			if(PlayerInfo[playerid][pJailed] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Börtönbõl nem lehet!");
			if(NeedMedicTime[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Kórházból nem lehet!");

		    PlayerInfo[playerid][pCrash] = 0;

		    SetPlayerPos(playerid, PlayerInfo[playerid][pCPosX], PlayerInfo[playerid][pCPosY], PlayerInfo[playerid][pCPosZ] + 1);
		    SetPlayerInterior(playerid, PlayerInfo[playerid][pCInt]);
			SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pCVW]);
			SetHealth(playerid, PlayerInfo[playerid][pCelet]);
			SetPlayerArmour(playerid, PlayerInfo[playerid][pCpajzs]);

		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Visszarakva a Crash elõtti pozícióra!");
			if(PlayerInfo[playerid][pAmmo0] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun0], PlayerInfo[playerid][pAmmo0]);
			if(PlayerInfo[playerid][pAmmo1] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
			if(PlayerInfo[playerid][pAmmo2] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
			if(PlayerInfo[playerid][pAmmo3] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun3], PlayerInfo[playerid][pAmmo3]);
			if(PlayerInfo[playerid][pAmmo4] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun4], PlayerInfo[playerid][pAmmo4]);
			if(PlayerInfo[playerid][pAmmo5] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun5], PlayerInfo[playerid][pAmmo5]);
			if(PlayerInfo[playerid][pAmmo6] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun6], PlayerInfo[playerid][pAmmo6]);
			if(PlayerInfo[playerid][pAmmo7] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun7], PlayerInfo[playerid][pAmmo7]);
			if(PlayerInfo[playerid][pAmmo8] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun8], PlayerInfo[playerid][pAmmo8]);
			if(PlayerInfo[playerid][pAmmo9] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun9], PlayerInfo[playerid][pAmmo9]);
			if(PlayerInfo[playerid][pAmmo10] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun10], PlayerInfo[playerid][pAmmo10]);
			if(PlayerInfo[playerid][pAmmo11] != 0) GiveWeapon(playerid, PlayerInfo[playerid][pGun11], PlayerInfo[playerid][pAmmo11]);
		}
		else
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Az utolsó kilépésed nem Crash miatt volt!");
	}*/

	if(strcmp(cmd, "/asegit", true) == 0)
	{
	    if(Nincsbelepve(playerid)) return 1;
	    if(!Admin(playerid, 1)) return 1;

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		    return SendClientMessage(playerid, COLOR_GREY, "Használata: /asegit [név]");

		new jatekos = ReturnUser(tmp);

	    if(Animban[jatekos] == 1)
	    {
			GetPlayerName(jatekos, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
 			Animban[jatekos] = 0;
			SetPlayerDrunkLevel(jatekos, 0);
	        GetPlayerName(jatekos, playername, sizeof(playername));
		    GameTextForPlayer(jatekos, "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Az admin felsegitett!", 3000, 3);
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Felsegitetted %s-t!", playername);
			//ClearAnimations(jatekos);
			ClearAnim(jatekos);
			UnFreeze(jatekos);
			format(string, sizeof(string), "<< Admin %s felsegítette %s-t! >>", AdminName(playerid), giveplayer);
			ABroadCast(COLOR_LIGHTRED, string, 1);
			
			new Float:elet;
			GetPlayerHealth(jatekos, elet);
			if(elet < 15.0)
				SetHealth(jatekos, 22.0);
			else if(elet < 95.0)
				SetHealth(jatekos, elet+5.0);
		}
		else
		    SendClientMessage(playerid, COLOR_YELLOW, "Ez a játékos nem szorul segítségre!");

		return 1;
	}
    if(egyezik(cmd, "/vontatokotel") || egyezik(cmd, "/vontatókötél"))
	{
	    if(vontatokotel[playerid] == 1)
	    {
     		if(Nincsbelepve(playerid)) return 1;
			if(veh == -1) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
			if(Bikes(veh)) return Msg(playerid, "Persze...");

			new kocsi = GetClosestVehicle(playerid, false);

			if(GetDistanceToVehicle(playerid, kocsi) > 10) return SendClientMessage(playerid, COLOR_GREY, "A közelben nincs jármû!");

			if(GetVehicleTrailer(veh) == 0)
				AttachTrailerToVehicle(kocsi, veh);
			else
				DetachTrailerFromVehicle(veh);
		}
		else return Msg(playerid, "Vegyél vontató kötelet a 24/7-ben.");
	}
	if(strcmp(cmd, "/cigi", true) == 0)
	{
	    if(PlayerInfo[playerid][pCigi] != 0)
	    {
	    if(PlayerInfo[playerid][pGyujto] != 0)
	    {
     		if(PlayerInfo[playerid][pCigiUsed] == 5)
	        {
	            SendClientMessage(playerid, COLOR_RED, "Függõ lettél! Ha leakarsz szokni, vegyél a 24/7-be nikotin tapaszt!");
            	PlayerInfo[playerid][pCigiFuggoseg] = 1;
	        }
	        if(PlayerInfo[playerid][pCigiFuggoseg] == 1)
	        {
	            SendClientMessage(playerid, COLOR_RED, "Nagyon vártál már erre a cigire!");
	            new Float:health;
				health = GetPlayerHealth(playerid, health);
				SetHealth(playerid, health+25);
			}
  			PlayerInfo[playerid][pCigi]--;
			PlayerInfo[playerid][pGyujto]--;
   			PlayerInfo[playerid][pCigiUsed]++;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
			format(string, sizeof(string), "* Valaki elõveszi a gyújtót.");
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "* Valaki rágyújtott egy cigire.");
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "* Valaki elteszi a gyújtót.");
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
			}
			else
			{
			SendClientMessage(playerid, COLOR_RED, "Nincs gyújtód...Akkor hogy akarsz rágyújtani?!");
			}
		}
		else
		{
  			SendClientMessage(playerid, COLOR_YELLOW, "Nincs cigid");
		}
		return 1;
	}
 	if(strcmp(cmd, "/ivás", true) == 0)
	{
	    if(PlayerInfo[playerid][pPia] != 0)
	    {
  			PlayerInfo[playerid][pPia]--;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			format(string, sizeof(string), "* Valaki elõvesz egy üveg piát, és megissza.");
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
			}
		else
		{
  			SendClientMessage(playerid, COLOR_YELLOW, "Nincs piád! Vegyél a 24/7-be.");
		}
		return 1;
	}
    if(strcmp(cmd, "/nikotin", true) == 0)
	{
	    if(PlayerInfo[playerid][pNikotin] != 0)
	    {
     		if(PlayerInfo[playerid][pCigiFuggoseg] == 0)
	        {
	            SendClientMessage(playerid, COLOR_RED, "Minek neked nikotin tapasz, amikor nem vagy függõ?");
	        }
	        else
	        {
	        PlayerInfo[playerid][pNikotin]--;
   			PlayerInfo[playerid][pCigiFuggoseg] = 0;
   			SendClientMessage(playerid, COLOR_YELLOW, "Feltettél egy nikotin tapaszt a kezedre! Most már nem vagy függõ.");
			format(string, sizeof(string), "* Valaki feltesz egy nikotin tapaszt.");
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
	        }
		}
		else
		{
  			SendClientMessage(playerid, COLOR_YELLOW, "Nincs nikotin tapaszod! Vegyél a 24/7-be!");
		}
		return 1;
	}
	if(egyezik(cmd, "/kezetfog"))
	{
		if(params < 2) return Msg(playerid, "/Kezetfog [Tipus(1-3)] [Játékos Neve / ID]");
		new t = strval(param[1]);
		if(t < 1 || t > 3) return Msg(playerid, "Tipus 1-3");
		new p = ReturnUser(param[2]);
		if(p == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos!");
		if(GetDistanceBetweenPlayers(playerid,p) > 1) return Msg(playerid, "Nincs a közeledben a játékos!");
		/*new Float:A, Float:A2;
		GetPlayerFacingAngle(playerid, A);
		GetPlayerFacingAngle(p, A2);
		SetPlayerFacingAngle(playerid, 180);
		SetPlayerFacingAngle(p, 180);*/
		if(t == 1)
		{
			OnePlayAnim(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0); 
			OnePlayAnim(p,"GANGS","hndshkba",4.0,0,0,0,0,0);
		}	
		if(t == 2)
		{
			OnePlayAnim(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
			OnePlayAnim(p,"GANGS","hndshkda",4.0,0,0,0,0,0);
		}	
		if(t == 3)
		{
			OnePlayAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
			OnePlayAnim(p,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
		}
		SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Kezetfogtál vele: %s.", PlayerName(p));
		SendFormatMessage(p, COLOR_LIGHTGREEN, "* Kezetfogtál vele: %s.", PlayerName(playerid));
		Cselekves(playerid, "kezetfogott valakivel.", 1);
	}
  	/*if(strcmp(cmd, "/kezetfog", true) == 0)
	{
	    if(Nincsbelepve(playerid)) return 1;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		    return SendClientMessage(playerid, COLOR_GREY, "Használata: /kezetfog [Játékos neve/ID]");

		new jatekos = ReturnUser(tmp);

        if(jatekos == INVALID_PLAYER_ID)
        {
        SendClientMessage(playerid, COLOR_WHITE, "Nincs ilyen játékos!");
        return 1;
        }
        if(GetDistanceBetweenPlayers(playerid,jatekos) > 1)
        {
        SendClientMessage(playerid, COLOR_GREY, " Nincs a közeledbe ez a játékos!");
        return 1;
        }
		SendClientMessage(playerid, COLOR_YELLOW, "Kezet fogtál az illetõvel.");
		SendClientMessage(jatekos, COLOR_YELLOW, "Kezet fogtál az illetõvel.");
		format(string, sizeof(string), "* Valaki kezet fogott valakivel.");
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		OnePlayAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
		OnePlayAnim(jatekos,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);

		return 1;
	}*/
	if(strcmp(cmd, "/segit", true) == 0)
	{
	    if(Nincsbelepve(playerid)) return 1;

		new jatekos = GetClosestPlayer(playerid);
		if(ProxDetectorS(5, playerid, jatekos))
		{
		    if(PlayerInfo[playerid][pKotszer] != 0)
		    {
			    if(Animban[jatekos] == 1)
			    {
					if(NemMozoghat(playerid))
						return 1;
						
	   				MunkaFolyamatban[playerid] = 1;
				    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Felsegited...", 3000, 3);
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(jatekos, false);
					ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
					ApplyAnimation(jatekos, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
					SetTimerEx("Munkavege", 10000, false, "ddd", playerid, M_SEGIT, jatekos);
					PlayerInfo[playerid][pKotszer]--;
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_YELLOW, "Ez a játékos nem szorul segítségre!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Nincs kötszered! Vegyél a 24/7-be!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs senki a közeledben...");
		}

	}

	if(strcmp(cmd, "/helper", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(Admin(playerid, 5))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			    return SendClientMessage(playerid, COLOR_GRAD2, "Használata: /helper [név/id]");

 			new nev = ReturnUser(tmp);
		    GetPlayerName(nev, playername, sizeof(playername));
		    GetPlayerName(playerid, sendername, sizeof(sendername));

			if(Adminseged[nev] == 1)
			{
			    Adminseged[nev] = 0;
			    TvEngedely[nev] = 0;
			    SendFormatMessage(nev, COLOR_LIGHTBLUE, "%s elvette az adminsegéd jogodat!", sendername);
			    SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Elvetted %s adminsegéd jogát, ha ismét ki akarod nevezni, akkor /helper %s", playername, playername);
			    format(string, sizeof(string), "<< Admin %s elvette %s Adminsegéd jogát! >>", AdminName(playerid), playername);
			    ABroadCast(COLOR_LIGHTRED, string, 1);
				Channel(nev, NINCS, true);
			}
			else
			{
				Adminseged[nev] = 1;
			    SendFormatMessage(nev, COLOR_LIGHTBLUE, "%s kinevezett adminsegédnek, így látod a reportokat, és /asay-al irhatsz!", sendername);
			    SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kinevezted %s-t adminsegédnek, ha el akarod venni ezt a jogot, akkor /helper %s", playername, playername);
                format(string, sizeof(string), "<< Admin %s kinevezte %s-t Adminsegédnek! >>", AdminName(playerid), playername);
			    ABroadCast(COLOR_LIGHTRED, string, 1);
				Channel(nev, 0, true);
			}
		}
		else
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			if(Adminseged[playerid] == 1)
			{
				Channel(playerid, NINCS, true);
			    Adminseged[playerid] = 0;
			    TvEngedely[playerid] = 0;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Már nem vagy AS!");
			    format(string, sizeof(string), "<< %s lemondta az adminsegéd jogát! >>", sendername);
			    ABroadCast(COLOR_LIGHTRED, string, 1);
			}
			else
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nem vagy admin(segéd)!");
		}
		return 1;
 	}
    if(strcmp(cmd, "/tvengedely", true) == 0 || strcmp(cmd, "/tvengedély", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(Admin(playerid, 5))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			    return SendClientMessage(playerid, COLOR_GRAD2, "Használata: /tvengedély [név/id]");

        	new nev = ReturnUser(tmp);
		    GetPlayerName(nev, playername, sizeof(playername));
		    GetPlayerName(playerid, sendername, sizeof(sendername));

			if(Adminseged[nev] == 1 || PlayerInfo[nev][pAS] == 1)
			{
				if(TvEngedely[nev] == 0)
				{
					format(string, sizeof(string), "<< Engedélyezted a TVzést neki: %s! >>", playername);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "<< Admin %s engedélyezte neked a TVzést! >>", AdminName(playerid));
					SendClientMessage(nev, COLOR_YELLOW, string);
					format(string, sizeof(string), "<< Admin %s engedélyezte neki: %s a TVzést! >>", AdminName(playerid), playername);
					ABroadCast(COLOR_LIGHTRED, string, 1);
					TvEngedely[nev] = 1;
				}
				else
				{
				format(string, sizeof(string), "<< Tiltottad a TVzést neki: %s! >>", playername);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "<< Admin %s tiltotta neked a TVzést! >>", AdminName(playerid));
				SendClientMessage(nev, COLOR_YELLOW, string);
				format(string, sizeof(string), "<< Admin %s tiltotta neki: %s a TVzést! >>", AdminName(playerid), playername);
				ABroadCast(COLOR_LIGHTRED, string, 1);
				TvEngedely[nev] = 0;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Ez a játékos nem AS!");
				return 1;
			}

    	}
    	return 1;
 	}

	if(strcmp(cmd, "/kutya", true) == 0)
    {
        if(OnDuty[playerid]!=1)
        {
        SendClientMessage(playerid, COLOR_WHITE, "Nem vagy szolgálatban!");
        return 1;
        }
		if(PlayerToPoint(20, playerid,246.3739,79.5987,1003.6406))
  		{
        if(kutya[playerid] == 0)
        {
        SendClientMessage(playerid, COLOR_WHITE, "Kivettél egy kutyát!");
        kutya[playerid] = 1;
        format(string, sizeof(string), "* Valaki kivett egy kutyát.");
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else
        {
        SendClientMessage(playerid, COLOR_WHITE, "Nem lehet nálad több kutya!");
        }
        }
        else
        {
        SendClientMessage(playerid, COLOR_WHITE, "LSPDn kérhetsz kutyát!");
        }
  		return 1;
	}
 	if(strcmp(cmd, "/uszít", true) == 0 || strcmp(cmd, "/uszit", true) == 0)
  	{
 		      if(Nincsbelepve(playerid)) return 1;
          	  tmp = strtok(cmdtext, idx);
          	  if(!strlen(tmp))
              return SendClientMessage(playerid, COLOR_GRAD2, "Használata: /uszít [név/id]");

              new nev = ReturnUser(tmp);
              new harap;
              if(nev == INVALID_PLAYER_ID)
              {
              SendClientMessage(playerid, COLOR_WHITE, "Nincs ilyen játékos!");
              return 1;
              }
              if(GetDistanceBetweenPlayers(playerid,nev) > 10)
              {
              SendClientMessage(playerid, COLOR_GREY, " Nincs a közeledbe ez a játékos!");
              return 1;
              }
              if(kutya[playerid] == 1)
              {
              harap = random(3);
              if(harap == 1)
              {
              SendClientMessage(playerid, COLOR_WHITE, "Rá uszítottál egy kutyát!");
              SendClientMessage(nev, COLOR_WHITE, "Megharapott egy kutya, ezért összeestél!");
              kutya[playerid] = 0;
			  AnimbaRak(nev, false);
              format(string, sizeof(string), "* Valaki elengedett egy kutyát.");
              ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			  }
			  else
			  {
			  SendClientMessage(playerid, COLOR_WHITE, "A kutyádnak nem sikerült megharapnia a célpontot!");
			  kutya[playerid] = 0;
			  SendClientMessage(nev, COLOR_WHITE, "Rád uszítottak egy kutyát, de te ellenkeztél!");
			  }
			  }
              else
              {
              SendClientMessage(playerid, COLOR_WHITE, "Nincs nálad kutya!");
              return 1;
              }
			  return 1;
	}
	if(strcmp(cmd, "/parkolohelp", true) ==0)
	{
	 	if(IsPlayerConnected(playerid))
	  	{
	  	    {
				SendClientMessage(playerid,COLOR_RED,"*** Elhelyezése *** Verona Beach közelében, a Conference Center nevû helyen.");
	  	        SendClientMessage(playerid,COLOR_GREEN,"*** Parkolás - Információ *** Két helyre parkolhatsz, Felsõ és Alsó emeletre.");
	  	        SendClientMessage(playerid,COLOR_GREEN,"*** Jegyek ára *** Alsó emelet: 3,000 FT | Felsõ emelet: 5,000 FT.");
	 			SendClientMessage(playerid,COLOR_GREEN,"*** Parancsok *** /alsoparkolo - Az also emeletre parkolójegyet veszel.");
				SendClientMessage(playerid,COLOR_GREEN,"*** Parancsok *** /felsoparkolo - A felsõ emeletre parkolójegyet veszel(Állj a nyílra szigorúan).");
				SendClientMessage(playerid,COLOR_GREEN,"*** Parancsok *** /alsoparkoloki - Ezzel a paranccsal nyílik ki a kapu.");
				SendClientMessage(playerid,COLOR_GREEN,"*** Parancsok *** /felsoparkoloki - Ezzel a paranccsal a lift kiszállít a parkolóból.");
				SendClientMessage(playerid,COLOR_GREEN,"*** Info *** Csak RP-sen, ha csalsz lecsuknak a zsaruk. ");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/helper2", true) == 0)
	{
		if(Nincsbelepve(playerid)) return 1;
		if(Admin(playerid, 1337))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			    return SendClientMessage(playerid, COLOR_GRAD2, "Használata: /helper2 [név/id]");

 			new nev = ReturnUser(tmp);
		    GetPlayerName(nev, playername, sizeof(playername));
		    GetPlayerName(playerid, sendername, sizeof(sendername));

			if(PlayerInfo[nev][pAS] == 1)
			{
				Channel(nev, NINCS, true);
			    PlayerInfo[nev][pAS] = 0;
			    SendFormatMessage(nev, COLOR_LIGHTBLUE, "%s elvette az adminsegéd jogodat!", sendername);
			    SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Elvetted %s adminsegéd jogát, ha ismét ki akarod nevezni, akkor /helper2 %s", playername, playername);
			    format(string, sizeof(string), "<< Admin %s elvette %s Adminsegéd jogát!>>", AdminName(playerid), playername);
			    ABroadCast(COLOR_LIGHTRED, string, 1);
			}
			else
			{
			    PlayerInfo[nev][pAS] = 1;
			    SendFormatMessage(nev, COLOR_LIGHTBLUE, "%s kinevezett adminsegédnek, így látod a reportokat, és /asay-al irhatsz!", sendername);
			    SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kinevezted %s-t adminsegédnek, ha el akarod venni ezt a jogot, akkor /helper2 %s", playername, playername);
			    format(string, sizeof(string), "<< Admin %s kinevezte %s-t Adminsegédnek! >>", AdminName(playerid), playername);
			    ABroadCast(COLOR_LIGHTRED, string, 1);
				Channel(nev, 0, true);
			}
		}
		else
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pAS] == 1)
			{
			    PlayerInfo[playerid][pAS] = 0;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Már nem vagy AS!");
			    format(string, sizeof(string), "<< %s lemondta az adminsegéd jogát! >>", sendername);
			    ABroadCast(COLOR_LIGHTRED, string, 1);
				Channel(playerid, NINCS, true);
			}
			else
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nem vagy adminsegéd!");
		}
		return 1;
	}

	if(strcmp(cmd, "/clearchat", true) == 0 || egyezik(cmd, "/cc"))
	{
		if(Nincsbelepve(playerid)) return 1;
		if(Admin(playerid, 2))
		{
		    for(new c = 1; c <= 100; c++)
		    {
		        SendClientMessageToAll(COLOR_WHITE, " ");
		    }
		}
		return 1;
	}

	if(strcmp(cmd, "/kaja", true) == 0)
	{
		if(playerid != NINCS) return Msg(playerid, "Átalakítás miatt a parancs zárolva - Menj és egyél az éttermekben :)");

		if(PlayerInfo[playerid][pKaja] < 1)
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kajád, vegyél egy boltban!");

        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		SetHealth(playerid, MAXHP);
		PlayerInfo[playerid][pKaja]--;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Megettél egy szendvicset!");
		format(string, sizeof(string), "* Valaki elõvett egy szendvicset és megette.");
  		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}

	if(strcmp(cmd, "/drog", true) == 0)
	{
	    if(Nincsbelepve(playerid)) return 1;

   	    if(PlayerBoxing[playerid] > 0)
            return SendClientMessage(playerid, COLOR_GREY, "Harcolsz... a végén még elájulnál tõle...");

		new kokain = PlayerInfo[playerid][pKokain];
		new heroin = PlayerInfo[playerid][pHeroin];
		new marihuana = PlayerInfo[playerid][pMarihuana];
		new Float:elet, Float:pancel;
		GetPlayerHealth(playerid, elet);
		GetPlayerArmour(playerid, pancel);

		if(kokain < 1 && heroin < 1 && marihuana < 1)
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs drogod!");

		new drog[256];
		tmp = strtok(cmdtext, idx);

		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Használata: /drog [drog]");
		    SendFormatMessage(playerid, COLOR_GRAD2, "Felhasználható drogjaid: Kokain[%dg] Heroin[%dg] Marihuana[%dg]", kokain, heroin, marihuana);
		    SendFormatMessage(playerid, COLOR_GRAD2, "Elhasználáskor: Kokain[2g] Heroin[3g] Marihuana[5g]", kokain, heroin, marihuana);
		    return 1;
		}

		drog = tmp;

		if(Drogozott[playerid] != 0)
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ez túl sok egyszerre, kicsit pihenj...");

		if(strcmp(drog, "kokain", true) == 0)
		{
		    if(kokain < 2)
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs elég kokainod!");

			if(elet < 10)
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "A-a, ilyenkor már a drog sem segít! Inkább hívj orvost! :)");

			Drogozott[playerid] = 1;
			PlayerInfo[playerid][pDrogido] += 10;
			PlayerInfo[playerid][pKokain] -= 3;

			if(elet < (MAXHP - 10.0))
				SetHealth(playerid, elet + 10.0);
			else
				SetHealth(playerid, MAXHP);

			SetPlayerWeather(playerid, -66);
			ApplyAnimation(playerid, "GANGS", "drnkbr_prtl_F", 4.000000, 0, 1, 1, 1, -1);
			SetPlayerDrunkLevel(playerid, (GetPlayerDrunkLevel(playerid)+250));

		}

		else if(strcmp(drog, "heroin", true) == 0)
		{
		    if(heroin < 3)
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs elég heroinod!");

			if(elet < 10)
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "A-a, ilyenkor már a drog sem segít! Inkább hívj orvost! :)");

			Drogozott[playerid] = 1;
			PlayerInfo[playerid][pDrogido] += 15;
			PlayerInfo[playerid][pHeroin] -= 3;

			if(pancel < 96.0)
				SetPlayerArmour(playerid, pancel + 4.0);
			else
			    SetPlayerArmour(playerid, 100.0);

			SetPlayerWeather(playerid, 45);
			ApplyAnimation(playerid, "GANGS", "drnkbr_prtl_F", 4.000000, 0, 1, 1, 1, -1);
			SetPlayerDrunkLevel(playerid, (GetPlayerDrunkLevel(playerid)+300));

		}

		else if(strcmp(drog, "marihuana", true) == 0)
		{
		    if(marihuana < 1)
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs elég marihuánád!");

			if(elet < 10)
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "A-a, ilyenkor már a drog sem segít! Inkább hívj orvost! :)");

			Drogozott[playerid] = 1;
			PlayerInfo[playerid][pDrogido] += 20;
			PlayerInfo[playerid][pMarihuana] -= 5;

			if(elet < (MAXHP - 10.0))
				SetHealth(playerid, elet + 10.0);
			else
			    SetHealth(playerid, MAXHP);

			if(pancel < 94.0)
				SetPlayerArmour(playerid, pancel + 6);
			else
			    SetPlayerArmour(playerid, 100.0);

			SetPlayerWeather(playerid, -800);
			ApplyAnimation(playerid, "GANGS", "drnkbr_prtl_F", 4.000000, 0, 1, 1, 1, -1);

			SetPlayerDrunkLevel(playerid, (GetPlayerDrunkLevel(playerid)+500));

		}

		else
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Ilyen drog nem létezik...");

	}

	if(strcmp(cmd, "/berak", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new mit[256], mennyit;
			new house = HazabanVan(playerid);
			if(house != NINCS)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Helyes használat: /berak [mit] [mennyit / slot]");
					SendClientMessage(playerid, COLOR_GRAD2, "Amit berakhatsz: Pénz, Kaja, Cigi, Kokain, Heroin, Marihuana, Material(mati), Fegyver");
					return 1;
				}
				mit = tmp;
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Helyes használat: /berak [mit] [mennyit / slot]");
					SendClientMessage(playerid, COLOR_GRAD2, "Amit berakhatsz: Pénz, Kaja, Cigi, Kokain, Heroin, Marihuana, Material(mati), Fegyver");
					return 1;
				}
				mennyit = strval(tmp);

				if(mennyit < 1)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Hibás mennyiség / slot");
				if(FloodCheck(playerid)) return 1;

				if(strcmp(mit, "pénz", true) == 0 || strcmp(mit, "penz", true) == 0)
				{
				    new penz = GetMoney(playerid);

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénzed, vagy minuszban vagy!");

					if(penz < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT-od van! Többet nem tudsz betenni...", penz);
					    return 1;
	    			}

					GiveMoney(playerid, -mennyit);
					HouseInfo[house][hTakings] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dFT-t a széfbe", mennyit);

					//HazUpdate(house, "Penz='%d'", HouseInfo[house][hTakings]);
					HazUpdate(house, HAZ_Takings);
					return 1;
				}

				else if(strcmp(mit, "kaja", true) == 0)
				{
					new kaja = PlayerInfo[playerid][pKaja];
				    if(kaja < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kajád!");

					if(kaja < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %d kajád van! Többet nem tudsz betenni...", kaja);
					    return 1;
	    			}

					new maxcucc = MAXHAZKAJA;
					if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
					{
						switch(PlayerInfo[playerid][pPremiumCsomag])
						{
							case 400: maxcucc += floatround(MAXHAZKAJA * 0.05);
							case 800: maxcucc += floatround(MAXHAZKAJA * 0.1);
							case 1600: maxcucc += floatround(MAXHAZKAJA * 0.25);
						}
					}

					if((HouseInfo[house][hKaja] + mennyit) > maxcucc)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d kaja fér el a házban!", maxcucc);
					    return 1;
	    			}

                    PlayerInfo[playerid][pKaja] -= mennyit;
					HouseInfo[house][hKaja] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %d kaját a házba", mennyit);

					//HazUpdate(house, "Kaja='%d'", HouseInfo[house][hKaja]);
					HazUpdate(house, HAZ_Kaja);
					return 1;
				}

				else if(strcmp(mit, "cigi", true) == 0)
				{
					new kaja = PlayerInfo[playerid][pCigi];
				    if(kaja < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs cigid!");

					if(kaja < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %d cigid van! Többet nem tudsz betenni...", kaja);
					    return 1;
	    			}

					new maxcucc = MAXHAZCIGI;
					if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
					{
						switch(PlayerInfo[playerid][pPremiumCsomag])
						{
							case 400: maxcucc += floatround(MAXHAZCIGI * 0.05);
							case 800: maxcucc += floatround(MAXHAZCIGI * 0.1);
							case 1600: maxcucc += floatround(MAXHAZCIGI * 0.25);
						}
					}

					if((HouseInfo[house][hCigi] + mennyit) > maxcucc)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d cigi fér el a házban!", maxcucc);
					    return 1;
	    			}

                    PlayerInfo[playerid][pCigi] -= mennyit;
					HouseInfo[house][hCigi] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %d cigit a házba", mennyit);

					//HazUpdate(house, "Cigi='%d'", HouseInfo[house][hCigi]);
					HazUpdate(house, HAZ_Cigi);
					return 1;
				}

				else if(strcmp(mit, "kokain", true) == 0)
				{
					new cucc = PlayerInfo[playerid][pKokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokainod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokainod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

					new maxcucc = MAXHAZKOKAIN;
					if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
					{
						switch(PlayerInfo[playerid][pPremiumCsomag])
						{
							case 400: maxcucc += floatround(MAXHAZKOKAIN * 0.05);
							case 800: maxcucc += floatround(MAXHAZKOKAIN * 0.1);
							case 1600: maxcucc += floatround(MAXHAZKOKAIN * 0.25);
						}
					}

					if((HouseInfo[house][hKokain] + mennyit) > maxcucc)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %dg kokain fér el a házszéfbe!", maxcucc);
					    return 1;
	    			}

                    PlayerInfo[playerid][pKokain] -= mennyit;
					HouseInfo[house][hKokain] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg kokaint a házszéfbe", mennyit);

					//HazUpdate(house, "Kokain='%d'", HouseInfo[house][hKokain]);
					HazUpdate(house, HAZ_Kokain);
					return 1;
				}

				else if(strcmp(mit, "heroin", true) == 0)
				{
					new cucc = PlayerInfo[playerid][pHeroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroinod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroinod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

					new maxcucc = MAXHAZHEROIN;
					if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
					{
						switch(PlayerInfo[playerid][pPremiumCsomag])
						{
							case 400: maxcucc += floatround(MAXHAZHEROIN * 0.05);
							case 800: maxcucc += floatround(MAXHAZHEROIN * 0.1);
							case 1600: maxcucc += floatround(MAXHAZHEROIN * 0.25);
						}
					}

					if((HouseInfo[house][hHeroin] + mennyit) > maxcucc)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %dg heroin fér el a házszéfbe!", MAXHAZHEROIN);
					    return 1;
	    			}

                    PlayerInfo[playerid][pHeroin] -= mennyit;
					HouseInfo[house][hHeroin] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a házszéfbe", mennyit);

					//HazUpdate(house, "Heroin='%d'", HouseInfo[house][hHeroin]);
					HazUpdate(house, HAZ_Heroin);
					return 1;
				}

				else if(strcmp(mit, "marihuana", true) == 0)
				{
					new cucc = PlayerInfo[playerid][pMarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuánád!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuánád van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

					new maxcucc = MAXHAZMARIHUANA;
					if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
					{
						switch(PlayerInfo[playerid][pPremiumCsomag])
						{
							case 400: maxcucc += floatround(MAXHAZMARIHUANA * 0.05);
							case 800: maxcucc += floatround(MAXHAZMARIHUANA * 0.1);
							case 1600: maxcucc += floatround(MAXHAZMARIHUANA * 0.25);
						}
					}

					if((HouseInfo[house][hMarihuana] + mennyit) > maxcucc)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %dg marihuana fér el a házszéfbe!", maxcucc);
					    return 1;
	    			}

                    PlayerInfo[playerid][pMarihuana] -= mennyit;
					HouseInfo[house][hMarihuana] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg marihuana-t a házszéfbe", mennyit);

					//HazUpdate(house, "Marihuana='%d'", HouseInfo[house][hMarihuana]);
					HazUpdate(house, HAZ_Marihuana);
					return 1;
				}
				else if(strcmp(mit, "mellény", true) == 0 || strcmp(mit, "melleny", true) == 0)
				{
					new Float:armor;
					GetPlayerArmour(playerid, armor);
					new pancel = floatround(armor);
					if(pancel == 0) return Msg(playerid, "Nincs mellényed!");					
					new maxcucc = 5, fslot = mennyit - 1;
					if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
					{
						switch(PlayerInfo[playerid][pPremiumCsomag])
						{
							case 400: maxcucc += 1;
							case 800: maxcucc += 2;
							case 1600: maxcucc += 5;
						}
					}
	    			if(mennyit >= 1 && mennyit <= maxcucc)
	    			{
						if(HouseInfo[house][hMellenyek][fslot] == 0) 
						{
							SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál egy mellényt a házszéfbe, állapota: %d százalék", pancel);
							HouseInfo[house][hMellenyek][fslot] = pancel;
							SetPlayerArmour(playerid, 0);
						}
						else return Msg(playerid, "Itt már van mellény!");
					}
					HazUpdate(house, HAZ_Mellenyek);
					return 1;
				}
				else if(strcmp(mit, "mati", true) == 0 || strcmp(mit, "material", true) == 0)
				{
					new cucc = PlayerInfo[playerid][pMats];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs materialod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg materialod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

					new maxcucc = MAXHAZMATI;
					if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
					{
						switch(PlayerInfo[playerid][pPremiumCsomag])
						{
							case 400: maxcucc += floatround(MAXHAZMATI * 0.05);
							case 800: maxcucc += floatround(MAXHAZMATI * 0.1);
							case 1600: maxcucc += floatround(MAXHAZMATI * 0.25);
						}
					}

					if((HouseInfo[house][hMati] + mennyit) > maxcucc)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %ddb material fér el a házszéfbe!", maxcucc);
					    return 1;
	    			}

                    PlayerInfo[playerid][pMats] -= mennyit;
					HouseInfo[house][hMati] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %ddb materialt a házszéfbe", mennyit);

					//HazUpdate(house, "Material='%d'", HouseInfo[house][hMati]);
					HazUpdate(house, HAZ_Mati);
					return 1;
				}
				else if(strcmp(mit, "fegyver", true) == 0 )
				{
					new fegyver = GetPlayerWeapon(playerid);
					if(fegyver == 0) return Msg(playerid, "Nincs a kezedbe fegyver");
					new maxcucc = 5, fslot = mennyit - 1;
					if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
					{
						switch(PlayerInfo[playerid][pPremiumCsomag])
						{
							case 400: maxcucc += 1;
							case 800: maxcucc += 2;
							case 1600: maxcucc += 5;
						}
					}
	    			if(mennyit >= 1 && mennyit <= maxcucc)
	    			{
	    			    if(HouseInfo[house][hFegyverek][fslot] == 0)
	    			    {
	    			    	FegyverElvesz(playerid, fegyver);
							new loszer = GetPlayerAmmo(playerid);
	    			    	SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál egy fegyvert a házszéfbe: %s, lõszer: %ddb", GetGunName(fegyver), loszer);
							HouseInfo[house][hFegyverek][fslot] = fegyver;
							HouseInfo[house][hToltenyek][fslot] = loszer;
							HazUpdate(house, HAZ_Fegyverek);
	    			    }
	    			    else
	    			    {
	    			        Msg(playerid, "Itt már van fegyver!");
						}
					}
					else if(mennyit >= 1 && mennyit <= 10 && mennyit > maxcucc)
					{
						Msg(playerid, "Ez prémium slot!");
					}
				}
				else
					return SendClientMessage(playerid, COLOR_GRAD2, "Amit berakhatsz: Pénz, Kaja, Kokain, Heroin, Material(mati), Fegyver");
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nincs házad");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/fegyvereim", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(NincsHaza(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs házad!");
			new house = HazabanVan(playerid);
	        if(house == NINCS)
	            return Msg(playerid, "Nem vagy a házadban!");

			new maxcucc = 5;
			if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
			{
				switch(PlayerInfo[playerid][pPremiumCsomag])
				{
					case 400: maxcucc += 1;
					case 800: maxcucc += 2;
					case 1600: maxcucc += 5;
				}
			}

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "===========[Fegyvereim]===========");
			for(new x = 0; x < 10; x++)
			{
				if(x < maxcucc)
				{
					new fegyo = HouseInfo[house][hFegyverek][x];
					if(fegyo == 0)
						SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Slot %d: Üres", x+1);
					else
					{
						if(Lofegyver(fegyo))
							SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Slot %d: Fegyver: %s | Töltény: %d", x+1, GetGunName(fegyo), HouseInfo[house][hToltenyek][x]);
						else
							SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Slot %d: Fegyver: %s", x+1, GetGunName(fegyo));
					}
				}
			}
			if(maxcucc < 10)
				SendFormatMessage(playerid, COLOR_YELLOW, "Slot %d-10: Prémium slot", maxcucc+1);
		}
	}
	if(egyezik(cmd, "/mellényeim") || egyezik(cmd, "/mellenyeim"))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(NincsHaza(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs házad!");
			new house = HazabanVan(playerid);
	        if(house == NINCS)
	            return Msg(playerid, "Nem vagy a házadban!");

			new maxcucc = 5;
			if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
			{
				switch(PlayerInfo[playerid][pPremiumCsomag])
				{
					case 400: maxcucc += 1;
					case 800: maxcucc += 2;
					case 1600: maxcucc += 5;
				}
			}
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "===========[Mellényeim]===========");
			for(new x = 0; x < 10; x++)
			{
				if(x < maxcucc)
				{
					new pancel = HouseInfo[house][hMellenyek][x];
					if(pancel == 0)
						SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Slot %d: Üres", x+1);
					else
						SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Slot %d: Mellény állapota: %d százalék",x+1, pancel);
				}
			}
			if(maxcucc < 10)
				SendFormatMessage(playerid, COLOR_YELLOW, "Slot %d-10: Prémium slot", maxcucc+1);
		}
	}
	
	if(egyezik(cmd, "/lista"))
	{
		new x;
		if(LMT(playerid, LMUNKA_TAXI))
		{
			SendClientMessage(playerid, COLOR_WHITE, "======= [Híváslista] =======");
			for(x = 0; x < MAX_PLAYERS; x++)
			{
				if(TaxiHivas[x] == true) SendFormatMessage(playerid, COLOR_GREY, "[%d][%s]", x, PlayerName(x));
			}
			SendClientMessage(playerid, COLOR_WHITE, "======= [Híváslista] =======");
		}
		else if(LMT(playerid, LMUNKA_MENTO))
		{
			SendClientMessage(playerid, COLOR_WHITE, "======= [Híváslista] =======");
			for(x = 0; x < MAX_PLAYERS; x++)
			{
				if(MentoHivas[x] == true) SendFormatMessage(playerid, COLOR_GREY, "[%d][%s]", x, PlayerName(x));
			}
			SendClientMessage(playerid, COLOR_WHITE, "======= [Híváslista] =======");
		}
		else Msg(playerid, "Nem használhatod ezt a parancsot!");
		return 1;
	}

	if(strcmp(cmd, "/házszéf", true) == 0 || strcmp(cmd, "/hazszef", true) == 0)
	{
	    if(Nincsbelepve(playerid)) return 1;

		if(NincsHaza(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nincs házad!");

		if(HazabanVan(playerid) == NINCS)
			return Msg(playerid, "Nem vagy a házadban!");

		new house = IsAt(playerid, IsAt_Haz);

		new penz, kaja, cigis, kokain, heroin, marihuana, material;
		penz = HouseInfo[house][hTakings];
		cigis = HouseInfo[house][hCigi];
		kaja = HouseInfo[house][hKaja];
		kokain = HouseInfo[house][hKokain];
		heroin = HouseInfo[house][hHeroin];
		marihuana = HouseInfo[house][hMarihuana];
		material = HouseInfo[house][hMati];
		SendClientMessage(playerid, COLOR_YELLOW, "===== Házszéfed =====");
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Pénz: %dFT | Kaja: %ddb/%ddb | Cigi: %ddb/%ddb | Material: %ddb/%ddb", penz, MAXHAZKAJA, kaja, MAXHAZCIGI, cigis, MAXHAZMATI, material);
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kokain: %dg/%dg | Heroin: %dg/%dg | Marihuana: %dg/%dg", MAXHAZKOKAIN, kokain, MAXHAZHEROIN, heroin, MAXHAZMARIHUANA, marihuana);
		SendClientMessage(playerid, COLOR_YELLOW, "=================================");
		return 1;
	}

	if(strcmp(cmd, "/kivesz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new mit[256], mennyit;
			GetPlayerName(playerid, playername, sizeof(playername));
			
			new house = HazabanVan(playerid);
			if(house != NINCS)
			{

				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Helyes használat: /kivesz [mit] [mennyit / slot]");
					SendClientMessage(playerid, COLOR_GRAD2, "Amit kivehetsz: Pénz, Kokain, Heroin, Marihuana, Material(mati), Cigi, Fegyver");
					return 1;
				}
				mit = tmp;
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Helyes használat: /kivesz [mit] [mennyit / slot]");
					SendClientMessage(playerid, COLOR_GRAD2, "Amit kivehetsz: Pénz, Kokain, Heroin, Marihuana, Material(mati), Cigi, Fegyver");
					return 1;
				}
				mennyit = strval(tmp);

				if(mennyit < 1)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Hibás mennyiség / slot");

				if(strcmp(mit, "pénz", true) == 0 || strcmp(mit, "penz", true) == 0)
				{
				    new penz = HouseInfo[house][hTakings];

				    if(HouseInfo[house][hTakings] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házszéfben nincs pénz!");

					if(HouseInfo[house][hTakings] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %dFT van! Többet nem tudsz kivenni...", penz);
					    return 1;
	    			}

				    ConsumingMoney[playerid] = 1;
					GiveMoney(playerid, mennyit);
					HouseInfo[house][hTakings] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a széfbõl %dFT-t", mennyit);

					//HazUpdate(house, "Penz='%d'", HouseInfo[house][hTakings]);
					HazUpdate(house, HAZ_Takings);
					return 1;
				}

				else if(strcmp(mit, "kaja", true) == 0)
				{

				    if(HouseInfo[house][hKaja] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs kaja!");

					if(HouseInfo[house][hKaja] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %d van! Többet nem tudsz kivenni...", HouseInfo[house][hKaja]);
					    return 1;
	    			}

					if((PlayerInfo[playerid][pKaja] + mennyit) > MAXKAJA)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d kaja lehet nálad!", MAXKAJA);
					    return 1;
	    			}

                    PlayerInfo[playerid][pKaja] += mennyit;
					HouseInfo[house][hKaja] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %d kaját", mennyit);

					//HazUpdate(house, "Kaja='%d'", HouseInfo[house][hKaja]);
					HazUpdate(house, HAZ_Kaja);
					return 1;
				}
				else if(strcmp(mit, "mellény", true) == 0 || strcmp(mit, "melleny", true) == 0)
				{
					new Float:armor;
					GetPlayerArmour(playerid, armor);
					if(armor > 0) return Msg(playerid, "Már van mellényed!");
					new maxcucc = 5, fslot = mennyit - 1;
					if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
					{
						switch(PlayerInfo[playerid][pPremiumCsomag])
						{
							case 400: maxcucc += 1;
							case 800: maxcucc += 2;
							case 1600: maxcucc += 5;
						}
					}
	    			if(mennyit >= 1 && mennyit <= maxcucc)
	    			{
	    			    if(HouseInfo[house][hMellenyek][fslot] != 0)
	    			    {
							SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél egy mellényt a házszéfbõl, a mellény állapota: %d", HouseInfo[house][hMellenyek][fslot]);
							SetPlayerArmour(playerid, HouseInfo[house][hMellenyek][fslot]);
							HouseInfo[house][hMellenyek][fslot] = 0;
						}
						else return Msg(playerid, "Itt nincs mellény!");
					}
				}
				else if(strcmp(mit, "cigi", true) == 0)
				{

				    if(HouseInfo[house][hCigi] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs cigi!");

					if(HouseInfo[house][hCigi] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %d van! Többet nem tudsz kivenni...", HouseInfo[house][hCigi]);
					    return 1;
	    			}

                    PlayerInfo[playerid][pCigi] += mennyit;
					HouseInfo[house][hCigi] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %d szál cigit", mennyit);

					//HazUpdate(house, "Cigi='%d'", HouseInfo[house][hCigi]);
					HazUpdate(house, HAZ_Cigi);
					return 1;
				}

				else if(strcmp(mit, "kokain", true) == 0)
				{

				    if(HouseInfo[house][hKokain] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs kokain!");

					if(HouseInfo[house][hKokain] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %dg van! Többet nem tudsz kivenni...", HouseInfo[house][hKokain]);
					    return 1;
	    			}

					if((PlayerInfo[playerid][pKokain] + mennyit) > MAXKOKAIN)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d kokaint birsz el!", MAXKOKAIN);
					    return 1;
	    			}

                    PlayerInfo[playerid][pKokain] += mennyit;
					HouseInfo[house][hKokain] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %dg kokaint", mennyit);

					//HazUpdate(house, "Kokain='%d'", HouseInfo[house][hKokain]);
					HazUpdate(house, HAZ_Kokain);
					return 1;
				}

				else if(strcmp(mit, "heroin", true) == 0)
				{

				    if(HouseInfo[house][hHeroin] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs heroin!");

					if(HouseInfo[house][hHeroin] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %dg van! Többet nem tudsz kivenni...", HouseInfo[house][hHeroin]);
					    return 1;
	    			}

					if((PlayerInfo[playerid][pHeroin] + mennyit) > MAXHEROIN)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d heroint birsz el!", MAXHEROIN);
					    return 1;
	    			}

                    PlayerInfo[playerid][pHeroin] += mennyit;
					HouseInfo[house][hHeroin] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %dg heroint", mennyit);

					//HazUpdate(house, "Heroin='%d'", HouseInfo[house][hHeroin]);
					HazUpdate(house, HAZ_Heroin);
					return 1;
				}

				else if(strcmp(mit, "marihuana", true) == 0)
				{

				    if(HouseInfo[house][hMarihuana] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs marihuana!");

					if(HouseInfo[house][hMarihuana] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %dg van! Többet nem tudsz kivenni...", HouseInfo[house][hHeroin]);
					    return 1;
	    			}

					if((PlayerInfo[playerid][pMarihuana] + mennyit) > MAXMARIHUANA)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d heroint birsz el!", MAXMARIHUANA);
					    return 1;
	    			}

                    PlayerInfo[playerid][pMarihuana] += mennyit;
					HouseInfo[house][hMarihuana] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %dg marihuánát", mennyit);

					//HazUpdate(house, "Marihuana='%d'", HouseInfo[house][hMarihuana]);
					HazUpdate(house, HAZ_Marihuana);
					return 1;
				}

				else if(strcmp(mit, "mati", true) == 0 || strcmp(mit, "material", true) == 0)
				{

				    if(HouseInfo[house][hMati] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs mati!");

					if(HouseInfo[house][hMati] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %ddb van! Többet nem tudsz kivenni...", HouseInfo[house][hMati]);
					    return 1;
					}

					if((PlayerInfo[playerid][pMats] + mennyit) > MAXMATI)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d materialt birsz el!", MAXMATI);
					    return 1;
	    			}

                    PlayerInfo[playerid][pMats] += mennyit;
					HouseInfo[house][hMati] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %ddb materialt", mennyit);

					//HazUpdate(house, "Material='%d'", HouseInfo[house][hMati]);
					HazUpdate(house, HAZ_Mati);
					return 1;
				}
				
				else if(strcmp(mit, "fegyver", true) == 0 )
				{
					new fegyver = GetPlayerWeapon(playerid);
					if(fegyver != 0) return Msg(playerid, "Már van a kezedbe fegyver! Elõbb tedd el!");
					
					new maxcucc = 5, fslot = mennyit - 1;
					if(PlayerInfo[playerid][pPremiumCsomag] >= 400)
					{
						switch(PlayerInfo[playerid][pPremiumCsomag])
						{
							case 400: maxcucc += 1;
							case 800: maxcucc += 2;
							case 1600: maxcucc += 5;
						}
					}
	    			if(mennyit >= 1 && mennyit <= maxcucc)
	    			{
	    			    if(HouseInfo[house][hFegyverek][fslot] != 0)
	    			    {
	    			    	SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél egy fegyvert a házszéfbõl: %s, lõszer: %ddb", GetGunName(HouseInfo[house][hFegyverek][fslot]), HouseInfo[house][hToltenyek][fslot]);
							GiveWeapon(playerid, HouseInfo[house][hFegyverek][fslot], HouseInfo[house][hToltenyek][fslot]);
							Fegyvere[playerid] = HouseInfo[house][hFegyverek][fslot];
							HouseInfo[house][hFegyverek][fslot] = 0;
							HouseInfo[house][hToltenyek][fslot] = 0;
							HazUpdate(house, HAZ_Fegyverek);
	    			    }
	    			    else
	    			    {
	    			        Msg(playerid, "Itt nincs fegyver!");
						}
					}
					else if(mennyit >= 1 && mennyit <= 10 && mennyit > maxcucc)
					{
						Msg(playerid, "Ez prémium slot!");
					}
				}
				else
					return SendClientMessage(playerid, COLOR_GRAD2, "Amit kivehetsz: Pénz, Kaja, Kokain, Heroin, Material(mati), Fegyver");
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nincs házad, vagy nem te vagy a háztulaj!");
			}
		}
		return 1;
	}

	/*if(strcmp(cmd, "/bandaszéfbe", true) == 0 || strcmp(cmd, "/bandaszefbe", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
   		{
				new mit[256], mennyit;

				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /bandaszéfbe [mit] [mennyit]");
					SendClientMessage(playerid, COLOR_GRAD2, "Pénz, Kokain, Heroin, Marihuana, Material(mati)");
					return 1;
				}
				mit = tmp;
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
					return 1;
				}
				mennyit = strval(tmp);

				if(mennyit < 1)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "O.O");

				if(strcmp(mit, "pénz", true) == 0 || strcmp(mit, "penz", true) == 0)
				{
	            if(LMT(playerid, LMUNKA_BALLAS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[1-1][0],SzefekElhelyezkedese[1-1][1],SzefekElhelyezkedese[1-1][2]))
	            {

				    new penz = GetMoney(playerid);

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénzed, vagy minuszban vagy!");

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT-od van! Többet nem tudsz betenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, -mennyit);
					bandaszef[ballaspenz] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dFT-t a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
          		else if(LMT(playerid, LMUNKA_CAMORRA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[2-1][0],SzefekElhelyezkedese[2-1][1],SzefekElhelyezkedese[2-1][2]))
	            {

				    new penz = GetMoney(playerid);

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénzed, vagy minuszban vagy!");

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT-od van! Többet nem tudsz betenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, -mennyit);
					bandaszef[vagospenz] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dFT-t a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
                else if(LMT(playerid, LMUNKA_VAGOS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[3-1][0],SzefekElhelyezkedese[3-1][1],SzefekElhelyezkedese[3-1][2]))
	            {

				    new penz = GetMoney(playerid);

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénzed, vagy minuszban vagy!");

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT-od van! Többet nem tudsz betenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, -mennyit);
					bandaszef[scupenz] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dFT-t a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
                else if(LMT(playerid, LMUNKA_SAMAFIA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[4-1][0],SzefekElhelyezkedese[4-1][1],SzefekElhelyezkedese[4-1][2]))
	            {

				    new penz = GetMoney(playerid);

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénzed, vagy minuszban vagy!");

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT-od van! Többet nem tudsz betenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, -mennyit);
					bandaszef[jokaspenz] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dFT-t a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
                else if(LMT(playerid, LMUNKA_AZTEC))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[5-1][0],SzefekElhelyezkedese[5-1][1],SzefekElhelyezkedese[5-1][2]))
	            {

				    new penz = GetMoney(playerid);

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénzed, vagy minuszban vagy!");

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT-od van! Többet nem tudsz betenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, -mennyit);
					bandaszef[aztecaspenz] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dFT-t a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
                else if(LMT(playerid, LMUNKA_GSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[7-1][0],SzefekElhelyezkedese[7-1][1],SzefekElhelyezkedese[7-1][2]))
	            {

				    new penz = GetMoney(playerid);

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénzed, vagy minuszban vagy!");

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT-od van! Többet nem tudsz betenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, -mennyit);
					bandaszef[tggpenz] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dFT-t a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
                else if(LMT(playerid, LMUNKA_YAKUZA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[6-1][0],SzefekElhelyezkedese[6-1][1],SzefekElhelyezkedese[6-1][2]))
	            {

				    new penz = GetMoney(playerid);

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénzed, vagy minuszban vagy!");

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT-od van! Többet nem tudsz betenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, -mennyit);
					bandaszef[yakuzapenz] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dFT-t a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_HITMAN))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[8-1][0],SzefekElhelyezkedese[8-1][1],SzefekElhelyezkedese[8-1][2]))
	            {

				    new penz = GetMoney(playerid);

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénzed, vagy minuszban vagy!");

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT-od van! Többet nem tudsz betenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, -mennyit);
					bandaszef[dcortezpenz] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dFT-t a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
          		}
				}
                else if(LMT(playerid, LMUNKA_OSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[9-1][0],SzefekElhelyezkedese[9-1][1],SzefekElhelyezkedese[9-1][2]))
	            {

				    new penz = GetMoney(playerid);

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénzed, vagy minuszban vagy!");

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT-od van! Többet nem tudsz betenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, -mennyit);
					bandaszef[osfpenz] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dFT-t a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
          		}
				}
				}

				else if(strcmp(mit, "kokain", true) == 0)
				{
	            if(LMT(playerid, LMUNKA_BALLAS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[1-1][0],SzefekElhelyezkedese[1-1][1],SzefekElhelyezkedese[1-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pKokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokainod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokainod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] -= mennyit;
					bandaszef[ballaskokain] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg kokaint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				else if(LMT(playerid, LMUNKA_CAMORRA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[2-1][0],SzefekElhelyezkedese[2-1][1],SzefekElhelyezkedese[2-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pKokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokainod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokainod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] -= mennyit;
					bandaszef[vagoskokain] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg kokaint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_VAGOS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[3-1][0],SzefekElhelyezkedese[3-1][1],SzefekElhelyezkedese[3-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pKokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokainod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokainod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] -= mennyit;
					bandaszef[scukokain] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg kokaint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_SAMAFIA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[4-1][0],SzefekElhelyezkedese[4-1][1],SzefekElhelyezkedese[4-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pKokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokainod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokainod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] -= mennyit;
					bandaszef[jokaskokain] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg kokaint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_AZTEC))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[5-1][0],SzefekElhelyezkedese[5-1][1],SzefekElhelyezkedese[5-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pKokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokainod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokainod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] -= mennyit;
					bandaszef[aztecaskokain] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg kokaint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_GSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[7-1][0],SzefekElhelyezkedese[7-1][1],SzefekElhelyezkedese[7-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pKokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokainod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokainod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] -= mennyit;
					bandaszef[tggkokain] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg kokaint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				else if(LMT(playerid, LMUNKA_YAKUZA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[6-1][0],SzefekElhelyezkedese[6-1][1],SzefekElhelyezkedese[6-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pKokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokainod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokainod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] -= mennyit;
					bandaszef[yakuzakokain] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg kokaint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				else if(LMT(playerid, LMUNKA_HITMAN))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[8-1][0],SzefekElhelyezkedese[8-1][1],SzefekElhelyezkedese[8-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pKokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokainod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokainod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] -= mennyit;
					bandaszef[dcortezkokain] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg kokaint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				else if(LMT(playerid, LMUNKA_OSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[9-1][0],SzefekElhelyezkedese[9-1][1],SzefekElhelyezkedese[9-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pKokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokainod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokainod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] -= mennyit;
					bandaszef[osfkokain] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg kokaint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				}

				else if(strcmp(mit, "heroin", true) == 0)
				{
	            if(LMT(playerid, LMUNKA_BALLAS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[1-1][0],SzefekElhelyezkedese[1-1][1],SzefekElhelyezkedese[1-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pHeroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroinod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroinod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] -= mennyit;
					bandaszef[ballasheroin] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				else if(LMT(playerid, LMUNKA_CAMORRA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[2-1][0],SzefekElhelyezkedese[2-1][1],SzefekElhelyezkedese[2-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pHeroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroinod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroinod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] -= mennyit;
					bandaszef[vagosheroin] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_VAGOS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[3-1][0],SzefekElhelyezkedese[3-1][1],SzefekElhelyezkedese[3-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pHeroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroinod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroinod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] -= mennyit;
					bandaszef[scuheroin] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_SAMAFIA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[4-1][0],SzefekElhelyezkedese[4-1][1],SzefekElhelyezkedese[4-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pHeroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroinod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroinod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] -= mennyit;
					bandaszef[jokasheroin] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_AZTEC))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[5-1][0],SzefekElhelyezkedese[5-1][1],SzefekElhelyezkedese[5-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pHeroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroinod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroinod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] -= mennyit;
					bandaszef[aztecasheroin] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_GSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[7-1][0],SzefekElhelyezkedese[7-1][1],SzefekElhelyezkedese[7-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pHeroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroinod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroinod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] -= mennyit;
					bandaszef[tggheroin] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_YAKUZA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[6-1][0],SzefekElhelyezkedese[6-1][1],SzefekElhelyezkedese[6-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pHeroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroinod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroinod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] -= mennyit;
					bandaszef[yakuzaheroin] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_HITMAN))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[8-1][0],SzefekElhelyezkedese[8-1][1],SzefekElhelyezkedese[8-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pHeroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroinod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroinod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] -= mennyit;
					bandaszef[dcortezheroin] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_OSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[9-1][0],SzefekElhelyezkedese[9-1][1],SzefekElhelyezkedese[9-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pHeroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroinod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroinod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] -= mennyit;
					bandaszef[osfheroin] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}				
				}
				}

				else if(strcmp(mit, "marihuana", true) == 0)
				{
	            if(LMT(playerid, LMUNKA_BALLAS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[1-1][0],SzefekElhelyezkedese[1-1][1],SzefekElhelyezkedese[1-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuánád!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuánád van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] -= mennyit;
					bandaszef[ballasmarihuana] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				else if(LMT(playerid, LMUNKA_CAMORRA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[2-1][0],SzefekElhelyezkedese[2-1][1],SzefekElhelyezkedese[2-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuánád!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuánád van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] -= mennyit;
					bandaszef[vagosmarihuana] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_VAGOS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[3-1][0],SzefekElhelyezkedese[3-1][1],SzefekElhelyezkedese[3-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuánád!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuánád van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] -= mennyit;
					bandaszef[scumarihuana] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_SAMAFIA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[4-1][0],SzefekElhelyezkedese[4-1][1],SzefekElhelyezkedese[4-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuánád!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuánád van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] -= mennyit;
					bandaszef[jokasmarihuana] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_AZTEC))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[5-1][0],SzefekElhelyezkedese[5-1][1],SzefekElhelyezkedese[5-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuánád!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuánád van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] -= mennyit;
					bandaszef[aztecasmarihuana] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_GSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[7-1][0],SzefekElhelyezkedese[7-1][1],SzefekElhelyezkedese[7-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuánád!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuánád van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] -= mennyit;
					bandaszef[tggmarihuana] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_YAKUZA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[6-1][0],SzefekElhelyezkedese[6-1][1],SzefekElhelyezkedese[6-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuánád!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuánád van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] -= mennyit;
					bandaszef[yakuzamarihuana] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_HITMAN))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[8-1][0],SzefekElhelyezkedese[8-1][1],SzefekElhelyezkedese[8-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuánád!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuánád van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] -= mennyit;
					bandaszef[dcortezmarihuana] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_OSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[9-1][0],SzefekElhelyezkedese[9-1][1],SzefekElhelyezkedese[9-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuánád!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuánád van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] -= mennyit;
					bandaszef[osfmarihuana] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %dg heroint a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}				
				}
				}

				else if(strcmp(mit, "mati", true) == 0 || strcmp(mit, "material", true) == 0)
				{
	            if(LMT(playerid, LMUNKA_BALLAS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[1-1][0],SzefekElhelyezkedese[1-1][1],SzefekElhelyezkedese[1-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMats];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs materialod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg materialod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] -= mennyit;
					bandaszef[ballasmati] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %ddb materialt a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				else if(LMT(playerid, LMUNKA_CAMORRA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[2-1][0],SzefekElhelyezkedese[2-1][1],SzefekElhelyezkedese[2-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMats];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs materialod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg materialod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] -= mennyit;
					bandaszef[vagosmati] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %ddb materialt a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_VAGOS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[3-1][0],SzefekElhelyezkedese[3-1][1],SzefekElhelyezkedese[3-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMats];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs materialod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg materialod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] -= mennyit;
					bandaszef[scumati] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %ddb materialt a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_SAMAFIA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[4-1][0],SzefekElhelyezkedese[4-1][1],SzefekElhelyezkedese[4-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMats];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs materialod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg materialod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] -= mennyit;
					bandaszef[jokasmati] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %ddb materialt a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_AZTEC))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[5-1][0],SzefekElhelyezkedese[5-1][1],SzefekElhelyezkedese[5-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMats];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs materialod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg materialod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] -= mennyit;
					bandaszef[aztecasmati] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %ddb materialt a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_GSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[7-1][0],SzefekElhelyezkedese[7-1][1],SzefekElhelyezkedese[7-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMats];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs materialod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg materialod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] -= mennyit;
					bandaszef[tggmati] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %ddb materialt a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_YAKUZA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[6-1][0],SzefekElhelyezkedese[6-1][1],SzefekElhelyezkedese[6-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMats];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs materialod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg materialod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] -= mennyit;
					bandaszef[yakuzamati] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %ddb materialt a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_HITMAN))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[8-1][0],SzefekElhelyezkedese[8-1][1],SzefekElhelyezkedese[8-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMats];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs materialod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg materialod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] -= mennyit;
					bandaszef[dcortezmati] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %ddb materialt a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_OSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[9-1][0],SzefekElhelyezkedese[9-1][1],SzefekElhelyezkedese[9-1][2]))
	            {
					new cucc = PlayerInfo[playerid][pMats];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs materialod!");

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg materialod van! Többet nem tudsz betenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] -= mennyit;
					bandaszef[osfmati] += mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Beraktál %ddb materialt a széfbe", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}				
				}
				}

				else
					return SendClientMessage(playerid, COLOR_GRAD2, "Amit berakhatsz: Pénz, Kokain, Heroin, Material(mati)");
			}
		return 1;
	}

	if(strcmp(cmd, "/bandaszéfki", true) == 0 || strcmp(cmd, "/bandaszefki", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
   		{
				new mit[256], mennyit;

				if(PlayerInfo[playerid][pRank] < 5)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Minimum 5-ös rang!");
					return 1;
				}

				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /bandaszéfki [mit] [mennyit]");
					SendClientMessage(playerid, COLOR_GRAD2, "Pénz, Kokain, Heroin, Marihuana, Material(mati)");
					return 1;
				}
				mit = tmp;
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
					return 1;
				}
				mennyit = strval(tmp);

				if(mennyit < 1)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "O.O");

				if(strcmp(mit, "pénz", true) == 0 || strcmp(mit, "penz", true) == 0)
				{
	            if(LMT(playerid, LMUNKA_BALLAS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[1-1][0],SzefekElhelyezkedese[1-1][1],SzefekElhelyezkedese[1-1][2]))
	            {

					new penzem = GetMoney(playerid);
				    new penz = bandaszef[ballaspenz];

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénz a bandaszéfbe!");

                    if(penzem + mennyit > MAXPENZ)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi pénz nem férne el nálad!");
			        return 1;
		    		}

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT van a széfbe! Többet nem tudsz kivenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, mennyit);
					bandaszef[ballaspenz] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dFT-t a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
          		else if(LMT(playerid, LMUNKA_CAMORRA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[2-1][0],SzefekElhelyezkedese[2-1][1],SzefekElhelyezkedese[2-1][2]))
	            {

					new penzem = GetMoney(playerid);
				    new penz = bandaszef[vagospenz];

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénz a bandaszéfbe!");

                    if(penzem + mennyit > MAXPENZ)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi pénz nem férne el nálad!");
			        return 1;
		    		}

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT van a széfbe! Többet nem tudsz kivenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, mennyit);
					bandaszef[vagospenz] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dFT-t a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
                else if(LMT(playerid, LMUNKA_VAGOS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[3-1][0],SzefekElhelyezkedese[3-1][1],SzefekElhelyezkedese[3-1][2]))
	            {

					new penzem = GetMoney(playerid);
				    new penz = bandaszef[scupenz];

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénz a bandaszéfbe!");

                    if(penzem + mennyit > MAXPENZ)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi pénz nem férne el nálad!");
			        return 1;
		    		}

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT van a széfbe! Többet nem tudsz kivenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, mennyit);
					bandaszef[scupenz] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dFT-t a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
                else if(LMT(playerid, LMUNKA_SAMAFIA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[4-1][0],SzefekElhelyezkedese[4-1][1],SzefekElhelyezkedese[4-1][2]))
	            {

					new penzem = GetMoney(playerid);
				    new penz = bandaszef[jokaspenz];

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénz a bandaszéfbe!");

                    if(penzem + mennyit > MAXPENZ)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi pénz nem férne el nálad!");
			        return 1;
		    		}

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT van a széfbe! Többet nem tudsz kivenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, mennyit);
					bandaszef[jokaspenz] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dFT-t a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
                else if(LMT(playerid, LMUNKA_AZTEC))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[5-1][0],SzefekElhelyezkedese[5-1][1],SzefekElhelyezkedese[5-1][2]))
	            {

					new penzem = GetMoney(playerid);
				    new penz = bandaszef[aztecaspenz];

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénz a bandaszéfbe!");

                    if(penzem + mennyit > MAXPENZ)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi pénz nem férne el nálad!");
			        return 1;
		    		}

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT van a széfbe! Többet nem tudsz kivenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, mennyit);
					bandaszef[aztecaspenz] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dFT-t a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
                else if(LMT(playerid, LMUNKA_GSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[7-1][0],SzefekElhelyezkedese[7-1][1],SzefekElhelyezkedese[7-1][2]))
	            {

					new penzem = GetMoney(playerid);
				    new penz = bandaszef[tggpenz];

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénz a bandaszéfbe!");

                    if(penzem + mennyit > MAXPENZ)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi pénz nem férne el nálad!");
			        return 1;
		    		}

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT van a széfbe! Többet nem tudsz kivenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, mennyit);
					bandaszef[tggpenz] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dFT-t a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
                else if(LMT(playerid, LMUNKA_YAKUZA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[6-1][0],SzefekElhelyezkedese[6-1][1],SzefekElhelyezkedese[6-1][2]))
	            {

					new penzem = GetMoney(playerid);
				    new penz = bandaszef[yakuzapenz];

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénz a bandaszéfbe!");

                    if(penzem + mennyit > MAXPENZ)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi pénz nem férne el nálad!");
			        return 1;
		    		}

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT van a széfbe! Többet nem tudsz kivenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, mennyit);
					bandaszef[yakuzapenz] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dFT-t a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
          		}
                else if(LMT(playerid, LMUNKA_HITMAN))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[8-1][0],SzefekElhelyezkedese[8-1][1],SzefekElhelyezkedese[8-1][2]))
	            {

					new penzem = GetMoney(playerid);
				    new penz = bandaszef[dcortezpenz];

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénz a bandaszéfbe!");

                    if(penzem + mennyit > MAXPENZ)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi pénz nem férne el nálad!");
			        return 1;
		    		}

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT van a széfbe! Többet nem tudsz kivenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, mennyit);
					bandaszef[dcortezpenz] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dFT-t a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
          		}
				}
                else if(LMT(playerid, LMUNKA_OSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[9-1][0],SzefekElhelyezkedese[9-1][1],SzefekElhelyezkedese[9-1][2]))
	            {

					new penzem = GetMoney(playerid);
				    new penz = bandaszef[osfpenz];

				    if(penz < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs pénz a bandaszéfbe!");

                    if(penzem + mennyit > MAXPENZ)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi pénz nem férne el nálad!");
			        return 1;
		    		}

		            if(penz < mennyit)
		            {
						    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFT van a széfbe! Többet nem tudsz kivenni...", penz);
						    return 1;
					}

					GiveMoney(playerid, mennyit);
					bandaszef[osfpenz] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dFT-t a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}			
          		}
				}

				else if(strcmp(mit, "kokain", true) == 0)
				{
	            if(LMT(playerid, LMUNKA_BALLAS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[1-1][0],SzefekElhelyezkedese[1-1][1],SzefekElhelyezkedese[1-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pKokain];
					new cucc = bandaszef[ballaskokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokain a bandaszéfbe!");

					if(cuccom + mennyit > MAXKOKAIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi kokain nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokain van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] += mennyit;
					bandaszef[ballaskokain] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg kokaint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				else if(LMT(playerid, LMUNKA_CAMORRA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[2-1][0],SzefekElhelyezkedese[2-1][1],SzefekElhelyezkedese[2-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pKokain];
					new cucc = bandaszef[vagoskokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokain a bandaszéfbe!");

					if(cuccom + mennyit > MAXKOKAIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi kokain nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokain van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] += mennyit;
					bandaszef[vagoskokain] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg kokaint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_VAGOS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[3-1][0],SzefekElhelyezkedese[3-1][1],SzefekElhelyezkedese[3-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pKokain];
					new cucc = bandaszef[scukokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokain a bandaszéfbe!");

					if(cuccom + mennyit > MAXKOKAIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi kokain nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokain van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] += mennyit;
					bandaszef[scukokain] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg kokaint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_SAMAFIA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[4-1][0],SzefekElhelyezkedese[4-1][1],SzefekElhelyezkedese[4-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pKokain];
					new cucc = bandaszef[jokaskokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokain a bandaszéfbe!");

					if(cuccom + mennyit > MAXKOKAIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi kokain nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokain van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] += mennyit;
					bandaszef[jokaskokain] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg kokaint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_AZTEC))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[5-1][0],SzefekElhelyezkedese[5-1][1],SzefekElhelyezkedese[5-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pKokain];
					new cucc = bandaszef[aztecaskokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokain a bandaszéfbe!");

					if(cuccom + mennyit > MAXKOKAIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi kokain nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokain van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] += mennyit;
					bandaszef[aztecaskokain] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg kokaint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_GSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[7-1][0],SzefekElhelyezkedese[7-1][1],SzefekElhelyezkedese[7-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pKokain];
					new cucc = bandaszef[tggkokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokain a bandaszéfbe!");

					if(cuccom + mennyit > MAXKOKAIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi kokain nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokain van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] += mennyit;
					bandaszef[tggkokain] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg kokaint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_YAKUZA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[6-1][0],SzefekElhelyezkedese[6-1][1],SzefekElhelyezkedese[6-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pKokain];
					new cucc = bandaszef[yakuzakokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokain a bandaszéfbe!");

					if(cuccom + mennyit > MAXKOKAIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi kokain nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokain van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] += mennyit;
					bandaszef[yakuzakokain] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg kokaint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_HITMAN))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[8-1][0],SzefekElhelyezkedese[8-1][1],SzefekElhelyezkedese[8-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pKokain];
					new cucc = bandaszef[dcortezkokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokain a bandaszéfbe!");

					if(cuccom + mennyit > MAXKOKAIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi kokain nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokain van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] += mennyit;
					bandaszef[dcortezkokain] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg kokaint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_OSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[9-1][0],SzefekElhelyezkedese[9-1][1],SzefekElhelyezkedese[9-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pKokain];
					new cucc = bandaszef[osfkokain];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kokain a bandaszéfbe!");

					if(cuccom + mennyit > MAXKOKAIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi kokain nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg kokain van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pKokain] += mennyit;
					bandaszef[osfkokain] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg kokaint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				}

				else if(strcmp(mit, "heroin", true) == 0)
				{
	            if(LMT(playerid, LMUNKA_BALLAS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[1-1][0],SzefekElhelyezkedese[1-1][1],SzefekElhelyezkedese[1-1][2]))
	            {
					new cuccom = PlayerInfo[playerid][pHeroin];
					new cucc = bandaszef[ballasheroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroin a bandaszéfbe!");

                    if(cuccom + mennyit > MAXHEROIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi heroin nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroin van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] += mennyit;
					bandaszef[ballasheroin] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg heroint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				else if(LMT(playerid, LMUNKA_CAMORRA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[2-1][0],SzefekElhelyezkedese[2-1][1],SzefekElhelyezkedese[2-1][2]))
	            {
					new cuccom = PlayerInfo[playerid][pHeroin];
					new cucc = bandaszef[vagosheroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroin a bandaszéfbe!");

                    if(cuccom + mennyit > MAXHEROIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi heroin nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroin van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] += mennyit;
					bandaszef[vagosheroin] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg heroint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_VAGOS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[3-1][0],SzefekElhelyezkedese[3-1][1],SzefekElhelyezkedese[3-1][2]))
	            {
					new cuccom = PlayerInfo[playerid][pHeroin];
					new cucc = bandaszef[scuheroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroin a bandaszéfbe!");

                    if(cuccom + mennyit > MAXHEROIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi heroin nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroin van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] += mennyit;
					bandaszef[scuheroin] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg heroint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_SAMAFIA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[4-1][0],SzefekElhelyezkedese[4-1][1],SzefekElhelyezkedese[4-1][2]))
	            {
					new cuccom = PlayerInfo[playerid][pHeroin];
					new cucc = bandaszef[jokasheroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroin a bandaszéfbe!");

                    if(cuccom + mennyit > MAXHEROIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi heroin nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroin van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] += mennyit;
					bandaszef[jokasheroin] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg heroint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_AZTEC))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[5-1][0],SzefekElhelyezkedese[5-1][1],SzefekElhelyezkedese[5-1][2]))
	            {
					new cuccom = PlayerInfo[playerid][pHeroin];
					new cucc = bandaszef[aztecasheroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroin a bandaszéfbe!");

                    if(cuccom + mennyit > MAXHEROIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi heroin nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroin van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] += mennyit;
					bandaszef[aztecasheroin] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg heroint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_GSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[7-1][0],SzefekElhelyezkedese[7-1][1],SzefekElhelyezkedese[7-1][2]))
	            {
					new cuccom = PlayerInfo[playerid][pHeroin];
					new cucc = bandaszef[tggheroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroin a bandaszéfbe!");

                    if(cuccom + mennyit > MAXHEROIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi heroin nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroin van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] += mennyit;
					bandaszef[tggheroin] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg heroint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_YAKUZA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[6-1][0],SzefekElhelyezkedese[6-1][1],SzefekElhelyezkedese[6-1][2]))
	            {
					new cuccom = PlayerInfo[playerid][pHeroin];
					new cucc = bandaszef[yakuzaheroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroin a bandaszéfbe!");

                    if(cuccom + mennyit > MAXHEROIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi heroin nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroin van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] += mennyit;
					bandaszef[yakuzaheroin] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg heroint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_HITMAN))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[8-1][0],SzefekElhelyezkedese[8-1][1],SzefekElhelyezkedese[8-1][2]))
	            {
					new cuccom = PlayerInfo[playerid][pHeroin];
					new cucc = bandaszef[dcortezheroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroin a bandaszéfbe!");

                    if(cuccom + mennyit > MAXHEROIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi heroin nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroin van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] += mennyit;
					bandaszef[dcortezheroin] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg heroint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_OSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[9-1][0],SzefekElhelyezkedese[9-1][1],SzefekElhelyezkedese[9-1][2]))
	            {
					new cuccom = PlayerInfo[playerid][pHeroin];
					new cucc = bandaszef[osfheroin];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs heroin a bandaszéfbe!");

                    if(cuccom + mennyit > MAXHEROIN)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi heroin nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg heroin van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pHeroin] += mennyit;
					bandaszef[osfheroin] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg heroint a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}			
				}
				}

				else if(strcmp(mit, "marihuana", true) == 0)
				{
	            if(LMT(playerid, LMUNKA_BALLAS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[1-1][0],SzefekElhelyezkedese[1-1][1],SzefekElhelyezkedese[1-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMarihuana];
					new cucc = bandaszef[ballasmarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuana a bandaszéfbe!");

					if(cuccom + mennyit > MAXMARIHUANA)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi marihuana nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuana van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] += mennyit;
					bandaszef[ballasmarihuana] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg marihuanát a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				else if(LMT(playerid, LMUNKA_CAMORRA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[2-1][0],SzefekElhelyezkedese[2-1][1],SzefekElhelyezkedese[2-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMarihuana];
					new cucc = bandaszef[vagosmarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuana a bandaszéfbe!");

					if(cuccom + mennyit > MAXMARIHUANA)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi marihuana nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuana van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] += mennyit;
					bandaszef[vagosmarihuana] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg marihuanát a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_VAGOS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[3-1][0],SzefekElhelyezkedese[3-1][1],SzefekElhelyezkedese[3-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMarihuana];
					new cucc = bandaszef[scumarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuana a bandaszéfbe!");

					if(cuccom + mennyit > MAXMARIHUANA)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi marihuana nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuana van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] += mennyit;
					bandaszef[scumarihuana] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg marihuanát a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_SAMAFIA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[4-1][0],SzefekElhelyezkedese[4-1][1],SzefekElhelyezkedese[4-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMarihuana];
					new cucc = bandaszef[jokasmarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuana a bandaszéfbe!");

					if(cuccom + mennyit > MAXMARIHUANA)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi marihuana nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuana van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] += mennyit;
					bandaszef[jokasmarihuana] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg marihuanát a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_AZTEC))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[5-1][0],SzefekElhelyezkedese[5-1][1],SzefekElhelyezkedese[5-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMarihuana];
					new cucc = bandaszef[aztecasmarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuana a bandaszéfbe!");

					if(cuccom + mennyit > MAXMARIHUANA)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi marihuana nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuana van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] += mennyit;
					bandaszef[aztecasmarihuana] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg marihuanát a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_GSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[7-1][0],SzefekElhelyezkedese[7-1][1],SzefekElhelyezkedese[7-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMarihuana];
					new cucc = bandaszef[tggmarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuana a bandaszéfbe!");

					if(cuccom + mennyit > MAXMARIHUANA)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi marihuana nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuana van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] += mennyit;
					bandaszef[tggmarihuana] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg marihuanát a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_YAKUZA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[6-1][0],SzefekElhelyezkedese[6-1][1],SzefekElhelyezkedese[6-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMarihuana];
					new cucc = bandaszef[yakuzamarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuana a bandaszéfbe!");

					if(cuccom + mennyit > MAXMARIHUANA)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi marihuana nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuana van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] += mennyit;
					bandaszef[yakuzamarihuana] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg marihuanát a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_HITMAN))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[8-1][0],SzefekElhelyezkedese[8-1][1],SzefekElhelyezkedese[8-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMarihuana];
					new cucc = bandaszef[dcortezmarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuana a bandaszéfbe!");

					if(cuccom + mennyit > MAXMARIHUANA)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi marihuana nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuana van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] += mennyit;
					bandaszef[dcortezmarihuana] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg marihuanát a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_OSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[9-1][0],SzefekElhelyezkedese[9-1][1],SzefekElhelyezkedese[9-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMarihuana];
					new cucc = bandaszef[osfmarihuana];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs marihuana a bandaszéfbe!");

					if(cuccom + mennyit > MAXMARIHUANA)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi marihuana nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dg marihuana van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMarihuana] += mennyit;
					bandaszef[osfmarihuana] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %dg marihuanát a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}				
				}
				}

				else if(strcmp(mit, "mati", true) == 0 || strcmp(mit, "material", true) == 0)
				{
	            if(LMT(playerid, LMUNKA_BALLAS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[1-1][0],SzefekElhelyezkedese[1-1][1],SzefekElhelyezkedese[1-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMats];
					new cucc = bandaszef[ballasmati];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs material a bandaszéfbe!");

					if(cuccom + mennyit > MAXMATI)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi materials nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %d material van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] += mennyit;
					bandaszef[ballasmati] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %ddb materialt a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
				else if(LMT(playerid, LMUNKA_CAMORRA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[2-1][0],SzefekElhelyezkedese[2-1][1],SzefekElhelyezkedese[2-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMats];
					new cucc = bandaszef[vagosmati];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs material a bandaszéfbe!");

					if(cuccom + mennyit > MAXMATI)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi materials nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %d material van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] += mennyit;
					bandaszef[vagosmati] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %ddb materialt a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_VAGOS))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[3-1][0],SzefekElhelyezkedese[3-1][1],SzefekElhelyezkedese[3-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMats];
					new cucc = bandaszef[scumati];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs material a bandaszéfbe!");

					if(cuccom + mennyit > MAXMATI)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi materials nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %d material van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] += mennyit;
					bandaszef[scumati] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %ddb materialt a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_SAMAFIA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[4-1][0],SzefekElhelyezkedese[4-1][1],SzefekElhelyezkedese[4-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMats];
					new cucc = bandaszef[jokasmati];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs material a bandaszéfbe!");

					if(cuccom + mennyit > MAXMATI)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi materials nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %d material van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] += mennyit;
					bandaszef[jokasmati] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %ddb materialt a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_AZTEC))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[5-1][0],SzefekElhelyezkedese[5-1][1],SzefekElhelyezkedese[5-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMats];
					new cucc = bandaszef[aztecasmati];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs material a bandaszéfbe!");

					if(cuccom + mennyit > MAXMATI)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi materials nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %d material van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] += mennyit;
					bandaszef[aztecasmati] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %ddb materialt a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_GSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[7-1][0],SzefekElhelyezkedese[7-1][1],SzefekElhelyezkedese[7-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMats];
					new cucc = bandaszef[tggmati];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs material a bandaszéfbe!");

					if(cuccom + mennyit > MAXMATI)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi materials nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %d material van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] += mennyit;
					bandaszef[tggmati] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %ddb materialt a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_YAKUZA))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[6-1][0],SzefekElhelyezkedese[6-1][1],SzefekElhelyezkedese[6-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMats];
					new cucc = bandaszef[yakuzamati];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs material a bandaszéfbe!");

					if(cuccom + mennyit > MAXMATI)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi materials nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %d material van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] += mennyit;
					bandaszef[yakuzamati] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %ddb materialt a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}
				}
                else if(LMT(playerid, LMUNKA_HITMAN))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[8-1][0],SzefekElhelyezkedese[8-1][1],SzefekElhelyezkedese[8-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMats];
					new cucc = bandaszef[dcortezmati];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs material a bandaszéfbe!");

					if(cuccom + mennyit > MAXMATI)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi materials nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %d material van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] += mennyit;
					bandaszef[dcortezmati] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %ddb materialt a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}	
				}
                else if(LMT(playerid, LMUNKA_OSF))
	            {
	            if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[9-1][0],SzefekElhelyezkedese[9-1][1],SzefekElhelyezkedese[9-1][2]))
	            {
	                new cuccom = PlayerInfo[playerid][pMats];
					new cucc = bandaszef[osfmati];
				    if(cucc < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs material a bandaszéfbe!");

					if(cuccom + mennyit > MAXMATI)
		    		{
			        SendClientMessage(playerid, COLOR_YELLOW, "Enyi materials nem férne el nálad!");
			        return 1;
		    		}

					if(cucc < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %d material van a széfbe! Többet nem tudsz kivenni...", cucc);
					    return 1;
	    			}

          			PlayerInfo[playerid][pMats] += mennyit;
					bandaszef[osfmati] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél %ddb materialt a széfbõl", mennyit);
					SaveBandaSzef();
				}
				else
				{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a bandaszéfnél!");
				}								
				}
				}

				else
					return SendClientMessage(playerid, COLOR_GRAD2, "Amit kivehetsz: Pénz, Kokain, Heroin, Material(mati)");
			}
		return 1;
	}*/
	if(egyezik(cmd, "/lekapcsol"))
		 { 
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleTrailer(veh) == 0)
			return Msg(playerid, "Nem vagy jármûben, vagy a jármûhöz nincs trailer kapcsolva"); 
			DetachTrailerFromVehicle(veh);
			Msg(playerid, "Lekapcsoltad a pótkocsit");
			Cselekves(playerid, "lekapcsolta a pótkocsit"); return 1; 
		}

 	if(egyezik(cmd, "/kamion"))
	
	{
		
		new kamionpozrandom[][Kamionmunkainfo] =
		{
			// {"Mission Text", MissionPay, loadx, loady, loadz}

			/* KEY:
			** "Mission Text" = Ezt írja ki kezdéskor
			** MissionPay = Hogy Mennyit adjon egy Fuvarnál
			** loadx, loadx, loadx = Lerakodás Checkpint X,Y,Z!
			*/
			{"Szállítás: Bayside Kikõtõ. Haribo Gumicukrok ",10000, -2244.9780,2354.3113,4.5458},
			{"Szállítás: 576 Kbyte, Konzol játékok. ",16000, -1929.7427,2387.1614,49.0573},
			{"Szállítás: EQ Telep, Élelmiszerek ",14000,-1416.3811,2634.7927,55.3330}
		};
		
	
		if(params != 1)
				return Msg(playerid, "Használata: /kamion [szállít/lerak/töröl]");

		if(egyezik(param[1], "szállít") || egyezik(param[1], "szallit"))
		{
            if(AMT(playerid, MUNKA_KAMIONOS))
			{
				if(PlayerToPoint(40, playerid, -2514.5625,1895.3418,7.9577))
			 	{
					new tmpcar = GetPlayerVehicleID(playerid);
					if(!IsATruck(tmpcar))
					{
						SendClientMessage(playerid, COLOR_YELLOW, "Szálj bele egy kamionba!");
						return 1;
					}
					
					if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleTrailer(veh) == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs felkapcsolva pótkocsi!");
						return 1;
					}
					veh = GetClosestVehicle(playerid, false);
					if(IsAPlato(veh))
					{
					  if(szallit[playerid] == 1)
					    {  SendClientMessage(playerid, COLOR_YELLOW, "Már elfogadtál egy szállítást, vidd le az árút, vagy köbbér ellenében töröld a szállítást. /kamion töröl");
						
						}	
							else
						{	
						    KamionUtvonal[playerid] = random(sizeof(kamionpozrandom));
						    format(string, sizeof(string), "[KAMIONOS FUVAR]: %s", kamionpozrandom[KamionUtvonal[playerid] ][MissionName]);
							SendClientMessage(playerid, COLOR_YELLOW, string);
							SetPlayerCheckpoint(playerid, kamionpozrandom[KamionUtvonal[playerid] ][loadx],kamionpozrandom[KamionUtvonal[playerid] ][loady], kamionpozrandom[KamionUtvonal[playerid] ][loadz], 3);
							szallit[playerid] = 1;
						}
					}
			 	}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "A HQn kell lenned!");
					SendClientMessage(playerid, COLOR_YELLOW, "A térképed jelzi hova kell menned!");
					SetPlayerCheckpoint(playerid, -2514.5625,1895.3418,7.9577, 3);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy kamion sofõr!");
				return 1;
			}
		}
		else if(egyezik(param[1], "töröl"))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Törölted az aktuális szállítást, ezért köbbért kellet fizetned, 2000 Ft-ot!");
			GiveMoney(playerid, -2000);
			szallit[playerid] = 0;
		}
		else if(egyezik(param[1], "lerak"))
		{
            if(AMT(playerid, MUNKA_KAMIONOS))
			{
				if(PlayerToPoint(10, playerid, kamionpozrandom[KamionUtvonal[playerid] ][loadx],kamionpozrandom[KamionUtvonal[playerid] ][loady], kamionpozrandom[KamionUtvonal[playerid] ][loadz]))
			 	{
					new tmpcar = GetPlayerVehicleID(playerid);
					if(!IsATruck(tmpcar))
					{
						SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy kamionba!");
						return 1;
					}
					if(szallit[playerid] == 1)
					{
						
						if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleTrailer(veh) == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTRED, "Szerintem nem vedted fel az árút vagy elhagytad!");
							return 1;
						}
						veh = GetClosestVehicle(playerid, false);
						if(IsAPlato(veh))
						{   SendClientMessage(playerid, COLOR_YELLOW, "Pótkocsi lekapcsolása, türelem!");
						    Freeze(playerid, 5000);
						    format(string, sizeof(string), "Fizetésed: %d Ft", kamionpozrandom[KamionUtvonal[playerid] ][MissionPay]);
							SendClientMessage(playerid, COLOR_YELLOW, "Sikeres szállítás!");
							SendClientMessage(playerid, COLOR_LIGHTRED, string);
							SendClientMessage(playerid, COLOR_YELLOW, "Most menj vissza, és kezdheted az új szállítást!");
							GiveMoney(playerid, kamionpozrandom[KamionUtvonal[playerid] ][MissionPay]);
							szallit[playerid] = 0;
							KocsiRespawn(veh);
							SetPlayerCheckpoint(playerid, 912.3523,-1231.9344,16.9766, 3);
							
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_YELLOW, "Nem is kezdtél el szállítani...");
					}
			 	}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Menj a kijelölt helyre!");
					SetPlayerCheckpoint(playerid, kamionpozrandom[KamionUtvonal[playerid] ][loadx],kamionpozrandom[KamionUtvonal[playerid] ][loady], kamionpozrandom[KamionUtvonal[playerid] ][loadz], 3);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy kamion sofõr!");
				return 1;
			}
		}
		else
			Msg(playerid, "Használata: /kamion [szállít/lerak]/töröl");

		return 1;
	}
	/*if(strcmp(cmd, "/szállít", true) == 0)
	{
	if(AMT(playerid, MUNKA_KAMIONOS))
	{
	if(PlayerToPoint(60, playerid, 872.0200,-1227.8905,15.8227))
 	{
 	new tmpcar = GetPlayerVehicleID(playerid);
	if(!IsATruck(tmpcar))
	{
	SendClientMessage(playerid, COLOR_YELLOW, "Szálj bele egy kamionba!");
	return 1;
	}
	veh = GetClosestVehicle(playerid);
	new Float:tav = GetDistanceToVehicle(playerid, veh);
	if(tav >= 12)
	{
 	SendClientMessage(playerid, COLOR_LIGHTRED, "Vedd fel az árút!");
 	return 1;
	}
	if(IsAPlato(veh))
	{
 	SendClientMessage(playerid, COLOR_YELLOW, "Minden rendben! Most menj a kijelölt helyre, és írd be ('/lerak')");
 	SendClientMessage(playerid, COLOR_YELLOW, "Befejezéshez elkell menned a kijelölt helyre!");
 	SetPlayerCheckpoint(playerid, 250.2279,1421.1188,10.5859, 3);
 	szallit[playerid] = 1;
 	}
 	}
	else
	{
	SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy a kamionoknál!");
	SendClientMessage(playerid, COLOR_YELLOW, "A térképed jelzi hova kell menned!");
	SetPlayerCheckpoint(playerid, 912.3523,-1231.9344,16.9766, 3);
	return 1;
	}
	}
	else
	{
	SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy kamion sofõr!");
	return 1;
	}
	return 1;
	}

 	if(strcmp(cmd, "/lerak", true) == 0)
	{
	if(AMT(playerid, MUNKA_KAMIONOS))
	{
	if(PlayerToPoint(10, playerid, 250.2279,1421.1188,10.5859))
 	{
 	new tmpcar = GetPlayerVehicleID(playerid);
	if(!IsATruck(tmpcar))
	{
	SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy kamionba!");
	return 1;
	}
 	if(szallit[playerid] == 1)
 	{
    veh = GetClosestVehicle(playerid);
	new Float:tav = GetDistanceToVehicle(playerid, veh);
	if(tav >= 12)
	{
 	SendClientMessage(playerid, COLOR_LIGHTRED, "Szerintem nem vedted fel az árút vagy elhagytad!");
 	return 1;
	}
	if(IsAPlato(veh))
	{
 	SendClientMessage(playerid, COLOR_YELLOW, "Sikeres átszállítás!");
 	SendClientMessage(playerid, COLOR_YELLOW, "Fizetésed: 15000FT");
 	SendClientMessage(playerid, COLOR_YELLOW, "Most menj vissza, és kezdheted az új szállítást!");
 	GiveMoney(playerid, 15000);
 	szallit[playerid] = 0;
 	KocsiRespawn(veh);
 	}
 	}
 	else
 	{
 	SendClientMessage(playerid, COLOR_YELLOW, "Nem is kezdtél el szállítani...");
 	}
 	}
	else
	{
	SendClientMessage(playerid, COLOR_YELLOW, "Menj a kijelölt helyre!");
	SetPlayerCheckpoint(playerid, 250.2279,1421.1188,10.5859, 3);
	return 1;
	}
	}
	else
	{
	SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy kamion sofõr!");
	return 1;
	}
	return 1;
	}*/

    if(strcmp(cmd, "/kamionradio", true) == 0 || strcmp(cmd, "/kr", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/k)amion(r)adio [radio üzenet]");
				return 1;
			}
			new tmpcar = GetPlayerVehicleID(playerid);
			if(!IsATruck(tmpcar))
			{
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy kamionba, ezért nem használhatod a rádiót!");
			return 1;
			}

			if(AMT(playerid, MUNKA_KAMIONOS))
			{
      		format(string, sizeof(string), "** Kamionos %s: %s **", sendername, result);
			SendKamionRadioMessage(TEAM_BLUE_COLOR, string);
			}
			else
			{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Ezt csak kamion sofõrök használhatják!");
			return 1;
			}
			}
		return 1;
	}

	if(strcmp(cmd, "/munka", true) == 0)
	{
	        new munka;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			    munka = 1;
			else
			    munka = strval(tmp);

			if(munka < 1 || munka > 2)
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Használata: /munka 1 vagy /munka 2 | Ha nem irsz számot 1es lesz!");

	        if(munka == 1)
	        {
		        if(PlayerInfo[playerid][pJob1] > 0)
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Már van munkád!");
			}
			else
			{
		        if(PlayerInfo[playerid][pJob2] > 0)
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Már van másodmunkád!");
				if(PlayerInfo[playerid][pMember] < 1 && PlayerInfo[playerid][pLeader] < 1)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "A civileknek csak egy munkája lehet!");
			}
			
			if(PlayerToPoint(2, playerid, -2498.4946,1853.9814,8.4000))
			{
				SendClientMessage(playerid, COLOR_WHITE, "[Munkahelyi bejelentés] Elfogadtad az állás ajánlatot! Mától 'Kamionos'-ként dolgozol!");
				UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_KAMIONOS);
			}
			else
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy egyik munkafelvevõ helyen sem!");
			}
	}

	if(strcmp(cmd, "/átad", true) == 0 || strcmp(cmd, "/atad", true) == 0)
	{
	    if(Nincsbelepve(playerid)) return 1;

	    new neki, mit[256], db;

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid,COLOR_LIGHTRED,"Használata: /átad [Név(részlet)/Id] [mit]");
			SendClientMessage(playerid,COLOR_LIGHTRED,"Amit átadhatsz: Kaja, Cserje, Mák, Mûanyag, Cannabis, Kokain, Heroin, Marihuana, Mati, Cigi, Kötszer, Fegyver, Armor");
			return 1;
		}

		neki = ReturnUser(tmp);

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_YELLOW, "Ahha... és mit akarsz átadni?");
		    return 1;
		}

		mit = tmp;

		new kuldo[MAX_PLAYER_NAME], kinek[MAX_PLAYER_NAME];

		GetPlayerName(neki, playername, sizeof(playername));
		GetPlayerName(playerid, sendername, sizeof(sendername));

		GetPlayerName(neki, kinek, sizeof(kinek));
		GetPlayerName(playerid, kuldo, sizeof(kuldo));

		if(egyezik(mit, "zsák") || egyezik(mit, "zsak"))
		{
		    if(JatekosZsak[playerid] == NINCS)
				return Msg(playerid, "Nincs zsákod");
				
		    if(JatekosZsak[neki] >= 0)
				return Msg(playerid, "Neki már van zsákja!");
				
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    JatekosZsak[neki] = JatekosZsak[playerid];
			JatekosZsak[playerid] = NINCS;
			
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál neki egy zsákot, a tartalma %dFt", JatekosZsak[neki]);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked egy zsákot, a tartalma %dFt", kuldo, JatekosZsak[neki]);
		    return 1;
		}
		if(strcmp(mit, "cserje", true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
		        return 1;
		    }
		    db = strval(tmp);
			if(db < 0) return Msg(playerid, "Szerinted...");
		    if(PlayerInfo[playerid][pCserje] < db)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi kokacserjéd!");
		        return 1;
		    }
		    if((PlayerInfo[neki][pCserje] + db) > MAXCSERJE)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér el nála!");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    PlayerInfo[playerid][pCserje] -= db;
		    PlayerInfo[neki][pCserje] += db;
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál neki %ddb kokacserjét neki: %s", db, kinek);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked %ddb kokacserjét", kuldo, db);
		    return 1;
		}
		if(strcmp(mit, "kevlar", true) == 0 || strcmp(mit, "mellény", true) == 0 || strcmp(mit, "melleny", true) == 0)
		{
			if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
			new Float:armor;
			new Float:armor2;
			GetPlayerArmour(playerid, armor);
			GetPlayerArmour(neki, armor2);
			if(armor == 0)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs mellényed!");
				return 1;
			}
			if(armor2 != 0)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Neki már van mellénye!");
				return 1;
			}
			SetPlayerArmour(neki, armor);
			SetPlayerArmour(playerid, 0);
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál egy golyóállót neki: %s", kinek);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked 1 golyóállót!", kuldo);
		}
		if(strcmp(mit, "cigi", true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
		        return 1;
		    }
		    db = strval(tmp);
			if(db < 0) return Msg(playerid, "Szerinted...");
		    if(PlayerInfo[playerid][pCigi] < db)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi cigid!");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    PlayerInfo[playerid][pCigi] -= db;
		    PlayerInfo[neki][pCigi] += db;
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál neki %ddb cigit neki: %s", db, kinek);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked %ddb cigit", kuldo, db);
		    return 1;
		}
		if(strcmp(mit, "fegyver", true) == 0)
		{
	 		if(GetDistanceBetweenPlayers(playerid,neki) > 2)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
			new FegyverID;
			FegyverID = GetPlayerWeapon(playerid);
	        new FegyverTolteny;
			FegyverTolteny = GetPlayerAmmo(playerid);
			if(FegyverID != 0 && FegyverTolteny != 0 )
			{
				if(PlayerPaintballing[playerid] != 0)
				{
					SeeKick(playerid, "Mi a faszért használsz ki bugot ?!");
					return 1;
				}
				Msg(playerid, "Átadtál egy fegyvert.");
				Msg(neki, "Átadtak egy fegyvert.");
				//OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
				//OnePlayAnim(neki, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
				OnePlayAnim(playerid, "GANGS", "shake_cara", 4.0, 0, 0, 0, 0, 0);
				OnePlayAnim(neki, "GANGS", "shake_cara", 4.0, 0, 0, 0, 0, 0);
				FegyverElvesz(playerid, FegyverID);
				GiveWeapon(neki, FegyverID, FegyverTolteny);
				Cselekves(playerid, "átadott egy fegyvert valakinek...");
				
				new fegyoatadas[128];
				Format(fegyoatadas, "[Fegyver] %s átadott neki: %s, egy %s-t, lõszer: %d", PlayerName(playerid), PlayerName(neki), GetGunName(FegyverID), FegyverTolteny);
				EgyebLog(fegyoatadas);
				return 1;
			}
			else
			{
				Msg(playerid, "Nincs nálad fegyver!");

			}
		}
		if(strcmp(mit, "kötszer", true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
		        return 1;
		    }
		    db = strval(tmp);
			if(db < 0) return Msg(playerid, "Szerinted...");
		    if(PlayerInfo[playerid][pKotszer] < db)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi kötszered!");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    PlayerInfo[playerid][pKotszer] -= db;
		    PlayerInfo[neki][pKotszer] += db;
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál %d kötszert neki: %s", db, kinek);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked %d kötszert.", kuldo, db);
		    return 1;
		}

		if(strcmp(mit, "mák", true) == 0 || strcmp(mit, "mak", true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
		        return 1;
		    }
		    db = strval(tmp);
			if(db < 0) return Msg(playerid, "Szerinted...");
		    if(PlayerInfo[playerid][pMak] < db)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi mákleveled!");
		        return 1;
		    }
		    if((PlayerInfo[neki][pMak] + db) > MAXMAK)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér el nála!");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    PlayerInfo[playerid][pMak] -= db;
		    PlayerInfo[neki][pMak] += db;
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál %ddb máklevelet neki: %s", db, playername);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked %ddb máklevelet", sendername, db);
		    return 1;
		}

		if(strcmp(mit, "cannabis", true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
		        return 1;
		    }
		    db = strval(tmp);
			if(db < 0) return Msg(playerid, "Szerinted...");
		    if(PlayerInfo[playerid][pCannabis] < db)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi cannabisod!");
		        return 1;
		    }
		    if((PlayerInfo[neki][pCannabis] + db) > MAXCANNABIS)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér el nála!");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    PlayerInfo[playerid][pCannabis] -= db;
		    PlayerInfo[neki][pCannabis] += db;
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál %ddb cannabist neki: %s", db, playername);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked %ddb cannabist", sendername, db);
		    return 1;
		}

		if(strcmp(mit, "mûanyag", true) == 0 || strcmp(mit, "muanyag", true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
		        return 1;
		    }
		    db = strval(tmp);
			if(db < 0) return Msg(playerid, "Szerinted...");
		    if(PlayerInfo[playerid][pMuanyag] < db)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi mûanyagod!");
		        return 1;
		    }
		    if((PlayerInfo[neki][pMuanyag] + db) > MAXMUANYAG)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér el nála!");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    PlayerInfo[playerid][pMuanyag] -= db;
		    PlayerInfo[neki][pMuanyag] += db;
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál %ddb mûanyagot neki: %s", db, playername);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked %ddb mûanyagot", sendername, db);
		    return 1;
		}

		if(strcmp(mit, "kokain", true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
		        return 1;
		    }
		    db = strval(tmp);
			if(db < 0) return Msg(playerid, "Szerinted...");
		    if(PlayerInfo[playerid][pKokain] < db)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi kokainod!");
		        return 1;
		    }
		    if((PlayerInfo[neki][pKokain] + db) > MAXKOKAIN)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér el nála!");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    PlayerInfo[playerid][pKokain] -= db;
		    PlayerInfo[neki][pKokain] += db;
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál %dg kokaint neki: %s", db, playername);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked %dg kokaint", sendername, db);
		    return 1;
		}

		if(strcmp(mit, "heroin", true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
		        return 1;
		    }
		    db = strval(tmp);
			if(db < 0) return Msg(playerid, "Szerinted...");
		    if(PlayerInfo[playerid][pHeroin] < db)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi heroinod!");
		        return 1;
		    }
		    if((PlayerInfo[neki][pHeroin] + db) > MAXHEROIN)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér el nála!");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    PlayerInfo[playerid][pHeroin] -= db;
		    PlayerInfo[neki][pHeroin] += db;
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál %dg heroint neki: %s", db, playername);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked %dg heroint", sendername, db);
		    return 1;
		}

		if(strcmp(mit, "marihuana", true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
		        return 1;
		    }
		    db = strval(tmp);
			if(db < 0) return Msg(playerid, "Szerinted...");
		    if(PlayerInfo[playerid][pMarihuana] < db)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi marihuánád!");
		        return 1;
		    }
		    if((PlayerInfo[neki][pMarihuana] + db) > MAXMARIHUANA)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér el nála!");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    PlayerInfo[playerid][pMarihuana] -= db;
		    PlayerInfo[neki][pMarihuana] += db;
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál %dg marihuánát neki: %s", db, playername);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked %dg marihuánát", sendername, db);
		    return 1;
		}

		if(strcmp(mit, "mati", true) == 0 || strcmp(mit, "materials", true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
		        return 1;
		    }
		    db = strval(tmp);
			if(db < 0) return Msg(playerid, "Szerinted...");
		    if(PlayerInfo[playerid][pMats] < db)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi materialod!");
		        return 1;
		    }
		    if((PlayerInfo[neki][pMats] + db) > MAXMATI)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér el nála!");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    PlayerInfo[playerid][pMats] -= db;
		    PlayerInfo[neki][pMats] += db;
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál %ddb materialt neki: %s", db, playername);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked %ddb materialt", sendername, db);
		    return 1;
		}

		if(strcmp(mit, "kaja", true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "És mennyit?");
		        return 1;
		    }
		    db = strval(tmp);
			if(db < 0) return Msg(playerid, "Szerinted...");
		    if(PlayerInfo[playerid][pKaja] < db)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi kajád!");
		        return 1;
		    }
		    if((PlayerInfo[neki][pKaja] + db) > MAXKAJA)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér el nála!");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid,neki) > 5)
	        {
		        SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
		        return 1;
	        }
		    PlayerInfo[playerid][pKaja] -= db;
		    PlayerInfo[neki][pKaja] += db;
		    SendFormatMessage(playerid, COLOR_LIGHTBLUE, " Átadtál %ddb kaját neki: %s", db, playername);
		    SendFormatMessage(neki, COLOR_LIGHTBLUE, "%s átadott neked %ddb kaját", sendername, db);
		    return 1;
		}

		return 1;
	}

	if(strcmp(cmd, "/walk", true) == 0)
	{
		tmp = strtok(cmdtext,idx);

		if (!strlen(tmp))
			return SendClientMessage(playerid,COLOR_LIGHTRED,"Használat: /walk [id(0-13)]");

		new stilus = strval(tmp);

		SetPlayerWalkingStyle(playerid, stilus);
		SendFormatMessage(playerid, COLOR_WHITE, "Sétálási stílusod: %d", strval(tmp));
		return 1;
	}

	if(strcmp(cmd, "/készít", true) == 0 ||strcmp(cmd, "/keszit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Használata: /készít [amit akarsz] [hány darabból]");
			    SendClientMessage(playerid, COLOR_GRAD2, "Cuccok: Kokain, Heroin, Mati(vagy Materials)");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Fontos! Az idõ arányos azzal, hogy hány darabból csinálod!");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Szükséges idõk, és mennyit kapsz:");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Kokain: 2500*db másodperc - Kapsz: 1 és 10*db között");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Heroin: 4000*db másodperc - Kapsz: 1 és 7*db között");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Marihuana: 4000*db másodperc - Kapsz: 1 és 7*db között");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Mati: 5000*db másodperc - Kapsz: 1 és 500*db között");

			    return 1;
			}

			if(FloodCheck(playerid)) return 1;

			if(strcmp(tmp, "kokain", true) == 0)
			{
			    if(!AMT(playerid, MUNKA_DROG))
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy Drogdíler!");
				if(PlayerInfo[playerid][pKokain] >= MAXKOKAIN)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Több nem fér el nálad!");

				if(MunkaFolyamatban[playerid] == 1)
					return Msg(playerid, "Nyugi már...");

			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
			    {
				    SendClientMessage(playerid, COLOR_GRAD2, "Használata: /készít [amit akarsz] [hány darabból]");
				    SendClientMessage(playerid, COLOR_GRAD2, "Cuccok: Kokain, Heroin, Marihuana, Mati(vagy Materials)");
				    return 1;
			    }
			    new db = strval(tmp);
			    if(!PlayerToPoint(1, playerid, 2543.095703, -1290.998779, 1044.125000) || GetPlayerInterior(playerid) != 2)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a drog készítõ helyénél, a gyárban");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pCserje] < 1)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nincs nálad Kokacserje!");
					return 1;
			    }
			    if(PlayerInfo[playerid][pCserje] < db)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nincs ennyi Kokacserjéd!");
					return 1;
			    }
			    if(db < 1)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "minimum 1!");
					return 1;
			    }
			    MunkaFolyamatban[playerid] = 1;
			    PlayerInfo[playerid][pCserje] -= db;
			    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Keszited a kokaint... varj...", 3000, 3);
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 1, 1, 1, -1);
				SetTimerEx("Munkavege", (MunkaIdo[3]*db), false, "ddd", playerid, M_KOKAIN, db);
			}

			if(strcmp(tmp, "heroin", true) == 0)
			{
			    if(!AMT(playerid, MUNKA_DROG))
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy Drogdíler!");

				if(PlayerInfo[playerid][pHeroin] >= MAXHEROIN)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Több nem fér el nálad!");

				if(MunkaFolyamatban[playerid] == 1)
					return Msg(playerid, "Nyugi már...");

			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
			    {
				    SendClientMessage(playerid, COLOR_GRAD2, "Használata: /készít [amit akarsz] [hány darabból]");
				    SendClientMessage(playerid, COLOR_GRAD2, "Cuccok: Kokain, Heroin, Marihuana, Mati(vagy Materials)");
				    return 1;
			    }
			    new db = strval(tmp);
			    if(!PlayerToPoint(1, playerid, 2543.095703, -1290.998779, 1044.125000) || GetPlayerInterior(playerid) != 2)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a drog készítõ helyénél, a gyárban");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pMak] < 1)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nincs nálad Máklevél!");
					return 1;
			    }
			    if(PlayerInfo[playerid][pMak] < db)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nincs ennyi Mákleveled!");
					return 1;
			    }
			    if(db < 1)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "minimum 1!");
					return 1;
			    }
			    MunkaFolyamatban[playerid] = 1;
			    PlayerInfo[playerid][pMak] -= db;
			    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Keszited a heroint... varj...", 3000, 3);
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 1, 1, 1, -1);
				SetTimerEx("Munkavege", (MunkaIdo[4]*db), false, "ddd", playerid, M_HEROIN, db);
			}

			if(strcmp(tmp, "marihuana", true) == 0)
			{
			    if(!AMT(playerid, MUNKA_DROG))
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy Drogdíler!");

				if(PlayerInfo[playerid][pMarihuana] >= MAXMARIHUANA)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Több nem fér el nálad!");

				if(MunkaFolyamatban[playerid] == 1)
					return Msg(playerid, "Nyugi már...");

			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
			    {
				    SendClientMessage(playerid, COLOR_GRAD2, "Használata: /készít [amit akarsz] [hány darabból]");
				    SendClientMessage(playerid, COLOR_GRAD2, "Cuccok: Kokain, Heroin, Marihuana, Mati(vagy Materials)");
				    return 1;
			    }
			    new db = strval(tmp);
			    if(!PlayerToPoint(1, playerid, 2543.095703, -1290.998779, 1044.125000) || GetPlayerInterior(playerid) != 2)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a drog készítõ helyénél, a gyárban");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pCannabis] < 1)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nincs nálad Cannabis!");
					return 1;
			    }
			    if(PlayerInfo[playerid][pCannabis] < db)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nincs ennyi Cannabisod!");
					return 1;
			    }
			    if(db < 1)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "minimum 1!");
					return 1;
			    }
			    MunkaFolyamatban[playerid] = 1;
			    PlayerInfo[playerid][pCannabis] -= db;
			    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Keszited a marihuanat... varj...", 3000, 3);
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 1, 1, 1, -1);
				SetTimerEx("Munkavege", (MunkaIdo[5]*db), false, "ddd", playerid, M_MARIHUANA, db);
			}

			if(strcmp(tmp, "mati", true) == 0 || strcmp(tmp, "materials", true) == 0)
			{
			    if(!AMT(playerid, MUNKA_FEGYVER))
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy Fegyverkereskedõ!");

				if(PlayerInfo[playerid][pMats] >= MAXMATI)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Több nem fér el nálad!");

				if(MunkaFolyamatban[playerid] == 1)
					return Msg(playerid, "Nyugi már...");

			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
			    {
				    SendClientMessage(playerid, COLOR_GRAD2, "Használata: /készít [amit akarsz] [hány darabból]");
				    SendClientMessage(playerid, COLOR_GRAD2, "Cuccok: Kokain, Heroin, Marihuana, Mati(vagy Materials)");
				    return 1;
			    }
			    new db = strval(tmp);
			    if(!PlayerToPoint(1, playerid, 2543.111328, -1295.866333, 1044.125000) || GetPlayerInterior(playerid) != 2)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a mati készítõ helyénél, a gyárban");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pMuanyag] < 1)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nincs nálad Mûanyag!");
					return 1;
			    }
			    if(PlayerInfo[playerid][pMuanyag] < db)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nincs ennyi Mûanyagod!");
					return 1;
			    }
                if(db < 1)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "minimum 1!");
					return 1;
			    }
			    MunkaFolyamatban[playerid] = 1;
			    PlayerInfo[playerid][pMuanyag] -= db;
			    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Keszited a Materialt... varj...", 3000, 3);
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 1, 1, 1, -1);
				SetTimerEx("Munkavege", (MunkaIdo[6]*db), false, "ddd", playerid, M_MATERIAL, db);
			}
			if(strcmp(tmp, "kevlar", true) == 0 || strcmp(tmp, "mellény", true) == 0 || strcmp(tmp, "melleny", true) == 0)
			{
				if(!PlayerToPoint(1, playerid, 2543.111328, -1295.866333, 1044.125000) || GetPlayerInterior(playerid) != 2)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a mellény készítõ helyénél, a gyárban");
			        return 1;
			    }
				new Float:armor;
				GetPlayerArmour(playerid, armor);
				if(armor > 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Már van mellényed!");
					return 1;
				}
				if(PlayerInfo[playerid][pMats] > 3)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs elég mûanyagod! (3)");
					return 1;
				}
				if(MunkaFolyamatban[playerid] != 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Nyugi!");
					return 1;
				}
				MunkaFolyamatban[playerid] = 1;
			    PlayerInfo[playerid][pMuanyag] -= 10;
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 1, 1, 1, -1);
				GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Keszited a Mellenyt... varj...", 3000, 3);
				SetTimerEx("Munkavege", 60000, false, "ddd", playerid, M_MELLENY, 1);
			}	
        }
		return 1;
	}
	if(egyezik(cmd, "/ház"))
	{
		if(!LMT(playerid, LMUNKA_FBI) && PlayerInfo[playerid][pSwattag] < 1 && !LMT(playerid, LMUNKA_VPOP))
			return Msg(playerid, "Csak FBI, VPOP és SWAT");
			
		if(LMT(playerid, LMUNKA_VPOP) && PlayerInfo[playerid][pRank] < 6)
			return Msg(playerid, "Minimum 6os rang!");
		
		if(LMT(playerid, LMUNKA_FBI) && PlayerInfo[playerid][pSwattag] < 1 && PlayerInfo[playerid][pRank] < 4)
			return Msg(playerid, "Minimum 4es rang!");
			
		new house = IsAt(playerid, IsAt_Haz);
		if(house == NINCS) return Msg(playerid, "Nem vagy házban.");
		if(!Online(HouseInfo[house][hOwner])) return Msg(playerid, "Nincs fennt a ház tulaja!");
		if(params < 1) return Msg(playerid, "/ház [átnéz / lefoglal]");
		if(egyezik(param[1], "lefoglal"))
		{
			if(!LMT(playerid, LMUNKA_FBI) || !Munkarang(playerid, 5)) return Msg(playerid, "Nem foglalhatsz le.");
			if(params < 3) return Msg(playerid, "/ház lefoglal [mit] [mennyit]");
			new mennyit = strval(param[3]);
			if(mennyit < 1) return 1;
			if(strcmp(param[2], "pénz", true) == 0 || strcmp(param[2], "penz", true) == 0)
			{
				    new penz = HouseInfo[house][hTakings];

				    if(HouseInfo[house][hTakings] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házszéfben nincs pénz!");

					if(HouseInfo[house][hTakings] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %dFT van! Többet nem tudsz kivenni...", penz);
					    return 1;
	    			}

				    ConsumingMoney[playerid] = 1;
					GiveMoney(playerid, mennyit);
					HouseInfo[house][hTakings] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a széfbõl %dFT-t", mennyit);

					//HazUpdate(house, "Penz='%d'", HouseInfo[house][hTakings]);
					HazUpdate(house, HAZ_Takings);
					return 1;
			}

			else if(strcmp(param[2], "kaja", true) == 0)
			{

				    if(HouseInfo[house][hKaja] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs kaja!");

					if(HouseInfo[house][hKaja] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %d van! Többet nem tudsz kivenni...", HouseInfo[house][hKaja]);
					    return 1;
	    			}

					if((PlayerInfo[playerid][pKaja] + mennyit) > MAXKAJA)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d kaja lehet nálad!", MAXKAJA);
					    return 1;
	    			}

                    PlayerInfo[playerid][pKaja] += mennyit;
					HouseInfo[house][hKaja] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %d kaját", mennyit);

					//HazUpdate(house, "Kaja='%d'", HouseInfo[house][hKaja]);
					HazUpdate(house, HAZ_Kaja);
					return 1;
			}

			else if(strcmp(param[2], "cigi", true) == 0)
			{

				    if(HouseInfo[house][hCigi] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs cigi!");

					if(HouseInfo[house][hCigi] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %d van! Többet nem tudsz kivenni...", HouseInfo[house][hCigi]);
					    return 1;
	    			}

                    PlayerInfo[playerid][pCigi] += mennyit;
					HouseInfo[house][hCigi] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %d szál cigit", mennyit);

					//HazUpdate(house, "Cigi='%d'", HouseInfo[house][hCigi]);
					HazUpdate(house, HAZ_Cigi);
					return 1;
			}

			else if(strcmp(param[2], "kokain", true) == 0)
			{

				    if(HouseInfo[house][hKokain] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs kokain!");

					if(HouseInfo[house][hKokain] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %dg van! Többet nem tudsz kivenni...", HouseInfo[house][hKokain]);
					    return 1;
	    			}

					if((PlayerInfo[playerid][pKokain] + mennyit) > MAXKOKAIN)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d kokaint birsz el!", MAXKOKAIN);
					    return 1;
	    			}

                    PlayerInfo[playerid][pKokain] += mennyit;
					HouseInfo[house][hKokain] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %dg kokaint", mennyit);

					//HazUpdate(house, "Kokain='%d'", HouseInfo[house][hKokain]);
					HazUpdate(house, HAZ_Kokain);
					return 1;
			}

			else if(strcmp(param[2], "heroin", true) == 0)
			{

				    if(HouseInfo[house][hHeroin] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs heroin!");

					if(HouseInfo[house][hHeroin] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %dg van! Többet nem tudsz kivenni...", HouseInfo[house][hHeroin]);
					    return 1;
	    			}

					if((PlayerInfo[playerid][pHeroin] + mennyit) > MAXHEROIN)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d heroint birsz el!", MAXHEROIN);
					    return 1;
	    			}

                    PlayerInfo[playerid][pHeroin] += mennyit;
					HouseInfo[house][hHeroin] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %dg heroint", mennyit);

					//HazUpdate(house, "Heroin='%d'", HouseInfo[house][hHeroin]);
					HazUpdate(house, HAZ_Heroin);
					return 1;
			}

			else if(strcmp(param[2], "marihuana", true) == 0)
			{

				    if(HouseInfo[house][hMarihuana] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs marihuana!");

					if(HouseInfo[house][hMarihuana] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %dg van! Többet nem tudsz kivenni...", HouseInfo[house][hHeroin]);
					    return 1;
	    			}

					if((PlayerInfo[playerid][pMarihuana] + mennyit) > MAXMARIHUANA)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d heroint birsz el!", MAXMARIHUANA);
					    return 1;
	    			}

                    PlayerInfo[playerid][pMarihuana] += mennyit;
					HouseInfo[house][hMarihuana] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %dg marihuánát", mennyit);

					//HazUpdate(house, "Marihuana='%d'", HouseInfo[house][hMarihuana]);
					HazUpdate(house, HAZ_Marihuana);
					return 1;
			}

			else if(strcmp(param[2], "mati", true) == 0 || strcmp(param[2], "material", true) == 0)
			{

				    if(HouseInfo[house][hMati] < 1)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "A házban nincs mati!");

					if(HouseInfo[house][hMati] < mennyit)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "A házszéfben csak %ddb van! Többet nem tudsz kivenni...", HouseInfo[house][hMati]);
					    return 1;
					}

					if((PlayerInfo[playerid][pMats] + mennyit) > MAXMATI)
					{
					    SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Maximum %d materialt birsz el!", MAXMATI);
					    return 1;
	    			}

                    PlayerInfo[playerid][pMats] += mennyit;
					HouseInfo[house][hMati] -= mennyit;
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kivettél a házból %ddb materialt", mennyit);

					//HazUpdate(house, "Material='%d'", HouseInfo[house][hMati]);
					HazUpdate(house, HAZ_Mati);
					return 1;
			}
		}
		if(egyezik(param[1], "átnéz") || egyezik(param[1], "atnez"))
		{
			new penz, kaja, cigis, kokain, heroin, marihuana, material;
			penz = HouseInfo[house][hTakings];
			cigis = HouseInfo[house][hCigi];
			kaja = HouseInfo[house][hKaja];
			kokain = HouseInfo[house][hKokain];
			heroin = HouseInfo[house][hHeroin];
			marihuana = HouseInfo[house][hMarihuana];
			material = HouseInfo[house][hMati];
			SendFormatMessage(playerid, COLOR_YELLOW, "===== [Gates] utca %d =====", house);
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Pénz: %dFT | Kaja: %ddb/%ddb | Cigi: %ddb/%ddb | Material: %ddb/%ddb", penz, MAXHAZKAJA, kaja, MAXHAZCIGI, cigis, MAXHAZMATI, material);
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kokain: %dg/%dg | Heroin: %dg/%dg | Marihuana: %dg/%dg", MAXHAZKOKAIN, kokain, MAXHAZHEROIN, heroin, MAXHAZMARIHUANA, marihuana);
			SendClientMessage(playerid, COLOR_YELLOW, "=================================");
			Cselekves(playerid, "átnézte a házat", 1);
		}
	}
    if(strcmp(cmd, "/átnéz", true) == 0 || strcmp(cmd, "/atnez", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /átnéz [mit]");
    			SendClientMessage(playerid, COLOR_WHITE, "Használható: jármû");
				return 1;
			}
		    if(strcmp(x_nr,"jarmu",true) == 0 || strcmp(x_nr,"jármû",true) == 0)
			{
                veh = GetClosestVehicle(playerid);
				new Float:tav = GetDistanceToVehicle(playerid, veh);
				if(tav >= 3) return Msg(playerid, "Nincs a közeledben jármû.");
	   			if(Locked(veh)) return Msg(playerid, "A jármû zárva.");
				
				format(string, sizeof(string), "==============[Rendszám: %d]==============", veh);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "- %d Cserje - %d Mák", CuccokAKocsiban[veh][1], CuccokAKocsiban[veh][2]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "- %d Cannabis - %d Mûanyag", CuccokAKocsiban[veh][3], CuccokAKocsiban[veh][0]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "- %d Material - %d Heroin", CuccokAKocsiban[veh][12], CuccokAKocsiban[veh][13]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "- %d Kokain - %d Marihuana", CuccokAKocsiban[veh][14], CuccokAKocsiban[veh][15]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "-  Lehet van benne fegyver!(/weapon megnéz)");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Valaki átnézett egy jármûvet.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			/*else if(strcmp(x_nr,"bandaszéf",true) == 0)
			{
			    if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[1-1][0],SzefekElhelyezkedese[1-1][1],SzefekElhelyezkedese[1-1][2]))
     			{
				format(string, sizeof(string), "Bandaszéf tartalma:");
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "[Pénz]: %dFT", bandaszef[ballaspenz]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Materials]: %ddb", bandaszef[ballasmati]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Marihuana]: %dg", bandaszef[ballasmarihuana]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Kokain]: %dg", bandaszef[ballaskokain]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Heroin]: %dg", bandaszef[ballasheroin]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "* Valaki megnézte a széf tartalmát.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
				}
				else if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[2-1][0],SzefekElhelyezkedese[2-1][1],SzefekElhelyezkedese[2-1][2]))
     			{
				format(string, sizeof(string), "Bandaszéf tartalma:");
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "[Pénz]: %dFT", bandaszef[vagospenz]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Materials]: %ddb", bandaszef[vagosmati]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Marihuana]: %dg", bandaszef[vagosmarihuana]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Kokain]: %dg", bandaszef[vagoskokain]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Heroin]: %dg", bandaszef[vagosheroin]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "* Valaki megnézte a széf tartalmát.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
				}
				else if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[3-1][0],SzefekElhelyezkedese[3-1][1],SzefekElhelyezkedese[3-1][2]))
     			{
				format(string, sizeof(string), "Bandaszéf tartalma:");
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "[Pénz]: %dFT", bandaszef[scupenz]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Materials]: %ddb", bandaszef[scumati]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Marihuana]: %dg", bandaszef[scumarihuana]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Kokain]: %dg", bandaszef[scukokain]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Heroin:] %dg", bandaszef[scuheroin]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "* Valaki megnézte a széf tartalmát.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
				}
                else if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[4-1][0],SzefekElhelyezkedese[4-1][1],SzefekElhelyezkedese[4-1][2]))
     			{
				format(string, sizeof(string), "Bandaszéf tartalma:");
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "[Pénz]: %dFT", bandaszef[jokaspenz]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Materials]: %ddb", bandaszef[jokasmati]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Marihuana]: %dg", bandaszef[jokasmarihuana]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Kokain]: %dg", bandaszef[jokaskokain]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Heroin]: %dg", bandaszef[jokasheroin]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "* Valaki megnézte a széf tartalmát.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
				}
                else if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[5-1][0],SzefekElhelyezkedese[5-1][1],SzefekElhelyezkedese[5-1][2]))
     			{
				format(string, sizeof(string), "Bandaszéf tartalma:");
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "[Pénz]: %dFT", bandaszef[aztecaspenz]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Materials]: %ddb", bandaszef[aztecasmati]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Marihuana]: %dg", bandaszef[aztecasmarihuana]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Kokain]: %dg", bandaszef[aztecaskokain]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Heroin]: %dg", bandaszef[aztecasheroin]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "* Valaki megnézte a széf tartalmát.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
				}
                else if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[6-1][0],SzefekElhelyezkedese[6-1][1],SzefekElhelyezkedese[6-1][2]))
     			{
				format(string, sizeof(string), "Bandaszéf tartalma:");
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "[Pénz]: %dFT", bandaszef[yakuzapenz]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Materials]: %ddb", bandaszef[yakuzamati]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Marihuana]: %dg", bandaszef[yakuzamarihuana]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Kokain]: %dg", bandaszef[yakuzakokain]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Heroin]: %dg", bandaszef[yakuzaheroin]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "* Valaki megnézte a széf tartalmát.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
				}
    			else if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[7-1][0],SzefekElhelyezkedese[7-1][1],SzefekElhelyezkedese[7-1][2]))
     			{
				format(string, sizeof(string), "Bandaszéf tartalma:");
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "[Pénz]: %dFT", bandaszef[tggpenz]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Materials]: %ddb", bandaszef[tggmati]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Marihuana]: %dg", bandaszef[tggmarihuana]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Kokain]: %dg", bandaszef[tggkokain]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Heroin]: %dg", bandaszef[tggheroin]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "* Valaki megnézte a széf tartalmát.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
				}
                else if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[8-1][0],SzefekElhelyezkedese[8-1][1],SzefekElhelyezkedese[8-1][2]))
     			{
				format(string, sizeof(string), "Bandaszéf tartalma:");
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "[Pénz]: %dFT", bandaszef[dcortezpenz]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Materials]: %ddb", bandaszef[dcortezmati]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Marihuana]: %dg", bandaszef[dcortezmarihuana]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Kokain]: %dg", bandaszef[dcortezkokain]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Heroin]: %dg", bandaszef[dcortezheroin]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "* Valaki megnézte a széf tartalmát.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
				}
				else if(PlayerToPoint(5, playerid, SzefekElhelyezkedese[9-1][0],SzefekElhelyezkedese[9-1][1],SzefekElhelyezkedese[9-1][2]))
     			{
				format(string, sizeof(string), "Bandaszéf tartalma:");
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "[Pénz]: %dFT", bandaszef[osfpenz]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Materials]: %ddb", bandaszef[osfmati]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Marihuana]: %dg", bandaszef[osfmarihuana]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Kokain]: %dg", bandaszef[osfkokain]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[Heroin]: %dg", bandaszef[osfheroin]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "* Valaki megnézte a széf tartalmát.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
				}
				else
				{
				SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy bandaszéf közelébe");
				return 1;
				}
			}*/
			/*else if(strcmp(x_nr,"ház",true) == 0)
			{
			    new hazak = sizeof(HouseInfo);
				for(new i = 0; i < hazak; i++)
				{
	                new penz, kaja, kokain, heroin, marihuana, material;
					penz = HouseInfo[i][hTakings];
					kaja = HouseInfo[i][hKaja];
					kokain = HouseInfo[i][hKokain];
					heroin = HouseInfo[i][hHeroin];
					marihuana = HouseInfo[i][hMarihuana];
					material = HouseInfo[i][hMati];
					SendClientMessage(playerid, COLOR_YELLOW, "===== Házszéf! =====");
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Pénz: %dFt | Kaja: %ddb/%ddb | Material: %ddb/%ddb", penz, MAXHAZKAJA, kaja, MAXHAZMATI, material);
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Kokain: %dg/%dg | Heroin: %dg/%dg | Marihuana: %dg/%dg", MAXHAZKOKAIN, kokain, MAXHAZHEROIN, heroin, MAXHAZMARIHUANA, marihuana);
					SendClientMessage(playerid, COLOR_YELLOW, "=================================");
				}
			}*/
		}
		return 1;
	}
	if(strcmp(cmd, "/bepakol", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Használata: /bepakol [cucc]");
			    SendClientMessage(playerid, COLOR_GRAD2, "Cuccok: Cserje, Mák, Cannabis, Mûanyag, Material, Kokain, Heroin, Marihuana");
			    format(string, sizeof(string), "Maximum férõhely: %ddb", MAXCUCCAKOCSIBAN);
			    SendClientMessage(playerid, COLOR_GRAD2, string);
			    /*format(string, sizeof(string), "Ebbõl is csak max %d mûanyag lehet!", MAXMUANYAGAKOCSIBAN);
			    SendClientMessage(playerid, COLOR_GRAD2, string);*/
			    return 1;
			}
			
			if(FloodCheck(playerid)) return 1;
			
			new dbx = strval(param[2]);
			if(params > 1 && dbx < 1)
				return Msg(playerid, "Minimum 1db!");

			veh = GetClosestVehicle(playerid);
			new Float:tav = GetDistanceToVehicle(playerid, veh);
			if(tav >= 3)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "A közeledben nincs jármû!");
			    return 1;
			}
			if(GetJarmu(veh, KOCSI_CSOMAGTARTO) == 0) return Msg(playerid, "Nyisd ki a csomagtartót!");
			if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Jármûben nem...");
			if(OsszesCuccAKocsiban[veh] >= MAXCUCCAKOCSIBAN)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "A jármû tele van!");
			    return 1;
			}
   			if(Locked(veh))
			{
   				SendClientMessage(playerid, COLOR_YELLOW, "Ez a jármû zárva van!");
				return 1;
			}
			if(strcmp(tmp, "cserje", true) == 0)
			{
				if(PlayerInfo[playerid][pCserje] < 1)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs nálad Kokacserje!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/bepakol Cserje [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(darab > PlayerInfo[playerid][pCserje])
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Kokacserjéd!");
				    return 1;
				}
				if((OsszesCuccAKocsiban[veh] + darab) > MAXCUCCAKOCSIBAN)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér be a kocsiba!");
				    return 1;
				}

				CuccokAKocsiban[veh][1] += darab;
				OsszesCuccAKocsiban[veh] += darab;

				PlayerInfo[playerid][pCserje] -= darab;
				format(string, sizeof(string), "Beraktál %d Kokacserjét a jármûbe!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "berakott valamit a jármûbe...");
				CsomagTartoMentes();
			}

			if(strcmp(tmp, "mak", true) == 0 || strcmp(tmp, "mák", true) == 0)
			{
				if(PlayerInfo[playerid][pMak] < 1)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs nálad Máklevél!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/bepakol Mák [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(darab > PlayerInfo[playerid][pMak])
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Mákleveled!");
				    return 1;
				}
				if((OsszesCuccAKocsiban[veh] + darab) > MAXCUCCAKOCSIBAN)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér be a kocsiba!");
				    return 1;
				}

				CuccokAKocsiban[veh][2] += darab;
				OsszesCuccAKocsiban[veh] += darab;

				PlayerInfo[playerid][pMak] -= darab;
				format(string, sizeof(string), "Beraktál %d Máklevelet a jármûbe!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "berakott valamit a jármûbe...");
				CsomagTartoMentes();
			}
			/*if(strcmp(tmp, "mati", true) == 0)
			{
				if(PlayerInfo[playerid][pMats] < 1) return Msg(playerid, "Nincs nálad mati!");
				tmp = strtok(cmdtext, idx);
				new darab = dbx;
				if(darab > PlayerInfo[playerid][pMats]) return Msg(playerid, "Nincs ennyi materialod!");
				if((CuccokAKocsiban[veh][16] + darab) > MAXMATIKOCSIBAN) return Msg(playerid, "Ennyi nem fér bele!");
				CuccokAKocsiban[veh][16] += darab;
				PlayerInfo[playerid][pMats] -= darab;
				format(string, sizeof(string), "Beraktál %d matit a jármûbe!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "berakott valamit a jármûbe...");
				CsomagTartoMentes();
			}*/
			if(strcmp(tmp, "material", true) == 0 || strcmp(tmp, "mati", true) == 0)
			{
				if(PlayerInfo[playerid][pMats] < 1)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs nálad Material!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/bepakol Material [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(darab > PlayerInfo[playerid][pMats])
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Materialod!");
				    return 1;
				}
				if((OsszesCuccAKocsiban[veh] + darab) > MAXCUCCAKOCSIBAN)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér be a kocsiba!");
				    return 1;
				}

				CuccokAKocsiban[veh][12] += darab;
				OsszesCuccAKocsiban[veh] += darab;

				PlayerInfo[playerid][pMats] -= darab;
				format(string, sizeof(string), "Beraktál %d materialt a jármûbe!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "berakott valamit a jármûbe...");
				CsomagTartoMentes();
			}
			if(strcmp(tmp, "cannabis", true) == 0)
			{
				if(PlayerInfo[playerid][pCannabis] < 1)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs nálad Cannabis!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/bepakol Cannabis [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(darab > PlayerInfo[playerid][pCannabis])
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Cannabisod!");
				    return 1;
				}
				if((OsszesCuccAKocsiban[veh] + darab) > MAXCUCCAKOCSIBAN)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér be a kocsiba!");
				    return 1;
				}

				CuccokAKocsiban[veh][3] += darab;
				OsszesCuccAKocsiban[veh] += darab;

				PlayerInfo[playerid][pCannabis] -= darab;
				format(string, sizeof(string), "Beraktál %d Cannabist a jármûbe!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "berakott valamit a jármûbe...");
				CsomagTartoMentes();
			}

			if(strcmp(tmp, "mûanyag", true) == 0 || strcmp(tmp, "muanyag", true) == 0)
			{
				if(PlayerInfo[playerid][pMuanyag] < 1)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs nálad Mûanyag!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/bepakol Mûanyag [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(darab > PlayerInfo[playerid][pMuanyag])
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Mûanyagod!");
				    return 1;
				}
				if((OsszesCuccAKocsiban[veh] + darab) > MAXCUCCAKOCSIBAN || (CuccokAKocsiban[veh][0] + darab) > MAXMUANYAGAKOCSIBAN)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér be a kocsiba!");
				    return 1;
				}

				CuccokAKocsiban[veh][0] += darab;
				OsszesCuccAKocsiban[veh] += darab;

				PlayerInfo[playerid][pMuanyag] -= darab;
				format(string, sizeof(string), "Beraktál %d Mûanyagot a jármûbe!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "berakott valamit a jármûbe...");
				CsomagTartoMentes();
			}
			
			if(strcmp(tmp, "heroin", true) == 0)
			{
				if(PlayerInfo[playerid][pHeroin] < 1)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs nálad Heroin!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/bepakol Heroin [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(darab > PlayerInfo[playerid][pHeroin])
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Heroinod!");
				    return 1;
				}
				if((CuccokAKocsiban[veh][13] + darab) > MAXHEROINKOCSIBAN)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér be a kocsiba!");
				    return 1;
				}

				CuccokAKocsiban[veh][13] += darab;

				PlayerInfo[playerid][pHeroin] -= darab;
				format(string, sizeof(string), "Beraktál %d Heroint a jármûbe!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "berakott valamit a jármûbe...");
				CsomagTartoMentes();
			}
			if(strcmp(tmp, "kokain", true) == 0)
			{
				if(PlayerInfo[playerid][pKokain] < 1)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs nálad Kokain!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/bepakol Kokain [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(darab > PlayerInfo[playerid][pKokain])
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Kokainod!");
				    return 1;
				}
				if((CuccokAKocsiban[veh][14] + darab) > MAXKOKAINKOCSIBAN)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér be a kocsiba!");
				    return 1;
				}

				CuccokAKocsiban[veh][14] += darab;

				PlayerInfo[playerid][pKokain] -= darab;
				format(string, sizeof(string), "Beraktál %d Kokaint a jármûbe!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "berakott valamit a jármûbe...");
				CsomagTartoMentes();
			}
			if(strcmp(tmp, "marihuana", true) == 0)
			{
				if(PlayerInfo[playerid][pMarihuana] < 1)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs nálad Marihuana!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/bepakol Marihuana [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(darab > PlayerInfo[playerid][pMarihuana])
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Marihuanád!");
				    return 1;
				}
				if((CuccokAKocsiban[veh][15] + darab) > MAXMARIHUANAKOCSIBAN)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Ennyi nem fér be a kocsiba!");
				    return 1;
				}

				CuccokAKocsiban[veh][15] += darab;

				PlayerInfo[playerid][pMarihuana] -= darab;
				format(string, sizeof(string), "Beraktál %d Marihuanát a jármûbe!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "berakott valamit a jármûbe...");
				CsomagTartoMentes();
			}

        }
		return 1;
	}

	if(strcmp(cmd, "/kipakol", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Használata: /kipakol [cucc]");
			    SendClientMessage(playerid, COLOR_GRAD2, "Cuccok: Cserje, Mák, Cannabis, Mûanyag, Material, Heroin, Kokain, Marihuana");
			    return 1;
			}
			
			if(FloodCheck(playerid)) return 1;
			
			new dbx = strval(param[2]);
			if(params > 1 && dbx < 1)
				return Msg(playerid, "Minimum 1db!");

			veh = GetClosestVehicle(playerid);
			new Float:tav = GetDistanceToVehicle(playerid, veh);
			if(tav >= 3)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "A közeledben nincs jármû!");
			    return 1;
			}
			if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Jármûben nem...");
			if(GetJarmu(veh, KOCSI_CSOMAGTARTO) == 0) return Msg(playerid, "Nyisd ki a csomagtartót!");
            if(Locked(veh))
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Ez a kocsi zárva van!");
				return 1;
			}
			CsomagTartoMentes();	
			if(strcmp(tmp, "cserje", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/kipakol Cserje [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(CuccokAKocsiban[veh][1] <= 0)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "A kocsiban nincs Kokacserje!");
				    return 1;
				}
				if(PlayerInfo[playerid][pCserje] >= MAXCSERJE)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Tele vagy!");
				    return 1;
				}
				if(CuccokAKocsiban[veh][1] < darab)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Kokacserje a kocsiban!");
				    return 1;
				}
				if((PlayerInfo[playerid][pCserje]+darab) > MAXCSERJE) return Msg(playerid, "Ennyi nem fér el nálad!");
				CuccokAKocsiban[veh][1] -= darab;
				OsszesCuccAKocsiban[veh] -= darab;

				PlayerInfo[playerid][pCserje] += darab;
				format(string, sizeof(string), "Kivettél %d Kokacserjét a jármûbõl!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "kivett valamit a jármûbõl...");
				CsomagTartoMentes();
			}

			if(strcmp(tmp, "mak", true) == 0 || strcmp(tmp, "mák", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/kipakol Mák [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(CuccokAKocsiban[veh][2] <= 0)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "A kocsiban nincs Máklevél!");
				    return 1;
				}
				if(PlayerInfo[playerid][pMak] >= MAXMAK)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Tele vagy!");
				    return 1;
				}
				if(CuccokAKocsiban[veh][2] < darab)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Máklevél a kocsiban!");
				    return 1;
				}
				if((PlayerInfo[playerid][pMak]+darab) > MAXMAK) return Msg(playerid, "Ennyi nem fér el nálad!");
				CuccokAKocsiban[veh][2] -= darab;
				OsszesCuccAKocsiban[veh] -= darab;

				PlayerInfo[playerid][pMak] += darab;
				format(string, sizeof(string), "Kivettél %d Máklevelet a jármûbõl!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "kivett valamit a jármûbõl...");
				CsomagTartoMentes();
			}
			if(strcmp(tmp, "cannabis", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/kipakol Cannabis [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(CuccokAKocsiban[veh][3] <= 0)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "A kocsiban nincs Cannabis!");
				    return 1;
				}
				if(PlayerInfo[playerid][pCannabis] >= MAXCANNABIS)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Tele vagy!");
				    return 1;
				}
				if(CuccokAKocsiban[veh][3] < darab)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Cannabis a kocsiban!");
				    return 1;
				}
				if((PlayerInfo[playerid][pCannabis]+darab) > MAXCANNABIS) return Msg(playerid, "Ennyi nem fér el nálad!");
				CuccokAKocsiban[veh][3] -= darab;
				OsszesCuccAKocsiban[veh] -= darab;

				PlayerInfo[playerid][pCannabis] += darab;
				format(string, sizeof(string), "Kivettél %d Cannabist a jármûbõl!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "kivett valamit a jármûbõl...");
				CsomagTartoMentes();
			}

			if(strcmp(tmp, "mûanyag", true) == 0 || strcmp(tmp, "muanyag", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/kipakol Mûanyag [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(CuccokAKocsiban[veh][0] <= 0)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "A kocsiban nincs Múanyag!");
				    return 1;
				}
				if(PlayerInfo[playerid][pMuanyag] >= MAXMUANYAG)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Tele vagy!");
				    return 1;
				}
				if(CuccokAKocsiban[veh][0] < darab)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Mûanyag a kocsiban!");
				    return 1;
				}
				if((PlayerInfo[playerid][pMuanyag]+darab) > MAXMUANYAG) return Msg(playerid, "Ennyi nem fér el nálad!");
				CuccokAKocsiban[veh][0] -= darab;
				OsszesCuccAKocsiban[veh] -= darab;

				PlayerInfo[playerid][pMuanyag] += darab;
				format(string, sizeof(string), "Kivettél %d Mûanyagot a jármûbõl!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "kivett valamit a jármûbõl...");
				CsomagTartoMentes();
			}
			
			if(strcmp(tmp, "Material", true) == 0 || strcmp(tmp, "Mati", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/kipakol Material [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(CuccokAKocsiban[veh][12] <= 0)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "A kocsiban nincs Material!");
				    return 1;
				}
				if(PlayerInfo[playerid][pMats] >= MAXMATI)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Tele vagy!");
				    return 1;
				}
				if(CuccokAKocsiban[veh][12] < darab)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Material a kocsiban!");
				    return 1;
				}

				CuccokAKocsiban[veh][12] -= darab;

				PlayerInfo[playerid][pMats] += darab;
				format(string, sizeof(string), "Kivettél %d Materialt a jármûbõl!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "kivett valamit a jármûbõl...");
				CsomagTartoMentes();
			}
			
			if(strcmp(tmp, "Heroin", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/kipakol Heroin [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(CuccokAKocsiban[veh][13] <= 0)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "A kocsiban nincs Heroin!");
				    return 1;
				}
				if(PlayerInfo[playerid][pHeroin] >= MAXHEROIN)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Tele vagy!");
				    return 1;
				}
				if(CuccokAKocsiban[veh][13] < darab)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Heroin a kocsiban!");
				    return 1;
				}

				CuccokAKocsiban[veh][13] -= darab;

				PlayerInfo[playerid][pHeroin] += darab;
				format(string, sizeof(string), "Kivettél %d Heroint a jármûbõl!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "kivett valamit a jármûbõl...");
				CsomagTartoMentes();
			}
			
			if(strcmp(tmp, "Kokain", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/kipakol Kokain [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(CuccokAKocsiban[veh][14] <= 0)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "A kocsiban nincs Kokain!");
				    return 1;
				}
				if(PlayerInfo[playerid][pKokain] >= MAXKOKAIN)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Tele vagy!");
				    return 1;
				}
				if(CuccokAKocsiban[veh][14] < darab)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Kokain a kocsiban!");
				    return 1;
				}

				CuccokAKocsiban[veh][14] -= darab;

				PlayerInfo[playerid][pKokain] += darab;
				format(string, sizeof(string), "Kivettél %d Kokaint a jármûbõl!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "kivett valamit a jármûbõl...");
				CsomagTartoMentes();
			}
			
			if(strcmp(tmp, "Marihuana", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "/kipakol Marihuana [mennyiség]");
				    return 1;
				}
				new darab = dbx;
				if(CuccokAKocsiban[veh][15] <= 0)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "A kocsiban nincs Marihuana!");
				    return 1;
				}
				if(PlayerInfo[playerid][pMarihuana] >= MAXMARIHUANA)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Tele vagy!");
				    return 1;
				}
				if(CuccokAKocsiban[veh][15] < darab)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Nincs ennyi Marihuana a kocsiban!");
				    return 1;
				}

				CuccokAKocsiban[veh][15] -= darab;

				PlayerInfo[playerid][pMarihuana] += darab;
				format(string, sizeof(string), "Kivettél %d Marihuanat a jármûbõl!", darab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				Cselekves(playerid, "kivett valamit a jármûbõl...");
				CsomagTartoMentes();
			}

        }
		return 1;
	}

 	/*if(strcmp(cmd, "/felvesz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Használata: /felvesz [cucc]");
			    SendClientMessage(playerid, COLOR_GRAD2, "Cuccok: Mûanyag(500FT)");
			    return 1;
			}

			if(strcmp(tmp, "Mûanyag", true) == 0 || strcmp(tmp, "Muanyag", true) == 0)
			{
			    if(!PlayerToPoint(3, playerid, 90.638587, -183.727081, 1.484375) && !PlayerToPoint(3, playerid,	-1688.1918,-17.7540,3.5547))
			    {
           			SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy a mûanyagfelvevõ helyen!");
			        return 1;
			    }

				if(PlayerInfo[playerid][pMuanyag] >= MAXMUANYAG)
			    {
			        format(string, sizeof(string), "Csak %d mûanyagot birsz el!", MAXMUANYAG);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
					return 1;
			    }
			    if(GetMoney(playerid) < 500)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs elég pénzed! 500FT!");
			        return 1;
			    }
			    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Felvettel 1 muanyagdobozt...", 3000, 3);
				PlayerInfo[playerid][pMuanyag]++;
				GiveMoney(playerid, -500);
				}

        }
		return 1;
	}*/

 	if(strcmp(cmd, "/szed", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Használata: /szed [növény]");
			    SendClientMessage(playerid, COLOR_GRAD2, "Növények: Cserje, Mák, Cannabis");
			    return 1;
			}

			if(MunkaFolyamatban[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Már dolgozol, ne siess annyira...");
			    return 1;
			}

			if(strcmp(tmp, "cserje", true) == 0)
			{
			    if(!PlayerToPoint(3, playerid, 2588.215820, -641.467102, 135.409866) && !PlayerToPoint(3, playerid, -1704.4165,597.0209,24.8906))
			    {
           		SendClientMessage(playerid, COLOR_LIGHTRED, "A közeledben nincs Kokacserje");
       			return 1;
       		}
			    if(PlayerInfo[playerid][pCserje] >= MAXCSERJE)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Tele vagy kokacserjével, a végén még elájulsz tõle...");
					return 1;
			    }
			    MunkaFolyamatban[playerid] = 1;
			    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Elkezdted szedni...", 3000, 3);
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
				SetTimerEx("Munkavege", MunkaIdo[0], false, "ddd", playerid, M_CSERJE, 0);
			}

			if(strcmp(tmp, "mák", true) == 0 || strcmp(tmp, "mak", true) == 0)
			{
			    if(!PlayerToPoint(3, playerid, 2575.530273, -647.375915, 136.372055) && !PlayerToPoint(3, playerid, -1686.1675,603.4606,24.8906))
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy Mákbokor közelében");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pMak] >= MAXMAK)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Tele vagy máklevéllel, elõbb ezeket használd fel!");
					return 1;
			    }
			    MunkaFolyamatban[playerid] = 1;
			    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Elkezdted szedni, kerlek varj!", 3000, 3);
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
				SetTimerEx("Munkavege", MunkaIdo[1], false, "ddd", playerid, M_MAK, 0);
			}

			if(strcmp(tmp, "cannabis", true) == 0)
			{
			    if(!PlayerToPoint(3, playerid, 2575.528564, -634.857604, 135.663269) && !PlayerToPoint(3, playerid, -1713.2587,577.2521,26.1177))
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy Cannabisbokor közelében");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pCannabis] >= MAXCANNABIS)
			    {
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Tele vagy Cannabissal, elõbb ezeket használd fel!");
					return 1;
			    }
			    MunkaFolyamatban[playerid] = 1;
			    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Elkezdted szedni, kerlek varj!", 3000, 3);
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
				SetTimerEx("Munkavege", MunkaIdo[2], false, "ddd", playerid, M_CANNABIS, 0);
			}

        }
		return 1;
	}

	if(strcmp(cmd, "/ajto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsScripter(playerid))
				return 1;

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "====[ Legközelebbi ajtó ]=====");
				new Float:PPos[3], Float:legkozelebb = 5000.0, Float:tav, ajto;
				GetPlayerPos(playerid, PPos[0], PPos[1], PPos[2]);
				for(new x = 0; x < sizeof(Ajtok); x++)
				{
					if(Ajtok[x][Van] != 1) continue;
					tav = GetDistance(PPos[0], PPos[1], PPos[2], Ajtok[x][BeX], Ajtok[x][BeY], Ajtok[x][BeZ]);
					if(tav < legkozelebb)
					{
						legkozelebb = tav;
						ajto = x;
					}
				}
				SendFormatMessage(playerid, COLOR_GREY, "ID: %d", ajto);
				SendFormatMessage(playerid, COLOR_GREY, "Név: %s", Ajtok[ajto][Nev]);
				SendFormatMessage(playerid, COLOR_GREY, "Táv: %f", legkozelebb);
			    return 1;
			}

			new ajtoszama = strval(tmp);

			if(ajtoszama < 0 || ajtoszama >= sizeof(Ajtok))
				return Msg(playerid, "Nincs ilyen ajtó!");

			if(Ajtok[ajtoszama][Van] != 1)
				return Msg(playerid, "Nincs ilyen ajtó!");

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SetPlayerCheckpoint(playerid, Ajtok[ajtoszama][BeX], Ajtok[ajtoszama][BeY], Ajtok[ajtoszama][BeZ], 1);
			    return 1;
			}

			new jarat = strval(tmp);
			if(jarat != 88 && jarat != 99 && jarat != 1 && jarat != 2 && jarat != 5)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "1 vagy 2?");
			    return 1;
			}
			/*if(!IsFoAdmin(playerid))
			{
			SendClientMessage(playerid, COLOR_YELLOW, "Ezt hívják szánalomnak barátom.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "<< %s próbálkozott az ajto parancsal!(Auto Kick) Vissza jön bannold! >>", sendername, giveplayer);
			ABroadCast(COLOR_LIGHTRED, string, 1);
			Kick(playerid);
			return 1;
			}*/

	        new Float:x, Float:y, Float:z, Interior, VW;
			GetPlayerPos(playerid, x, y, z);
			Interior = GetPlayerInterior(playerid);
			VW = GetPlayerVirtualWorld(playerid);

			if(jarat == 88)
			{
				Tele(playerid, Ajtok[ajtoszama][BeX], Ajtok[ajtoszama][BeY], Ajtok[ajtoszama][BeZ], false, Ajtok[ajtoszama][BeVW], Ajtok[ajtoszama][BeInt]);
				SendFormatMessage(playerid, COLOR_GREY, "Teleportálva a %d. számú ajtó bejáratához!", ajtoszama);
			}
			else if(jarat == 99)
			{
				Tele(playerid, Ajtok[ajtoszama][KiX], Ajtok[ajtoszama][KiY], Ajtok[ajtoszama][KiZ], false, Ajtok[ajtoszama][KiVW], Ajtok[ajtoszama][KiInt]);
				SendFormatMessage(playerid, COLOR_GREY, "Teleportálva a %d. számú ajtó kijáratához!", ajtoszama);
			}
			else if(jarat == 1)
			{
		        Ajtok[ajtoszama][BeX] = x;
		        Ajtok[ajtoszama][BeY] = y;
	    	    Ajtok[ajtoszama][BeZ] = z;
	        	Ajtok[ajtoszama][BeInt] = Interior;
		        Ajtok[ajtoszama][BeVW] = VW;

				#if defined KELLAJTOPICKUP
		        DestroyDynamicPickup(AjtoPickup[ajtoszama]);
		        AjtoPickup[ajtoszama] = UjPickup(1318, 23, x, y, z);
				#endif

				format(string, sizeof(string), "Ajtó %d bejárata átrakva!", ajtoszama);
			}
			else if(jarat == 2)
			{
		        Ajtok[ajtoszama][KiX] = x;
	    	    Ajtok[ajtoszama][KiY] = y;
	        	Ajtok[ajtoszama][KiZ] = z;
		        Ajtok[ajtoszama][KiInt] = Interior;
		        Ajtok[ajtoszama][KiVW] = VW;
				new ajtoki[64];
				format(ajtoki, sizeof(ajtoki), "[Kijárat]%s", Ajtok[ajtoszama][Nev]);
				ajtokitext[ajtoszama] = CreateDynamic3DTextLabel(ajtoki, 0x22AAFFFF, Ajtok[ajtoszama][KiX], Ajtok[ajtoszama][KiY], Ajtok[ajtoszama][KiZ]+0.5, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Ajtok[ajtoszama][KiVW], Ajtok[ajtoszama][KiInt], NINCS, 25.0);
	    	    format(string, sizeof(string), "Ajtó %d kijárata átrakva!", ajtoszama);
			}
			else if(jarat == 3)
			{
			    if(Ajtok[ajtoszama][Zarva] != 1)
				{
		    	    Ajtok[ajtoszama][Zarva] = 1;
		    	    format(string, sizeof(string), "Ajtó %d zárva!");
    			}
    			else
    			{
    			    Ajtok[ajtoszama][Zarva] = 0;
    			    format(string, sizeof(string), "Ajtó %d nyitva!");
    			}
			}
			else if(jarat == 5)
			{

				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[32];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;

				if(!strlen(result))
				{
				    SendClientMessage(playerid, COLOR_RED, "És a név?");
				    return 1;
				}
				Ajtok[ajtoszama][Nev] = result;
				format(string, sizeof(string), "Az ajtó (#%d) új neve [%s]", ajtoszama, result);

			}

			if(jarat != 88 && jarat != 99)
	        SendClientMessage(playerid, COLOR_GREEN, string);
			OnAjtoUpdate();
		}
		return 1;
	}


	if(egyezik(cmd, "/deleteajto"))
	{
			for(new p = 0; p < MAXAJTO; p++)
	        {
				if(PlayerToPoint(2, playerid, Ajtok[p][BeX], Ajtok[p][BeY], Ajtok[p][BeZ]))
				{
					Ajtok[p][Van] = false;
					Ajtok[p][BeX] = 0.0;
					Ajtok[p][BeY] = 0.0;
					Ajtok[p][BeZ] = 0.0;
					Ajtok[p][KiX] = 0.0;
					Ajtok[p][KiY] = 0.0;
					Ajtok[p][KiZ] = 0.0;
					DestroyDynamic3DTextLabel(ajtobetext[p]);
					DestroyDynamic3DTextLabel(ajtokitext[p]);
					SendClientMessage(playerid, COLOR_GREEN, "Közeledben lévõ ajtó törölve..");
					OnAjtoUpdate();
	                return 1;
             	}
	        }
	}
				
	if(strcmp(cmd, "/ujajto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsScripter(playerid)) return 1;

	        for(new p = 0; p < MAXAJTO; p++)
	        {
	            if(Ajtok[p][Van] == 1 && PlayerToPoint(5, playerid, Ajtok[p][BeX],Ajtok[p][BeY],Ajtok[p][BeZ])){
	                SendClientMessage(playerid, COLOR_RED, "Itt már van egy ajtó!");
	                return 1;
             	}
	        }

	        /*if(!IsFoAdmin(playerid))
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Ezt hívják szánalomnak barátom.");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "<< %s próbálkozott az újajto parancsal!(Auto Kick) Vissza jön bannold! >>", sendername, giveplayer);
				ABroadCast(COLOR_LIGHTRED, string, 1);
				Kick(playerid);
				return 1;
			}*/

	        new ajtoszama = -1;
	        for(new o = 0; o < MAXAJTO; o++)
	        {
	            if(ajtoszama == -1 && Ajtok[o][Van] == 0)
	                ajtoszama = o;
	        }

	        if(ajtoszama == -1){
	            SendClientMessage(playerid, COLOR_RED, "Az ajtók száma elérte a maximumot!");
	            return 1;
	        }

			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[32];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;

			new alap[16];
			alap = "All";

			new nev[32];
			nev = "Bejarat";
			if(!strlen(result))
			    result = nev;

	        new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);

	        Ajtok[ajtoszama][Van] = 1;
	        Ajtok[ajtoszama][Csak] = alap;
	        Ajtok[ajtoszama][Nev] = result;
	        Ajtok[ajtoszama][BeX] = x;
	        Ajtok[ajtoszama][BeY] = y;
	        Ajtok[ajtoszama][BeZ] = z;
	        Ajtok[ajtoszama][BeInt] = GetPlayerInterior(playerid);
	        Ajtok[ajtoszama][BeVW] = GetPlayerVirtualWorld(playerid);
	        Ajtok[ajtoszama][KiX] = 0.000000;
	        Ajtok[ajtoszama][KiY] = 0.000000;
	        Ajtok[ajtoszama][KiZ] = 0.000000;
	        Ajtok[ajtoszama][KiInt] = 0;
	        Ajtok[ajtoszama][KiVW] = 0;
	        Ajtok[ajtoszama][Zarva] = 0;

			#if defined KELLAJTOPICKUP
			AjtoPickup[ajtoszama] = UjPickup(1318, 23, x, y, z);
			#endif

			new ajtobe[64];
			format(ajtobe, sizeof(ajtobe), "[Bejárat]%s", Ajtok[ajtoszama][Nev]);
			ajtobetext[ajtoszama] = CreateDynamic3DTextLabel(ajtobe, 0x22AAFFFF, Ajtok[ajtoszama][BeX], Ajtok[ajtoszama][BeY], Ajtok[ajtoszama][BeZ]+0.5, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Ajtok[ajtoszama][BeVW], Ajtok[ajtoszama][BeInt], NINCS, 25.0);

			format(string, sizeof(string), "Sikeresen leraktál egy ajtót (#%d)! A másik felét is add meg! /ajto [id] [1/2]", ajtoszama);
	        SendClientMessage(playerid, COLOR_GREEN, string);
			OnAjtoUpdate();
		}
		return 1;
	}

	if(strcmp(cmd, "/pickdel", true) == 0)
	{
	    if (IsScripter(playerid))
	    {
   			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "Te mit csinálsz?");
			new pickid;
			pickid = strval(tmp);
		 	format(string, sizeof(string), "Pickup %d törölve!", pickid);
		 	SendClientMessage(playerid, COLOR_GREEN, string);
		    DestroyDynamicPickup(pickid);
	    }
	    return 1;
    }

	if(strcmp(cmd, "/ujpick", true) == 0)
	{
	    if(IsScripter(playerid))
	    {
   			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "Te mit csinálsz?");
			new pickup, pickid, Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			pickup = strval(tmp);
		 	pickid = UjPickup(pickup, 23, x, y, z);
		 	format(string, sizeof(string), "Pickup kész! Pickup: %d, ID:%d", pickup, pickid);
		 	SendClientMessage(playerid, COLOR_GREEN, string);
	    }
	    return 1;
    }

	if(strcmp(cmd, "/ujbiznev", true) == 0)
	{
	    if(IsScripter(playerid))
	    {

			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "És a név?");
				return 1;
			}

			if(HibasBizNev(result))
				return Msg(playerid, "Hibás biznisz név!");

			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
	    			format(string, sizeof(string), "Biz %d neve átirva!",i);
					SendClientMessage(playerid, COLOR_GREEN, string);

	    			format(string, sizeof(string), "Régi neve: [%s]", i, BizzInfo[i][bMessage]);
					SendClientMessage(playerid, COLOR_GREEN, string);

	    			format(string, sizeof(string), "Új neve: [%s]", i, result);
					SendClientMessage(playerid, COLOR_GREEN, string);

					BizzInfo[i][bMessage] = result;
					//BizUpdate(i, "Nev='%s'", result);
					BizUpdate(i, BIZ_Message);
					return 1;
				}
   			}

			SendClientMessage(playerid, COLOR_RED, "Nem vagy a biznél!");
	    }
	    return 1;
   }
	if(egyezik(cmd, "/biz"))
	{
		if(!Admin(playerid, 5)) return 1;
		if(params < 2)
		{
			if(!Admin(playerid, 1337))
			{
				Msg(playerid, "/biz [Funkció] [BizID]");
				Msg(playerid, "Funkciók: open, go");
				return 1;
			}
			Msg(playerid, "/biz [Funkció] [BizID]");
			Msg(playerid, "Funkciók: open, go, enter(Bejárat áthelyezése), exit(Kijárat áthelyezése)");
			return 1;
		}
		new bizszam = strval(param[2]);
		if(egyezik(param[1], "open"))
		{	
			if(BizzInfo[bizszam][bLocked])
			{			
				BizzInfo[bizszam][bLocked] = 0; 
				Msg(playerid, "Nyitva");
				ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s kinyitotta a %d számú bizniszt. >>", AdminName(playerid), bizszam);
			}	
			else
			{
				BizzInfo[bizszam][bLocked] = 1;
				Msg(playerid, "Zárva");
				ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s bezárta a %d számú bizniszt. >>", AdminName(playerid), bizszam);
			}	
		}
		if(egyezik(param[1], "go"))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,BizzInfo[bizszam][bEntranceX],BizzInfo[bizszam][bEntranceY],BizzInfo[bizszam][bEntranceZ]);
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Teleportálva a biznisz bejáratához(%d - %s).", bizszam, BizzInfo[bizszam][bMessage]);
			ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s teleportált a %d számú bizniszhez. >>", AdminName(playerid), bizszam);
		}
		if(egyezik(param[1], "enter"))
		{
			if(!Admin(playerid, 1337)) return 1;
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid,x,y,z);
			BizzInfo[bizszam][bEntranceX] = x;
			BizzInfo[bizszam][bEntranceY] = y;
			BizzInfo[bizszam][bEntranceZ] = z;
			DestroyDynamicPickup(BizPickup[bizszam]);
			
				if(BizzInfo[bizszam][bOwned] == 0)
					BizPickup[bizszam] = UjPickup(1272, 23, BizzInfo[bizszam][bEntranceX], BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ]);
				if(BizzInfo[bizszam][bOwned] == 1)
					BizPickup[bizszam] = UjPickup(1274, 23, BizzInfo[bizszam][bEntranceX], BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ]);
					
				if(bizszam == 0){ //FEGYVERBOLT 1
					DestroyDynamicMapIcon(bizpick0);
					bizpick0 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 18, 0, NINCS, NINCS, NINCS, 300.0); }//FEGYVERBOLT 1
				if(bizszam == 2){ // ÉTTEREM
					DestroyDynamicMapIcon(bizpick2);
					bizpick2 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 50, 0, NINCS, NINCS, NINCS, 300.0);  }//ÉTTEREM
				if(bizszam == 3){ // TUNING
					DestroyDynamicMapIcon(bizpick3);
					bizpick3 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 27, 0, NINCS, NINCS, NINCS, 300.0); }// TUNING
				if(bizszam == 4){ // AUTÓBÉRLÕ1
					DestroyDynamicMapIcon(bizpick4);
					bizpick4 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 43, 0, NINCS, NINCS, NINCS, 300.0); }// AUTÓBÉRLÕ 1
				if(bizszam == 6){ // TELEFON
					DestroyDynamicMapIcon(bizpick6);
					bizpick6 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 13, 0, NINCS, NINCS, NINCS, 300.0); }// TELEFON
				if(bizszam == 7){ // OLAJ
					DestroyDynamicMapIcon(bizpick7);
					bizpick7 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 40, 0, NINCS, NINCS, NINCS, 300.0); }// OLAJ
				if(bizszam == 8){ // REZSI
					DestroyDynamicMapIcon(bizpick8);
					bizpick8 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 35, 0, NINCS, NINCS, NINCS, 300.0); }// REZSI
				if(bizszam == 9){ // IMPORT CSERE
					DestroyDynamicMapIcon(bizpick9);
					bizpick9 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 36, 0, NINCS, NINCS, NINCS, 300.0); }// IMPORT CSERE
				if(bizszam == 10){ // HAZ
					DestroyDynamicMapIcon(bizpick10);
					bizpick10 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 31, 0, NINCS, NINCS, NINCS, 300.0); }// HAZ
				if(bizszam == 11){ // HIRDETES
					DestroyDynamicMapIcon(bizpick11);
					bizpick11 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 46, 0, NINCS, NINCS, NINCS, 300.0); }// HIRDETES
				if(bizszam == 12){ // JAVITÓ
					DestroyDynamicMapIcon(bizpick12);
					bizpick12 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 63, 0, NINCS, NINCS, NINCS, 300.0); }// JAVITÓ
				if(bizszam == 13){ // 24/7
					DestroyDynamicMapIcon(bizpick13);
					bizpick13 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 47, 0, NINCS, NINCS, NINCS, 300.0); }// 24/7
				if(bizszam == 14){ // PAINTBGALL
					DestroyDynamicMapIcon(bizpick14);
					bizpick14 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 56, 0, NINCS, NINCS, NINCS, 300.0); }// PB
				if(bizszam == 16){ // MCDONALD
					DestroyDynamicMapIcon(bizpick16);
					bizpick16 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 17, 0, NINCS, NINCS, NINCS, 300.0); }// MCDONALD
				if(bizszam == 17){ // CSIRKE
					DestroyDynamicMapIcon(bizpick17);
					bizpick17 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 14, 0, NINCS, NINCS, NINCS, 300.0); }// CSIRKE
				if(bizszam == 18){ // PIZZA
					DestroyDynamicMapIcon(bizpick18);
					bizpick18 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 29, 0, NINCS, NINCS, NINCS, 300.0); }// PIZZA
				if(bizszam == 19){ // KOCSMA
					DestroyDynamicMapIcon(bizpick19);
					bizpick19 = CreateDynamicMapIcon(BizzInfo[bizszam][bEntranceX],  BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ], 49, 0, NINCS, NINCS, NINCS, 300.0); }// KOCSMA
					
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "A biznisz(%d - %s) bejárata átrakva.",bizszam, BizzInfo[bizszam][bMessage]);
				ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s áthelyezte a %d számú biznisz bejáratát. >>", AdminName(playerid), bizszam);
				BizUpdate(bizszam, BIZ_X, BIZ_Y, BIZ_Z);
		}
		if(egyezik(param[1], "exit"))
		{
			if(!Admin(playerid, 1337)) return 1;
			new Float:x, Float:y, Float:z, inti = GetPlayerInterior(playerid);
			GetPlayerPos(playerid,x,y,z);
			BizzInfo[bizszam][bExitX] = x;
			BizzInfo[bizszam][bExitY] = y;
			BizzInfo[bizszam][bExitZ] = z;

			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "A biznisz(%d - %s) kijárata átrakva.",bizszam, BizzInfo[bizszam][bMessage]);
			ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s áthelyezte a %d számú biznisz kijáratát. >>", AdminName(playerid), bizszam);
			if(inti > 0)
			{
				BizzInfo[bizszam][bInterior] = inti;
				BizUpdate(bizszam, BIZ_ExitX, BIZ_ExitY, BIZ_ExitZ, BIZ_Interior);
			}
			else
				BizUpdate(bizszam, BIZ_ExitX, BIZ_ExitY, BIZ_ExitZ);
		}
	}
	/*if(strcmp(cmd, "/ujbizhely", true) == 0)
	{
	    if (IsScripter(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "Te mit csinálsz?");

			new bizszam = strval(tmp);

			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid,x,y,z);
			BizzInfo[bizszam][bEntranceX] = x;
			BizzInfo[bizszam][bEntranceY] = y;
			BizzInfo[bizszam][bEntranceZ] = z;
			DestroyDynamicPickup(BizPickup[bizszam]);

			if(BizzInfo[bizszam][bOwned] == 0)
				BizPickup[bizszam] = UjPickup(1272, 23, BizzInfo[bizszam][bEntranceX], BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ]);
			if(BizzInfo[bizszam][bOwned] == 1)
				BizPickup[bizszam] = UjPickup(1239, 23, BizzInfo[bizszam][bEntranceX], BizzInfo[bizszam][bEntranceY], BizzInfo[bizszam][bEntranceZ]);

			format(string, sizeof(string), "Biz %d átrakva! [%s]",bizszam, BizzInfo[bizszam][bMessage]);
			SendClientMessage(playerid, COLOR_GREEN, string);
			//BizUpdate(bizszam, "BeX='%f', BeY='%f', BeZ='%f'", x, y, z);
			BizUpdate(bizszam, BIZ_X, BIZ_Y, BIZ_Z);
	    }
	    return 1;
   }*/

	if(strcmp(cmd, "/goigénylés", true) == 0 || strcmp(cmd, "/goigenyles", true) == 0)
	{
	    if (PlayerInfo[playerid][pAdmin] >= 1337)
	    {
			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "/goigénylés [id]");

			new szam = strval(tmp);
			if(szam >= MAXIGENYLES || szam < 0 || HazIgenylesek[szam][Van] != 1){
			    SendClientMessage(playerid, COLOR_RED, "Nics ilyen igénylés");
			    return 1;
			}

			SetPlayerPos(playerid,HazIgenylesek[szam][iX],HazIgenylesek[szam][iY],HazIgenylesek[szam][iZ]);

			format(string,sizeof(string), "Odateleportáltál az igényléshez [%d] (Igénylõ:%s | Belsõ:%d)",szam,HazIgenylesek[szam][Nev],HazIgenylesek[szam][Belso]);
			SendClientMessage(playerid, COLOR_GREEN, string);
	    }
	    return 1;
  	}

	if(strcmp(cmd, "/házigényléstörlése", true) == 0 || strcmp(cmd, "/hazigenylestorlese", true) == 0)
	{
	    if (PlayerInfo[playerid][pAdmin] >= 1337)
	    {
			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "/házigényléstörlése [id]");

			new szam = strval(tmp);
			if(HazIgenylesek[szam][Van] != 1){
			    SendClientMessage(playerid, COLOR_RED, "Nics ilyen igénylés");
			    return 1;
			}

			new nev[MAX_PLAYER_NAME] = "Senki";
			HazIgenylesek[szam][Van] = 0;
			HazIgenylesek[szam][Belso] = 0;
			HazIgenylesek[szam][Nev] = nev;
			HazIgenylesek[szam][iX] = 0.000000;
			HazIgenylesek[szam][iY] = 0.000000;
			HazIgenylesek[szam][iZ] = 0.000000;

			OnIgenyUpdate();
			format(string,sizeof(string), "%d. igény törölve",szam);
			SendClientMessage(playerid, COLOR_GREEN, string);
	    }
	    return 1;
  	}

	if(strcmp(cmd, "/házigénylések", true) == 0 || strcmp(cmd, "/hazigenylesek", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
            SendClientMessage(playerid, COLOR_GRAD2, "=====HÁZIGÉNYLÉSEK=====");
			for(new o = 0; o < MAXIGENYLES; o++)
			{
				if(HazIgenylesek[o][Van] == 1)
					format(string, sizeof(string), "[%d]Név: %s | Belsõ: %d", o, HazIgenylesek[o][Nev], HazIgenylesek[o][Belso]);
				else
                    format(string, sizeof(string), "[%d]Szabad", o);
				SendClientMessage(playerid, COLOR_GREEN, string);
			}
			SendClientMessage(playerid, COLOR_GRAD2, "========================");
			SendClientMessage(playerid, COLOR_GRAD2, "Igénylés: /házigénylés");
		}
		return 1;
	}

	if(strcmp(cmd, "/házigényléside", true) == 0 || strcmp(cmd, "/hazigenyleside", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Nincsbelepve(playerid)) return 1;

			if(IgenylesEngedelyezve == 0)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "A Házmesterek Zrt jelenleg nem kíván több házat építeni!");

   			GetPlayerName(playerid, playername, sizeof(playername));
	        new house = PlayerInfo[playerid][pPhousekey];
	        if (house != NINCS){
	            SendClientMessage(playerid, COLOR_RED, "Már van házad, vagy bérben laksz!");
	            return 1;
	        }

	        for(new p = 0; p < MAXIGENYLES; p++)
	        {
	            if(strcmp(playername, HazIgenylesek[p][Nev], true) == 0){
	                SendClientMessage(playerid, COLOR_RED, "Már igényeltél bazd+ mi a fasznak neked 200 ház?? Többieknek is kéne!");
	                return 1;
             	}
	        }

	        new igenyszama = -1;
	        for(new o = 0; o < MAXIGENYLES; o++)
	        {
	            if(igenyszama == -1 && HazIgenylesek[o][Van] == 0)
	                igenyszama = o;
	        }

	        if(igenyszama == -1){
	            SendClientMessage(playerid, COLOR_RED, "A házigénylés betelt! Igényelj, ha lesz szabad hely!");
	            return 1;
	        }

	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használata: /házigényléside [belso(1-37)]");
				return 1;
			}
			new belso = strval(tmp);

			if(belso < 1 || belso > 37)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Azt a rohadt érthetetlen pofád, nem fogod fel hogy 1-37???!!!");
				return 1;
			}

	        HazIgenylesek[igenyszama][Van] = 1;
	        HazIgenylesek[igenyszama][Belso] = belso;
	        HazIgenylesek[igenyszama][Nev] = playername;
			GetPlayerPos(playerid, HazIgenylesek[igenyszama][iX], HazIgenylesek[igenyszama][iY], HazIgenylesek[igenyszama][iZ]);

	        SendClientMessage(playerid, COLOR_GREEN, "Sikeresen igényelted ezt a házat! Várd meg míg egy Ház Mester megcsinálja!");
			format(string, sizeof(string), "* Valaki igényelt egy házat.");
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s\n", string);
			OnIgenyUpdate();
		}
		return 1;
	}

	if(strcmp(cmd, "/házigénylés", true) == 0 || strcmp(cmd, "/hazigenyles", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Nincsbelepve(playerid)) return 1;

			if(IgenylesEngedelyezve == 0)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "A Házmesterek Zrt jelenleg nem kíván több házat építeni!");

	        GetPlayerName(playerid, playername, sizeof(playername));
		    new house = PlayerInfo[playerid][pPhousekey];
	        if (house != NINCS){
	            SendClientMessage(playerid, COLOR_RED, "Már van házad, vagy bérben laksz!");
	            return 1;
	        }

	        for(new p = 0; p < MAXIGENYLES; p++)
	        {
	            if(strcmp(playername, HazIgenylesek[p][Nev], true) == 0){
	                SendClientMessage(playerid, COLOR_RED, "Már igényeltél! Mi a ráknak neked 200 ház?? Többieknek is kéne, nem?!");
	                return 1;
             	}
	        }

			SendClientMessage(playerid, COLOR_YELLOW,   "====================================================================");
			SendClientMessage(playerid, COLOR_YELLOW,   "Üdv! Szóval házat akarsz igényelni.");
			SendClientMessage(playerid, COLOR_YELLOW,   "A házigényléshez állj oda az ajtóhoz, ha lehet közel a bejárathoz.");
			SendClientMessage(playerid, COLOR_YELLOW,   "Ha ez megvan, akkor ird be azt, hogy /hazigenyleside");
			SendClientMessage(playerid, COLOR_YELLOW,   "DE CSAK AKKOR HA TÉLLEG IDE AKAROD A HÁZAD!");
			SendClientMessage(playerid, COLOR_YELLOW,   "HA 2X-ER IGÉNYELSZ, 1 NAP BAN!");
			SendClientMessage(playerid, COLOR_LIGHTRED, "HA NEM AZ AJTÓNÁL IROD BE A PARANCSOT LETÖRÖM A KEZED + 5ÓRA JAIL!!");
			SendClientMessage(playerid, COLOR_YELLOW,   "====================================================================");
		}
		return 1;
	}

	/*if(strcmp(cmd, "/fixcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != NINCS && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(BizzInfo[8][bProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Kifogyott", 5000, 1);
					return 1;
				}
				if(CarRespawn(HouseInfo[house][hVid]))
				{
					GameTextForPlayer(playerid, "~w~Kocsi~n~~g~Megjavitva~n~~r~$-2000", 5000, 3);
					GiveMoney(playerid,-2000);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					BizzInfo[8][bTill] += 2000;
					ExtortionSBiz(8, 2000);
					BizzInfo[8][bProducts]--;
				}
				else
				{
					GameTextForPlayer(playerid, "~w~A kocsit~n~hasznaljak...", 5000, 1);
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~Nincs hazad", 5000, 1);
			}
		}
		return 1;
	}
	*/

    if(strcmp(cmd, "/uzenet", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[128];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /uzenet [üzeneted]");
					return 1;
				}
				GameTextForAll(result,6000,3);
				return 1;
			}
		}
		return 1;
	}

    if(strcmp(cmd, "/uzenet2", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használata: /uzenet2 [stilus(0-6)] [üzeneted]");
				return 1;
			}
			new stilus = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[128];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használata: /uzenet2 [stilus(0-6)] [üzeneted]");
					return 1;
				}
				GameTextForAll(result,6000,stilus);
				return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/allcarrespawn", true) == 0 || egyezik(cmd, "/acr"))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1337)
	    {
			ResiCounter = 60;
			TextDrawShowForAll(resitd);
	    }
	    return 1;
  	}

	if(egyezik(cmd, "/acr30"))
	{
		if(!Admin(playerid, 1337)) return 1;
		ResiCounter = 30;
		TextDrawShowForAll(resitd);
	}

	if(egyezik(cmd, "/acrmost"))
	{
		if(!Admin(playerid, 1337)) return 1;
		ResiCounter = 0;
		TextDrawShowForAll(resitd);
	}

	if(strcmp(cmd, "/ujbelso", true) == 0)
	{
	    if(Admin(playerid, 1337))
	    {
			new hazszam, belso;
			if(params == 1)
			{
				hazszam = NINCS;
				for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if(PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
						hazszam = i;
				}

				if(hazszam == NINCS){
					SendClientMessage(playerid, COLOR_RED, "Nem vagy a ház bejáratánál! Távolról is átállíthatod: /ujbelso [házszám] [belsõ]");
					return 1;
				}
				belso = strval(param[1]);
			}
			else if(params == 2)
			{
				hazszam = strval(param[1]);
				belso = strval(param[2]);
				if(hazszam >= MAXHAZ || hazszam < 0 || HouseInfo[hazszam][Van] != 1)
					return Msg(playerid, "Nincs ilyen ház!");
			}
			else
				return Msg(playerid, "Használata: /ujbelso [belsõ], vagy távolról: /ujbelso [ház] [belsõ]");

			if(belso < 1 || belso > 37)
				return Msg(playerid, "Belsõ: Minimum 1 és max 37!");

			HouseInfo[hazszam][hBelso] = belso;

			format(string, sizeof(string), "Ház %d belseje lecserélve! (Belsõ:%d)",hazszam,belso);
			SendClientMessage(playerid, COLOR_GREEN, string);
			//HazUpdate(hazszam, "Belso='%d'", belso);
			HazUpdate(hazszam, HAZ_Belso);
	    }
	    return 1;
  	}

	if(strcmp(cmd, "/ujadatok", true) == 0)
	{
	    if(IsScripter(playerid))
	    {
			new hazak = sizeof(HouseInfo), hazszam = -1;
			for(new i = 0; i < hazak; i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				    hazszam = i;
    		}

    		if(hazszam == -1){
    		    SendClientMessage(playerid, COLOR_RED, "Nem vagy a ház bejáratánál!");
    		    return 1;
    		}

			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "Te mit csinálsz?");
			new ara = strval(tmp);

			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0) return SendClientMessage(playerid, COLOR_GRAD2, "/ujadatok [ára] [csak(0-1)] [csakneki(név)]");
			new csak = strval(tmp);

			new csakneki[MAX_PLAYER_NAME];

			if(csak == 1)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				while ((idx < length) && ((idx - offset) < (sizeof(csakneki) - 1)))
				{
					csakneki[idx - offset] = cmdtext[idx];
					idx++;
				}
				csakneki[idx - offset] = EOS;
				if(!strlen(csakneki))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "/ujadatok [ára] [csak(0-1)] [csakneki(név)]");
					return 1;
				}
			}
			else
			    csakneki = "Nemigenyles";

			HouseInfo[hazszam][hValue] = ara;
			HouseInfo[hazszam][hCsak] = csak;
			HouseInfo[hazszam][hCsakneki] = csakneki;

			if(csak == 0)
				format(string, sizeof(string), "Ház %d adatai átállitva! (Ára:%dFT)",hazszam,ara);
			else
			    format(string, sizeof(string), "Ház %d adatai átállitva! (Ára:%dFT | Csak neki:%s)",hazszam,ara,csakneki);
			SendClientMessage(playerid, COLOR_GREEN, string);
			//HazUpdate(hazszam, "Ara='%d', Csak='%d', Neki='%s'", ara, csak, csakneki);
			HazUpdate(hazszam, HAZ_Value, HAZ_Csak, HAZ_Csakneki);
	    }
	    return 1;
  	}

	if(strcmp(cmd, "/ujbejarat", true) == 0)
	{
	    if(!Admin(playerid, 1337)) return 1;
		
		if(params < 2)
		{
			Msg(playerid, "Használata: /ujbejarat [ház] [típus]");
			Msg(playerid, "1: Los Santos, 2: San Fierro");
			Msg(playerid, "3: GazdagNegyed, 4: Falu, 5: Tanya");
			return 1;
		}

		new hazszam = strval(param[1]), tipus = strval(param[2]);
		
		if(hazszam < 0 || hazszam >= MAXHAZ || HouseInfo[hazszam][Van] != 1)
		    return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen ház");
			
		if(tipus < 1 || tipus > 5)
			return Msg(playerid, "Hibás típus!");
			
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		HouseInfo[hazszam][hEntrancex] = x;
		HouseInfo[hazszam][hEntrancey] = y;
		HouseInfo[hazszam][hEntrancez] = z;
		HouseInfo[hazszam][hTipus] = tipus;
		DestroyDynamicPickup(HazPickup[hazszam]);

		if(HouseInfo[hazszam][hOwned] == 0)
			HazPickup[hazszam] = UjPickup(1273, 23, HouseInfo[hazszam][hEntrancex], HouseInfo[hazszam][hEntrancey], HouseInfo[hazszam][hEntrancez]);
			
		if(HouseInfo[hazszam][hOwned] == 1)
			HazPickup[hazszam] = UjPickup(1239,23, HouseInfo[hazszam][hEntrancex], HouseInfo[hazszam][hEntrancey], HouseInfo[hazszam][hEntrancez]);
			
		format(string, sizeof(string), "Ház %d bejárata átrakva!",hazszam);
		SendClientMessage(playerid, COLOR_GREEN, string);
		//HazUpdate(hazszam, "X='%f', Y='%f', Z='%f'", x, y, z);
		HazUpdate(hazszam, HAZ_X, HAZ_Y, HAZ_Z);
	    return 1;
  	}

	if(strcmp(cmd, "/ujhaz", true) == 0)
	{
	    if(IsScripter(playerid) || Tamasi[playerid])
	    {
			new ureshaz = UresHazKereses();
	        if(ureshaz == -1)
	        {
				format(string, sizeof(string), "Max %d a megengedett ház!", sizeof(HouseInfo));
				SendClientMessage(playerid, COLOR_RED, string);
				return 1;
			}

			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0) return SendClientMessage(playerid, COLOR_GRAD2, "/ujhaz [belso(1-37)] [ára] [csak(0-1)] [csakneki(név)]");
			new interior = strval(tmp);

			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0) return SendClientMessage(playerid, COLOR_GRAD2, "/ujhaz [belso(1-37)] [ára] [csak(0-1)] [csakneki(név)]");
			new cost = strval(tmp);

			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0) return SendClientMessage(playerid, COLOR_GRAD2, "/ujhaz [belso(1-37)] [ára] [csak(0-1)] [csakneki(név)]");
			new csak = strval(tmp);

			new csakneki[MAX_PLAYER_NAME];

			if(interior < 1 || interior > 37)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "1-37 legyen az inti szám!");
				return 1;
			}

			if(csak == 1)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				while ((idx < length) && ((idx - offset) < (sizeof(csakneki) - 1)))
				{
					csakneki[idx - offset] = cmdtext[idx];
					idx++;
				}
				csakneki[idx - offset] = EOS;
				if(!strlen(csakneki))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "/ujhaz [belso] [ára] [csak(0-1)] [csakneki(név)]");
					return 1;
				}
			}
			else
			    csakneki = "Nemigenyles";

			new nev[MAX_PLAYER_NAME] = "Nincs_Tulaj";

			new Float:x, Float:y, Float:z;
   			GetPlayerPos(playerid, x, y, z);

			//printf("ID:%d Parancs:/ujhaz %d %d",playerid,interior,cost);
			//printf("Uj haz berakasa folyamatban...");

			HouseInfo[ureshaz][Van] = 1;
			HouseInfo[ureshaz][Uj] = 1;

			HouseInfo[ureshaz][hEntrancex] = x;
			HouseInfo[ureshaz][hEntrancey] = y;
			HouseInfo[ureshaz][hEntrancez] = z;
			HouseInfo[ureshaz][hBelso] = interior;
			HouseInfo[ureshaz][hHealth] = 0;
			HouseInfo[ureshaz][hArmour] = 0;
			HouseInfo[ureshaz][hOwner] = nev;
			HouseInfo[ureshaz][hValue] = cost;
			HouseInfo[ureshaz][hHel] = 0;
			HouseInfo[ureshaz][hArm] = 0;
			HouseInfo[ureshaz][hLock] = 0;
			HouseInfo[ureshaz][hOwned] = 0;
			HouseInfo[ureshaz][hRooms] = 0;
			HouseInfo[ureshaz][hRent] = 500;
			HouseInfo[ureshaz][hRentabil] = 0;
			HouseInfo[ureshaz][hTakings] = 0;
			HouseInfo[ureshaz][hDate] = 0;
			HouseInfo[ureshaz][hCsak] = csak;
			HouseInfo[ureshaz][hCsakneki] = csakneki;
			HouseInfo[ureshaz][hCigi] = 0;
			HouseInfo[ureshaz][hKaja] = 0;
			HouseInfo[ureshaz][hKokain] = 0;
			HouseInfo[ureshaz][hHeroin] = 0;
			HouseInfo[ureshaz][hMati] = 0;

			//printf("Uj haz adatai elmentve!");

			if(csak != 1)
				format(string, sizeof(string), "Az új ház elkészült! Száma %d! (Belsõ %i, Ára %iFT)", ureshaz,interior,cost);
			else
			    format(string, sizeof(string), "Az új ház elkészült! Száma %d! (Belsõ %i, Ára %iFT, Csak neki: %s)", ureshaz,interior,cost, csakneki);
			SendClientMessage(playerid, COLOR_GREEN, string);

			SetPlayerPos(playerid,IntInfo[interior][iExitX],IntInfo[interior][iExitY],IntInfo[interior][iExitZ]);
			SetPlayerInterior(playerid, IntInfo[interior][iNumber]);
			SetPlayerVirtualWorld(playerid, ureshaz);
			HazPickup[ureshaz] = UjPickup(1273, 23, x,y,z);

			new nevek[128], adatok[256];
			nevek = "ID, Eladva, Tulaj, Csak, Neki, X, Y, Z, Ara, Belso";
			Format(adatok, "'%d', '0', 'Nincs_Tulaj', '%d', '%s', '%f', '%f', '%f', '%d', '%d'", ureshaz, csak, csakneki, x, y, z, cost, interior);
			Mysql_Insert(SQL_DB_Hazak, nevek, adatok);

	    }
	    return 1;
	}

	if(strcmp(cmd, "/apark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
            if(!Admin(playerid, 2)) return 1;

            new Float:x,Float:y,Float:z;
			new Float:a;
			new carid;

			carid = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, carid) > 5.5)
				return Msg(playerid, "A közeledben nincs jármû!");
			
			new kocsi = IsAVsKocsi(carid);

			if(kocsi == NINCS)
				return SendClientMessage(playerid, COLOR_GREY, "Ez a jármû nem v-s kocsi!");

			GetVehiclePos(carid, x, y, z);
			GetVehicleZAngle(carid, a);

			CarInfo[kocsi][cLocationx] = x;
			CarInfo[kocsi][cLocationy] = y;
			CarInfo[kocsi][cLocationz] = z;
			CarInfo[kocsi][cAngle] = a;

			ParkCar(kocsi, x, y, z, a);

			if(CarInfo[kocsi][cOwned])
				format(string, sizeof(string), "~n~~g~V-s kocsi %d leparkolva~n~Tulaj: %s", kocsi, CarInfo[kocsi][cOwner]);
			else
				format(string, sizeof(string), "~n~~g~V-s kocsi %d leparkolva~n~Tulaj: Nincs", kocsi, CarInfo[kocsi][cOwner]);
			GameTextForPlayer(playerid, string, 10000, 3);
			
			if(IsPlayerInVehicle(playerid, carid))
			{
				SetPlayerPos(playerid,x,y,z+1);
				TogglePlayerControllable(playerid, 1);
			}

		}
		return 1;
	}

	if(strcmp(cmd, "/ujmodel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(!Admin(playerid, 1337)) return 1;

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /ujmodel [model]");
				return 1;
			}
			new model;
			model = GetVehicleModelIDFromName(tmp);

			if(model == -1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Ilyen kocsiról még nem hallottam...");
			    return 1;
			}

			new kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 5.0) return Msg(playerid, "Nincs jármû a közeledben!");
			
			new vs = IsAVsKocsi(kocsi);
			if(vs == NINCS) return Msg(playerid, "Ez nem V-s!");

			CarInfo[vs][cModel] = model;
			DestroyVehicle(kocsi);
			CarInfo[vs][cId] = UjKocsi(model, CarInfo[vs][cLocationx], CarInfo[vs][cLocationy], CarInfo[vs][cLocationz], CarInfo[vs][cAngle], CarInfo[vs][cColorOne], CarInfo[vs][cColorTwo]);

			//CarUpdate(vs, "Model='%d'", model);
			CarUpdate(vs, CAR_Model);
			UnFreeze(playerid);
			
			SendFormatMessage(playerid, COLOR_LIGHTRED, "V-s [%d] kocsiátalakítva! Tulaja %s", vs, CarInfo[vs][cOwner]);
			return 1;
		}
		return 1;
	}

	if(strcmp(cmd, "/UjKocsi", true) == 0)
	{
	    if(IsScripter(playerid) || Tamasi[playerid])
	    {
			new kocsiid = -1;
			for(new c = 0; c < MAXVSKOCSI; c++)
			{
			    if(CarInfo[c][Van] != 1 && kocsiid == -1)
				{
			        kocsiid = c;
					break;
				}
			}

			if(kocsiid == -1)
			{
			   	SendFormatMessage(playerid, COLOR_LIGHTRED, "Több kocsit nem tudsz lerakni! A maximum %d!", MAXVSKOCSI);
			   	return 1;
		   	}
			
			new model, ara, szin1, szin2;

			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0)
			    model = 410;
			else
			{
				if(GetVehicleModelIDFromName(tmp) == -1)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Ilyen modelrõl még nem hallottam...");
				    return 1;
				}
				model = GetVehicleModelIDFromName(tmp);
			}

			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0)
			    ara = 1000000;
			else
				ara = strval(tmp);

			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0)
				szin1 = 1;
            else
				szin1 = strval(tmp);

			tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0)
				szin2 = 1;
            else
				szin2 = strval(tmp);

			new Float:x, Float:y, Float:z, Float:a;
   			GetPlayerPos(playerid, x, y, z);
   			GetPlayerFacingAngle(playerid, a);

			UjCar(x, y, z, a, szin1, szin2, model, ara);

			SetPlayerPos(playerid, x, y, z+1);
			SendClientMessage(playerid, COLOR_GREEN, "Új kocsi lerakva!");
	    }
	    return 1;
	}

	if(strcmp(cmd, "/saveint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if (IsScripter(playerid))
		    {
				GameTextForPlayer(playerid, "Interiorok mentve", 2500, 3);
				OnIntsUpdate();
			}
		}
		return 1;
	}
	//Scott
	if(strcmp(cmd, "/zöldséges", true) == 0 || strcmp(cmd, "/zoldseges", true) == 0)
	{
	if(FloodCheck(playerid)) return 1;
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
	SendClientMessage(playerid, COLOR_WHITE, "Használat: /zöldséges [száma]");
 	SendClientMessage(playerid, COLOR_GREEN, "************Zöldségek************");
	SendClientMessage(playerid, COLOR_YELLOW, "1:Répa(100Ft) 3:Uborka(175Ft) 4:Paradicsom(150Ft)");
	SendClientMessage(playerid, COLOR_YELLOW, "5:Paprika(200Ft) 6:Tök(320Ft) 7:Bab(30Ft)");
	SendClientMessage(playerid, COLOR_GREEN, "************Gyümölcsök***********");
	SendClientMessage(playerid, COLOR_YELLOW, "8:Alma(120Ft) 9:Barack(140Ft) 10:Dinnye(200Ft) 11:Narancs(75Ft)");
	SendClientMessage(playerid, COLOR_YELLOW, "12:Körte(65Ft) 13:Szilva(54Ft) 14:Meggy(49Ft) 15:Málna(46Ft)");
	return 1;
	}
	if(IsPlayerConnected(playerid))
	{
    if(PlayerToPoint(3.0, playerid, 2534.393798, 2290.933593, 10.820312) || PlayerToPoint(3.0, playerid, 2089.889160, -1929.772338, 13.539438))
	{
	GetPlayerName(playerid, sendername, sizeof(sendername));
    new Float:health;
	new item = strval(tmp);
    if (item == 1)
	{
    if(GetMoney(playerid) > 100)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy répát...", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 100);
	SetHealth(playerid, health + 10.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 3)
	{
    if(GetMoney(playerid) > 175)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy uborkát.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 175);
	SetHealth(playerid, health + 8.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 4)
	{
    if(GetMoney(playerid) > 150)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy paradicsomot.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 150);
	SetHealth(playerid, health + 12.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 5)
	{
    if(GetMoney(playerid) > 200)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy paprikát.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 200);
	SetHealth(playerid, health + 9.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 6)
	{
    if(GetMoney(playerid) > 320)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy tököt.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 320);
	SetHealth(playerid, health + 11.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 7)
	{
    if(GetMoney(playerid) > 30)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy babot.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 30);
	SetHealth(playerid, health + 6.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 8)
	{
    if(GetMoney(playerid) > 120)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy almát.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 120);
	SetHealth(playerid, health + 12.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 9)
	{
    if(GetMoney(playerid) > 140)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy barackot.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 140);
	SetHealth(playerid, health + 12.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 10)
	{
    if(GetMoney(playerid) > 99)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy dinnyét.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 100);
	SetHealth(playerid, health + 15.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 11)
	{
    if(GetMoney(playerid) > 75)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy narancsot.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 75);
	SetHealth(playerid, health + 10.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 12)
	{
    if(GetMoney(playerid) > 64)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy körtét.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 65);
	SetHealth(playerid, health + 9.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 13)
	{
    if(GetMoney(playerid) > 54)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy szilvát.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 54);
	SetHealth(playerid, health + 10.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 14)
	{
    if(GetMoney(playerid) > 49)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy meggyet.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 49);
	SetHealth(playerid, health + 9.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	if (item == 15)
	{
    if(GetMoney(playerid) > 46)
    {
    GetPlayerHealth(playerid, health);
	format(string, sizeof(string), "* Valaki eszik egy málnát.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    GiveMoney(playerid, - 46);
	SetHealth(playerid, health + 9.0);
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nincs elég pénzed!");
	}
	}
	} else { SendClientMessage(playerid,COLOR_WHITE,"Nem vagy a zöldségesnél! (/gps LSzöldséges vagy /gps LVzöldséges)");
	}
   	} else { SendClientMessage(playerid,COLOR_WHITE,"Elõször jelentkez be!");
   	}
 	return 1;
	}

	if(strcmp(cmd, "/deleteint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
	    	new jatekosneve[MAX_PLAYER_NAME];
			GetPlayerName(playerid, jatekosneve, sizeof(jatekosneve));
		    if (IsScripter(playerid))
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /deleteint [szám]");
					return 1;
				}

                new ii = strval(tmp);

                if(ii >= IntekSzama()){
                    SendClientMessage(playerid, COLOR_RED, "Nincs ilyen interior!");
					return 1;
                }

				IntInfo[ii][iType] = 0;

				format(string, sizeof(string), "Interior %d torolve cimket kapott", ii, IntInfo[ii][iType]);
                GameTextForPlayer(playerid, string, 2500, 3);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/editint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
	    	new jatekosneve[MAX_PLAYER_NAME];
			GetPlayerName(playerid, jatekosneve, sizeof(jatekosneve));
		    if (IsScripter(playerid))
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /editint [szám]");
					return 1;
				}

                new ii = strval(tmp);

                if(ii >= IntekSzama()){
                    SendClientMessage(playerid, COLOR_RED, "Nincs ilyen interior!");
					return 1;
                }

				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);
				IntInfo[ii][iNumber] = GetPlayerInterior(playerid);
				IntInfo[ii][iExitX] = x;
				IntInfo[ii][iExitY] = y;
				IntInfo[ii][iExitZ] = z;

				format(string, sizeof(string), "Interior %d szerkesztve", ii, IntInfo[ii][iType]);
                GameTextForPlayer(playerid, string, 2500, 3);

                format(string, sizeof(string), "Interior %d szerkesztve (%d, %f, %f, %f)",ii, IntInfo[ii][iType], IntInfo[ii][iNumber],IntInfo[ii][iExitX], IntInfo[ii][iExitY], IntInfo[ii][iExitZ]);
				SendClientMessage(playerid, COLOR_GREEN, string);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/goint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
	    	new jatekosneve[MAX_PLAYER_NAME];
			GetPlayerName(playerid, jatekosneve, sizeof(jatekosneve));
		    if (PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /goint [szám]");
					return 1;
				}

                new ii = strval(tmp);

                if(ii > IntekSzama()){
                    SendClientMessage(playerid, COLOR_RED, "Nincs ilyen interior!");
					return 1;
                }

				SetPlayerInterior(playerid, IntInfo[ii][iNumber]);
				SetPlayerPos(playerid, IntInfo[ii][iExitX], IntInfo[ii][iExitY], IntInfo[ii][iExitZ]);

				format(string, sizeof(string), "Interior %d %s", ii, IntInfo[ii][iType]);
                GameTextForPlayer(playerid, string, 2500, 3);

                format(string, sizeof(string), "Interior %d/%s (%d, %f, %f, %f)",ii, IntInfo[ii][iType], IntInfo[ii][iNumber],IntInfo[ii][iExitX], IntInfo[ii][iExitY], IntInfo[ii][iExitZ]);
				SendClientMessage(playerid, COLOR_GREEN, string);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/poz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] >= 1337)
	        {
				new Float:posx, Float:posy, Float:posz, Float:angle;
				
				new kocsi = NINCS;
				if(IsPlayerInAnyVehicle(playerid))
				{
					kocsi = GetPlayerVehicleID(playerid);
					GetVehiclePos(kocsi, posx, posy, posz);
				}
				else
					GetPlayerPos(playerid, posx, posy, posz);

				if(kocsi == NINCS)
				{
					GetPlayerFacingAngle(playerid, angle);
					format(string, sizeof(string), "Poziciód: (X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Int:%d | VW:%d)", posx, posy, posz, angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
				}
				else
				{
					GetVehicleZAngle(kocsi, angle);
					format(string, sizeof(string), "Poziciód: (X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Int:%d | VW:%d)", posx, posy, posz, angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
				}
					
				SendClientMessage(playerid, COLOR_RED, string);
			}
		}
		else
		    SendClientMessage(playerid, COLOR_GRAD2, "Én nem ismerek ilyen parancsot. Te igen? c(:");
		return 1;
	}

	if(strcmp(cmd, "/pozmentes", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] >= 1337)
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[128];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Esetleg valami leírás? Igy elfelejted miért mentetted! xD");
					return 1;
				}

				new year,month,day,hour,minute,second;
				getdate(year, month, day);
				gettime(hour,minute,second);
				new Float:posx, Float:posy, Float:posz, Float:angle, world, interior;
				world = GetPlayerVirtualWorld(playerid);
				interior = GetPlayerInterior(playerid);

				if(IsPlayerInAnyVehicle(playerid))
				{
					new car = GetPlayerVehicleID(playerid), model = GetVehicleModel(car);
					GetVehiclePos(car, posx, posy, posz);
					GetVehicleZAngle(car, angle);
					format(string, sizeof(string), "[%d-%d-%d %d:%d:%d] Kocsi %s - \"%s\" - [X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Int:%d | VW:%d] - UjKocsi(%d, %.3f, %.3f, %.3f, %.3f, %d, %d)",
					year, month, day, hour, minute, second, sendername, result, posx, posy, posz, angle, interior, world, model, posx, posy, posz, angle, KocsiSzinek[car][0], KocsiSzinek[car][1]);
					PosLog(string);
					format(string, sizeof(string), "Kocsi poziciód elmentve! (X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Int:%d | VW:%d)", posx, posy, posz, angle, GetPlayerInterior(playerid), world);
				}
				else
				{
					GetPlayerPos(playerid, posx, posy, posz);
					GetPlayerFacingAngle(playerid, angle);
					format(string, sizeof(string), "[%d-%d-%d %d:%d:%d] %s - \"%s\" - [X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Int:%d | VW:%d] - (%.3f, %.3f, %.3f, %.3f)",
					year, month, day, hour, minute, second, sendername, result, posx, posy, posz, angle, interior, world, posx, posy, posz, angle);
					PosLog(string);
					format(string, sizeof(string), "Poziciód elmentve! (X:%f | Y:%f | Z:%f | Angle: %.3f | Int:%d | VW:%d)", posx, posy, posz, angle, GetPlayerInterior(playerid), world);
				}

				SendClientMessage(playerid, COLOR_RED, string);

			}else
			    SendClientMessage(playerid, COLOR_GRAD2, "Én nem ismerek ilyen parancsot. Te igen? c(:");
		}
		return 1;
	}

	if (strcmp(cmd, "/leaderek", true) == 0) // Leaderek
    {
    new count = 0;
    SendClientMessage(playerid, COLOR_GREEN, "------------[Frakciók vezetõi(Legális)]------------");
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
	    if (IsPlayerConnected(i))
    	{
		    if(PlayerInfo[i][pLeader] > 0)
		    {
		        new nev[32], mehet = 0;

		        if(PlayerInfo[i][pLeader] == 1)
					nev="SCPD(Rendõrség)";
		        else if(PlayerInfo[i][pLeader] == 4)
					nev="LS Kórház";
		        else if(PlayerInfo[i][pLeader] == 7)
					nev="Önkormányzat";
                else if(PlayerInfo[i][pLeader] == 9)
					nev="LS Hírvívõszolgálat";
                else if(PlayerInfo[i][pLeader] == 10)
					nev="LS Közlekedési vállalat";
				else if(PlayerInfo[i][pLeader] == 15)
					nev="SF Rendõrség";
				else if(PlayerInfo[i][pLeader] == 18)
					nev="SF Közlekedési vállalat";
				else if(PlayerInfo[i][pLeader] == 19)
					nev="SF Kórház";
				else if(PlayerInfo[i][pLeader] == 20)
					nev="VPOP";
				else
				    mehet=5;

				if(mehet == 0){
	    			GetPlayerName(i, sendername, sizeof(sendername));
    	        	format(string, 64, "%s: %s", nev, sendername);
	    	        SendClientMessage(playerid,COLOR_RED, string);
    	    	    count++;
   	    		}
            }
		}
	}
    if (count == 0) SendClientMessage(playerid,COLOR_GREY,"Nincs fent leader");
    SendClientMessage(playerid,COLOR_GREEN, "---------------------------------------");
    return 1;
    }

    if (strcmp(cmd, "/tagok", true) == 0 || strcmp(cmd, "/ranks", true) == 0)
	{
		if(PlayerInfo[playerid][pMember] < 1) return 1;
		if(!LMT(playerid, LMUNKA_SCPD) && !LMT(playerid, LMUNKA_SFPD) && !LMT(playerid, LMUNKA_FBI) && !LMT(playerid, LMUNKA_KATONA))
            if(PlayerInfo[playerid][pRank] < 5) return 1;

		new rangnev[32], munka, rang, leader;

		leader = PlayerInfo[playerid][pLeader] - 1;

		SendFormatMessage(playerid, COLOR_WHITE, "========== %s ==========", Szervezetneve[leader][0]);

		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || IsPlayerNPC(x) || PlayerInfo[x][pMember] != PlayerInfo[playerid][pLeader] || IsClint(x)) continue;

			munka = PlayerInfo[x][pMember] - 1;
			rang = PlayerInfo[x][pRank];

			if(rang <= 0) rangnev = Rangok[munka][0];
			else if(rang >= 1 && rang <= 12) rangnev = Rangok[munka][rang];
			else rangnev = Rangok[munka][12];

			SendFormatMessage(playerid, COLOR_GREY, "[%d]%s - %s (%d)", x, PlayerName(x), rangnev, rang);
		}

		SendFormatMessage(playerid, COLOR_WHITE, "========== %s ==========", Szervezetneve[leader][0]);

		return 1;
	}
//============================================================================================================
    if(strcmp(cmd, "/asay", true) == 0) // Publicly says an admin message. Exact same as RCON's 'say' but in a red color.
    {
		GetPlayerName(playerid, sendername, sizeof(sendername));
   	    new result[200];
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
       	if(!strlen(result))
        {
   	    	SendClientMessage(playerid, COLOR_ORANGE, "Használat: /asay [üzenet]");
       	    return 1;
        }

	    if (PlayerInfo[playerid][pAdmin] >= 1 || IsAS(playerid))
  		{
   		    new asadmin[16];
   	    	if(IsAS(playerid))
    	        asadmin = "Adminsegéd";
			else
			    asadmin = "Admin";

	        for(new i=0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pAdmin] >= 1337)
			    	    format(string, sizeof(string), "* %s (%s): %s", asadmin, AdminName(playerid), result);
					else
						format(string, sizeof(string), "* %s: %s", asadmin, result);
					
					if(IsAS(playerid))
						format(string, sizeof(string), "* %s %s: %s", asadmin, PlayerName(playerid), result);
					SendClientMessage(i, COLOR_PIROS, string);
   				}
			}

	        printf("%s\n", string);
   		}
       	else
			return SendClientMessage(playerid,COLOR_GREY, "Ejnye...");
   	}

    if(strcmp(cmd, "/asayn", true) == 0) // Publicly says an admin message. Exact same as RCON's 'say' but in a red color.
    {
		GetPlayerName(playerid, sendername, sizeof(sendername));
   	    new result[200];
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
       	if(!strlen(result))
        {
   	    	SendClientMessage(playerid, COLOR_ORANGE, "Használat: /asayn [üzenet]");
       	    return 1;
        }

	    if (PlayerInfo[playerid][pAdmin] >= 1 || IsAS(playerid))
    	{
    	    new asadmin[16];
    	    if(IsAS(playerid))
    	        asadmin = "Adminsegéd";
			else
			    asadmin = "Admin";

	        for(new i=0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					format(string, sizeof(string), "* %s %s: %s", asadmin, AdminName(playerid), result);
					SendClientMessage(i, COLOR_PIROS, string);
	   			}
			}

	        printf("%s\n", string);
    	}
       	else
			return SendClientMessage(playerid,COLOR_GREY, "Ejnye...");
    }


	/*if(strcmp(cmd, "/hitman", true) == 0) // Publicly says an admin message. Exact same as RCON's 'say' but in a red color.
    {
	    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
    	{
	        format(string, sizeof(string), "Hírdetés: Gondod van valakivel? Félsz a zsaruktól? Bízd ránk! | Hírdetõ: Bérgyilkos ((/contract))");
    	    SendClientMessageToAll(COLOR_LIGHTGREEN, string);
        }
        else
        {
			SendClientMessage(playerid,COLOR_GREY, "Nem vagy hitman.");
            return 1;
		}
    }*/
//---------------------------------------------------------------------------------------------------------------
    if(strcmp(cmd, "/afk", true)== 0)
	{
		if(AFK[playerid] == 0)
		{
			new hazak = sizeof(HouseInfo), afk = -1;
			for(new i = 0; i < hazak; i++)
			{
				//printf("House :%d",i);
				new HazBelso = HouseInfo[i][hBelso];
				if(PlayerToPoint(250, playerid,IntInfo[HazBelso][iExitX], IntInfo[HazBelso][iExitY], IntInfo[HazBelso][iExitZ]) && GetPlayerVirtualWorld(playerid) == i && GetPlayerInterior(playerid) == IntInfo[HazBelso][iNumber])
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "===============[AFK]===============");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Mostmár mehetsz a dolgodra. Ha már nem akarsz AFK-zni írd be h \"[Gates]\"");
                    SendClientMessage(playerid, COLOR_LIGHTRED, "===============[AFK]===============");
					TogglePlayerControllable(playerid,0);
					SetPlayerColor(playerid, COLOR_BLACK);
					AFK[playerid] = 1;
					afk = 1;
				}
			}

			if(afk != 1)
				return SendClientMessage(playerid, COLOR_GREY, "Csak házban AFK-zhatsz!");
		}
		else
		{
 		   SendClientMessage(playerid, COLOR_GRAD1, "Kétszer mész el egymás után?");
	       return 1;
		}
	}
//--------------------------------------------------------------------------------------------------------//
//===============================================//
	if (strcmp(cmd, "/deleteaccount", true)==0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 1337)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /deleteaccount [PlayerName]");
				return 1;
			}
   			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, 256, "AdmWarning: %s has deleted %s his/her account", sendername,tmp);
			ABroadCast(COLOR_YELLOW,string,1);


			format(string, 256, "AdmWarning: %s has deleted %s his/her account\n", sendername,tmp);
			printf(string);
			format(string,sizeof(string),"Jatekosok/%s.ini",tmp);
			fremove(string);
			SendClientMessage(playerid, COLOR_GRAD1, "Player Unbanned");
		}
		return 1;
	}
//-----------------------------------------------------------------------------//
	if(strcmp(cmd,"/respawn",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"Használat: /respawn [név/id]");
		        return 1;
   			}
			giveplayerid = ReturnUser(tmp);
			SetPlayerSpawn(giveplayerid);
			Hazbanvan[giveplayerid] = 0;
			}
		return 1;
	}

//------------------------------------------------------------------------//
/*	if(strcmp(cmd, "/setname", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		new tmpp[256];
		tmpp = strtok(cmdtext, idx);
		if(!strlen(tmpp))
		{
			SendClientMessage(playerid, COLOR_DBLUE, "Correct Használat: /setname [playerid] [new nick]");
			return 1;
		}
		giveplayerid = strval(tmpp);
		tmp = strtok(cmdtext, idx);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
		        if(IsPlayerConnected(giveplayerid))
		        {
					SetPlayerName(giveplayerid, tmp);
					format(string, sizeof(string), "AdmCMD: %s(%i) has changed Your name to %s", sendername, playerid, tmp);
					SendClientMessage(giveplayerid, COLOR_DBLUE, string);
					format(string, sizeof(string), "AdmCMD: You have changed ID %i's name to %s", giveplayerid, tmp);
					SendClientMessage(playerid, COLOR_DBLUE, string);
					format(string, 256, "Vigyázat: %s has changed %s's his name to %s.", sendername,giveplayer, tmp);
					ABroadCast(COLOR_YELLOW,string,1);
				}
				else
				{
				    format(string, sizeof(string), "%d nincs fent a szerveren.", giveplayerid);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "You do not have permission to use that command!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "You Must be logged in to use this command!");
		}
	  	return 1;
	}*/
//------------------------------------------------//
	if(strcmp(cmd, "/agivelicense", true) == 0 || strcmp(cmd, "/agl", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 3)
	        {
	            //new x_nr[128];
				//x_nr = strtok(cmdtext, idx);
				if(params < 2) {
				    SendClientMessage(playerid, COLOR_WHITE, "Használat: /agl [jogsi neve] [játékos]");
				    SendClientMessage(playerid, COLOR_WHITE, "Available names: auto, motor, repulo, kamion, horgasz, hajo, fegyver");
					return 1;
				}
				if(egyezik(param[1], "motor"))
				{
					new p = ReturnUser(param[2]);
					if(p == INVALID_PLAYER_ID) return 1;
					Msg(playerid, "Adtál egy motor jogsit neki.");
					Msg(p, "Kaptál egy motor jogsit.");
					PlayerInfo[p][pMotorJogsi] = JOGSI_MOTOR;
				}
				else if(egyezik(param[1], "kamion"))
				{
					new p = ReturnUser(param[2]);
					if(p == INVALID_PLAYER_ID) return 1;
					Msg(playerid, "Adtál egy kamion jogsit neki.");
					Msg(p, "Kaptál egy kamion jogsit.");
					PlayerInfo[p][pKamionJogsi] = JOGSI_KAMION;
				}
				else if(egyezik(param[1], "hajo") || egyezik(param[1], "hajó"))
				{
					new p = ReturnUser(param[2]);
					if(p == INVALID_PLAYER_ID) return 1;
					Msg(playerid, "Adtál egy hajó jogsit neki.");
					Msg(p, "Kaptál egy hajó jogsit.");
					PlayerInfo[p][pBoatLic] = JOGSI_HAJO;
				}
				else if(egyezik(param[1], "horgasz") || egyezik(param[1], "horgász"))
				{
					new p = ReturnUser(param[2]);
					if(p == INVALID_PLAYER_ID) return 1;
					Msg(playerid, "Adtál egy horgász engedélyt neki.");
					Msg(p, "Kaptál egy horgász engedélyt.");
					PlayerInfo[p][pFishLic] = JOGSI_HORGASZ;
				}
				else if(egyezik(param[1], "auto") || egyezik(param[1], "autó"))
				{
					new p = ReturnUser(param[2]);
					if(p == INVALID_PLAYER_ID) return 1;
					Msg(playerid, "Adtál egy autó jogsit neki.");
					Msg(p, "Kaptál egy autó jogsit.");
					PlayerInfo[p][pCarLic] = JOGSI_AUTO;
				}
				else if(egyezik(param[1], "repulo") || egyezik(param[1], "repülõ"))
				{
					new p = ReturnUser(param[2]);
					if(p == INVALID_PLAYER_ID) return 1;
					Msg(playerid, "Adtál egy repülõ jogsit neki.");
					Msg(p, "Kaptál egy repülõ jogsit.");
					PlayerInfo[p][pFlyLic] = JOGSI_REPULO;
				}
				else if(egyezik(param[1], "fegyver"))
				{
					new p = ReturnUser(param[2]);
					if(p == INVALID_PLAYER_ID) return 1;
					Msg(playerid, "Adtál egy fegyver engedélyt neki.");
					Msg(p, "Kaptál egy fegyver engedélyt.");
					PlayerInfo[p][pGunLic] = JOGSI_FEGYVER;
				}
				else
					Msg(playerid, "Hibás jogsinév");
	        }
	    }
	    return 1;
	}

	if(strcmp(cmd, "/kockahelp", true) ==0)
 	{
 	if(IsPlayerConnected(playerid))
  	{
  	    {
  	        SendClientMessage(playerid,COLOR_GREEN,"*** Hol is van *** Kockát a 24/7-ben vagy a kaszinóban találhatsz. ");
  	        SendClientMessage(playerid,COLOR_GREEN,"*** Hogyan vegyem meg *** 24/7-ben /buy 4, kaszinóban /kocka, DE ha bemész a kaszinóba kapsz alapból.");
 			SendClientMessage(playerid,COLOR_GREEN,"*** Játék *** A kocka segítségével játszhatsz. Van 6, 12 és 20 oldalú kocka(Mindet megkapod).");
			SendClientMessage(playerid,COLOR_GREEN,"*** Játék *** A játékokat a /kaszinohelp parancsban találhatod majd, vagy az oldalon.");
			SendClientMessage(playerid,COLOR_GREEN,"*** Játék *** Játssz nyugodtan a köv. parancsokkal: /dice /dice12 /dice20.");
			SendClientMessage(playerid,COLOR_GREEN,"*** Crash / Kilépés *** Crash / Kilépés után nem marad meg a kocka.");
		}
	}
	return 1;
 }
    if(strcmp(cmd, "/crs", true)== 0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new car = NINCS;
           	if(!IsPlayerInAnyVehicle(playerid))
        		car = GetClosestVehicle(playerid);
			else
				car = GetPlayerVehicleID(playerid);

		   	if(GetDistanceToVehicle(playerid, car) < 5.0)
		   	{
				SendFormatMessage(playerid, COLOR_GRAD1, "Helyre tetted a kocsit! [id:%d]", car);
				KocsiRespawn(car);
			}
			else
				return Msg(playerid, "A közeledben nincs jármû!");

			if(IsPlayerInAnyVehicle(playerid))
				UnFreeze(playerid);
	        return 1;
		}
		else
		{
                SendClientMessage(playerid, COLOR_GRAD1, "Nem vagy admin...");
		}
	}
//--------------------------------[/removecar]------------------------------------------------------------------------
    if(strcmp(cmd, "/removecar", true)== 0)
	{
		if(!Admin(playerid, 5)) return 1;
		
		new kocsi = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, kocsi) > 5.0) return Msg(playerid, "Nincs kocsi a közeledben!");
		
		new talalt;
		for(new i = 0; i < sizeof(CreatedCars); i++)
		{
			if(CreatedCars[i] != 0)
			{
		    	if(CreatedCars[i] == kocsi)
				{
					talalt = i;
					break;
				}
			}
		}
		
		if(talalt)
		{
			DestroyVehicle(talalt);
			CreatedCar--;
		}
		
		return 1;
	}

//----------------------------------[/dmv]-----------------------------------------------
	if(strcmp(cmd, "/dmv", true) == 0)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"Vegyél oktatótól! (/oktatók)");
		return 1;
	}
/////////////////////////////////////////////////////////////////////////////////////////
	if(strcmp(cmd, "/announce", true) == 0 || strcmp(cmd, "/ann", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {

			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[80];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/ann)ouncement [text]");
				return 1;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			format(string, sizeof(string), "((**Bejelentés** Admin %s: %s ))", sendername, result);
			OOCOff(TEAM_ORANGE_COLOR,string);
			printf("%s\n", string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rendezvény", true) == 0 || strcmp(cmd, "/rendezveny", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {

			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[80];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /rendezvény [text]");
				return 1;
			}
			if(LMT(playerid, LMUNKA_ONKORMANYZAT) || IsAdmin(playerid))
			{
			format(string, sizeof(string), "**Rendezvény** %s", result);
			OOCOff(COLOR_RENDEZVENY,string);
			printf("%s\n", string);
			}
		}
		return 1;
	}


//-------------------------------------------------------------------------
	if(strcmp(cmd, "/Quitfaction", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] < 1) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy leader!");

        PlayerInfo[playerid][pMember] = 0;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pLeader] = 0;
		SendClientMessage(playerid, COLOR_GREY, "Kiléptél.");
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	    //SetPlayerSpawn(playerid);
	    return 1;

	}
//=================================Engine====================================
	if(!strcmp(cmd, "/motor", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Mégis mit akarsz beinditani bazze?");
		if(IsABicikli(GetPlayerVehicleID(playerid))) return Msg(playerid, "Biciklin motor? Ez modern bicikli lehet... :)");
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return Msg(playerid, "Csak sofõr!");
		if(!KocsibanVan[playerid]) return Msg(playerid, "Nem vagy jármûben!");

		new car = IsAVsKocsi(GetPlayerVehicleID(playerid));
		if(car != -1)
		{
		    if(CarInfo[car][cOwned] == 0 && !AMT(playerid, MUNKA_AUTOKERESKEDO))
				return 1;
		}

		new kocsi = GetPlayerVehicleID(playerid);
		if(engineOn[kocsi] == 0)
		{
			if(KocsiElet(kocsi) <= 350)
				return Msg(playerid, "A jármû elromlott! Hívj szerelõt!");
			if(Gas[kocsi] <= 0)
				return Msg(playerid, "Nincs benzin!");
			if(KocsiSokkolva[kocsi])
				return Msg(playerid, "A jármû sokkolva van");

		    if(SajatKocsi(playerid, kocsi) || car != -1 && CarInfo[car][cOwned] == 0)
		    {
		        if(MunkaFolyamatban[playerid] == 1) return 1;
		        new kocsiserules, ido, Float:kocsielet;
	        	GetVehicleHealth(kocsi, kocsielet);
	    	    kocsiserules = 1000 - floatround(kocsielet);
		        ido = 1000 + (kocsiserules * 5);
			    SendClientMessage(playerid, COLOR_GREEN, "Beindítod a kocsit...");
				SetTimerEx("Munkavege", ido, false, "ddd", playerid, M_MOTOR, 0);
				MunkaFolyamatban[playerid] = 1;
	    	}
			else
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kulcsod ehhez a jármûhöz! El kell lopnod. (( /ellop ))");
		}
		else
		{
			engineOn[kocsi] = 0;
			//TogglePlayerControllable(playerid, false);
			SetJarmu(kocsi, KOCSI_MOTOR, false);
			SendClientMessage(playerid, COLOR_GREEN, "Jármû leállítva!");
			ProxDetector(30.0, playerid, "* Valaki leállította a jármûvét.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}

	if(!strcmp(cmd, "/ellop", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "Mégis mit akarsz ellopni bazze?");
		if(IsABicikli(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_RED, "Biciklin motor? Ez modern bicikli lehet... :)");
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return 1;

		new car = IsAVsKocsi(GetPlayerVehicleID(playerid));
		if(car != -1)
		{
		    if(CarInfo[car][cOwned] == 0)
				return 1;
		}

		new kocsi = GetPlayerVehicleID(playerid);

		if(engineOn[kocsi] == 0)
		{
			if(KocsiElet(kocsi) <= 350) return Msg(playerid, "A jármû elromlott! Hívj szerelõt!");
			if(Gas[kocsi] <= 0) return Msg(playerid, "Nincs benzin!");

			if(KocsiSokkolva[kocsi])
				return Msg(playerid, "A jármû sokkolva van");

			if(!AMT(playerid, MUNKA_AUTOTOLVAJ)) return Msg(playerid, "Nem vagy autótolvaj!");
	        if(MunkaFolyamatban[playerid] == 1) return 1;
			if(PlayerToPoint(100, playerid, 1477.1985,-1804.2847,13.5469))
			{
				Msg(playerid, "Városháza környékén akarsz kocsit lopni?");
				return 1;
			}
			else if(PlayerToPoint(80, playerid, 1596.8505,-1677.9633,5.8906))
			{
				Msg(playerid, "LSPD környékén akarsz kocsit lopni?");
				return 1;
			}
			else if(PlayerToPoint(50, playerid, 1214.0414,-1324.4862,13.5670))
			{
				Msg(playerid, "Kórház elõtt akarsz kocsit lopni?");
				return 1;
			}
			else if(PlayerToPoint(250, playerid, 175.1913,1904.2084,18.2397))
			{
				Msg(playerid, "Fort környékén akarsz kocsit lopni?");
				return 1;
			}
			else if(PlayerToPoint(140, playerid, -1593.2107,727.9420,-4.9063))
			{
				Msg(playerid, "SFPD környékén akarsz kocsit lopni?");
				return 1;
			}
	        new kocsiserules, ido, Float:kocsielet;
        	GetVehicleHealth(kocsi, kocsielet);
    	    kocsiserules = 1000 - floatround(kocsielet);
	        ido = 5500 + (kocsiserules * 5);
		    SendClientMessage(playerid, COLOR_GREEN, "Összekötöd a vezetékeket...");
			SetTimerEx("Munkavege", ido, false, "ddd", playerid, M_MOTOR, 0);
			MunkaFolyamatban[playerid] = 1;
			ProxDetector(30.0, playerid, "* Valaki összeköti a vezetékeket...", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
	}

	if(!strcmp(cmd, "/kiszáll", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "Mibõl akarsz kiszállni?");
		new kocsi;
		kocsi = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) != 2) return Msg(playerid, "Csak sofõr!");
		//if(ov[playerid] == 1) return Msg(playerid, "Bevagy csatolva, így elég nehéz lenne kiszállni.");
		if(gCarLock[kocsi] == 1) return Msg(playerid, "Ajtók zárva, így elég nehéz lenne kiszállni.");

		TogglePlayerControllable(playerid, true);
		RemovePlayerFromVehicle(playerid);
		Animbanemrakhato[playerid] = 0;
		ProxDetector(30.0, playerid, "* Valaki kiszáll a jármûvébõl.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return true;
	}

//---------------------PD Backup Sytems-----------------------------------
	if (strcmp(cmd, "/swaterõsítés", true)==0 || strcmp(cmd, "/sbk", true)==0)
	{
		if(PlayerInfo[playerid][pSwattag] == 1)
		{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[70];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
   		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "* Valaki erõsítést kért");
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		printf("%s\n", string);
   		format(string, sizeof(string), "**[SWAT] %s erõsítésrt kért. Információ: %s", sendername, result);
		SendSwatRadioMessage(COLOR_DBLUE, string);
  		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Hívtál erõsítést, tarts ki.");
		return 1;
		}
	}
	
	if (strcmp(cmd, "/erõsítés", true)==0 || strcmp(cmd, "/bk", true)==0)
	{
		if(OnDuty[playerid]==1)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[70];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* Valaki erõsítést kért");
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s\n", string);
			format(string, sizeof(string), "** %s erõsítésrt kért(/útonvagyok). Információ: %s", sendername, result);
			SendTeamMessage(LMUNKA_SCPD, COLOR_DBLUE, string);
			SendTeamMessage(LMUNKA_FBI, COLOR_DBLUE, string);
			SendTeamMessage(LMUNKA_SFPD, COLOR_DBLUE, string);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Hívtál erõsítést, tarts ki.");
			backupask = playerid;
			return 1;
		}
	}

	if(strcmp(cmdtext, "/útonvagyok", true)==0 || strcmp(cmd, "/abk", true)==0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(OnDuty[playerid]==1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(backupask, giveplayer, sizeof(giveplayer));
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(backupask, X, Y, Z);
				SetPlayerCheckpoint(playerid, X, Y, Z, 5);
				SetPlayerMarkerForPlayer(playerid,backupask, 0xFF0000FF ); 
				format(string, sizeof(string), "* Valaki úton van.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				printf("%s\n", string);
				GameTextForPlayer(playerid, "~w~Siess~n~~r~ Menj a piros checkpointba", 5000, 1);
				format(string, sizeof(string), "** %s úton van, tarts ki!", sendername);
				SendTeamMessage(LMUNKA_SCPD, COLOR_DBLUE, string);
				SendTeamMessage(LMUNKA_FBI, COLOR_DBLUE, string);
				SendTeamMessage(LMUNKA_SFPD, COLOR_DBLUE, string);
			}
			if (IsPlayerInCheckpoint(playerid))
			{
				DisablePlayerCheckpoint(playerid);
				return 1;
			}
		}
	}
		
	if(strcmp(cmd, "/erõsítéslemond", true)==0 || strcmp(cmd, "/cbk", true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(OnDuty[playerid]==1)
			{
				format(string, sizeof(string), "* Valaki lemondta az erõsítést.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				printf("%s\n", string);
				SetPlayerMarkerForPlayer(playerid, backupask, 0xFFFFFF00 );
				DisablePlayerCheckpoint(playerid);
				return 1;
			}
		}
	}
		
	if (strcmp(cmd, "/pderõsítés", true)==0 || strcmp(cmd, "/pdbk", true)==0)
	{
		if(OnDuty[playerid]==1)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[70];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* Valaki erõsítést kért a rendõrségre.");
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s\n", string);
			format(string, sizeof(string), "** %s erõsítést kért a rendõrségre. Információ: %s", sendername, result);
			SendRadioMessage(1, COLOR_DBLUE, string);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Erõsítést kértél a rendõrségre, tarts ki.");
			pdbackupask = playerid;
			return 1;
		}
	}
		
	if (strcmp(cmdtext, "/pdútonvagyok", true)==0 || strcmp(cmd, "/pdabk", true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(OnDuty[playerid]==1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(pdbackupask, giveplayer, sizeof(giveplayer));
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(pdbackupask, X, Y, Z);
				SetPlayerCheckpoint(playerid, X, Y, Z, 5);
				SetPlayerMarkerForPlayer(playerid,pdbackupask, 0xFF0000FF );
				format(string, sizeof(string), "* Valaki úton van.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				printf("%s\n", string);
				GameTextForPlayer(playerid, "~w~Siess~n~~r~ Menj a piros checkpointba", 5000, 1);
				format(string, sizeof(string), "** %s úton van, tarts ki!", sendername);
				SendRadioMessage(1, COLOR_DBLUE, string);
			}
			if(IsPlayerInCheckpoint(playerid))
			{
				DisablePlayerCheckpoint(playerid);
				return 1;
			}
		}
	}
	if (strcmp(cmdtext, "/pderõsítéslemond", true)==0 || strcmp(cmd, "/pdcbk", true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(OnDuty[playerid]==1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* Valaki lemondta az erõsítést.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				printf("%s\n", string);
				SetPlayerMarkerForPlayer(playerid, pdbackupask, 0xFFFFFF00 );
				DisablePlayerCheckpoint(playerid);
				return 1;
			}
		}
	}
	
	if(egyezik(cmd, "/beépített") || egyezik(cmd, "/beepitett"))
	{
		if(!LMT(playerid, LMUNKA_SCPD) && !LMT(playerid, LMUNKA_FBI)) return Msg(playerid, "Nem vagy rendõr / FBI");
		if(!LMT(playerid, LMUNKA_FBI) && !Munkarang(playerid, 4)) return Msg(playerid, "Minimum 4es rang szükséges.");
		if(OnDuty[playerid] == 0) return Msg(playerid, "Nem vagy szolgálatba.");
		if(!PlayerToPoint(4, playerid,255.3,77.4,1003.6) && LMT(playerid, LMUNKA_SCPD)) return Msg(playerid, "Nem vagy a szekrénynél.");
		format(string, sizeof(string), "Ird be melyik skint szeretnéd felvenni.\n", PlayerName(playerid)); 
		ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_INPUT, "Beépített", string, "Tovább","Mégse");
		HolTart[playerid] = 1;
	}

// ---------------------Undercover system for PD ----------------------- Uj Rendszer = SomoS Powa
	/*if(strcmp(cmd, "/beépített", true) == 0)
	{
		if(OnDuty[playerid]==0)
      	{
			SendClientMessage(playerid, COLOR_GREY, "   Nem vagy szolgálatban vagy nem vagy rendõr !");
			return 1;
		}
		else
		{
				new rand = random(sizeof(CIV));
				//new i; i < MAX_PLAYERS; i++;
				SetPlayerSkin(playerid, CIV[rand]);
				GiveWeapon(playerid, 4, 1);
				GiveWeapon(playerid, 41, 1);
				GiveWeapon(playerid, 23, 150);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " Beépített rendõrként vagy szolgálatban. Próbálj meg nem lebukni !");
				}
	}
	if(strcmp(cmd, "/beépítettvége", true) == 0)
	{
	    if(OnDuty[playerid]==0)
	    {
    		SendClientMessage(playerid, COLOR_GREY, "   Nem vagy szolgálatban vagy nem vagy rendõr !");
   			return 1;
		}
		else
		{
				SetPlayerSkin(playerid, 280);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " Már nem vagy beépített !");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " Ha rossz a skined írd be /ruha !");
				}
	}
// ---------------------Undercover system- FBI -----------------------
	if(strcmp(cmd, "/fbibeépített", true) == 0)
		{
		    if(OnDuty[playerid]==1)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   You are not a member of the FBI Agency !");
				return 1;
		    }
			new rand = random(sizeof(CIV));
			SetPlayerSkin(playerid, CIV[rand]);
			GiveWeapon(playerid, 4, 1);
			GiveWeapon(playerid, 41, 1);
			GiveWeapon(playerid, 23, 150);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, " You are now a undercover FBI Member !");
			}
	if(strcmp(cmd, "/fbibeépítettvége", true) == 0)
		{
		    if(OnDuty[playerid]==1)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   You are not a member of the FBI Agency !");
				return 1;
		    }
			SetPlayerSkin(playerid, 286);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, " You are now a normal FBI Member !");
			}
		*/
//--------------------------Setskin---------------------------------------//
	if(strcmp(cmd, "/setskin", true) == 0)
	{
		if(Admin(playerid, 5))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /setskin [PartOfName/playerid] [skinid]");
				return 1;
			}
			new player1;
			player1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);

			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /setskin [PartOfName/playerid] [skinid]");
				return 1;
			}

			new SkinID;
			SkinID = strval(tmp);
			if(IsValidSkin(SkinID))
			{

				tmp = strtok(cmdtext, idx);

				GetPlayerName(player1, playername, sizeof(playername));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,256,"Admin %s átállította a skined erre: %d",sendername,SkinID);
				if(player1 != playerid)
					SendClientMessage(player1,COLOR_LIGHTBLUE,string);

				format(string,256,"Átállítottad %s skinét erre: %d",playername,SkinID);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				SetPlayerSkin(player1,SkinID);
				PlayerInfo[player1][pModel] = SkinID;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GRAD2,"ERROR: Incorrect skin id");
				return 1;
			}
		}
		else
			SendClientMessage(playerid,COLOR_GRAD2,"ERROR: You are not a high enough level to use this command");

		return 1;
	}
//------------------------------<[try Command]>---------------------------------------------------------
	if(strcmp(cmd, "/megpróbál", true) == 0 || strcmp(cmd, "/megprobal", true) == 0)
	{
		/*if(PlayerInfo[playerid][pHamisNev] != 1)
			jatekosneve = PlayerInfo[playerid][pHamisNev];*/
			
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[128];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(FloodCheck(playerid)) return 1;
		if(!strlen(result))
		{
			SendClientMessage(playerid,COLOR_GRAD1, " Használat: /megpróbál [akció]");
		}
		else
		{
			switch(random(2))
			{
				case 1:
				{
					format(string, sizeof(string), "** %s megpróbál %s és sikerül neki", PlayerName(playerid), result);
					ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
			        printf("%s\n", string);
				}
				default:
				{
					format(string, sizeof(string), "** %s megpróbál %s, de sajnos nem sikerül neki", PlayerName(playerid), result);
					ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
			        printf("%s\n", string);
				}
			}
  		}
        return 1;
    }

	if(strcmp(cmd, "/megpróbálja", true) == 0 || strcmp(cmd, "/megprobalja", true) == 0)
	{
		/*if(PlayerInfo[playerid][pHamisNev] != 0)
			jatekosneve = PlayerInfo[playerid][pHamisNev];*/

		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[128];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;

		if(!strlen(result))
		{
			SendClientMessage(playerid,COLOR_GRAD1, " Használat: /megpróbálja [akció]");
		}
		else
		{
			switch(random(2))
			{
				case 1:
				{
					format(string, sizeof(string), "** %s megpróbálja %s és sikerül neki", PlayerName(playerid),result);
					ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
			        printf("%s\n", string);
				}
				default:
				{
					format(string, sizeof(string), "** %s megpróbálja %s, de sajnos nem sikerül neki", PlayerName(playerid),result);
					ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
			        printf("%s\n", string);
				}
			}
  		}
        return 1;
 	}
//--------------------------------[/kill]------------------------------------------------------------------------
    if(strcmp(cmd, "/kill", true)== 0)
	{
           SendClientMessage(playerid, COLOR_GRAD1, "A-A... Ilyet nem játszunk.. Magad nem fogod megölni.");
           return 1;
	}
//---------------------Admin duty etc------------------------------------//
	if(strcmp(cmd, "/onduty", true) == 0)
	{
		if(!Admin(playerid, 1)) return 1;

		if(AdminDuty[playerid] == 0)
		{
			SendClientMessageToAll(COLOR_WHITE, "====================================================================");
			SendFormatMessageToAll(COLOR_LIGHTBLUE, "[%d]%s adminszolgálatba lépett, így írhatsz neki, felkeresheted (/pm %d) | Megölni tilos!", playerid, AdminName(playerid), playerid);
 			SetPlayerColor(playerid, COLOR_DBLUE);
			AdminDuty[playerid] = 1;
			gBooc[playerid] = 1;
			
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			AdminDuty3D[playerid] = CreateDynamic3DTextLabel("ADMINSZOLGÁLAT", COLOR_WHITE, 0.0, 0.0, 0.5, 40.0, playerid, INVALID_VEHICLE_ID, 0);
			//Attach3DTextLabelToPlayer(AdminDuty3D[playerid], playerid, 0.0, 0.0, 0.5);
		}
		else
		{
			SendClientMessageToAll(COLOR_WHITE, "====================================================================");
			SendFormatMessageToAll(COLOR_LIGHTRED, "%s már nincs szolgálatban, mostmár ne zavard õt | Ha kérdésed van írj nekünk a /report paranccsal", AdminName(playerid));
 			SetPlayerColor(playerid, COLOR_WHITE);
			AdminDuty[playerid] = 0;
			gBooc[playerid] = 0;
			
			DestroyDynamic3DTextLabel(AdminDuty3D[playerid]);
		}

		return 1;
	}
//-------------------Felszerelések--------------------------------------//
	if(strcmp(cmd, "/vámkommandó", true) == 0 || strcmp(cmd, "/vamkommando", true) == 0)
	{
		if(LMT(playerid, LMUNKA_VPOP))
		{
			if(vk> 0)
			{
				if(PlayerToPoint(3, playerid,255.3,77.4,1003.6) || PlayerToPoint(3,playerid,-1616.1294,681.1594,7.1875)  || PlayerToPoint(3,playerid,979.4161,-1253.8939,16.9436) || PlayerToPoint(3,playerid,1406.1895751953,-1566.2330322266, -44.940250396729) ||
				PlayerToPoint(100,playerid,732.44, -1356.03, 18.81) || PlayerToPoint(20,playerid,2338.3352,-1254.3302,22.5000) || PlayerInfo[playerid][pLocal] != NINCS)
				{
					SetHealth(playerid, 100);
					SetPlayerArmour(playerid, 100);
					SetPlayerSkin(playerid, 265);
					if(FrakcioInfo[LMUNKA_VPOP][fDeagle] > 0)
						GiveWeapon(playerid, 24, 100);
					if(FrakcioInfo[LMUNKA_VPOP][fShotgun] > 0)
						GiveWeapon(playerid, 25, 200);
					if(FrakcioInfo[LMUNKA_VPOP][fM4] > 0)
						GiveWeapon(playerid, 31, 250);
					GiveWeapon(playerid, 34, 70);					
					GiveWeapon(playerid, 43, 100);
					format(string, sizeof(string), "* Valaki felvette a VámKommandósok felszerelését.");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
			}
			return 1;
		}
		return 1;
	}

	if(strcmp(cmd, "/határõr", true) == 0 || strcmp(cmd, "/hataror", true) == 0)
	{
		if(LMT(playerid, LMUNKA_VPOP))
		{
			if(PlayerToPoint(3, playerid,255.3,77.4,1003.6) || PlayerToPoint(3,playerid,-1616.1294,681.1594,7.1875)  || PlayerToPoint(3,playerid,979.4161,-1253.8939,16.9436) || PlayerToPoint(3,playerid,1406.1895751953,-1566.2330322266, -44.940250396729) ||
			PlayerToPoint(100,playerid,732.44, -1356.03, 18.81) || PlayerToPoint(20,playerid,2338.3352,-1254.3302,22.5000) || PlayerInfo[playerid][pLocal] != NINCS)
			{
				SetHealth(playerid, 100);
				SetPlayerArmour(playerid, 100);
				SetPlayerSkin(playerid, 71);
				GiveWeapon(playerid, 3, 1);
      			GiveWeapon(playerid, 24, 500);
				GiveWeapon(playerid, 41, 900);
				format(string, sizeof(string), "* Valaki felvette a határõröknek járó felszerelést.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			return 1;
		}
		return 1;
	}


	if(strcmp(cmd, "/felszerelések", true) == 0 || strcmp(cmd, "/felszerelesek", true) == 0)
    {
		if(PlayerToPoint(3, playerid,255.3,77.4,1003.6) || //LSPD
		PlayerToPoint(3,playerid,-1616.1294,681.1594,7.1875) || //SFPD
		PlayerToPoint(100,playerid, 288.6565,172.2111,1007.1794) || //FBI HQ
		PlayerToPoint(10,playerid,2158.50, -1864.80, 13.55) || //SWAT HQ
		PlayerInfo[playerid][pLocal] != NINCS)
		{
			if(OnDuty[playerid]!=1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nem vagy szolgálatban!");
			}
			else
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /felszerelések [szám]");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "|___________ Rendõr felszerelések ___________|");
					SendClientMessage(playerid, COLOR_GRAD1, "| 1: Motoros felszerelés");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "|___________ Csak SWAT-nak ___________|");
					SendClientMessage(playerid, COLOR_GRAD2, "| 2: SWAT felszerelés 3: SWAT felszerelés(Taktikus) 4: SWAT felszerelés(Támadó)");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "|___________ Beépített ___________|");
					SendClientMessage(playerid, COLOR_GRAD2, "| 5: Detektív felszerelés");		
					return 1;
				}
				new item = strval(tmp);
	            if (item == 1)
	            {
					ResetWeapon(playerid);
					SetHealth(playerid, 100);
					SetPlayerArmour(playerid, 100);
					GiveWeapon(playerid, 3, 1);
					GiveWeapon(playerid, 24, 150);
					GiveWeapon(playerid, 41, 500);
					SetPlayerSkin(playerid, 284);
					format(string, sizeof(string), "* Valaki felvette a motoros felszerelést.");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
	            else if (item == 2)
	            {
					if(PlayerInfo[playerid][pSwattag] == 1)
					{
						ResetWeapon(playerid);
						SetHealth(playerid, 100);
						SetPlayerArmour(playerid, 150);
						SetPlayerSkin(playerid, 285);
						GiveWeapon(playerid, 4, 1);
						GiveWeapon(playerid, 41, 950);
						GiveWeapon(playerid, 31, 400);
						GiveWeapon(playerid, 24, 400);
						GiveWeapon(playerid, 29, 400);
						GiveWeapon(playerid, 46, 1);
						format(string, sizeof(string), "* Valaki felvette az alap SWAT felszerelést.");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "Csak SWAT Egység tagjainak!");
					}
				}
                else if (item == 3)
	            {
					if(PlayerInfo[playerid][pSwattag] == 1)
					{
						ResetWeapon(playerid);
						SetHealth(playerid, 100);
						SetPlayerArmour(playerid, 150);
						SetPlayerSkin(playerid, 285);
						GiveWeapon(playerid, 41, 950);
						GiveWeapon(playerid, 4, 1);				
						GiveWeapon(playerid, 31, 400);
						GiveWeapon(playerid, 34, 400);
						GiveWeapon(playerid, 24, 400);
						GiveWeapon(playerid, 27, 400);
						GiveWeapon(playerid, 29, 400);
						GiveWeapon(playerid, 39, 50);				
						GiveWeapon(playerid, 46, 1);
						format(string, sizeof(string), "* Valaki felvette a Taktikus SWAT felszerelést.");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "Csak SWAT Egység tagjainak!");
					}
				}
                else if (item == 4)
	            {
					if(PlayerInfo[playerid][pSwattag] == 1)
					{
						ResetWeapon(playerid);
						SetHealth(playerid, 100);
						SetPlayerArmour(playerid, 150);
						SetPlayerSkin(playerid, 285);
						GiveWeapon(playerid, 41, 950);
						GiveWeapon(playerid, 4, 1);				
						GiveWeapon(playerid, 31, 400);
						GiveWeapon(playerid, 34, 400);
						GiveWeapon(playerid, 24, 400);
						GiveWeapon(playerid, 16, 50);
						GiveWeapon(playerid, 27, 400);
						GiveWeapon(playerid, 29, 400);
						GiveWeapon(playerid, 46, 1);
						format(string, sizeof(string), "* Valaki felvette a Támadó SWAT felszerelést.");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "Csak SWAT Egység tagjainak!");
					}
				}
				else if (item == 5)
	            {
					ResetWeapon(playerid);
					SetHealth(playerid, 100);
					SetPlayerArmour(playerid, 100);
					SetPlayerSkin(playerid, 177);
					GiveWeapon(playerid, 24, 50);
					format(string, sizeof(string), "* Valaki felvette a detektív felszerelést.");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Itt hol akarod felvenni?! >.<");
		}
		return 1;
	}
	if(egyezik(cmd, "/raktár"))
	{
		if(PlayerInfo[playerid][pLeader] == 1 || Admin(playerid, 1))
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Deagle: %d | Silenced: %d | Mp5: %d | M4: %d | Shotgun: %d", FrakcioInfo[1][fDeagle], FrakcioInfo[1][fSilenced], FrakcioInfo[1][fMp5], FrakcioInfo[1][fM4], FrakcioInfo[1][fShotgun]);

		else if(PlayerInfo[playerid][pLeader] == 20 || Admin(playerid, 1))
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Deagle: %d | Silenced: %d | Mp5: %d | M4: %d | Shotgun: %d", FrakcioInfo[20][fDeagle], FrakcioInfo[20][fSilenced], FrakcioInfo[1][fMp5], FrakcioInfo[20][fM4], FrakcioInfo[20][fShotgun]);
	}
	
	if(egyezik(cmd, "/csipogó") ||egyezik(cmd, "/csipogo"))
	{
		if(!LMT(playerid, LMUNKA_YAKUZA) && !LMT(playerid, LMUNKA_COLUMBIA) && !LMT(playerid, LMUNKA_CAMORRA)) return Msg(playerid, "Nem vagy maffia tagja!");
		if(NemMozoghat(playerid)) return Msg(playerid, "A-a!")
		Cselekves(playerid, "megnyomta a csipogót.");
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(LMT(x, PlayerInfo[playerid][pMember]))
			{
				SetPlayerMarkerForPlayer(x, playerid, COLOR_RED);
				SendFormatMessage(x, COLOR_LIGHTRED, "RIADÓ!! %s megnyomta a vészcsipogót!!", PlayerName(playerid));
			}
		}
	}
//-------------------_-----FBI tracking system------------------------------//
    if(strcmp(cmd, "/lenyomoz", true) == 0)
	{
	    if(Nincsbelepve(playerid)) return 1;
	    if(LMT(playerid, LMUNKA_FBI) && !IsHitman(playerid) &&  !Admin(playerid, 3)) return Msg(playerid, "/pda..");
		if(!LMT(playerid, LMUNKA_FBI) && !LMT(playerid, LMUNKA_SCPD) && !IsHitman(playerid) &&  !Admin(playerid, 3))
	    {
			SendClientMessage(playerid, COLOR_GREY, "Nem vagy az SCPD / FBI tagja!");
			return 1;
	    }
		if(params < 2)
			return SendClientMessage(playerid, COLOR_GRAD2, "Használat: /lenyomoz [játékos / jármû] [playerid / rendszám]");

		if(egyezik(param[1], "játékos") || egyezik(param[1], "jatekos"))
		{
			if(egyezik(param[2], "all") && Admin(playerid, 1337))
			{
				for(new x = 0; x < MAX_PLAYERS; x++)
				{
					if(!IsPlayerConnected(x) || IsPlayerNPC(x) || !Logged(x)) continue;
					SetPlayerMarkerForPlayer(playerid, x, COLOR_LIGHTRED);
				}
			}
			else
			{
				new player = ReturnUser(param[2]);
				if(player != INVALID_PLAYER_ID)
				{
					//if(PhoneOnline[player] > 0) return Msg(playerid, "A játékosnak kivan kapcsolva a telefonja!");
					if(PlayerInfo[giveplayerid][pPnumber] == 0 && !Admin(playerid, 1337)) return Msg(playerid, "Nincs telefonja!");
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(player, X,Y,Z);
					SetPlayerMarkerForPlayer(playerid, player, 0xFF0000FF );
					SendClientMessage(playerid, COLOR_LIGHTBLUE, " Lenyomoztad a célszemélyt !");
				}
				else
					return Msg(playerid, "Nincs ilyen játékos");
			}
		}
		else if(egyezik(param[1], "jármû") || egyezik(param[1], "jarmu"))
		{
			//if(Nyomozott[playerid] > 0) return Msg(playerid, "Várj egy kicsit.");
			new rendszam = strval(param[2]);
			if(rendszam < 0) return 1;
			new Float:x, Float:y, Float:z;
			GetVehiclePos(rendszam, x, y, z);
			SetPlayerCheckpoint(playerid, x, y, z, 5);
			Nyomozott[playerid] = 10;
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Jármû lenyomozva. (Rendszám: %d)", rendszam);
		}
	}

	if (strcmp(cmdtext, "/stoplenyomoz", true)==0)
	{
	    if(Nincsbelepve(playerid)) return 1;
	    if(!IsACop(playerid) && !IsHitman(playerid) &&  !Admin(playerid, 3))
	    {
			SendClientMessage(playerid, COLOR_GREY, "Nem vagy az rendõrség tagja!");
			return 1;
	    }

	    for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || IsPlayerNPC(x) || !Logged(x)) continue;
			SetPlayerMarkerForPlayer(playerid, x, 0xFFFFFF00);
		}

		DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Most már nem látod õt a GPS-en.");
		return 1;
	}

	if(strcmp(cmd, "/newsRoof", true) == 0)
	{
	//
   	if (PlayerToPoint(10.0, playerid,1784.5400,-1298.2241,13.3750))
   	{
   SetPlayerPos(playerid, 1825.8253,-1298.4059,131.7344);
   SendClientMessage(playerid, COLOR_GRAD1, "Your Now on the Roof!");
   SetPlayerInterior(playerid,0);
   PlayerInfo[playerid][pInt] = 0;
         }
         else
         {
            SendClientMessage(playerid, COLOR_GRAD1, "Your not at the news HQ");
         }
 	return 1;
   }
   // news Teleport 2 //
	/*if(strcmp(cmd, "/newsfloor", true) == 0)
	{
   	if (PlayerToPoint(10.0, playerid,1825.8253,-1298.4059,131.7344))
   	{
   SetPlayerPos(playerid, 1784.5400,-1298.2241,13.3750);
   SendClientMessage(playerid, COLOR_GRAD1, "Your Now on the floor!");
   SetPlayerInterior(playerid,0);
   PlayerInfo[playerid][pInt] = 0;
   SetPlayerFacingAngle(playerid, 273.0872);
         }
         else
         {
            SendClientMessage(playerid, COLOR_GRAD1, "Your not on the news roof");
         }
 	return 1;
   }*/
//--------------------------Website--------------------------------------------
// PD Teleport //
/*	if(strcmp(cmd, "/hátsóbe", true) == 0)
	{
   	if (PlayerToPoint(3.0, playerid,1526.9127,-1677.7935,5.8906))
   	{
   SetPlayerPos(playerid, 246.4178,87.9876,1003.6406);
   SendClientMessage(playerid, COLOR_GRAD1, "A hátsó bejáraton át bementél az LSPDbe!");
   SetPlayerInterior(playerid,6);
   PlayerInfo[playerid][pInt] = 6;
         }
         else
         {
            SendClientMessage(playerid, COLOR_GRAD1, "Nem vagy a hátsó be/kijáratnál!");
         }
 	return 1;
   }
   // PD Teleport 2 //
	if(strcmp(cmd, "/hátsóki", true) == 0)
	{
   	if (PlayerToPoint(3.0, playerid,246.4178,87.9876,1003.6406))
   	{
   SetPlayerPos(playerid, 1526.9127,-1677.7935,5.8906);
   SendClientMessage(playerid, COLOR_GRAD1, "A hátsó kijáraton át kimentél a Parkolóba!");
   SetPlayerInterior(playerid,0);
   PlayerInfo[playerid][pInt] = 0;
   SetPlayerFacingAngle(playerid, 273.0872);
         }
         else
         {
            SendClientMessage(playerid, COLOR_GRAD1, "Nem vagy a hátsó be/kijáratnál!");
         }
 	return 1;
   }*/
//-------------------------------[Pay]--------------------------------------------------------------------------
	if(strcmp(cmd, "/pays", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
//			tmp = strtok(cmdtext, idx);
//			if(!strlen(tmp))
//			{
//				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /pay [playerid/PartOfName] [amount]");
//				return 1;
//			}
			//giveplayerid = strval(tmp);
	        giveplayerid = GetClosestPlayer(playerid);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /pays [amount]");
				return 1;
			}
			moneys = strval(tmp);

			if(moneys < 1 || moneys > 100000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Minimum 1Ft és max 100.000Ft");
			    return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						playermoney = GetMoney(playerid);
						if (moneys > 0 && playermoney >= moneys)
						{
							if(GetMoney(giveplayerid) > MAXERTEK) return Msg(playerid, "Nem fér el több pénz nála...");
							if(FloodCheck(playerid, 1)) return 1;
						    ConsumingMoney[giveplayerid] = 1;
							GiveMoney(playerid, (0 - moneys));
							GiveMoney(giveplayerid, moneys);

							format(string, sizeof(string), "Küldtél a melleted állónak %dFtot.", moneys);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "Kaptál a melletted álló alaktól %dFtot.", moneys);
							SendClientMessage(giveplayerid, COLOR_GRAD1, string);

							format(string, sizeof(string), "%s has paid %dFt to %s", sendername, moneys, giveplayer);
							PayLog(string);
							PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
							ProxDetector(30.0, playerid, "* Valaki átadott egy kis pénzt a másiknak", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE,COLOR_PURPLE, COLOR_PURPLE);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Érvénytelen összeg (1-100000Ft), vagy nincs pénzed.");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Senki sincs a közeledben");
					}
				}//invalid id
			}
			else
			{
				format(string, sizeof(string), "   %d nincs fent a szerveren.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/pay", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /pay [playerid/PartOfName] [amount]");
				return 1;
			}
			//giveplayerid = strval(tmp);
	        giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /pay [playerid/PartOfName] [amount]");
				return 1;
			}
			moneys = strval(tmp);

			if(moneys < 1 || moneys > 100000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Az összeg 1-100000Ft lehet!");
			    return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						playermoney = GetMoney(playerid);
						if (moneys > 0 && playermoney >= moneys)
						{
							if(GetMoney(giveplayerid) > MAXERTEK) return Msg(playerid, "Nem fér el több pénz nála...");
							if(FloodCheck(playerid, 1)) return 1;
						    ConsumingMoney[giveplayerid] = 1;
							GiveMoney(playerid, (0 - moneys));
							GiveMoney(giveplayerid, moneys);
							format(string, sizeof(string), "Küldtél neki: %s[%d], %dFt-ot.", giveplayer,giveplayerid, moneys);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "Kaptál %dFtot tõle: %s[%d].", moneys, sendername, playerid);
							SendClientMessage(giveplayerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "%s has paid %dFt to %s", sendername, moneys, giveplayer);
							PayLog(string);
							PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "* %s elõvett egy kis pénzt és átadta neki: %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Your too far away.");
					}
				}//invalid id
			}
			else
			{
				format(string, sizeof(string), "   %d nincs fent a szerveren.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/charity", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /charity [amount]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "O.O");
				return 1;
			}
			if(GetMoney(playerid) < moneys)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Nincs ennyi pénzed!");
				return 1;
			}
			GiveMoney(playerid, -moneys);
			FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] += moneys;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Köszönjük az adományodat, %s! Ez a %dFt a városkasszába fog kerülni!",sendername, moneys);
			printf("%s", string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			PayLog(string);
		}
		return 1;
	}
//-------------------------------[Stats]--------------------------------------------------------------------------
	if(strcmp(cmd, "/stats", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			format(string, sizeof(string), "* Valaki megnézte az adatait.");
			ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ShowStats(playerid,playerid);
		}
		return 1;
	}
	
	if(strcmp(cmd, "/zsebem", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			format(string, sizeof(string), "* Valaki megnézte a zsebét.");
			ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ShowZseb(playerid,playerid);
		}
		return 1;
	}

	if(strcmp(cmd, "/down", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz-2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nem vagy Admin! !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/up", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nem vagy Admin! !");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/fly", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:px, Float:py, Float:pz, Float:pa;
				GetPlayerFacingAngle(playerid,pa);
				if(pa >= 0.0 && pa <= 22.5) //n1
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
				}
				if(pa >= 332.5 && pa < 0.0) //n2
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
				}
				if(pa >= 22.5 && pa <= 67.5) //nw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py+15, pz+5);
				}
				if(pa >= 67.5 && pa <= 112.5) //w
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-30, py, pz+5);
				}
				if(pa >= 112.5 && pa <= 157.5) //sw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py-15, pz+5);
				}
				if(pa >= 157.5 && pa <= 202.5) //s
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py-30, pz+5);
				}
				if(pa >= 202.5 && pa <= 247.5)//se
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py-15, pz+5);
				}
				if(pa >= 247.5 && pa <= 292.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+30, py, pz+5);
				}
				if(pa >= 292.5 && pa <= 332.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py+15, pz+5);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nem vagy Admin! !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/lt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly+2, slz);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nem vagy Admin! !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly-2, slz-2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nem vagy Admin! !");
			}
		}
		return 1;
	}
//-------------------------------[Check]--------------------------------------------------------------------------
	if(strcmp(cmd, "/check", true) == 0)
	{
		if(!Admin(playerid, 1)) return 1;
			
		if(params < 2)
			return Msg(playerid, "Használat: /check [játékos] [stats / zseb]");
				
        giveplayerid = ReturnUser(param[1]);
	    if(giveplayerid == INVALID_PLAYER_ID)
			return Msg(playerid, "Nincs ilyen játékos!");
				
		if(egyezik(param[2], "stats"))
			ShowStats(playerid, giveplayerid);
		else
			ShowZseb(playerid, giveplayerid);
			
		return 1;
	}
	if (strcmp(cmd, "/number", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pPhoneBook] == 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /number [Játékos v. Telefonszám]");
					return 1;
				}
				if(IsNumeric(tmp))
				{
					new kie = -1;
					new szam = strval(tmp);

					for(new x = 0; x < MAX_PLAYERS; x++)
					{
						if(!IsPlayerConnected(x) || IsPlayerNPC(x) || !Logged(x) || IsClint(x)) continue;

						if(PlayerInfo[x][pPnumber] == szam)
						{
							kie = x;
							break;
						}
					}

					if(kie != -1)
					{
						SendFormatMessage(playerid, COLOR_GRAD1, "Ez a telefonszám (%d) az övé: %s", szam, PlayerName(kie));
						return 1;
					}

				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID && !IsClint(giveplayerid))
				{
					GetPlayerName(giveplayerid, sendername, sizeof(sendername));
					format(string, 256, "Név: %s, Telefonszám: %d",sendername,PlayerInfo[giveplayerid][pPnumber]);
					SendClientMessage(playerid, COLOR_GRAD1, string);
				}
				else
					SendClientMessage(playerid, COLOR_GRAD1, "   Nincs ilyen játékos !");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Nincs telefonkönyved !");
			}
		}
		return 1;
	}
//-------------------------------[BuyLevel]--------------------------------------------------------------------------
	if (strcmp(cmd, "/habagagagahadh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Logged(playerid) != 0)
			{
				PlayerInfo[playerid][pCash] = GetMoney(playerid);
				if(PlayerInfo[playerid][pLevel] >= 0)
				{
					new nxtlevel = PlayerInfo[playerid][pLevel]+1;
					new costlevel = nxtlevel*levelcost;//10k for testing purposes
					new expamount = nxtlevel*levelexp;
					new infostring[256];
					if(GetMoney(playerid) < costlevel)
					{
						format(infostring, 256, "   You do not have enough Cash (%dFt) !",costlevel);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						return 1;
					}
					else if (PlayerInfo[playerid][pExp] < expamount)
					{
						format(infostring, 256, "   You need %d Respect Points, you curently have [%d] !",expamount,PlayerInfo[playerid][pExp]);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						return 1;
					}
					else
					{
						format(string, sizeof(string), "~g~LEVEL UP~n~~w~You Are Now Level %d", nxtlevel);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic(playerid);
						GiveMoney(playerid, (-costlevel));
						PlayerInfo[playerid][pLevel]++;
						if(PlayerInfo[playerid][pDonateRank] > 0)
						{
						    PlayerInfo[playerid][pExp] -= expamount;
						    new total = PlayerInfo[playerid][pExp];
						    if(total > 0)
						    {
						        PlayerInfo[playerid][pExp] = total;
						    }
						    else
						    {
						        PlayerInfo[playerid][pExp] = 0;
						    }
						}
						else
						{
							PlayerInfo[playerid][pExp] = 0;
						}
						PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
						GameTextForPlayer(playerid, string, 5000, 1);
						format(infostring, 256, "   You bought Level %d for (%dFt) Type /upgrade", nxtlevel, costlevel);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						format(infostring, 256, "   You gave %d unspent Upgrade Points",PlayerInfo[playerid][gPupgrade]);
						SendClientMessage(playerid, COLOR_GRAD2, infostring);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Logged in !");
			}
		}
		return 1;
	}
//-------------------------------[UPGRADE]--------------------------------------------------------------------------
	if(strcmp(cmd, "/resetupgrades", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (GetMoney(playerid) < 100000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Cost is 100000Ft !");
				return 1;
			}
			if (PlayerInfo[playerid][pLevel] < 2)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You need to be at least level 2 !");
				return 1;
			}
			PlayerInfo[playerid][gPupgrade] = (PlayerInfo[playerid][pLevel]-1)*2;
			PlayerInfo[playerid][pSHealth] = 0.0;
			PlayerInfo[playerid][pAlcoholPerk] = 0;
			PlayerInfo[playerid][pDrugPerk] = 0;
			PlayerInfo[playerid][pMiserPerk] = 0;
			PlayerInfo[playerid][pPainPerk] = 0;
			PlayerInfo[playerid][pTraderPerk] = 0;
			GiveMoney(playerid,-100000);
			PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			format(string, 256, "   You have %d unspent Upgrade Points !",PlayerInfo[playerid][gPupgrade]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
		return 1;
	}
	/*if(strcmp(cmd, "/getc4", true) == 0)
	{
	    new bizben = BizbeVan(playerid);
		if(bizben == BIZ_GS1 || bizben == BIZ_GS2)
		{
			if(GetMoney(playerid) >= 5000)
			{
			    c4[playerid] = 1;
			    GiveMoney(playerid, -5000);
			    SendClientMessage(playerid, COLOR_YELLOW, "Vettél c4-t");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed(5000FT)");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Nem vagy fegyverboltban!");
		}
		return 1;
	}*/
	if(strcmp(cmd, "/buyweapon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetMoney(playerid) < 1)
			{
			    Msg(playerid, "Nézd már meg menyi pénz van nálad...-.-");
			    return 1;
			}
			if(PlayerInfo[playerid][pGunLic] < 1) return Msg(playerid, "Nincs fegyverengedélyed, ezért nem vehetsz fegyvert.");
			new gun;
			new gunid[16];
			new gunstring1[256];
			new gunstring2[256];
			new gunstring3[256];
//			new gunstring4[256];
			new gunstring5[256];
			new gunstring6[256];
			new infostring[256];
			new guncharge;
			new ammocharge;
			new bizben = BizbeVan(playerid);
			if(bizben == BIZ_GS1 || bizben == BIZ_GS2)
			{
			    if(BizzInfo[bizben][bProducts] <= 0)
			    {
			        GameTextForPlayer(playerid, "~r~Elfogyott", 5000, 1);
					return 1;
			    }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					SendFormatMessage(playerid, COLOR_GRAD2, "Fegyverek(%s)", BizzInfo[bizben][bMessage]);
					SendClientMessage(playerid, COLOR_GRAD2,"Használata: /buyweapon [FegyverNeve] [TölténySzám]");

					format(gunstring1, 256, "Fegyverek: parachute (%dFt) golfclub (%dFt) nightstick (%dFt) baseballütõ (%dFt) shovel (%dFt) poolcue (%dFt)",
					GunPrice[1][0], GunPrice[2][0], GunPrice[3][0], GunPrice[4][0], GunPrice[5][0], GunPrice[6][0]);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring1);

					format(gunstring2, 256, "Fegyverek: purpledildo (%dFt) whitedildo (%dFt) longwhitedildo (%dFt) whitedildo2 (%dFt) flowers (%dFt) cane",
					GunPrice[7][0], GunPrice[8][0], GunPrice[9][0], GunPrice[10][0], GunPrice[11][0], GunPrice[12][0]);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring2);

					format(gunstring3, 256, "Fegyverek: Silenced (%dFt) Colt45 (%dFt) Deagle (%dFt) MP5 (%dFt)",
					GunPrice[13][0], GunPrice[14][0], GunPrice[15][0], GunPrice[18][0]);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring3);

					format(gunstring5, 256, "Töltények árai: Silenced: %dFt, Colt45: %dFt, Deagle: %dFt, MP5: %dFt",
					GunPrice[25][0], GunPrice[26][0], GunPrice[28][0], GunPrice[27][0]);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring5);
					
					format(gunstring6, 256, "Fegyverek: Katana(%dFt) Kés (%dFt)",
					GunPrice[29][0], GunPrice[3][0]);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring6);

					SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					return 1;
				}
				strmid(gunid, tmp, 0, strlen(tmp), 255);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					format(string, sizeof(string), "Használata: /buyweapon [FegyverNeve] [TölténySzám]");
					return 1;
				}
				new ammo = strval(tmp);
				if(ammo < 1 || ammo > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Töltény szám nem lehet kisebb mint 1 és nem lehet több mint 1000!"); return 1; }
				if (strcmp(gunid, "parachute", true, strlen(gunid)) == 0)
				{
					gun = 46;
					guncharge = GunPrice[0][0];
					ammocharge = 0;
				}
				else if (egyezik(gunid, "golfclub"))
				{
					gun = 2; guncharge = GunPrice[1][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "nightstick"))
				{
					gun = 3; guncharge = GunPrice[2][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "baseballütõ"))
				{
					gun = 5; guncharge = GunPrice[4][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "shovel"))
				{
					gun = 6; guncharge = GunPrice[5][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "poolcue"))
				{
					gun = 7; guncharge = GunPrice[6][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "purpledildo"))
				{
					gun = 10; guncharge = GunPrice[7][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "whitedildo"))
				{
					gun = 11; guncharge = GunPrice[8][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "longwhitedildo"))
				{
					gun = 12; guncharge = GunPrice[9][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "whitedildo2"))
				{
					gun = 13; guncharge = GunPrice[10][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "flowers"))
				{
					gun = 14; guncharge = GunPrice[11][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "cane"))
				{
					gun = 15; guncharge = GunPrice[12][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "colt45"))
				{
					gun = 22; guncharge = GunPrice[13][0]; ammocharge = GunPrice[25][0]*ammo;
				}
				else if (egyezik(gunid, "silenced"))
				{
					gun = 23; guncharge = GunPrice[14][0]; ammocharge = GunPrice[26][0]*ammo;
				}
				else if (egyezik(gunid, "deagle"))
				{
					gun = 24; guncharge = GunPrice[15][0]; ammocharge = GunPrice[28][0]*ammo;
				}
				else if (egyezik(gunid, "mp5"))
				{
					gun = 29; guncharge = GunPrice[18][0]; ammocharge = GunPrice[27][0]*ammo;
				}
				else if (egyezik(gunid, "Kés"))
				{
					gun = 4; guncharge = GunPrice[3][0]; ammocharge = 0;
				}
				else if (egyezik(gunid, "Katana"))
				{
					gun = 8; guncharge = GunPrice[29][0]; ammocharge = 0;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "Eladó: Ilyen nem található az üzletemben");
					return 1;
				}
				if((guncharge+ammocharge) > GetMoney(playerid))
				{
					format(infostring, 256, "   Nincs elég pénzed.(%dFT kell) !",guncharge+ammocharge);
					SendClientMessage(playerid, COLOR_GRAD3, infostring);
					return 1;
				}

				new payout = guncharge + ammocharge;
				format(infostring, 256, "Vettél %s %d tölténnyel %dFT-ért.",gunid,ammo,payout);
				SendClientMessage(playerid, COLOR_GRAD3, infostring);

				GiveMoney(playerid, - payout);

				BizPenz(bizben, payout);
				BizzInfo[bizben][bProducts]--;

				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				GiveWeapon(playerid, gun, ammo);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s bought weapons for %dFt at biz %d", sendername, payout, bizben);
				printf("%s", string);
				PayLog(string);
				Cselekves(playerid, "vett egy fegyvert...");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE,"Nem vagy fegyverboltba.");
				return 1;
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/upgrade", true) == 0)
	{
		if(playerid != NINCS) return 1;
	    if(IsPlayerConnected(playerid))
	    {
			new gunid[16];
			new infostring[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				format(string, sizeof(string), "Használat: /upgrade [upgradename] (You have %d Upgrade points)",PlayerInfo[playerid][gPupgrade]);
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"*** UPGRADES ***");
				SendClientMessage(playerid, COLOR_GRAD2,string);
				if(PlayerInfo[playerid][pLevel] == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 2 Perks: Alcoholic, DrugAddict");
				}
				else if(PlayerInfo[playerid][pLevel] == 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 3 Perks: Alcoholic, DrugAddict, Miser");
				}
				else if(PlayerInfo[playerid][pLevel] == 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 4 Perks: Alcoholic, DrugAddict, Miser, Trader");
				}
				else if(PlayerInfo[playerid][pLevel] >= 5)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 5 Perks: Alcoholic, DrugAddict, Miser, Trader, PainKillers");
				}
				SendClientMessage(playerid, COLOR_GRAD5, "Extra Health: health");
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				return 1;
			}
			strmid(gunid, tmp, 0, strlen(cmdtext), 255);
			if (PlayerInfo[playerid][gPupgrade] > 1)
			{
				if (PlayerInfo[playerid][pLevel] >= 1 && (strcmp(gunid, "health", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pSHealth] < 50)
					{
						PlayerInfo[playerid][pSHealth] = PlayerInfo[playerid][pSHealth]+5.0;
						format(infostring, 256, "New Upgrade: You Will Now Spawn With %.2f Health (+5)",PlayerInfo[playerid][pSHealth]+50);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   You Have Maximum Spawn Health");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 2 && (strcmp(gunid, "alcoholic", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pAlcoholPerk] < 3)
					{
						PlayerInfo[playerid][pAlcoholPerk] += 1;
						format(infostring, 256, "New Perk Upgrade: Your Alcoholic Perk is now Level %d.",PlayerInfo[playerid][pAlcoholPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Your Alcoholic Perk is maxed out !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 2 && (strcmp(gunid, "drugaddict", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pDrugPerk] < 3)
					{
						PlayerInfo[playerid][pDrugPerk] += 1;
						format(infostring, 256, "New Perk Upgrade: Your Drug Addict Perk is now Level %d.",PlayerInfo[playerid][pDrugPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Your Drug Addict Perk is maxed out !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "miser", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pMiserPerk] < 3)
					{
						PlayerInfo[playerid][pMiserPerk] += 1;
						format(infostring, 256, "New Perk Upgrade: Your Miser Perk is now Level %d.",PlayerInfo[playerid][pMiserPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Your Miser Perk is maxed out !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 4 && (strcmp(gunid, "trader", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pTraderPerk] < 3)
					{
						PlayerInfo[playerid][pTraderPerk] += 1;
						format(infostring, 256, "New Perk Upgrade: Your Trader Perk is now Level %d.",PlayerInfo[playerid][pTraderPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Your Trader Perk is maxed out !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 5 && (strcmp(gunid, "painkillers", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pPainPerk] < 3)
					{
						PlayerInfo[playerid][pPainPerk] += 1;
						format(infostring, 256, "New Perk Upgrade: Your Pain Killers Perk is now Level %d.",PlayerInfo[playerid][pPainPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Your Pain Killers Perk is maxed out !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "   Unrecognized Upgrade");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   You Have 0 Upgrade Points");
				return 1;
			}
			SendClientMessage(playerid, COLOR_GRAD6, infostring);
			PlayerInfo[playerid][gPupgrade]--;
		}
		return 1;
	}
//-------------------------------[Login]--------------------------------------------------------------------------
	if(strcmp(cmd, "/login", true) == 0)
	{
		if(!JatekBetoltve[playerid]) return Msg(playerid, "Ne siess, várd meg, míg betölt!");
		if(!Registered(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Nem vagy még regisztrálva | Karakter regisztráció a kezelõfelületen: www.usercp.[Gates].net");
		if(Logged(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Már be vagy jelentkezve!");
		if(BejelentkezokSzama >= MAXBEJELENTKEZES)
		{
			if(FloodCheck(playerid, 1, 3)) return 1;
			return Msg(playerid, "Jelenleg több ember lép be a játékba, a túlterhelés miatt várnod kell 1-2 másodpercet, kérlek próbáld meg most");
		}
		format(string, sizeof(string), "Üdv %s\n\nKérlek add meg a jelszavad.\nJelszavad:", PlayerName(playerid));
		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Bejelentkezés", string, "Belépés","Mégse");

		return 1;
	}

	if(strcmp(cmd, "/register", true) == 0)
	{
		if(Registered(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Már regisztrálva vagy!");
		if(Logged(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Már be vagy jelentkezve!");

		format(string, sizeof(string), "Üdv %s\n\nKérlek add meg a jelszavad.\nJelszavad:", PlayerName(playerid));
		ShowPlayerDialog(playerid, DIALOG_REGISTRATION, DIALOG_STYLE_INPUT, "Regisztráció", string, "Regisztráció","Mégse");
		return 1;
	}
//----------------------------------[ooc]-----------------------------------------------
	if(strcmp(cmd, "/ooc", true) == 0 || strcmp(cmd, "/o", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if ((noooc) && PlayerInfo[playerid][pAdmin] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   The OOC channel has been disabled by an Admin !");
				return 1;
			}
			if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "   You can't speak, you have been silenced !");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/o)oc [ooc chat]");
				return 1;
			}
			format(string, sizeof(string), "(( [%d]%s: %s ))", playerid, sendername, result);
			OOCOff(COLOR_LIGHTBLUE,string);
			ChatLog(string);
		}
		return 1;
	}
	if(strcmp(cmd, "/noooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2 && (!noooc))
			{
				noooc = 1;
				BroadCast(COLOR_GRAD2, "   OOC chat channel disabled by an Admin !");
			}
			else if (PlayerInfo[playerid][pAdmin] >= 3 && (noooc))
			{
				noooc = 0;
				BroadCast(COLOR_GRAD2, "   OOC chat channel enabled by an Admin !");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
	if(egyezik(cmd, "/határellenõrzés") || egyezik(cmd, "/hatarellenorzes"))
	{
		if(!LMT(playerid, LMUNKA_VPOP) && !LMT(playerid, LMUNKA_FBI) && !LMT(playerid, LMUNKA_KATONA)) return Msg(playerid, "Nem vagy VPOP / FBI / Katona.");
		if(hatar != 1)
		{
			hatar = 1;
			BroadCast(COLOR_GOV2, " VPOP / Katonaság / FBI befejezte az ellenõrzést a határon!");
			SetDynamicObjectRot(hatar1, 0, 0, 173.04718017578); // 173.04718017578	
			SetDynamicObjectRot(hatar2, 0, 0, 173.04718017578); // 173.04718017578
			return 1;
		}
		else
		{
			hatar = 0;
			BroadCast(COLOR_GOV2, " VPOP / Katonaság / FBI ellenõrzést tart a határon!");
			SetDynamicObjectRot(hatar1, 0.000000, 270.000000, 90.000000);
			SetDynamicObjectRot(hatar2, 0, 90, 90.0000); // 173.04718017578
			return 1;			
		}
	}
	if(egyezik(cmd, "/vkengedély") || egyezik(cmd, "/vke"))
	{
		if(PlayerInfo[playerid][pLeader] == 20 ||  IsPlayerAdmin(playerid))
		{
			new name[MAX_PLAYER_NAME];
			//new string[128];
			GetPlayerName(playerid, name, sizeof(name));
			if(vk != 1)
			{
				vk = 1;
				format(string, sizeof(string), "** FIGYELEM: %s engedélyezte a VK Felszerelést! **", name);
				SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
				return 1;
			}
			else
			{
				vk = 0;
				format(string, sizeof(string), "** FIGYELEM: %s betiltotta a VK Felszerelést! **", name);
				SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
				return 1;			
			}
		}
	}
	/*if(strcmp(cmd, "/határellenõrzés", true) == 0 || strcmp(cmd, "/hatarellenorzes", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsACop(playerid) &&  !(hatar))
			{
				hatar = 1;
				BroadCast(COLOR_GOV2, " VPOP / Katonaság / FBI befejezte az ellenõrzést a határon!");
				SetDynamicObjectRot(hatar1, 0, 0, 173.04718017578); // 173.04718017578	
				SetDynamicObjectRot(hatar2, 0, 0, 173.04718017578); // 173.04718017578	
			}
			else if(IsACop(playerid) && (hatar))
			{
				hatar = 0;
				BroadCast(COLOR_GOV2, " VPOP / Katonaság / FBI ellenõrzést tart a határon!");
				SetDynamicObjectRot(hatar1, 0.000000, 270.000000, 90.000000);
				SetDynamicObjectRot(hatar2, 0, 90, 90.0000); // 173.04718017578	
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nem vagy VPOP / Katona / FBI!");
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/speedo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gSpeedo[playerid] == 1)
			{
				gSpeedo[playerid] = 2;
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~on", 5000, 5);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
			else if (gSpeedo[playerid] == 2)
			{
				gSpeedo[playerid] = 1;
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~off", 5000, 5);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "you dont have a speedometer");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/fuel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gGas[playerid] == 0)
			{
				gGas[playerid] = 1;
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~Benzin info bekapcsolva", 5000, 5);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
			else if (gGas[playerid] == 1)
			{
				gGas[playerid] = 0;
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~Benzin info kikapcsolva", 5000, 5);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
		}
		return 1;
	}
//----------------------------------[advertise]-----------------------------------------------

	if(strcmp(cmd, "/hitmanadvertise", true) == 0 || strcmp(cmd, "/had", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {

	        if(!IsHitman(playerid))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nem vagy Hitman!");
	            return 1;
	        }

			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /(h)itman(ad)vertise [advert text]");
				return 1;
			}
			if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1))
			{
				format(string, sizeof(string), "   Please try again later %d seconds between Advertisements !",  (addtimer/1000));
				SendClientMessage(playerid, COLOR_GRAD2, string);
				return 1;

			}
			new payout = idx * 25;
			if(GetMoney(playerid) < payout)
	        {
	            format(string, sizeof(string), "* You used %d characters which cost %dFt, you don't have enough.", offset, payout);
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	            return 1;
	        }
			GiveMoney(playerid, - payout);

			BizPenz(BIZ_HIRDETES, payout);

			format(string, sizeof(string), "Hírdetés: %s | Hírdetõ: Hitman (Bérgyilkos)", result);
			OOCNews(TEAM_GROVE_COLOR,string);
			format(string, sizeof(string), "~r~Paid %dFt~n~~w~Message contained: %d Characters", payout, idx);
			GameTextForPlayer(playerid, string, 5000, 5);
			if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
			format(string, sizeof(string), "Hírdetés: %s | Hírdetõ: Hitman (%s)", result, sendername);
			EgyebLog(string);
		}
		return 1;
	}

	if(strcmp(cmd, "/advertise", true) == 0 || strcmp(cmd, "/ad", true) == 0)
	{
	    if(!Bortonben(playerid))
	    {
			new illegalis;

			if(!LegalisSzervezetTagja(playerid))
			{
				tmp = strtok(cmdtext, idx);

				if(!egyezik(tmp, "legális") && !egyezik(tmp, "legalis") && !egyezik(tmp, "illegális") && !egyezik(tmp, "illegális"))
					return Msg(playerid, "Használata: /ad [legális/illegális] [hírdetés]");
				else if(egyezik(tmp, "illegalis") || egyezik(tmp, "illegális"))
					illegalis = 1;
			}

			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[96];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				if(!illegalis)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használata: /ad [hírdetés]");
					SendClientMessage(playerid, COLOR_GRAD2, "Ha oktatót keresel, /oktatók");
				}
				else
					SendClientMessage(playerid, COLOR_GRAD2, "Használata: /ad [legális/illegális] [hírdetés]");
				return 1;
			}

			if(SzovegEllenorzes(playerid, result, "/ad", ELLENORZES_MINDKETTO))
				return 1;

			if(PlayerInfo[playerid][pAdmin] < 1)
			{
				if(illegalis && !ladds || !illegalis && !adds)
					return SendClientMessage(playerid, COLOR_GRAD2, "Már adtak fel hírdetést, próbáld meg késõbb...");
			}

			if(strlen(result) < 10)
				return SendClientMessage(playerid, COLOR_GREY, "Minimum 10 karakter!");

			if(!Jatszottora(playerid, 10))
				return SendClientMessage(playerid, COLOR_GREY, "Még nem játszottál eleget, hogy használhatsd.");

			new payout;

			if(!illegalis)
			{
				payout = strlen(result) * BizzInfo[BIZ_HIRDETES][bEntranceCost];
				if(GetMoney(playerid) < payout)
				{
					format(string, sizeof(string), "* A hírdetés %dFtba kerül! Neked nincs ennyid.", payout);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					return 1;
				}
				GiveMoney(playerid, - payout);
				BizPenz(BIZ_HIRDETES, payout);
			}

			if(!illegalis)
			{
				format(string, sizeof(string), "Hírdetés: %s | Hírdetõ: %s | Tel.: %d [%s:%s]",  result, PlayerName(playerid),PlayerInfo[playerid][pPnumber], Time("ora"), Time("perc"));
				OOCNews(TEAM_GROVE_COLOR,string);
				EgyebLog(string);

				format(string, sizeof(string), "~r~A hirdetes ara %dFt~n~~w~%d karakterbol allt", payout, strlen(result));
				GameTextForPlayer(playerid, string, 5000, 5);
				if(PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
			}
			else
			{
				format(string, sizeof(string), "Alvilág: %s | Hírdetõ: %s | Tel.: %d [%s:%s]",  result, PlayerName(playerid), PlayerInfo[playerid][pPnumber], Time("ora"), Time("perc"));
				EgyebLog(string);
				for(new u = 0; u < MAX_PLAYERS; u++)
				{
					if(!IsPlayerConnected(u) || !Logged(u) || IsPlayerNPC(u) || LegalisSzervezetTagja(u) && !Admin(u, 1)) continue;
					SendClientMessage(u, COLOR_LIGHTRED, string);
				}
				if(PlayerInfo[playerid][pAdmin] < 1){SetTimer("LAddsOn", laddtimer, 0);ladds = 0;}
			}
		}
		else
			Msg(playerid, "Börtönben nem lehet!");
		return 1;
	}

//----------------------------------[government]-----------------------------------------------
	if(strcmp(cmd, "/government", true) == 0 || strcmp(cmd, "/gov", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsACop(playerid) && !LMT(playerid, LMUNKA_ONKORMANYZAT))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nem vagy Rendõr / (Al)Elnök!");
			    return 1;
			}
			if(!LMT(playerid, LMUNKA_FBI) && !LMT(playerid, LMUNKA_SCPD) && !LMT(playerid, LMUNKA_VPOP) && PlayerInfo[playerid][pRank] < 5)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Minimum 5ös rang!");
			    return 1;
			}
			if(LMT(playerid, LMUNKA_SCPD) && PlayerInfo[playerid][pRank] < 8) return Msg(playerid, "Minimum 8as rang.");
			if(LMT(playerid, LMUNKA_VPOP) && PlayerInfo[playerid][pRank] < 10) return Msg(playerid, "Minimum 10as rang.");
			if(LMT(playerid, LMUNKA_KATONA) && PlayerInfo[playerid][pRank] < 9) return Msg(playerid, "Minimum 9es rang.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[120];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/gov)ernment [text]");
				return 1;
			}

			format(string, sizeof(string), "%s: %s", sendername, result);

			if(LMT(playerid, LMUNKA_SCPD))
			{
				SendClientMessageToAll(COLOR_WHITE, "|___________ See City Police Department-i felhívás ___________|");
				SendClientMessageToAll(COLOR_DBLUE, string);
			}
			if(LMT(playerid, LMUNKA_SFPD))
			{
				SendClientMessageToAll(COLOR_WHITE, "|___________ San Fierro Police Department-i felhívás ___________|");
				SendClientMessageToAll(COLOR_DBLUE, string);
			}
			if(LMT(playerid, LMUNKA_FBI))
			{
				SendClientMessageToAll(COLOR_WHITE, "|___________ Federal Bureau of Investigation-i felhívás ___________|");
				SendClientMessageToAll(COLOR_DBLUE, string);
			}
			if(LMT(playerid, LMUNKA_KATONA))
			{
				SendClientMessageToAll(COLOR_WHITE, "|___________ Katona felhívás ___________|");
				SendClientMessageToAll(COLOR_DBLUE, string);
			}
			if(LMT(playerid, LMUNKA_VPOP))
			{
				SendClientMessageToAll(COLOR_WHITE, "|___________ Nemzeti Adó- és Vámhivatal felhívás ___________|");
				SendClientMessageToAll(COLOR_DBLUE, string);
			}
			if(LMT(playerid, LMUNKA_ONKORMANYZAT))
			{
				SendClientMessageToAll(COLOR_GOV1, "|___________ Önkormányzati felhívás ___________|");
				SendClientMessageToAll(COLOR_GOV2, string);
			}
			format(string, sizeof(string), "%s: %s", sendername, result);
		}
		return 1;
	}
	if(strcmp(cmd, "/swatgovernment", true) == 0 || strcmp(cmd, "/sgov", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pSwattag] != 1) return Msg(playerid, "Csak SWATosoknak.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[120];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				Msg(playerid, "/sgov [Szöveg]");
				return 1;
			}

			format(string, sizeof(string), "%s: %s", sendername, result);

			SendClientMessageToAll(COLOR_LIGHTRED, "|___________ Special Weapons And Tactics-i felhívás ___________|");
			SendClientMessageToAll(COLOR_DBLUE, string);
		}
		return 1;
	}
//----------------------------------[togooc]-----------------------------------------------

	if(strcmp(cmd, "/tog", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Admin(playerid, 1))
				SendClientMessage(playerid, COLOR_GREY, "/tog parancsok: /togreport /togooc /tognews /togradio /togwhisper /togphone /toginfo");
			else
				SendClientMessage(playerid, COLOR_GREY, "/tog parancsok: /togooc /tognews /togradio /togwhisper /togphone");
		}
		return 1;
	}

	if(strcmp(cmd, "/togreport", true) == 0)
	{
	    if(Admin(playerid, 1))
	    {
			if (!gReport[playerid])
			{
				gReport[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "Nem látod a reportokat!");
			}
			else if(gReport[playerid])
			{
				gReport[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "Ismét látod a reportokat!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/toginfo", true) == 0)
	{
	    if(Admin(playerid, 1))
	    {
			if (gInfo[playerid] == 0)
			{
				gInfo[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "Nem látod az infokat!");
			}
			else
			{
				gInfo[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "Ismét látod az infokat!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/togb", true) == 0)
	{
		if(!gBooc[playerid])
		{
			gBooc[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "Ha IC írsz, az most már OOC szöveg lesz");
		}
		else
		{
			gBooc[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "Most már megint IC szöveg lesz");
		}
		return 1;
	}
	
	if(strcmp(cmd, "/togszidas", true) == 0)
	{
		if(!gBoocszidas[playerid])
		{
			gBoocszidas[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "Most már látod az OOC szidásokat");
		}
		else
		{
			gBoocszidas[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "Most már nem látod az OOC szidásokat");
		}
		return 1;
	}
	
	if(strcmp(cmd, "/togooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gOoc[playerid])
			{
				gOoc[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   OOC chat channel Disabled !");
			}
			else
			{
				gOoc[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   OOC chat channel Enabled !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tognews", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gNews[playerid])
			{
				gNews[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   News chat channel Disabled !");
			}
			else if (gNews[playerid])
			{
				gNews[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   News chat channel Enabled !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/togradio", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gFam[playerid])
			{
				gFam[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Rádió kikapcsolva");
			}
			else if (gFam[playerid])
			{
				gFam[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Rádió bekapcsolva!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/togwhisper", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pAdmin] > 1)
	        {
				if (!HidePM[playerid])
				{
					HidePM[playerid] = 1;
					SendClientMessage(playerid, COLOR_GRAD2, "   Whisper chat channel Disabled !");
				}
				else if (HidePM[playerid])
				{
					HidePM[playerid] = 0;
					SendClientMessage(playerid, COLOR_GRAD2, "   Whisper chat channel Enabled !");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Not an Admin / Premium Account User !");
	            return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/togphone", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pPnumber] == 0) return Msg(playerid, "Nincs telefonod!");
			if (!PhoneOnline[playerid])
			{
				PhoneOnline[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Telefonod kikapcsolva !");
				Cselekves(playerid, "kikapcsolta a telefonját.", 1);
			}
			else if (PhoneOnline[playerid])
			{
				PhoneOnline[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Telefonod bekapcsolva !");
				Cselekves(playerid, "bekapcsolta a telefonját.",1);
			}
		}
		return 1;
	}
//----------------------------------[Emote]-----------------------------------------------
	if(strcmp(cmd, "/va", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /va [action]");
				return 1;
			}
			format(string, sizeof(string), "* Valaki %s", result);

			ProxDetector(B_Cselekves, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			new szoveg[128]; Format(szoveg, "* %s", result);
			SetPlayerChatBubble(playerid, szoveg, COLOR_PURPLE, B_Cselekves, 5000);

			format(string, sizeof(string), "[%s]* Valaki %s", sendername, result);
			ChatLog(string);
		}
		return 1;
	}
	if(strcmp(cmd, "/do", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /do [action]");
				return 1;
			}
			
			format(string, sizeof(string), "[%s]* %s", PlayerName(playerid), result);
			ChatLog(string);
			format(string, sizeof(string), "* %s", result);

			SetPlayerChatBubble(playerid, string, COLOR_BLUE, B_Cselekves, 5000);
			ProxDetector(B_Cselekves, playerid, string, COLOR_BLUE,COLOR_BLUE,COLOR_BLUE,COLOR_BLUE,COLOR_BLUE);
		}
		return 1;
	}
	if(strcmp(cmd,"/swt",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, 0xFF2F00FF, "Segítség: /swt [funkció]");
				SendClientMessage(playerid, 0xFF2F00FF, "FIGYELEM: Csak SWAT-os kocsi mellett használjátok, csak RPsen!");
				SendClientMessage(playerid, 0xFF2F00FF, "FIGYELEM: Ha intibe mentek frissítsétek a parancsot, töröljétek a pajzsot majd vegyétek elõ újra.");
				SendClientMessage(playerid, 0xFF2F00FF, "FIGYELEM: Halál után töröld a SWAT pajzsot mert bajok lesznek.");
				SendClientMessage(playerid, 0xFF2F00FF, "FIGYELEM: Amint elõveszed a Pajzsot írd be: /cop.");
				SendClientMessage(playerid, 0xFFAE00FF, "Használat(Rang 1): p1, p2, p3");
				SendClientMessage(playerid, 0xFFAE00FF, "Törlés(Rang 1): t1, t2, t3");
				SendClientMessage(playerid, 0xFFAE00FF, "Újratöltés(Rang 1): r1, r2, r3");
				SendClientMessage(playerid, 0xFF2F00FF, "Engedélyezés(Rang 3): engedélyezés, betiltás");
				SendClientMessage(playerid, 0xFF2F00FF, "Bugos object esetén(Rang 4): újratöltés");
				return 1;
			}
			if(strcmp(tmp,"p1",true) == 0)
			{
				if(IsPlayerConnected(playerid))
				{
					if(pajzs1 == 0)
					{
					    if(swatpajzs == 1)
					    {
					    	if(PlayerInfo[playerid][pSwatRang] >= 1)
							{
								if(pajzsnala[playerid] == 0)
								{
									Cselekves(playerid, "elõvette az 1-es S.W.A.T. Pajzsot.");
									new Float:x, Float:y, Float:z;
									GetPlayerPos(playerid, x, y, z);
									pajzsnala[playerid] = 1;
									spajzs1 = CreateObject(1555,x,y,z,0,0,0);
									AttachObjectToPlayer(spajzs1,playerid,0.7,0.5,1,0,180,0);
									pajzs1 = 1;
									Swat3D[playerid] = CreateDynamic3DTextLabel("SWAT PAJZS", COLOR_WHITE, 0.0, 0.0, 0.5, 40.0, playerid);
									return 1;
								}
							}
							else
							{
								SendClientMessage(playerid, 0xFF2F00FF, "Nincs engedélyezve a S.W.A.T. Pajzs!");
								return 1;
							}
						}
					}
				}
			}
			if(strcmp(tmp,"p2",true) == 0)
			{
				if(IsPlayerConnected(playerid))
				{
					if(pajzs2 == 0)
					{
						if(swatpajzs == 1)
						{
							if(PlayerInfo[playerid][pSwatRang] >= 1)
							{
								if(pajzsnala[playerid] == 0)
								{
									Cselekves(playerid, "elõvette a 2-es S.W.A.T. Pajzsot.");
									new Float:x, Float:y, Float:z;
									GetPlayerPos(playerid, x, y, z);
									spajzs2 = CreateObject(1555,x,y,z,0,0,0);
									AttachObjectToPlayer(spajzs2,playerid,0.7,0.5,1,0,180,0);
									pajzs2 = 1;
									pajzsnala[playerid] = 2;
									Swat3D[playerid] = CreateDynamic3DTextLabel("SWAT PAJZS", COLOR_WHITE, 0.0, 0.0, 0.5, 40.0, playerid);
									return 1;
								}
							}
							else
							{
								SendClientMessage(playerid, 0xFF2F00FF, "Nincs engedélyezve a S.W.A.T. Pajzs!");
								return 1;
							}
						}
					}
				}
			}
			if(strcmp(tmp,"p3",true) == 0)
			{
				if(IsPlayerConnected(playerid))
				{
					if(pajzs3 == 0)
					{
					    if(swatpajzs == 1)
		 				{
			            	if(PlayerInfo[playerid][pSwatRang] >= 1)
							{
								if(pajzsnala[playerid] == 0)
								{
									Cselekves(playerid, "elõvette a 3-as S.W.A.T. Pajzsot.");
									new Float:x, Float:y, Float:z;
									GetPlayerPos(playerid, x, y, z);
									spajzs3 = CreateObject(1555,x,y,z,0,0,0);
									AttachObjectToPlayer(spajzs3,playerid,0.7,0.5,1,0,180,0);
									pajzs3 = 1;
									pajzsnala[playerid] = 3;
									Swat3D[playerid] = CreateDynamic3DTextLabel("SWAT PAJZS", COLOR_WHITE, 0.0, 0.0, 0.5, 40.0, playerid);
									return 1;
								}
							}
							else
							{
								SendClientMessage(playerid, 0xFF2F00FF, "Nincs engedélyezve a S.W.A.T. Pajzs!");
								return 1;
							}
						}
					}
				}
   			}
			if(strcmp(tmp,"t1",true) == 0)
			{
				if(IsPlayerConnected(playerid))
				{
					if(pajzs1 == 1)
					{
		            	if(PlayerInfo[playerid][pSwatRang] >= 1)
						{
							if(pajzsnala[playerid] == 1)
							{
								Cselekves(playerid, "eltette az 1-es S.W.A.T. Pajzsot.");
								DestroyObject(spajzs1);
								pajzs1 = 0;
								pajzsnala[playerid] = 0;
								DestroyDynamic3DTextLabel(Swat3D[playerid]);
								return 1;
							}
						}
					}
		  		}
			}
			if(strcmp(tmp,"t2",true) == 0)
			{
				if(IsPlayerConnected(playerid))
				{
					if(pajzs2 == 1)
					{
						if(PlayerInfo[playerid][pSwatRang] >= 1)
						{
							if(pajzsnala[playerid] == 2)
							{
								Cselekves(playerid, "eltette a 2-es S.W.A.T. Pajzsot.");
								DestroyObject(spajzs2);
								pajzs2 = 0;
								pajzsnala[playerid] = 0;
								DestroyDynamic3DTextLabel(Swat3D[playerid]);
								return 1;
							}
						}
					}
		  		}
			}
			if(strcmp(tmp,"t3",true) == 0)
			{
				if(IsPlayerConnected(playerid))
				{
					if(pajzs3 == 1)
					{
						if(PlayerInfo[playerid][pSwatRang] >= 1)
						{
							if(pajzsnala[playerid] == 3)
							{
								Cselekves(playerid, "eltette a 3-as S.W.A.T. Pajzsot.");
								DestroyObject(spajzs3);
								pajzs3 = 0;
								pajzsnala[playerid] = 0;
								DestroyDynamic3DTextLabel(Swat3D[playerid]);
								return 1;
							}
						}
					}
		  		}
			}
			if(strcmp(tmp,"r1",true) == 0)
			{
				if(IsPlayerConnected(playerid))
				{
					if(pajzsnala[playerid] == 1)
					{
						Cselekves(playerid, "elõvette az 1-es S.W.A.T. Pajzsot.");
						new Float:x, Float:y, Float:z;
						GetPlayerPos(playerid, x, y, z);
						AttachObjectToPlayer(spajzs1,playerid,0.7,0.5,1,0,180,0);
						pajzs1 = 1;
						pajzsnala[playerid] = 1;
						Swat3D[playerid] = CreateDynamic3DTextLabel("SWAT PAJZS", COLOR_WHITE, 0.0, 0.0, 0.5, 40.0, playerid);
						return 1;
					}
				}
			}
			if(strcmp(tmp,"r2",true) == 0)
			{
				if(IsPlayerConnected(playerid))
				{
					if(pajzsnala[playerid] == 2)
					{
						Cselekves(playerid, "elõvette a 2-es S.W.A.T. Pajzsot.");
						new Float:x, Float:y, Float:z;
						GetPlayerPos(playerid, x, y, z);
						AttachObjectToPlayer(spajzs2,playerid,0.7,0.5,1,0,180,0);
						pajzs2 = 1;
						pajzsnala[playerid] = 2;
						Swat3D[playerid] = CreateDynamic3DTextLabel("SWAT PAJZS", COLOR_WHITE, 0.0, 0.0, 0.5, 40.0, playerid);
						return 1;
					}
				}
			}
			if(strcmp(tmp,"r3",true) == 0)
			{
				if(IsPlayerConnected(playerid))
				{
					if(pajzsnala[playerid] == 3)
					{
						Cselekves(playerid, "elõvette a 3-as S.W.A.T. Pajzsot.");
						new Float:x, Float:y, Float:z;
						GetPlayerPos(playerid, x, y, z);
						AttachObjectToPlayer(spajzs3,playerid,0.7,0.5,1,0,180,0);
						pajzs3 = 1;
						pajzsnala[playerid] = 3;
						Swat3D[playerid] = CreateDynamic3DTextLabel("SWAT PAJZS", COLOR_WHITE, 0.0, 0.0, 0.5, 40.0, playerid);
						return 1;
					}
				}
			}
			if(strcmp(tmp,"engedélyezés",true) == 0)
			{
            	if(PlayerInfo[playerid][pSwatRang] >= 3)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "** %s engedélyezte a S.W.A.T. Pajzsok használatát! **", sendername);
					SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
					DestroyObject(spajzs1);
					pajzs1 = 0;
					DestroyObject(spajzs2);
					pajzs2 = 0;
					DestroyObject(spajzs3);
					pajzs3 = 0;
					swatpajzs = 1;
					return 1;
				}
			}
			if(strcmp(tmp,"betiltás",true) == 0)
			{
				if(PlayerInfo[playerid][pSwatRang] >= 3)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "** %s betiltotta a S.W.A.T. Pajzsok használatát! **", sendername);
					SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
					DestroyObject(spajzs1);
					pajzs1 = 0;
					DestroyObject(spajzs2);
					pajzs2 = 0;
					DestroyObject(spajzs3);
					pajzs3 = 0;
					swatpajzs = 0;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pSwattag] == 1)
							{
								pajzsnala[i] = 0;
								DestroyDynamic3DTextLabel(Swat3D[i]);
							}
						}
					}
				}
			}
		}
	}
	if(strcmp(cmd, "/me", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new jatekosneve[256];
			GetPlayerName(playerid, jatekosneve, sizeof(jatekosneve));

			if(PlayerInfo[playerid][pHamisNev] == 1)
				jatekosneve = PlayerInfo[playerid][pHamisNev];

			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /me [action]");
				return 1;
			}
			if(PlayerInfo[playerid][pHamisNev] == 0)
			{
				format(string, sizeof(string), "* %s %s", jatekosneve, result);
				ChatLog(string);
			}
			else
			{
			    format(string, sizeof(string), "[%s]* %s %s", jatekosneve, PlayerInfo[playerid][pHamisNev], result);
			    ChatLog(string);
			    format(string, sizeof(string), "* %s %s", PlayerInfo[playerid][pHamisNev], result);
			}

			new szoveg[128]; Format(szoveg, "* %s", result);
			SetPlayerChatBubble(playerid, szoveg, COLOR_PURPLE, B_Cselekves, 5000);
			ProxDetector(B_Cselekves, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
//----------------------------------[Local]-----------------------------------------------
	/*if(strcmp(cmd, "/hs", true) == 0 || strcmp(cmd, "/hitmansay", true) == 0 || strcmp(cmd, "/hitmanmondja", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsHitman(playerid))
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[128];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/l)ocal [local chat]");
					return 1;
				}

				ProxDetector(B_Normal, playerid, result, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SetPlayerChatBubble(playerid, result, COLOR_WHITE, B_Normal, 5000);

			    format(string, sizeof(string), "[Hitman %s]%s", sendername, result);
			    ChatLog(string);
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/local", true) == 0 || strcmp(cmd, "/l", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/l)ocal [local chat]");
				return 1;
			}
			if(IsOOC(result)) return Msg(playerid, "Nincs /l ooc!");
			
			if(SzovegEllenorzes(playerid, result, "/l"))
				return 1;
				
			if(SzajBekotve[playerid] == 1) return Msg(playerid, "A szád bevan kötve, így nem tudsz beszélni.");
			format(string, sizeof(string), "Valaki mondja: %s", result);

			ProxDetector(B_Normal, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid, result, COLOR_WHITE, B_Normal, 5000);

			format(string, sizeof(string), "[%s]Valaki mondja: %s", sendername, result);
			ChatLog(string);
		}
		return 1;
	}
	if(strcmp(cmd, "/b", true) == 0)//local ooc
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /b [local ooc chat]");
				return 1;
			}

			if(SzovegEllenorzes(playerid, result, "/b", ELLENORZES_MINDKETTO))
				return 1;

			if(PlayerInfo[playerid][pHamisNev] == 0)
			{
				format(string, sizeof(string), "%s mondja OOC: (( %s ))", sendername, result);
				ChatLog(string);
			}
			else
			{
			    format(string, sizeof(string), "[%s]%s mondja OOC: (( %s ))", sendername, PlayerInfo[playerid][pHamisNev], result);
			    ChatLog(string);
				format(string, sizeof(string), "%s mondja OOC: (( %s ))", PlayerInfo[playerid][pHamisNev], result);
			}
			ProxDetector(B_Normal, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		return 1;
	}
	if(strcmp(cmd, "/close", true) == 0 || strcmp(cmd, "/c", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /(c)lose [close chat text]");
				return 1;
			}
			if(SzovegEllenorzes(playerid, result, "/c"))
				return 1;
				
			if(SzajBekotve[playerid] == 1) return Msg(playerid, "A szád bevan kötve, így nem tudsz beszélni.");
			
			if(PlayerInfo[playerid][pHamisNev] == 0)
			{
				format(string, sizeof(string), "%s suttogja: %s", sendername, result);
				ChatLog(string);
			}
			else
			{
			    format(string, sizeof(string), "[%s]%s suttogja: %s", sendername, PlayerInfo[playerid][pHamisNev], result);
				ChatLog(string);
			    format(string, sizeof(string), "%s suttogja: %s", PlayerInfo[playerid][pHamisNev], result);
			}
			ProxDetector(B_Kozel, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid, result, COLOR_WHITE, B_Kozel, 5000);
		}
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
	if(strcmp(cmd, "/shout", true) == 0 || strcmp(cmd, "/s", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/s)hout [local chat]");
				return 1;
			}

			if(SzovegEllenorzes(playerid, result, "/s"))
				return 1;

			if(SzajBekotve[playerid] == 1) return Msg(playerid, "A szád bevan kötve, így nem tudsz beszélni.");
			if(PlayerInfo[playerid][pHamisNev] == 0)
			{
				format(string, sizeof(string), "%s ordítja: %s!!", sendername, result);
				ChatLog(string);
			}
			else
			{
			    format(string, sizeof(string), "[%s]%s ordítja: %s!!", sendername, PlayerInfo[playerid][pHamisNev], result);
			    ChatLog(string);
			    format(string, sizeof(string), "%s ordítja: %s!!", PlayerInfo[playerid][pHamisNev], result);
			}
			ProxDetector(B_Tavol, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			SetPlayerChatBubble(playerid, result, COLOR_WHITE, B_Tavol, 5000);
		}
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
	if(strcmp(cmd, "/megaphone", true) == 0 || strcmp(cmd, "/m", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new tmpcar = GetPlayerVehicleID(playerid);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/m)egaphone [megaphone chat]");
				return 1;
			}
			if(SzajBekotve[playerid] == 1) return Msg(playerid, "A szád bevan kötve, így nem tudsz beszélni.");
			if(IsACop(playerid))
			{
				if(!IsACopCar(tmpcar))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Nem vagy rendõr autóba!");
					return 1;
				}
				if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNKA_FBI) || LMT(playerid, LMUNKA_KATONA) || LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_SFPD))
				{

					if(SzovegEllenorzes(playerid, result, "/m"))
						return 1;

					format(string, sizeof(string), "[ %s o< %s ]", sendername, result);

					ProxDetector(B_Tavol2, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);

					Format(result, "o< %s", result);
					SetPlayerChatBubble(playerid, result, COLOR_YELLOW, B_Tavol2, 5000);
				}
				ChatLog(string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Nem vagy az LSPD/SFPD/FBI/Katonaság/VPOP tagja!");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[Team]-----------------------------------------------
	if(strcmp(cmd, "/radio", true) == 0 || strcmp(cmd, "/r", true) == 0)
	{
	    if(!Bortonben(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/r)adio [radio chat]");
				return 1;
			}

			if(SzovegEllenorzes(playerid, result, "/r"))
				return 1;

			if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNKA_KATONA) || LMT(playerid, LMUNKA_MENTO) || LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_SFPD))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 12) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][12];

				format(string, sizeof(string), "** %s %s: %s, vége **", rangnev, sendername, result);
				SendRadioMessage(munka+1, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				format(string, sizeof(string), "[Rádió]%s mondja: %s", sendername, result);
				ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			}
			else if(LMT(playerid, LMUNKA_COLUMBIA))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];
				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 10) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][10];
				format(string, sizeof(string), "** %s %s: %s, vége **", rangnev, sendername, result);
				SendRadioMessage(munka+1, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				format(string, sizeof(string), "[Rádió]%s mondja: %s", sendername, result);
				ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			}
			else if(LMT(playerid, LMUNKA_CAMORRA))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];
				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 9) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][9];
				if(Munkarang(playerid, FrakcioInfo[LMUNKA_CAMORRA][fMinrang]))
				{
					format(string, sizeof(string), "** %s: %s, vége **", rangnev, result);
					SendRadioMessage(munka+1, TEAM_BLUE_COLOR, string);
					printf("%s", string);
					format(string, sizeof(string), "[Rádió]Valaki mondja: %s", result);
					ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
					format(string, sizeof(string), "** %s %s: %s, vége **", rangnev, sendername, result);
					SendRadioMessage(munka+1, TEAM_BLUE_COLOR, string);
					printf("%s", string);
					format(string, sizeof(string), "[Rádió]%s mondja: %s", sendername, result);
					ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				return 1;
			}
			else if(LMT(playerid, LMUNKA_YAKUZA))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];
				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 8) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][8];
				format(string, sizeof(string), "** %s %s: %s, vége **", rangnev, sendername, result);
				SendRadioMessage(munka+1, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				format(string, sizeof(string), "[Rádió]%s mondja: %s", sendername, result);
				ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			}
			else if(LMT(playerid, LMUNKA_FBI))
			{
				if(PlayerInfo[playerid][pRank] <= 5)
				{
					new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];
					if(rang <= 0) rangnev = Rangok[munka][0];
					else if(rang >= 1 && rang <= 12) rangnev = Rangok[munka][rang];
					else rangnev = Rangok[munka][12];

					format(string, sizeof(string), "** %s %s: %s, vége **", rangnev, sendername, result);
					SendRadioMessage(munka+1, Pink, string);
					printf("%s", string);
					format(string, sizeof(string), "[Rádió]%s mondja: %s", sendername, result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					return 1;
				}
				else
				{
					new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];
					if(rang <= 0) rangnev = Rangok[munka][0];
					else if(rang >= 1 && rang <= 12) rangnev = Rangok[munka][rang];
					else rangnev = Rangok[munka][12];

					format(string, sizeof(string), "** %s %s: %s, vége **", rangnev, sendername, result);
					SendRadioMessage(munka+1, Pink2, string);
					printf("%s", string);
					format(string, sizeof(string), "[Rádió]%s mondja: %s", sendername, result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					return 1;
				}
			}
			else if(PlayerInfo[playerid][pMember] > 0)
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][7];

		        format(string, sizeof(string), "** %s %s: %s **", rangnev, sendername, result);
				if(LMT(playerid, LMUNKA_COLUMBIA))
				{
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_AZTECAS_COLOR, string);
				}
				else
				{
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_AZTECAS_COLOR, string);
				}
				format(string, sizeof(string), "[RÁDIÓ]Valaki mondja: %s", result);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
			else if(LMT(playerid, LMUNKA_HITMAN)) // D. Cortez mostmár LMUNKA_HITMAN
			{
					new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

					if(rang <= 0) rangnev = Rangok[munka][0];
					else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
					else rangnev = Rangok[munka][7];

			        format(string, sizeof(string), "** (%s) %s: %s **", rangnev, sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_AZTECAS_COLOR, string);
					format(string, sizeof(string), "[RÁDIÓ]Valaki mondja: %s", result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Nem vagy szervezet tagja!");
				return 1;
			}
		}
		else
			Msg(playerid, "Börtönben nem lehet!");
		return 1;
	}
	
	/*if(egyezik(cmd, "/munkás") || egyezik(cmd, "/munkas"))
	{
		if(PlayerInfo[playerid][pPower] != 8 && !IsScripter(playerid)) return Msg(playerid, "Csak OF Leadernek.");
		if(params < 1) return Msg(playerid, "/munkás [Felvesz / Kirúg / Rang / Tagok]");
		if(egyezik(param[1], "felvesz"))
		{
			if(params != 2) return Msg(playerid, "/munkás Felvesz [Játékos Neve / ID]");
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
			if(PlayerInfo[player][pPower] > 0) return Msg(playerid, "A játékos már tag.");
			PlayerInfo[player][pPower] = 1;
			Msg(playerid, "Felvetted a Old School Family-hez.");
			Msg(player, "Felvettek a Old School Family közé.");
		}
		if(egyezik(param[1], "kirúg"))
		{
			if(params != 2) return Msg(playerid, "/munkás Kirúg [Játékos Neve / ID]");
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
			if(PlayerInfo[player][pPower] < 1) return Msg(playerid, "A játékos nem Old School Family tag.");
			PlayerInfo[player][pPower] = 0;
			Msg(playerid, "Kirúgtad a Old School Family-tõl.");
			Msg(player, "Kirúgtak a Old School Family-tõl.");
		}
		if(egyezik(param[1], "rang"))
		{
			if(params != 3) return Msg(playerid, "/munkás Rang [Játékos Neve / ID] [Rang(0-7)");
			new player = ReturnUser(param[2]);
			new Rang = strval(param[3]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
			if(Rang < 0 || Rang > 7) return Msg(playerid, "Rang 0-7");
			new rang = Rang+1;
			PlayerInfo[player][pPower] = rang;
			Msg(playerid, "Új rangot adtál neki.");
			Msg(player, "Új rangot kaptál az Old School Family-nél.");
		}
		if(egyezik(param[1], "tagok"))
		{
			new Rang[64];
			SendClientMessage(playerid, COLOR_LIGHTRED, "===============[Old School FamilyTagok]===============");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPower] > 0)
					{
						if(PlayerInfo[i][pPower] == 1) Rang = "Segédmunkás";
						if(PlayerInfo[i][pPower] == 2) Rang = "Munkás";
						if(PlayerInfo[i][pPower] == 3) Rang = "Kertész";
						if(PlayerInfo[i][pPower] == 4) Rang = "Testõr";
						if(PlayerInfo[i][pPower] == 5) Rang = "TSZelnök";
						if(PlayerInfo[i][pPower] == 6) Rang = "Szervezõ";
						if(PlayerInfo[i][pPower] == 7) Rang = "Popey";
						if(PlayerInfo[i][pPower] == 8) Rang = "Cowboy";
						SendFormatMessage(playerid, COLOR_LIGHTBLUE, "[ID:%d]%s - %s(%d)", i, PlayerName(i), Rang, (PlayerInfo[i][pPower] -1));
					}
				}
			}
		}
		if(egyezik(param[1], "leader"))
		{
			if(PlayerInfo[playerid][pPower] != 8 && !IsScripter(playerid)) return 1;
			if(params != 2) return Msg(playerid, "/munkás Leader [Játékos Neve / ID]");
			new player = ReturnUser(param[2]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos.");
			PlayerInfo[player][pPower] = 8;
			Msg(playerid, "Beraktad Leadernek.");
			Msg(player, "Beraktak leadernek a OF-ba.");
		}
	}
	
	if(strcmp(cmd, "/of", true) == 0)
	{
	    if(PlayerInfo[playerid][pPower] > 0)
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				Msg(playerid, "/of [üzenet]");
				return 1;
			}
			new Rang[64];
			if(PlayerInfo[playerid][pPower] == 1) Rang = "Segédmunkás";
			if(PlayerInfo[playerid][pPower] == 2) Rang = "Munkás";
			if(PlayerInfo[playerid][pPower] == 3) Rang = "Kertész";
			if(PlayerInfo[playerid][pPower] == 4) Rang = "Testõr";
			if(PlayerInfo[playerid][pPower] == 5) Rang = "TSZelnök";
			if(PlayerInfo[playerid][pPower] == 6) Rang = "Szervezõ";
			if(PlayerInfo[playerid][pPower] == 7) Rang = "Popey";
			if(PlayerInfo[playerid][pPower] == 8) Rang = "Cowboy";
			
			format(string, sizeof(string), "** %s %s: %s **", Rang, sendername, result);
			SendPowerRadioMessage(COLOR_LIGHTBROWN, string);
			format(string, sizeof(string), "[Rádió]%s mondja: %s", sendername, result);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		return 1;
	}
	
	if(strcmp(cmd, "/ofb", true) == 0)
	{
	    if(PlayerInfo[playerid][pPower] > 0)
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				Msg(playerid, "/of [üzenet]");
				return 1;
			}
			new Rang[64];
			if(PlayerInfo[playerid][pPower] == 1) Rang = "Segédmunkás";
			if(PlayerInfo[playerid][pPower] == 2) Rang = "Munkás";
			if(PlayerInfo[playerid][pPower] == 3) Rang = "Kertész";
			if(PlayerInfo[playerid][pPower] == 4) Rang = "Testõr";
			if(PlayerInfo[playerid][pPower] == 5) Rang = "TSZelnök";
			if(PlayerInfo[playerid][pPower] == 6) Rang = "Szervezõ";
			if(PlayerInfo[playerid][pPower] == 7) Rang = "Popey";
			if(PlayerInfo[playerid][pPower] == 8) Rang = "Cowboy";
			
			format(string, sizeof(string), "** %s %s(OOC): (( %s )) **", Rang, sendername, result);
			SendPowerRadioMessage(COLOR_LIGHTBROWN, string);
			format(string, sizeof(string), "[Rádió]%s mondja: (( %s ))", sendername, result);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		return 1;
	}*/
	
	if(strcmp(cmd, "/rb", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/r)adio [radio chat]");
				return 1;
			}

			if(SzovegEllenorzes(playerid, result, "/rb", ELLENORZES_MINDKETTO))
				return 1;

			if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNKA_KATONA) || LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_MENTO) || LMT(playerid, LMUNKA_SFPD))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 12) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][12];

				format(string, sizeof(string), "** %s %s OOC: (( %s )) **", rangnev, sendername, result);
				SendRadioMessage(munka+1, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				format(string, sizeof(string), "[Rádió]%s mondja: (( %s ))", sendername, result);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			}
			else if(LMT(playerid, LMUNKA_COLUMBIA))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];
				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 10) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][10];
				format(string, sizeof(string), "** %s %s OOC: (( %s )) **", rangnev, sendername, result);
				SendRadioMessage(munka+1, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				format(string, sizeof(string), "[Rádió]%s mondja OOC: (( %s ))", sendername, result);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			}
			else if(LMT(playerid, LMUNKA_YAKUZA))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];
				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 8) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][8];
				format(string, sizeof(string), "** %s %s OOC: (( %s )) **", rangnev, sendername, result);
				SendRadioMessage(munka+1, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				format(string, sizeof(string), "[Rádió]%s mondja OOC: (( %s ))", sendername, result);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			}
			else if(LMT(playerid, LMUNKA_CAMORRA))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];
				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 9) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][9];
				format(string, sizeof(string), "** %s %s OOC: (( %s )) **", rangnev, sendername, result);
				SendRadioMessage(munka+1, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				format(string, sizeof(string), "[Rádió]%s mondja OOC: (( %s ))", sendername, result);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			}
			else if(LMT(playerid, LMUNKA_FBI))
			{
				if(PlayerInfo[playerid][pRank] <= 5)
				{
					new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];
					if(rang <= 0) rangnev = Rangok[munka][0];
					else if(rang >= 1 && rang <= 12) rangnev = Rangok[munka][rang];
					else rangnev = Rangok[munka][12];

					format(string, sizeof(string), "** %s %s OOC: (( %s )) **", rangnev, sendername, result);
					SendRadioMessage(munka+1, Pink, string);
					printf("%s", string);
					format(string, sizeof(string), "[Rádió]%s mondja OOC: (( %s ))", sendername, result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					return 1;
				}
				else
				{
					new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];
					if(rang <= 0) rangnev = Rangok[munka][0];
					else if(rang >= 1 && rang <= 12) rangnev = Rangok[munka][rang];
					else rangnev = Rangok[munka][12];

					format(string, sizeof(string), "** %s %s mondja OOC: (( %s )), vége **", rangnev, sendername, result);
					SendRadioMessage(munka+1, Pink2, string);
					printf("%s", string);
					format(string, sizeof(string), "[Rádió]%s mondja OOC: (( %s ))", sendername, result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					return 1;
				}
			}
			else if(PlayerInfo[playerid][pMember] > 0)
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][7];
	
		        format(string, sizeof(string), "** %s %s OOC: (( %s )) **", rangnev, sendername, result);
				if(LMT(playerid, LMUNKA_COLUMBIA))
				{
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_AZTECAS_COLOR, string);
				}
				else
				{
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_AZTECAS_COLOR, string);
				}
				format(string, sizeof(string), "[Rádió]%s mondja: (( %s ))", sendername, result);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
			else if(LMT(playerid, LMUNKA_HITMAN)) // Mostmár D. Cortez
			{
					new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

					if(rang <= 0) rangnev = Rangok[munka][0];
					else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
					else rangnev = Rangok[munka][7];

			        format(string, sizeof(string), "** (%s)%s OOC: (( %s )) **", rangnev, sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_AZTECAS_COLOR, string);
					format(string, sizeof(string), "[RÁDIÓ]Valaki mondja: (( %s ))", result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Nem vagy szervezet tagja!");
				return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/swatradio", true) == 0 || strcmp(cmd, "/sr", true) == 0)
	{
	    if(PlayerInfo[playerid][pSwattag] == 1)
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/s)wat(r)adio [radio üzenet]");
				return 1;
			}

			if(SzovegEllenorzes(playerid, result, "/sr"))
				return 1;
				
			if(PlayerInfo[playerid][pSwatRang] == 12)
			{
				format(string, sizeof(string), "** SWAT Parancsnok %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 11)
			{
				format(string, sizeof(string), "** SWAT MásodParancsnok %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 10)
			{
				format(string, sizeof(string), "** SWAT VezérÕrnagy %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 9)
			{
				format(string, sizeof(string), "** SWAT Kapitány %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 8)
			{
				format(string, sizeof(string), "** SWAT Ezredes %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 7)
			{
				format(string, sizeof(string), "** SWAT Õrnagy %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 6)
			{
				format(string, sizeof(string), "** SWAT Százados %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 5)
			{
				format(string, sizeof(string), "** SWAT FõHadnagy %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 4)
			{
				format(string, sizeof(string), "** SWAT Hadnagy %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 3)
			{
				format(string, sizeof(string), "** SWAT Kommandós %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 2)
			{
				format(string, sizeof(string), "** SWAT Tiszt %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 1)
			{
				format(string, sizeof(string), "** SWAT Közlegény %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
     		else if(PlayerInfo[playerid][pSwatRang] == 0)
			{
				format(string, sizeof(string), "** SWAT Újonc %s: %s, vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			format(string, sizeof(string), "[Rádió]%s mondja: %s", sendername, result);
			ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		return 1;
	}
	if(strcmp(cmd, "/swatradiob", true) == 0 || strcmp(cmd, "/srb", true) == 0)
	{
	    if(PlayerInfo[playerid][pSwattag] == 1)
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/s)wat(r)adiob [radio üzenet]");
				return 1;
			}

			if(SzovegEllenorzes(playerid, result, "/srb", ELLENORZES_MINDKETTO))
				return 1;

			if(PlayerInfo[playerid][pSwatRang] == 12)
			{
				format(string, sizeof(string), "** SWAT Parancsnok %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 11)
			{
				format(string, sizeof(string), "** SWAT MásodParancsnok %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 10)
			{
				format(string, sizeof(string), "** SWAT VezérÕrnagy %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 9)
			{
				format(string, sizeof(string), "** SWAT Kapitány %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 8)
			{
				format(string, sizeof(string), "** SWAT Ezredes %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 7)
			{
				format(string, sizeof(string), "** SWAT Õrnagy %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 6)
			{
				format(string, sizeof(string), "** SWAT Százados %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 5)
			{
				format(string, sizeof(string), "** SWAT FõHadnagy %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 4)
			{
				format(string, sizeof(string), "** SWAT Hadnagy %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 3)
			{
				format(string, sizeof(string), "** SWAT Kommandós %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 2)
			{
				format(string, sizeof(string), "** SWAT Tiszt %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			else if(PlayerInfo[playerid][pSwatRang] == 1)
			{
				format(string, sizeof(string), "** SWAT Közlegény %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
     		else if(PlayerInfo[playerid][pSwatRang] == 0)
			{
				format(string, sizeof(string), "** SWAT Újonc %s(OOC): (( %s )), vége. **", sendername, result);
				SendSwatRadioMessage(TEAM_ORANGE_COLOR, string);
			}
			format(string, sizeof(string), "[Rádió]%s mondja(OOC): (( %s )) ", sendername, result);
			ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		return 1;
	}
	//========SWAT Rang By: FluckS========//

 	if(strcmp(cmd, "/srang", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /srang [playerid/PartOfName] [0-12]");
				SendClientMessage(playerid, COLOR_GRAD2, "Rangok: 0. Újonc | 1. Közlegény  | 2. Tiszt | 3. Kommandós | 4.  Hadnagy");
				SendClientMessage(playerid, COLOR_GRAD2, "Rangok: 5. FõHadnagy | 6. Százados  | 7. Õrnagy");
				SendClientMessage(playerid, COLOR_GRAD2, "Rangok: 8.  Ezredes | 9. Kapitány | 10. VezérÕrnagy");				
				SendClientMessage(playerid, COLOR_GRAD2, "Rangok: 11. MásodParancsnok | 12. Parancsnok ");
				return 1;
			}
			new para1;
			new level;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			para1 = ReturnUser(tmp);

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /srang [playerid/PartOfName] [0-12]");
				SendClientMessage(playerid, COLOR_GRAD2, "Rangok: 0. Újonc | 1. Közlegény  | 2. Tiszt | 3. Kommandós | 4.  Hadnagy");
				SendClientMessage(playerid, COLOR_GRAD2, "Rangok: 5. FõHadnagy | 6. Százados  | 7. Õrnagy");
				SendClientMessage(playerid, COLOR_GRAD2, "Rangok: 8.  Ezredes | 9. Kapitány | 10. VezérÕrnagy");				
				SendClientMessage(playerid, COLOR_GRAD2, "Rangok: 11. MásodParancsnok | 12. Parancsnok ");
				return 1;
			}

			level = strval(tmp);
			if(level > 12 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "0-12-ig legyen a rang szám!"); return 1; }
			if(PlayerInfo[playerid][pSwatRang] == 12 || egyezik(sendername, "Charlie_Cortez"))
			{
				if(PlayerInfo[para1][pSwattag] != 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Ez a játékos nem a SWAT tag!");
					return 1;
				}
				if(IsPlayerConnected(para1))
				{
			        if(para1 != INVALID_PLAYER_ID)
			        {
           			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
		            PlayerInfo[para1][pSwatRang] = level;
		            format(string, sizeof(string), " A SWAT egységbe új rangot(%d) adtál neki: %s", level, giveplayer);
		            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            format(string, sizeof(string), "A SWAT Egységbe új rangot kaptál!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
					if(level == 0)
					{
					format(string, sizeof(string), "Új rangod: SWAT Újonc!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
		            else if(level == 1)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT Közlegény");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
              		else if(level == 2)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT Tiszt!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
                    else if(level == 3)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT Kommandós!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
                    else if(level == 4)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT Hadnagy!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
                    else if(level == 5)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT FõHadnagy!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
                    else if(level == 6)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT Százados!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
                    else if(level == 7)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT Õrnagy!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		           	}
                    else if(level == 8)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT Ezredes!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
                    else if(level == 9)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT Kapitány!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
                    else if(level == 10)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT VezérÕrnagy!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		           }
                    else if(level == 11)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT MásodParancsnok!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
                    else if(level == 12)
		            {
		            format(string, sizeof(string), "Új rangod: SWAT Parancsnok!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }

              		}
			  }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Csak SWAT Parancsnoknak!");
			}
		}
		return 1;
	}
	if(egyezik(cmd, "/sranks"))
	{
		if(PlayerInfo[playerid][pSwatRang] < 2) return 1;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "===============[SWAT Tagok]===============");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pSwattag] == 1)
				{
					SendFormatMessage(playerid, COLOR_LIGHTRED, "[ID:%d]%s - %d", i, PlayerName(i), PlayerInfo[i][pSwatRang]);
				}
			}
		}
	}
	//========SWAT Egység By: FluckS========//

	if(strcmp(cmd, "/swat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /Swat [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(giveplayerid == INVALID_PLAYER_ID) return 1;

			if(PlayerInfo[playerid][pSwatRang] == 12)
			{
			if(PlayerInfo[giveplayerid][pSwattag] == 0)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Felvetted a SWAT Egységhez!");
		        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Felvettek a SWAT Egységhez!");
		        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "SWAT Rádió: /swatradio(/sr)");
                SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "SWAT VezérParancsnok: Charlie Cortez & Darryl F. Gates.");
                SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Mostantól felveheted a SWAT felszerelést!");
				PlayerInfo[giveplayerid][pSwattag] = 1;
				PlayerInfo[giveplayerid][pSwatRang] = 0;
			}
			else
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Kirúgtad a SWAT egységtõl!");
		        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Kirúgtak a SWAT Egységtõl!");
		        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Mostantól nem tudod felvenni a SWAT felszerelést!");
		        PlayerInfo[giveplayerid][pSwattag] = 0;
		        PlayerInfo[giveplayerid][pSwatRang] = 0;
			}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Csak SWAT Vezérnek!");
			}
		}
		return 1;
	}
	//========Kitüntetés By: FluckS========//
	if(strcmp(cmd, "/kitüntetés", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /kitüntetés [playerid/PartOfName] [1-6]");
				SendClientMessage(playerid, COLOR_GRAD2, "Kitüntetések: 1. Bronz Csillag | 2. Bronz Medál | 3. Ezüst Csillag | 4. Ezüst Medál | 5. Arany Csillag | 6. Arany Medál");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /kitüntetés [playerid/PartOfName] [1-6]");
				SendClientMessage(playerid, COLOR_GRAD2, "Kitüntetések: 1. Bronz Csillag | 2. Bronz Medál | 3. Ezüst Csillag | 4. Ezüst Medál | 5. Arany Csillag | 6. Arany Medál");
				return 1;
			}

			level = strval(tmp);
			if(level > 6 || level < 1) { SendClientMessage(playerid, COLOR_GREY, "1-6-ig legyen a kitüntetés száma!"); return 1; }
			if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pLeader] == 15)
			{
			if(LMT(para1, LMUNKA_SCPD) || LMT(para1, LMUNKA_FBI) || LMT(para1, LMUNKA_SFPD) || LMT(para1, LMUNKA_KATONA))
			{
	  		if(IsPlayerConnected(para1))
	  		{
			        if(para1 != INVALID_PLAYER_ID)
			        {
           			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
              		GetPlayerName(playerid, sendername, sizeof(sendername));
		            PlayerInfo[para1][pKituntetes] = level;
		            format(string, sizeof(string), " Új kitüntetést(%d) adtál neki: %s", level, giveplayer);
		            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            format(string, sizeof(string), "Kitüntetést kaptál!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
                	if(level == 1)
                	{
                	format(string, sizeof(string), "Kitüntetés: Bronz Csillag!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
		            else if(level == 2)
		            {
		            format(string, sizeof(string), "Kitüntetés: Bronz Medál!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
              		else if(level == 3)
		            {
		            format(string, sizeof(string), "Kitüntetés: Ezüst Csillag!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
                	else if(level == 4)
		            {
		            format(string, sizeof(string), "Kitüntetés: Ezüst Medál!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
           		 	else if(level == 5)
		            {
		            format(string, sizeof(string), "Kitüntetés: Arany Csillag!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }
		            else if(level == 6)
		            {
		            format(string, sizeof(string), "Kitüntetés: Arany Medál!");
		            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		            }

              		}
			  }
			  }
			  else
			  {
			  SendClientMessage(playerid, COLOR_GRAD2, "Ez a játékos nem rendvédelmi szervezet tagja!");
			  return 1;
			  }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Csak rendvédelmi szervezet irányítójinak!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/kitüntetésem", true) == 0 || strcmp(cmd, "/kituntetesem", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNKA_FBI) || LMT(playerid, LMUNKA_SFPD) || LMT(playerid, LMUNKA_KATONA))
			{
                	SendClientMessage(playerid, COLOR_LIGHTRED, "*====[Kitüntetésed]===*");
                	if(PlayerInfo[playerid][pKituntetes] == 1)
                	{
	 				format(string, sizeof(string), "Kitüntetésed: Bronz Csillag!");
		            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            }
		            else if(PlayerInfo[playerid][pKituntetes] == 2)
		            {
		            format(string, sizeof(string), "Kitüntetésed: Bronz Medál!");
		            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            }
              		else if(PlayerInfo[playerid][pKituntetes] == 3)
		            {
		            format(string, sizeof(string), "Kitüntetésed: Ezüst Csillag!");
		            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            }
           		 	else if(PlayerInfo[playerid][pKituntetes] == 4)
		            {
		            format(string, sizeof(string), "Kitüntetésed: Ezüst Medál!");
		            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            }
           		 	else if(PlayerInfo[playerid][pKituntetes] == 5)
		            {
		            format(string, sizeof(string), "Kitüntetésed: Arany Csillag!");
		            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            }
		            else if(PlayerInfo[playerid][pKituntetes] == 6)
		            {
		            format(string, sizeof(string), "Kitüntetésed: Arany Medál!");
		            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            }
		            else
		            {
		            format(string, sizeof(string), "Kitüntetésed: Nincs kitüntetésed!");
		            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            }
                	SendClientMessage(playerid, COLOR_LIGHTRED, "*====[Kitüntetésed]===*");
                	format(string, sizeof(string), "* Valaki megnézte a kitüntetését...");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy rendvédelmi szervezet tagja!");
			return 1;
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/átöltöz", true) == 0)
 	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerToPoint(10, playerid, 207.4895,-134.9079,1002.8672) || PlayerToPoint(10, playerid, 204.5925,-163.6875,1000.5234) || IsAt(playerid, IsAt_Haz) != NINCS)
			{
	    	new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /átöltöz [ruha]");
	    		SendClientMessage(playerid, COLOR_WHITE, "Férfi Ruhák: öltöny, strand");
	    		SendClientMessage(playerid, COLOR_WHITE, "Nõi Ruhák: elegáns, bikini");
				return 1;
			}
		    if(strcmp(x_nr,"öltöny",true) == 0)
			{
				format(string, sizeof(string), "Átöltöztél öltönybe!");
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SetPlayerSkin(playerid, 186);
				return 1;
			}
			else if(strcmp(x_nr,"strand",true) == 0)
			{
				format(string, sizeof(string), "Átöltöztél strand ruhába!");
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SetPlayerSkin(playerid, 97);
				return 1;
			}
			else if(strcmp(x_nr,"bikini",true) == 0)
			{
				format(string, sizeof(string), "Átöltöztél bikinibe!");
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SetPlayerSkin(playerid, 92);
				return 1;
			}
			else if(strcmp(x_nr,"elegáns",true) == 0)
			{
				format(string, sizeof(string), "Átöltöztél elegáns ruhába!");
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SetPlayerSkin(playerid, 150);
				return 1;
			}
			}
			else
			{
			SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy ruhaboltba!");
			return 1;
			}
		}
		return 1;
	}
//----------------------------------[offduty]-----------------------------------------------
	if(strcmp(cmd, "/duty", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(LMT(playerid, LMUNKA_SCPD))
			{
				if(PlayerToPoint(3, playerid,255.3,77.4,1003.6) || PlayerToPoint(3,playerid,-1616.1294,681.1594,7.1875)  || PlayerToPoint(5, playerid, 226.7355,122.7866,999.0410)) 
				{
					if(OnDuty[playerid]==0)
					{
						format(string, sizeof(string), "* Valaki átöltözött a munkaruhájába!");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						DutyFegyverekBeallitasa(playerid);
						SetHealth(playerid,150);
						SetPlayerArmour(playerid,100);
						OnDuty[playerid] = 1;
						Munkaruha(playerid, 1);
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "* Valaki visszaöltözött!");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						ResetWeapon(playerid);
						OnDuty[playerid] = 0;
						Munkaruha(playerid, 0);
					}
                }
				else
				{
    				Msg(playerid, "Nem vagy a Duty helynél");
					return 1;
				}
			}
			else if(LMT(playerid, LMUNKA_FBI))
			{
				if(OnDuty[playerid]==0)
		        {
			    	format(string, sizeof(string), "* Valaki átöltözött a munkaruhájába!");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					DutyFegyverekBeallitasa(playerid);
					SetHealth(playerid,150);
					OnDuty[playerid] = 1;
					Munkaruha(playerid, 1);
				}
				else if(OnDuty[playerid]==1)
				{
					format(string, sizeof(string), "* Valaki visszaöltözött!");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ResetWeapon(playerid);
					OnDuty[playerid] = 0;
					Munkaruha(playerid, 0);
				}
			}
			else if(LMT(playerid, LMUNKA_VPOP))
			{
			    if (PlayerToPoint(8, playerid, 732.69, -1355.61, 23.59) || PlayerToPoint(8, playerid, 226.5306,122.2677,999.0458))
				{
					if(OnDuty[playerid]==0)
					{
						format(string, sizeof(string), "* Valaki átöltözött a munkaruhájába!");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						DutyFegyverekBeallitasa(playerid);
						SetHealth(playerid,150);
						SetPlayerArmour(playerid,100);
						OnDuty[playerid] = 1;
						Munkaruha(playerid, 1);
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "* Valaki visszaöltözött!");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						ResetWeapon(playerid);
						OnDuty[playerid] = 0;
						Munkaruha(playerid, 0);
					}
                }
				else
				{
    				SendClientMessage(playerid, COLOR_GRAD2, "   Itt nem tudod felvenni...");
					return 1;
				}
			}
			else if(LMT(playerid, LMUNKA_MENTO))
			{
			    if(OnDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Mostmár nem vagy szolgálatban, így nem fogsz kapni hívásokat!");
					OnDuty[playerid] = 0;
			        Medics--;
					Munkaruha(playerid, 0);
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Mostmár szolgálatban vagy, így fogadnod kell a hívásokat!");
			        SendClientMessageToAll(COLOR_LIGHTBLUE, "* Mentõsök szolgálatban! Hívd õket ha baj van!");

			        OnDuty[playerid] = 1;
			        Medics++;
					Munkaruha(playerid, 1);
					if((PlayerInfo[playerid][pKotszer] + 10) < MAXKOTSZER) PlayerInfo[playerid][pKotszer] += 10;
			    }
			}
			else if(LMT(playerid, LMUNKA_OKTATO))
			{
			    if(OnDuty[playerid] == 1)
			    {   
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Mostmár nem vagy szolgálatban, így nem jelensz mega listában!");
					OnDuty[playerid] = 0;
					Munkaruha(playerid, 0);
			    }
			    else
			    { if (PlayerToPoint(8, playerid, 1030.3636,-1436.0415,13.5546) || PlayerToPoint(8, playerid, -2031.3719,-114.7200,1035.1719))
					{	
					    DutyFegyverekBeallitasa(playerid);   
						OnDuty[playerid] = 1;
						Munkaruha(playerid, 1);
						if (PlayerInfo[playerid][pRank] >1)
						{   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Mostmár szolgálatban vagy, így fogadnod kell a hívásokat!");
							SendClientMessageToAll(COLOR_LIGHTBLUE, "*Egy oktató szolgálatba lépet! Hívd õket ha vizsgázni szeretnél /oktatók!");
						}
						else
						{
						 SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Mostmár szolgálatban vagy, így kaptál munkaruhát, és sprayt!");
						}
						
					}
					else
					{
						Msg(playerid, "Nem vagy az oktató hq-nl!");
						return 1;
					}
			    }
			}
            /*else if(LMT(playerid, LMUNKA_SFMENTO))
			{
			    if(OnDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Mostmár nem vagy szolgálatban, így nem fogsz kapni hívásokat!");
					OnDuty[playerid] = 0;
			        Medics--;
					Munkaruha(playerid, 0);
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Mostmár szolgálatban vagy, így fogadnod kell a hívásokat!");
			        SendClientMessageToAll(COLOR_LIGHTBLUE, "* San Fierro-i Mentõsök szolgálatban! Hívd õket ha valami gond van.");

			        OnDuty[playerid] = 1;
			        Medics++;
					Munkaruha(playerid, 1);
					if((PlayerInfo[playerid][pKotszer] + 10) < MAXKOTSZER) PlayerInfo[playerid][pKotszer] += 10;
			    }
			}*/
			else if(LMT(playerid, LMUNKA_TAXI) || LMT(playerid, LMUNKA_SFTAXI))
			{
				if (PlayerToPoint(8, playerid, 1808.91, -1905.55, 13.86) || PlayerToPoint(8, playerid, 1771.2368,-1909.9697,13.8416))			
			    {
					if(JobDuty[playerid] == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Mostmár nem vagy szolgálatban, így nem fogsz kapni hívászokat!");
						JobDuty[playerid] = 0;
						Munkaruha(playerid, 0);
						TaxiDrivers--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Mostmár szolgálatban vagy, így fogadnod kell a hívásokat!");
						SendClientMessageToAll(COLOR_GREEN, "* Taxisok szolgálatban!");
						JobDuty[playerid] = 1;
						Munkaruha(playerid, 1);
						TaxiDrivers++;
					}
				}
			}
            else if(LMT(playerid, LMUNKA_ONKORMANYZAT))
			{
				if (PlayerToPoint(3, playerid,365.62, 150.90, 1025.79))
				{
					if(OnDuty[playerid]==0)
					{
						format(string, sizeof(string), "* Valaki felvette az önkormányzati felszerelését!");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						DutyFegyverekBeallitasa(playerid);
						SetHealth(playerid,150);
						SetPlayerArmour(playerid,100);
						OnDuty[playerid] = 1;
						Munkaruha(playerid, 1);
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "* Valaki viszatette az önkormányzati felszerelését a szekrénybe!");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						ResetWeapon(playerid);
						SetPlayerArmour(playerid,0);
						OnDuty[playerid] = 0;
						Munkaruha(playerid, 0);
					}
				}
				else
				{
    				Msg(playerid, "Nem vagy a szekrénynél!");
					return 1;
				}
			}
			else if(LMT(playerid, LMUNKA_KATONA))
			{
				if(PlayerToPoint(3, playerid, 320.26, 1965.18, 17.64) || PlayerToPoint(3, playerid, 2743.8225,-2454.1692,13.8623))
				{
					if(OnDuty[playerid]==0)
			        {
				    	format(string, sizeof(string), "* Katona %s felvette a felszerelését a páncélszekrényébõl, és evett egy kis fánkot.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						DutyFegyverekBeallitasa(playerid);
						SetHealth(playerid,150);
						SetPlayerArmour(playerid,100);
						OnDuty[playerid] = 1;
						Munkaruha(playerid, 1);
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "* Katona %s visszatette a felszerelését a páncélszekrényébe.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						ResetWeapon(playerid);
						SetHealth(playerid,150);
						SetPlayerArmour(playerid,100);
						OnDuty[playerid] = 0;
						Munkaruha(playerid, 0);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Nem vagy a páncélszekrényeknél !");
					return 1;
				}
			}
			/*else if(AMT(playerid, MUNKA_SZERELO))
			{
			    if(JobDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Most már nem vagy szolgálatban, mint autószerelõ. Most már nem kapsz hívásokat!");
			        JobDuty[playerid] = 0;
			        Mechanics -= 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Most már szolgálatban vagy autószerelõként, ezért kapni fogod a hívásokat.");
                    SendClientMessageToAll(COLOR_LIGHTBLUE, "* Autószerelõ szolgálatban.");
					JobDuty[playerid] = 1;
			        Mechanics += 1;
			    }
			}*/
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "  Nem tudod használni a parancsot !");
			}
		}
		return 1;
	}

//======Leüt=======
	if(egyezik(cmd, "/leüt") || egyezik(cmd, "/leut"))
	{
		if(Szint(playerid) < 10)
			return Msg(playerid, "10es szinttõl!");
		
		if(NemMozoghat(playerid))
			return Msg(playerid, "Hogyne...");
			
		if(Leutve[playerid])
			return Msg(playerid, "Leütve akarod leütni?");
		
		if(Animban[playerid])
			return Msg(playerid, "Animban vagy és úgy akarod leütni?");
		
		if(Leutott[playerid] > 0)
		{	
			Msg(playerid, "Még várnod kell.");
			return 1;
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
			Msg(playerid, "Kocsiban nem!")
			return 1;
		}
		if(Fegyvere[playerid] != 5 && Fegyvere[playerid] != 24 && Fegyvere[playerid] != 30 && Fegyvere[playerid] != 31) return Msg(playerid, "Csak Baseballütõvel, Deaglevel, vagy Nehézfegyverzettel!");
		new leutott;
		if(params > 0)
			leutott = strval(param[1]);
		else
			leutott = GetClosestPlayer(playerid);
			
		if(Leutve[leutott]) return Msg(playerid, "Már levan ütve jóember, nem látod?");
			
		if(leutott == playerid) return 1;
						
		if(IsPlayerConnected(leutott))
		{
			if(GetDistanceBetweenPlayers(playerid,leutott) < 2)
			{
				if(IsPlayerInAnyVehicle(leutott))
				{
					Msg(playerid, "Elöbb talán szedd ki..");
					return 1;
				}
		
				if(PlayerInfo[playerid][pJailed] == 3)
				{
					Cselekves(playerid, "le akart ütni valakit adminjailban, de kapott +15perc idõt :)", 0, true);
					PlayerInfo[playerid][pJailTime] += 900;
					return 1;
				}
		
				Feketeseg(leutott, true);
				Leutve[leutott] = true;
				LeutveIdo[leutott] = 60;
				Freeze(leutott);
				GetPlayerName(leutott, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				//format(string, sizeof(string), "<< %s leütötte %s-t! >>", sendername, giveplayer);
				//ABroadCast(COLOR_LIGHTRED, string, 1);
				Msg(leutott, "Leütöttek");
				Msg(playerid, "Leütötted");
				Cselekves(playerid, "leütött valakit");
				ApplyAnimation(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
				ApplyAnimation(leutott,"PED","KO_skid_front",4.1,0,1,1,1,1);
				ApplyAnimation(leutott,"PED","KO_skid_front",4.1,0,1,1,1,1);
				Fegyvere[leutott] = 0;
				SetPlayerArmedWeapon(leutott, 0);
				Leutott[playerid] = 15;
				FegyverElrak(leutott);
				GameTextForPlayer(leutott, "~r~Leutottek", 2500, 0);
			}
			else
			{
				Msg(playerid, "A közeledben nincs senki!");
				return 1;
			}
		}
	    return 1;
	}

	

	
//----------------------------------[departments]-----------------------------------------------
	if(strcmp(cmd, "/departments", true) == 0 || strcmp(cmd, "/d", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/d)epartments [üzeneted]");
				return 1;
			}
			if(IsOOC(result)) return Msg(playerid, "Nincs /d ooc!");
			if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_KATONA) || LMT(playerid, LMUNKA_ONKORMANYZAT))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 12) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][12];

				format(string, sizeof(string), "** %s %s: %s, vége. **", rangnev, sendername, result);

				SendTeamMessage(LMUNKA_SCPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_FBI, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_MENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFMENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_KATONA, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_VPOP, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_ONKORMANYZAT, COLOR_ALLDEPT, string);								
				printf("%s", string);
				
				if(!Kamera[playerid])
				{
					format(string, sizeof(string), "[RÁDIÓ]%s mondja: %s", sendername, result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}

				return 1;
			}
			else if(LMT(playerid, LMUNKA_FBI))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][7];

				format(string, sizeof(string), "** %s %s: %s, vége. **", rangnev, sendername, result);

				SendTeamMessage(LMUNKA_SCPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_FBI, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_MENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFMENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_KATONA, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_VPOP, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_ONKORMANYZAT, COLOR_ALLDEPT, string);												
				printf("%s", string);
				if(!Kamera[playerid])
				{
					format(string, sizeof(string), "[RÁDIÓ]%s mondja: %s", sendername, result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}

				return 1;
			}
			else if(LMT(playerid, LMUNKA_KATONA))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][7];

				format(string, sizeof(string), "** %s %s: %s, vége. **", rangnev, sendername, result);

				SendTeamMessage(LMUNKA_SCPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_FBI, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_MENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFMENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_KATONA, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_VPOP, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_ONKORMANYZAT, COLOR_ALLDEPT, string);												
				
				if(!Kamera[playerid])
				{
					format(string, sizeof(string), "[RÁDIÓ]%s mondja: %s", sendername, result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}

				return 1;
				}
			else if(LMT(playerid, LMUNKA_VPOP))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][7];

				format(string, sizeof(string), "** %s %s: %s, vége. **", rangnev, sendername, result);

				SendTeamMessage(LMUNKA_SCPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_FBI, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_MENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFMENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_KATONA, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_VPOP, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_ONKORMANYZAT, COLOR_ALLDEPT, string);								
				
				if(!Kamera[playerid])
				{
					format(string, sizeof(string), "[RÁDIÓ]%s mondja: %s", sendername, result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}

				return 1;
			}
   			else if(LMT(playerid, LMUNKA_SFPD))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][7];

				format(string, sizeof(string), "** %s %s: %s, vége. **", rangnev, sendername, result);

				SendTeamMessage(LMUNKA_SCPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_FBI, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_MENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFMENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_KATONA, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_VPOP, COLOR_ALLDEPT, string);	
				SendTeamMessage(LMUNKA_ONKORMANYZAT, COLOR_ALLDEPT, string);								
				if(!Kamera[playerid])
				{
					format(string, sizeof(string), "[RÁDIÓ]%s mondja: %s", sendername, result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}

				return 1;
			}
   			else if(LMT(playerid, LMUNKA_MENTO))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][7];

				format(string, sizeof(string), "** %s %s: %s, vége. **", rangnev, sendername, result);

				SendTeamMessage(LMUNKA_SCPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_FBI, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_MENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFMENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_KATONA, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_VPOP, COLOR_ALLDEPT, string);	
				SendTeamMessage(LMUNKA_ONKORMANYZAT, COLOR_ALLDEPT, string);								
				if(!Kamera[playerid])
				{
					format(string, sizeof(string), "[RÁDIÓ]%s mondja: %s", sendername, result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}

				return 1;
			}
			/*else if(LMT(playerid, LMUNKA_SFMENTO))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][7];

				format(string, sizeof(string), "** %s %s: %s, vége. **", rangnev, sendername, result);

				SendTeamMessage(LMUNKA_SCPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_FBI, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_MENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFMENTO, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_KATONA, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFPD, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_VPOP, COLOR_ALLDEPT, string);	
				
				if(!Kamera[playerid])
				{
					format(string, sizeof(string), "[RÁDIÓ]%s mondja: %s", sendername, result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}

				return 1;
			}*/
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Nem vagy szervezet tagja!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/taxidepartments", true) == 0 || strcmp(cmd, "/td", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /td ( /taxidepartments) [üzeneted]");
				return 1;
			}
			if(LMT(playerid, LMUNKA_TAXI))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][7];

				format(string, sizeof(string), "** %s %s: %s. **", rangnev, sendername, result);

				SendTeamMessage(LMUNKA_TAXI, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFTAXI, COLOR_ALLDEPT, string);
				printf("%s", string);
				format(string, sizeof(string), "[RÁDIÓ]%s mondja: %s", PlayerName(playerid), result);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

				return 1;
			}
			/*else if(LMT(playerid, LMUNKA_SFTAXI))
			{
				new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

				if(rang <= 0) rangnev = Rangok[munka][0];
				else if(rang >= 1 && rang <= 7) rangnev = Rangok[munka][rang];
				else rangnev = Rangok[munka][7];

				format(string, sizeof(string), "** (SF)%s %s: %s. **", rangnev, sendername, result);

				SendTeamMessage(LMUNKA_TAXI, COLOR_ALLDEPT, string);
				SendTeamMessage(LMUNKA_SFTAXI, COLOR_ALLDEPT, string);
				printf("%s", string);
				format(string, sizeof(string), "[RÁDIÓ]Valaki mondja: %s", result);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			
			}*/
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Nem vagy szervezet tagja!");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[mdc]-----------------------------------------------
	if(strcmp(cmd, "/mdc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!IsACop(playerid))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Nem vagy rendõr !");
	            return 1;
	        }
			new tmpcar = GetPlayerVehicleID(playerid);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /mdc [playerid/PartOfName]");
				return 1;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			if(IsACopCar(tmpcar)||PlayerToPoint(5.0, playerid, 253.9280,69.6094,1003.6406)||PlayerToPoint(2.0, playerid, 2277.637207, 2425.318359, 3.476562))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						SendClientMessage(playerid, TEAM_BLUE_COLOR,"______-=MOBILE DATA COMPUTER=-_______");
						format(string, sizeof(string), "Név : %s", sendername);
						SendClientMessage(playerid, COLOR_WHITE,string);
						format(string, sizeof(string), "Bûn : %s", PlayerCrime[giveplayerid][pAccusedof]);
						SendClientMessage(playerid, COLOR_GRAD2,string);
						format(string, sizeof(string), "Jelentõ : %s", PlayerCrime[giveplayerid][pVictim]);
						SendClientMessage(playerid, COLOR_GRAD3,string);
						format(string, sizeof(string), "Igényjogosult : %s", PlayerCrime[giveplayerid][pBplayer]);
						SendClientMessage(playerid, COLOR_GRAD5,string);
						SendClientMessage(playerid, TEAM_BLUE_COLOR,"_______________________________________");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs a szerveren !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   Nem vagy rendõr autóba, vagy a rendõrségen.");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[SetCrim]-----------------------------------------------
	if(strcmp(cmd, "/suspect", true) == 0 || strcmp(cmd, "/su", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(OnDuty[playerid] != 1  && PlayerInfo[playerid][pMember] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy szolgálatban!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/su)spect [playerid/PartOfName] [bûntett]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsACop(playerid))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(!IsACop(giveplayerid))
						{
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[64];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(!strlen(result))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/su)spect [playerid/PartOfName] [bûntett]");
								return 1;
							}
							if(WantedPoints[giveplayerid] == 0) { WantedPoints[giveplayerid] = 3; }
							else { WantedPoints[giveplayerid]+= 2; }
							SetPlayerCriminal(giveplayerid,playerid, result);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "   Rendõrt nem jelenthetsz fel!");
						}
					}
				}
				else
				{
						format(string, sizeof(string), "   %d nincs fent a szerveren.", giveplayerid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nem vagy rendõr!");
			}
		}
		return 1;
	}
//----------------------------------[LOCK]-----------------------------------------------
	if(strcmp(cmd, "/lock", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			//if(PlayerInfo[playerid][pPhousekey] == NINCS)
			//{
				if(HireCar[playerid] == NINCS)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Nincs bérelt kocsid!");
					return 1;
				}
			//}

			/*if(SwitchKey[playerid] == 0)
			{
				new kocsi = PlayerInfo[playerid][pPhousekey];
				new kocsi_id = HouseInfo[kocsi][hVid];*/
				new berkocsi = HireCar[playerid];

				if(berkocsi != NINCS)
				{
					if(gCarLock[berkocsi] == 0)
					{
						GameTextForPlayer(playerid, "~w~Berelt kocsid ~r~zarva", 5000, 3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						LockCar(berkocsi);
						format(string, sizeof(string), "* Valaki bezárta a kocsiját.");
						ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						GameTextForPlayer(playerid, "~w~Berelt kocsid ~g~nyitva", 5000, 3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						UnLockCar(berkocsi);
						format(string, sizeof(string), "* Valaki kinyitotta a kocsiját.");
	    				ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}

				/*else
				{
					if(gCarLock[kocsi_id] == 0)
					{
						GameTextForPlayer(playerid, "~w~Hazkocsid ~r~zarva", 5000, 3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						LockCar(kocsi_id);
						format(string, sizeof(string), "* Valaki bezárta a kocsiját.");
	    				ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						GameTextForPlayer(playerid, "~w~Hazkocsid ~g~nyitva", 5000, 3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						UnLockCar(kocsi_id);
						format(string, sizeof(string), "* Valaki kinyitotta a kocsiját.");
                        ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			else
			{
				new kocsi = PlayerInfo[playerid][pPhousekey];
				new kocsi_id = HouseInfo[kocsi][hVid];
				new berkocsi = HireCar[playerid];

				if(kocsi != NINCS)
				{
					if(gCarLock[kocsi_id] == 0)
					{
						GameTextForPlayer(playerid, "~w~Hazkocsid ~r~zarva", 5000, 3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						LockCar(kocsi_id);
						format(string, sizeof(string), "* Valaki bezárta a kocsiját");
	    				ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						GameTextForPlayer(playerid, "~w~Hazkocsid ~g~nyitva", 5000, 3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						UnLockCar(kocsi_id);
						format(string, sizeof(string), "* Valaki kinyitotta a kocsiját.");
	    				ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}

				else
				{
					if(gCarLock[berkocsi] == 0)
					{
						GameTextForPlayer(playerid, "~w~Berelt kocsid ~r~zarva", 5000, 3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						LockCar(berkocsi);
						format(string, sizeof(string), "* Valaki bezárta a kocsiját.");
	    				ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						GameTextForPlayer(playerid, "~w~Berelt kocsid ~g~nyitva", 5000, 3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						UnLockCar(berkocsi);
						format(string, sizeof(string), "* Valaki kinyitotta a kocsiját.");
	    				ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}*/
		}
		return 1;
	}

	if(strcmp(cmd, "/open", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new haz = HazaElottVan(playerid), berel = PlayerInfo[playerid][pBerlo];
			if(haz == NINCS) haz = HazabanVan(playerid);
			
			if(berel == NINCS || (!Haznal(playerid, berel) && !Hazban(playerid, berel)))
				berel = NINCS;
			
			if(haz != NINCS || berel != NINCS)
			{
				if(haz == NINCS && berel != NINCS) haz = berel;
				
				if(HouseInfo[haz][hLock] == 1)
				{
					HouseInfo[haz][hLock] = 0;
					//HazUpdate(haz, "Zarva='%d'", 0);
					HazUpdate(haz, HAZ_Lock);
					GameTextForPlayer(playerid, "~w~Ajto ~g~Nyitva", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* Valaki kinyitotta a ház ajtaját.");
   					ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else if(HouseInfo[haz][hLock] == 0)
				{
					HouseInfo[haz][hLock] = 1;
					//HazUpdate(haz, "Zarva='%d'", 1);
					HazUpdate(haz, HAZ_Lock);
					GameTextForPlayer(playerid, "~w~Ajto ~r~Zarva", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* Valaki bezárta a ház ajtaját.");
   					ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i)
					{
						if(BizzInfo[i][bLocked] == 1)
						{
							BizzInfo[i][bLocked] = 0;
							GameTextForPlayer(playerid, "~w~Biznisz ~g~Nyitva", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "* Valaki kinyitotta a bizniszét.");
	    					ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
						}
						if(BizzInfo[i][bLocked] == 0)
						{
							BizzInfo[i][bLocked] = 1;
							GameTextForPlayer(playerid, "~w~Biznisz ~r~Zarva", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "* Valaki bezárta a bizniszét.");
	    					ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Nincs hozza kulcsod!", 5000, 6);
						return 1;
					}
				}
			}
	    }
	    return 1;
	}
//----------------------------------[Wisper]-----------------------------------------------
	if(strcmp(cmd, "/whisper", true) == 0 || strcmp(cmd, "/w", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/w)hisper [playerid/PartOfName] [szöveg]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 5)
			        {
			       		SendClientMessage(playerid, COLOR_GREY, "Nincs a közeledbe");
			            return 1;
			        }
			        GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/w)hisper [playerid/PartOfName] [szöveg]");
						return 1;
					}

					if(PlayerInfo[playerid][pHamisNev] == 0)
						format(string, sizeof(string), "%s suttogta: %s", sendername, (result));
					else
						format(string, sizeof(string), "%s suttogta: %s", PlayerInfo[playerid][pHamisNev], (result));

					SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "Suttogtál neki: [%d]%s", giveplayerid, giveplayer);
					SendClientMessage(playerid,  COLOR_YELLOW, string);
					//Cselekves(playerid, "suttog valamit...");
					return 1;
				}
			}
			else
			{
					format(string, sizeof(string), " Nem aktív játékos.");
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[/pm]-----------------------------------------------
	if(strcmp(cmd, "/PM", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/PM)E [playerid/PartOfName] [pme text]");
				return 1;
			}
			
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if(!Admin(playerid, 1) && !Admin(giveplayerid, 1))
						return Msg(playerid, "Csak adminnak írhatsz!");

					if(AdminDuty[giveplayerid] != 1 && !Admin(playerid, 1))
						return Msg(playerid, "Õ nincs adminszolgálatban");

			        if(HidePM[giveplayerid] > 0 && !Admin(playerid, 1337)) return Msg(playerid, "Üzeneted blokkolva a rendszer által!");
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));

					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/pm)e [playerid/PartOfName] [pme text]");
						return 1;
					}

					if(PlayerInfo[playerid][pHamisNev] == 0)
						format(string, sizeof(string), "[%d]%s üzeni: %s", playerid, sendername, (result));
					else
						format(string, sizeof(string), "[%d]%s üzeni: %s", playerid, PlayerInfo[playerid][pHamisNev], (result));

					SendClientMessage(giveplayerid, COLOR_DBLUE, string);
					format(string, sizeof(string), " Üzenet elküldve neki: [%d]%s.", giveplayerid, giveplayer);
					SendClientMessage(playerid,  COLOR_DBLUE, string);
					return 1;
				}
			}
			else
			{
					format(string, sizeof(string), "  Nem aktív játékos.");
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[Bank System]-----------------------------------------------
    /*if(strcmp(cmd, "/withdraw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
         	if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nem vagy a bankban. Ha ATM-nél vagy /atmwithdraw-ot írj !");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /withdraw [összeg]");
				format(string, sizeof(string), "  %dFT  van bankszámládon.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /withdraw [összeg]");
				format(string, sizeof(string), "  %dFT van a bankszámládon.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > PlayerInfo[playerid][pAccount] || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincsen ennyid !");
				return 1;
			}

			if(GetMoney(playerid) >= MAXPENZ)
				return SendClientMessage(playerid, COLOR_GREY, "Több pénz nem fér el nálad!");

			if((GetMoney(playerid) + cashdeposit) > MAXPENZ)
				cashdeposit = MAXPENZ - GetMoney(playerid);

			ConsumingMoney[playerid] = 1;
			GiveMoney(playerid, cashdeposit);

			PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-cashdeposit;
			format(string, sizeof(string), "  Kivettél %dFT -t a bankszámládról. Még maradt rajta: %dFT ", cashdeposit,PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			Cselekves(playerid, "kivett pénzt a számlájáról...");
			return 1;
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/bank", true) == 0 || strcmp(cmd, "/deposit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nem vagy a bankban. Ha ATM-nél vagy /atmdeposit-ot írj !");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /bank [összeg] vagy /deposit [összeg]");
				format(string, sizeof(string), " %dFt van a bankszámládon.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /bank [összeg] vagy /deposit [összeg]");
				format(string, sizeof(string), " %dFt van a bankszámládon.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincsen ennyid!");
				return 1;
			}
			new regiosszeg = GetMoney(playerid);
			GiveMoney(playerid,-cashdeposit);
			new ujosszeg = GetMoney(playerid);

			PenzCheck(playerid, ujosszeg, regiosszeg, cashdeposit, 1);

			new curfunds = PlayerInfo[playerid][pAccount];
			PlayerInfo[playerid][pAccount] += cashdeposit;
			SendClientMessage(playerid, COLOR_WHITE, "|___ BANKSZÁMLA INFORMÁCIÓ ___|");
			format(string, sizeof(string), "  Régi összeg: %dFT", curfunds);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Betett pénz: %dFT", cashdeposit);
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
			format(string, sizeof(string), "  Új összeg: %dFT", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			Cselekves(playerid, "berakott pénzt a számlájára...");
			return 1;
		}
		return 1;
	}*/

  	/*if(strcmp(cmd, "/atmwithdraw", true) == 0)
	{
		if(PlayerToPoint(5.0,playerid,1469.341675, -1772.268066, 18.363657) ||
		PlayerToPoint(6.0,playerid,1836.913452, -1677.364624, 12.975209) ||
		PlayerToPoint(7.0,playerid,1927.790283, -1765.892456, 13.156972) ||
		PlayerToPoint(8.0,playerid,1304.649658, -1367.892456, 13.182307) ||
		PlayerToPoint(6.0,playerid,1810.772461, -1877.020142, 13.226860) ||
		PlayerToPoint(7.0,playerid,2051.406494, -1897.543457, 13.196700) ||
		PlayerToPoint(8.0,playerid,2231.275879, -1722.784912, 13.204838) ||
		PlayerToPoint(6.0,playerid,2232.996582, -1362.803345, 23.635086) ||
 		PlayerToPoint(7.0,playerid,2235.976074, -1150.396362, 25.530949) ||
		PlayerToPoint(8.0,playerid,1628.364380, -1171.898438, 23.721024) ||
		PlayerToPoint(6.0,playerid,1010.001892, -1115.541504, 23.542313) ||
		PlayerToPoint(7.0,playerid,622.896423, -1774.111816, 13.856520) ||
	 	PlayerToPoint(8.0,playerid,453.312622, -1475.028076, 30.363472) ||
	 	PlayerToPoint(8.0,playerid,986.761230, -1336.739380, 13.346378) ||
	 	PlayerToPoint(8.0,playerid,2215.514404, -2196.378418, 13.346378))
     	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /atmwithdraw [összeg]");
				format(string, sizeof(string), "  %dFT  van bankszámládon.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /atmwithdraw [összeg]");
				format(string, sizeof(string), "  %dFT van a bankszámládon.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if(cashdeposit > PlayerInfo[playerid][pAccount] || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincsen ennyid!");
				return 1;
			}

			if(GetMoney(playerid) >= MAXPENZ)
				return SendClientMessage(playerid, COLOR_GREY, "Több pénz nem fér el nálad!");

			if((GetMoney(playerid) + cashdeposit) > MAXPENZ)
				cashdeposit = MAXPENZ - GetMoney(playerid);

		    ConsumingMoney[playerid] = 1;
			GiveMoney(playerid, cashdeposit);

			PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-cashdeposit;
			format(string, sizeof(string), "  Kivettél %dFT -t a bankszámládról. Még maradt rajta: %dFT ", cashdeposit,PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			Cselekves(playerid, "kivett pénzt a számlájáról...");
			return 1;
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/atmbank", true) == 0 || strcmp(cmd, "/atmdeposit", true) == 0)
	{
		if(PlayerToPoint(5.0,playerid,1469.341675, -1772.268066, 18.363657) ||
		PlayerToPoint(6.0,playerid,1836.913452, -1677.364624, 12.975209) ||
		PlayerToPoint(7.0,playerid,1927.790283, -1765.892456, 13.156972) ||
		PlayerToPoint(8.0,playerid,1304.649658, -1367.892456, 13.182307) ||
		PlayerToPoint(6.0,playerid,1810.772461, -1877.020142, 13.226860) ||
		PlayerToPoint(7.0,playerid,2051.406494, -1897.543457, 13.196700) ||
		PlayerToPoint(8.0,playerid,2231.275879, -1722.784912, 13.204838) ||
		PlayerToPoint(6.0,playerid,2232.996582, -1362.803345, 23.635086) ||
 		PlayerToPoint(7.0,playerid,2235.976074, -1150.396362, 25.530949) ||
		PlayerToPoint(8.0,playerid,1628.364380, -1171.898438, 23.721024) ||
		PlayerToPoint(6.0,playerid,1010.001892, -1115.541504, 23.542313) ||
		PlayerToPoint(7.0,playerid,622.896423, -1774.111816, 13.856520) ||
	 	PlayerToPoint(8.0,playerid,453.312622, -1475.028076, 30.363472) ||
		PlayerToPoint(8.0,playerid,986.761230, -1336.739380, 13.346378) ||
	 	PlayerToPoint(8.0,playerid,2215.514404, -2196.378418, 13.346378))
	    {
	        if(OnDuty[playerid]==1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "	Szolgálatban..? Nincs más dolgod?!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /atmbank [összeg] vagy /atmdeposit [összeg]");
				format(string, sizeof(string), "  %dFT van a bankszámládon.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /bank [összeg] vagy /deposit [összeg]");
				format(string, sizeof(string), "  %dFT van a bankszámládon.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincsen ennyid!");
				return 1;
			}
			new regiosszeg = GetMoney(playerid);
			GiveMoney(playerid, -cashdeposit);
			new ujosszeg = GetMoney(playerid);

			PenzCheck(playerid, ujosszeg, regiosszeg, cashdeposit, 1);

			new curfunds = PlayerInfo[playerid][pAccount];
			PlayerInfo[playerid][pAccount] = cashdeposit+PlayerInfo[playerid][pAccount];
			SendClientMessage(playerid, COLOR_WHITE, "|___ BANKSZÁMLA BEJELENTÉS ___|");
			format(string, sizeof(string), "  Régi összeg: %dFT", curfunds);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Kivett pénz: %dFT",cashdeposit);
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
			format(string, sizeof(string), "  Új összeg: %dFT", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			Cselekves(playerid, "berakott pénzt a számlájára...");
			return 1;
		}
		return 1;
	}*/

	/*if(strcmp(cmd, "/balance", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nem vagy a bankban.");
	            return 1;
	        }
			format(string, sizeof(string), "  A bank számládon %dFT van.",PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			Cselekves(playerid, "megnézte menyi pénz van a számláján...");
		}
		return 1;
	}*/

	if(strcmp(cmd, "/dice", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new dice = random(6)+1;
			if (gDice[playerid] == 1)
			{
				format(string, sizeof(string), "* Valaki dob a 6 oldalú kockával és az eredmény: %d", dice);
		 		ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
				ProxDetector(5.0, playerid, string, TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincsen kockád, vegyél a 24/7-ben.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/dicex3", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new dice = random(6)+1;
			new dice2 = random(6)+1;
			new dice3 = random(6)+1;
			if (gDice[playerid] == 1)
			{
				format(string, sizeof(string), "* Valaki dob a 6 oldalú kockával és az eredmény: %d", dice);
				format(string, sizeof(string), "* Valaki ismét dob a 6 oldalú kockával és az eredmény: %d", dice2);
				format(string, sizeof(string), "* Valaki utoljára dob a 6 oldalú kockával és az eredmény: %d", dice3);
		 		ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
				ProxDetector(5.0, playerid, string, TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincsen kockád, vegyél a 24/7-ben.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/dice12", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new dice = random(12)+1;
			if (gDice[playerid] == 1)
			{
				format(string, sizeof(string), "* Valaki dob a 12 oldalú kockával és az eredmény: %d", dice);
		 		ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
				ProxDetector(5.0, playerid, string, TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincsen kockád, vegyél a 24/7-ben.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/dice20", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new dice = random(20)+1;
			if (gDice[playerid] == 1)
			{
				format(string, sizeof(string), "* Valaki dob a 20 oldalú kockával és az eredmény: %d", dice);
		 		ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
				ProxDetector(5.0, playerid, string, TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincsen kockád, vegyél a 24/7-ben.");
				return 1;
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/transfer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /transfer [playerid/PartOfName] [amount]");
				return 1;
			}

			new player[32];
			Format(player, "%s", tmp);
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /transfer [playerid/PartOfName] [amount]");
				return 1;
			}
			moneys = strval(tmp);

			if(giveplayerid != INVALID_PLAYER_ID)
			{
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				playermoney = PlayerInfo[playerid][pAccount] ;
				if (moneys > 0 && playermoney >= moneys)
				{
					PlayerInfo[playerid][pAccount] -= moneys;
					PlayerInfo[giveplayerid][pAccount] += moneys;
					format(string, sizeof(string), "   Átutaltál %dFtot neki: %s", moneys, giveplayer);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "   %s utalt neked %dFtot", sendername, moneys);
					SendClientMessage(giveplayerid, COLOR_GRAD1, string);

					format(string, sizeof(string), "%s utalt %dFtot neki: %s", sendername, moneys, giveplayer);
					if(moneys >= 5000000)
					{
						ABroadCast(COLOR_YELLOW,string,1);
					}
					printf("%s", string);
					PayLog(string);
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Szerintem nincs elég pénzed.");
				}
			}
			else if(egyezik(player, "0102"))
			{
				if(!AMT(playerid, MUNKA_AUTOKERESKEDO))
					return Msg(playerid, "Nem vagy autókereskedõ!");

				if(moneys < 1)	return Msg(playerid, "-.-");
				if(moneys > RendelesPenz)
				{
					SendFormatMessage(playerid, COLOR_LIGHTRED, "Csak %dFtot kell utalnod, ennél többre nincs szükség.", RendelesPenz);
					return 1;
				}
				if(moneys == RendelesPenz)
					SendFormatMessage(playerid, COLOR_GREY, "Átutaltál %dFtot, így a teljes összeg be lett fizetve. Az import cég ~15 órán ((15perc)) belül megérkezik a kocsival a kikötõbe!", moneys);
				else
					SendFormatMessage(playerid, COLOR_GREY, "Átutaltál %dFtot, már csak %dFtot kell befizetned!", moneys, (RendelesPenz - moneys));

				RendelesPenz -= moneys;
				PlayerInfo[playerid][pAccount] -= moneys;
				BizPenz(BIZ_IMPORT, moneys);

				if(RendelesPenz <= 0)
					RendelesAlatt = 2;
				SaveStuff();
			}
			else
			{
				format(string, sizeof(string), " Nincs ilyen játékos.");
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}*/
	
	if(egyezik(cmd, "/buy") || egyezik(cmd, "/vesz"))
	{
		if(!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53) || !PlayerToPoint(5, playerid, -2539.6729,1990.0315,8.4003)) return Msg(playerid, "Nem vagy 24/7-ben.");
		ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_LIST, "24/7", "Telefon - 30.000Ft\nTelefonkönyv - 5.000Ft\nGPS Lokátor - 25.000Ft\nVontatókötél - 3.000Ft\nKötszer - 1.250Ft / 3db\nKaparós sorsjegy - 200Ft\nDobókocka - 500Ft\nCsirke - 600Ft\nHamburger - 450Ft\nFagyasztott Pizza - 700Ft\nSzendvics - 700Ft\nÜditõ - 250Ft\nCigaretta - 510Ft\nVihar Gyújtó - 600Ft\nNikotin tapasz - 3.000Ft\nÓvszer - 2.000Ft\nHorgász Bot - 15.000Ft\nCsali(30db) - 650Ft", "Megvesz","Mégse");
		TogglePlayerControllable(playerid, false);
		Cselekves(playerid, "nézelõdik", 1);
	}
	/*if(egyezik(cmd, "/buy") || egyezik(cmd, "/vesz"))
	{
		if(BizzInfo[BIZ_247][bProducts] < 1)
		{
			GameTextForPlayer(playerid, "~r~Nincs aru az uzletben", 5000, 1);
			return 1;
		}
		if(params < 1)
		{		
			Msg(playerid, "/vesz [Szám]");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "1: Telefon(30.000Ft) - 2: Kaparós sorsjegy(200Ft)");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "3: Telefonkönyv(5.000Ft) - 4: Dobókocka(500Ft)");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "5: Óvszer(2.000Ft) - 6: Csirke(600Ft)");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "7: Hamburger(450Ft) - 8: Fagasztott Pizza(700Ft)");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "9: Szendvics(Kaja)(1.000Ft) - 10: Kötszer(1.250Ft)");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "11: Vontatókötél(3.000Ft) - 12: GPS Lokátor(25.000Ft)");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "13: Cigaretta(510Ft) - 14: Nikotin tapasz(3.000Ft)");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "15: Gyújtó(600Ft) - 16: Üditõ(250Ft)");
			return 1;
		}
		new szam = strval(param[1]);
		if(szam < 1) return 1;
		if(szam == 1)
		{
			if(GetMoney(playerid) < 30000) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -30000);
			BizPenz(BIZ_247, 30000);
			new randphone = 1000 + random(8999);
			PlayerInfo[playerid][pPnumber] = randphone;
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy telefont! A számod: %d", randphone);
			Cselekves(playerid, "vett egy telefont", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 2)
		{
			if(GetMoney(playerid) < 200) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -200);
			BizPenz(BIZ_247, 200);
			new nyero = Rand(1, 3);
			if(nyero == 1)
			{
				new menyit = Rand(200, 1000);
				GiveMoney(playerid, menyit);
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy kaparós sorsjegyet és nyertél %dFt-ot.", menyit);
			}
			else SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy kaparós sorsjegyet és nem nyertél vele semmit.");
			Cselekves(playerid, "vett egy kaparós sorsjegyet", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 3)
		{
			if(PlayerInfo[playerid][pPhoneBook] == 1) return Msg(playerid, "Már van telefonkönyved!");
			if(GetMoney(playerid) < 5000) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -5000);
			BizPenz(BIZ_247, 5000);
			PlayerInfo[playerid][pPhoneBook] = 1;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy telefonkönyvet!");
			Cselekves(playerid, "vett egy telefonkönyvet", 1);
		}
		if(szam == 4)
		{
			if(gDice[playerid] == 1) return Msg(playerid, "Már van dobókockád!");
			if(GetMoney(playerid) < 500) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -500);
			BizPenz(BIZ_247, 500);
			gDice[playerid] = 1;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy dobókockát!");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Parancsok: /dice | /dice12 | /dice20 ");
			Cselekves(playerid, "vett egy dobókockát", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 5)
		{
			if(GetMoney(playerid) < 2000) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -2000);
			BizPenz(BIZ_247, 2000);
			Condom[playerid] ++;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy óvszert!");
			Cselekves(playerid, "vett egy óvszert", 1);
		}
		if(szam == 6)
		{
			if(GetMoney(playerid) < 600) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -600);
			BizPenz(BIZ_247, 600);
			new rand = random(15);
			Groceries[playerid][pChickens] += 1;
			Groceries[playerid][pChicken] += rand;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy csirkét!");
			Cselekves(playerid, "vett egy csirkét", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 7)
		{
			if(GetMoney(playerid) < 450) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -450);
			BizPenz(BIZ_247, 450);
			new rand = random(15);
			Groceries[playerid][pHamburgers] += 1;
			Groceries[playerid][pHamburger] += rand;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy hamburgert!");
			Cselekves(playerid, "vett egy hamburgert", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 8)
		{
			if(GetMoney(playerid) < 700) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -700);
			BizPenz(BIZ_247, 700);
			new rand = random(15);
			Groceries[playerid][pPizzas] += 1;
			Groceries[playerid][pPizza] += rand;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy fagyasztott pizzát!");
			Cselekves(playerid, "vett egy fagyasztott pizzát", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 9)
		{
			if(GetMoney(playerid) < 1000) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -1000);
			BizPenz(BIZ_247, 1000);
			if(PlayerInfo[playerid][pKaja] < MAXKAJA)
			{
				PlayerInfo[playerid][pKaja]++;
			}
			else
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Maximum %d szendvics lehet nálad.", MAXKAJA);
				return 1;
			}
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy szendvicset! Most %ddb van nálad", PlayerInfo[playerid][pKaja]);
			Cselekves(playerid, "vett egy szendvicset", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 10)
		{
			if(GetMoney(playerid) < 1250) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -1250);
			BizPenz(BIZ_247, 1250);
			if(PlayerInfo[playerid][pKotszer] < MAXKOTSZER)
			{
				PlayerInfo[playerid][pKotszer] += 3;
			}
			else
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Maximum %d kötszer lehet nálad.", MAXKOTSZER);
				return 1;
			}
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél 3db kötszert!");
			Cselekves(playerid, "vett egy kötszeres dobozt", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 11)
		{
			if(vontatokotel[playerid] == 1) return Msg(playerid, "Már van vontatóköteled!");
			if(GetMoney(playerid) < 3000) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -3000);
			BizPenz(BIZ_247, 3000);
			vontatokotel[playerid] = 1;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy vontató kötelet!");
			Cselekves(playerid, "vett egy vontató kötelet", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 12)
		{
			if(PlayerInfo[playerid][pLokator] == 1) return Msg(playerid, "Már van GPS Lokátorod!");
			if(GetMoney(playerid) < 25000) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -25000);
			BizPenz(BIZ_247, 25000);
			PlayerInfo[playerid][pLokator] = 1;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy GPS Lokátort!");
			Cselekves(playerid, "vett egy GPS Lokátort", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 13)
		{
			if(GetMoney(playerid) < 510) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -510);
			BizPenz(BIZ_247, 510);
			PlayerInfo[playerid][pCigi] += 12;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy doboz cigarettát(12 szál)!");
			Cselekves(playerid, "vett egy doboz cigarettát", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 14)
		{
			if(GetMoney(playerid) < 3000) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -3000);
			BizPenz(BIZ_247, 3000);
			PlayerInfo[playerid][pNikotin]++;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy nikotin tapaszt!");
			Cselekves(playerid, "vett egy nikon tapaszt", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 15)
		{
			if(GetMoney(playerid) < 600) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -600);
			BizPenz(BIZ_247, 600);
			PlayerInfo[playerid][pGyujto] += 5;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy gyújtót!");
			Cselekves(playerid, "vett egy gyújtót", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
		if(szam == 16)
		{
			if(GetMoney(playerid) < 250) return Msg(playerid, "Nincs nálad elég pénz.");
			GiveMoney(playerid, -250);
			BizPenz(BIZ_247, 250);
			PlayerInfo[playerid][pPia]++;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vettél egy üveg üditõt!");
			Cselekves(playerid, "vett egy üveg üditõt", 1);
			BizzInfo[BIZ_247][bProducts]--;
		}
	}*/
	/*if(strcmp(cmd, "/buy", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53))//centerpoint 24-7
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nem vagy 24/7-be !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használata: /buy [Szám]");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "1: Telefon(30.000Ft) - 2: Kaparós sorsjegy(200Ft)");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "3: Telefonkönyv(5.000Ft) - 4: Dobókocka(500Ft)");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "5: Óvszer(2.000Ft) - 6: Csirke(600Ft)");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "7: Hamburger(450Ft) - 8: Fagasztott Pizza(700Ft)");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "9: Kaja(1.000Ft) - 10: Kötszer(1.250Ft)");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "11: Vontatókötél(3.000Ft) - 12: GPS Lokátor(25.000Ft)");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "13: Cigaretta(510Ft) - 14: Nikotin tapasz(3.000Ft)");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "15: Gyújtó(600Ft) - 16: Pia(250Ft)");
				return 1;
			}
			new item = strval(tmp);
			if(BizzInfo[BIZ_247][bProducts] < 1)
			{
				GameTextForPlayer(playerid, "~r~Az uzlet kifogyott", 5000, 1);
				return 1;
			}
			if (item == 1 && GetMoney(playerid) >= 30000)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 500 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 500 - price;
			        format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
					GiveMoney(playerid,- payout);
					BizPenz(BIZ_247, payout);
			    }
			    else
			    {
			        format(string, sizeof(string), "~r~-%dFt", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
					GiveMoney(playerid,-500);
					BizPenz(BIZ_247, 500);
			    }
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new randphone = 1000 + random(8999);//minimum 1000  max 9999
				PlayerInfo[playerid][pPnumber] = randphone;
				format(string, sizeof(string), "   Mobile Phone Purchased your new Number is %d", randphone);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_GRAD5, "You can check this anytime by Typing /stats");
				SendClientMessage(playerid, COLOR_WHITE, "HINT: You can now type /cellphonehelp to see your cell phone commands.");
				return 1;
			}
			else if (item == 2 && GetMoney(playerid) >= 7500)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 7500 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 7500 - price;
					GiveMoney(playerid,- payout);

					BizPenz(BIZ_247, payout);

					format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GiveMoney(playerid,-7500);

					BizPenz(BIZ_247, 7500);

					format(string, sizeof(string), "~r~-%dFt", 1000);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new prize;
				new symb1[32]; new symb2[32]; new symb3[32];
				new randcard1 = random(10);//minimum 1000  max 9999
				new randcard2 = random(10);//minimum 1000  max 9999
				new randcard3 = random(10);//minimum 1000  max 9999
				if(randcard1 >= 5)
				{
					format(symb1, sizeof(symb1), "~b~]");
					randcard1 = 1;
				}
				else if(randcard1 <= 4 && randcard1 >= 2)
				{
					format(symb1, sizeof(symb1), "~g~]");
					randcard1 = 2;
				}
				else if(randcard1 < 2)
				{
					format(symb1, sizeof(symb1), "~y~]");
					randcard1 = 3;
				}
				if(randcard2 >= 5)
				{
					format(symb2, sizeof(symb2), "~b~]");
					randcard2 = 1;
				}
				else if(randcard2 <= 4 && randcard2 >= 2)
				{
					format(symb2, sizeof(symb2), "~g~]");
					randcard2 = 2;
				}
				else if(randcard2 < 2)
				{
					format(symb2, sizeof(symb2), "~y~]");
					randcard2 = 3;
				}
				if(randcard3 >= 5)
				{
					format(symb3, sizeof(symb3), "~b~]");
					randcard3 = 1;
				}
				else if(randcard3 <= 4 && randcard3 >= 2)
				{
					format(symb3, sizeof(symb3), "~g~]");
					randcard3 = 2;
				}
				else if(randcard3 < 2)
				{
					format(symb3, sizeof(symb3), "~y~]");
					randcard3 = 3;
				}
				if(randcard1 == randcard2 && randcard1 == randcard3)
				{
					if(randcard1 > 5)
					{
						prize = 2500;
					}
					if(randcard1 <= 4 && randcard1 >= 2)
					{
						prize = 1500;
					}
					if(randcard1 < 2)
					{
						prize = 500;
					}
					GiveMoney(playerid,prize);

					BizPenz(BIZ_247, prize);

					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~g~%dFt",symb1,symb2,symb3, prize);
				}
				else
				{
					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~r~0Ft",symb1,symb2,symb3);
				}
				GameTextForPlayer(playerid, string, 3000, 3);
				return 1;
			}
			else if (item == 3 && GetMoney(playerid) >= 5000)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 5000 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 5000 - price;
					GiveMoney(playerid,- payout);

					BizPenz(BIZ_247, payout);

					format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GiveMoney(playerid,-5000);
					BizPenz(BIZ_247, 5000);

					format(string, sizeof(string), "~r~-%dFt", 5000);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                PlayerInfo[playerid][pPhoneBook] = 1;
				format(string, sizeof(string), "  Vettél telefon könyvet! Most már megnézheted a telefon számokat!");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /number <id/name>.");
				return 1;
			}
			else if (item == 4 && GetMoney(playerid) >= 500)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 500 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 500 - price;
					GiveMoney(playerid,- payout);
					BizPenz(BIZ_247, payout);

					format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GiveMoney(playerid,-500);
					BizPenz(BIZ_247, 500);

					format(string, sizeof(string), "~r~-%dFt", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				gDice[playerid] = 1;
				format(string, sizeof(string), "   Vettél három darab kockát, irány a kaszinó(/kockahelp, /kaszinohelp)!");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Parancsok: /dice | /dice12 | /dice20 ");
				return 1;
			}
			else if(item == 5 && GetMoney(playerid) >= 5000)
			{
				if (gLastCar[playerid] != 0)
				{
					if(HireCar[playerid] != NINCS)
					{
						gCarLock[HireCar[playerid]] = 0;
						UnLockCar(HireCar[playerid]);
						HireCar[playerid] = NINCS;
					}
					if(PlayerInfo[playerid][pTraderPerk] > 0)
			    	{
						new skill = 5000 / 100;
						new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
						new payout = 5000 - price;
						GiveMoney(playerid,- payout);
						BizPenz(BIZ_247, payout);

						format(string, sizeof(string), "~r~-%dFt", payout);
						GameTextForPlayer(playerid, string, 5000, 1);
					}
					else
					{
					    GiveMoney(playerid,-5000);
						BizPenz(BIZ_247, 5000);
						format(string, sizeof(string), "~r~-%dFt", 5000);
						GameTextForPlayer(playerid, string, 5000, 1);
					}
					BizzInfo[BIZ_247][bProducts]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					HireCar[playerid] = gLastCar[playerid];
					format(string, sizeof(string), "Vettél kulcsot az utoljára használt kocsihoz.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /lock ");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, " -.-");
				}
				return 1;
			}
			else if (item == 6 && GetMoney(playerid) >= 10000)
			{
				if(PlayerInfo[playerid][pPhousekey] != NINCS)
				{
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i) == 1 && HireCar[PlayerInfo[playerid][pPhousekey]+1])
						{
							HireCar[i] = NINCS;
						}
					}
					if(PlayerInfo[playerid][pTraderPerk] >= 0)
			    	{
						new skill = 10000 / 100;
						new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
						new payout = 10000 - price;
						GiveMoney(playerid,- payout);
						BizPenz(BIZ_247, payout);
						format(string, sizeof(string), "~r~-%dFt", payout);
						GameTextForPlayer(playerid, string, 5000, 1);
					}
					else
					{
					    GiveMoney(playerid,-10000);
						BizPenz(BIZ_247, 10000);
						format(string, sizeof(string), "~r~-%dFt", 10000);
						GameTextForPlayer(playerid, string, 5000, 1);
					}
					BizzInfo[BIZ_247][bProducts]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "New Locks Purchased.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /lock ");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   You don't have a Vehicle to fit it to !");
				}
				return 1;
			}
			else if (item == 7 && GetMoney(playerid) >= 5000)
			{
				gSpeedo[playerid] = 1;
				if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 5000 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 5000 - price;
					GiveMoney(playerid,- payout);
					BizPenz(BIZ_247, payout);
					format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GiveMoney(playerid,-5000);
					BizPenz(BIZ_247, 5000);
					format(string, sizeof(string), "~r~-%dFt", 5000);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				BizzInfo[BIZ_247][bProducts]--;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Vettél sebesség mérõt.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /speedo ");
				return 1;
			}
			else if (item == 8 && GetMoney(playerid) >= 50)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 50 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 50 - price;
					GiveMoney(playerid,- payout);
					format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GiveMoney(playerid,-50);
					format(string, sizeof(string), "~r~-%dFt", 50);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				Condom[playerid] ++;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Condom Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				return 1;
			}
			else if (item == 9 && GetMoney(playerid) >= 2500)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 2500 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 2500 - price;
					GiveMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GiveMoney(playerid, - 2500);
					format(string, sizeof(string), "~r~-%dFt", 2500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "CD-Player Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /music");
				PlayerInfo[playerid][pCDPlayer] = 1;
				return 1;
			}
			else if (item == 10 && GetMoney(playerid) >= 10)
			{
			    if(Groceries[playerid][pChickens] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You have to many Chickens, Cook some first !");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					GiveMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GiveMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-%dFt", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
			    GiveMoney(playerid, - 10);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Chicken Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				format(string, sizeof(string), "~r~-%dFt", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pChickens] += 1;
				Groceries[playerid][pChicken] += rand;
				return 1;
			}
			else if (item == 11 && GetMoney(playerid) >= 10)
			{
			    if(Groceries[playerid][pHamburgers] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You have to many Hamburgers, Cook some first !");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					GiveMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GiveMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-%dFt", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
			    GiveMoney(playerid, - 10);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Hamburger Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				format(string, sizeof(string), "~r~-%dFt", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pHamburgers] += 1;
				Groceries[playerid][pHamburger] += rand;
				return 1;
			}
			else if (item == 12 && GetMoney(playerid) >= 10)
			{
			    if(Groceries[playerid][pPizzas] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You have to many Pizzas, Cook some first !");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					GiveMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GiveMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-%dFt", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Frozen Pizza Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				new rand = random(15);
				Groceries[playerid][pPizzas] += 1;
				Groceries[playerid][pPizza] += rand;
				return 1;
			}
			else if (item == 13 && GetMoney(playerid) >= 25000)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 25000 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 25000 - price;
					GiveMoney(playerid,- payout);
					BizPenz(BIZ_247, payout);
					format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GiveMoney(playerid,-25000);
					BizPenz(BIZ_247, 25000);
					format(string, sizeof(string), "~r~-%dFt", 25000);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                PlayerInfo[playerid][pLokator] = 1;
				format(string, sizeof(string), "   Vettél egy GPS lokátort! (Ha a kocsin van GPS chip /gps kocsi)");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				return 1;
			}

			else if (item == 14 && GetMoney(playerid) >= 500)
			{
			    if(PlayerInfo[playerid][pKaja] >= MAXKAJA)
				{
				    SendFormatMessage(playerid, COLOR_LIGHTRED, "Maximum %d kaja lehet nálad!", MAXKAJA);
				    return 1;
				}

			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 500 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 500 - price;
					GiveMoney(playerid,- payout);
					BizPenz(BIZ_247, payout);
					format(string, sizeof(string), "~r~-%dFt", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GiveMoney(playerid,-500);
					BizPenz(BIZ_247, 500);
					format(string, sizeof(string), "~r~-%dFt", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                PlayerInfo[playerid][pKaja] += 1;
				format(string, sizeof(string), "Vettél egy kaját, összesen %d van nálad", PlayerInfo[playerid][pKaja]);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				return 1;
			}
			else if (item == 15 && GetMoney(playerid) >= 5000)
			{
			    if(PlayerInfo[playerid][pKotszer] == 0)
			    {
				    PlayerInfo[playerid][pKotszer] = 3;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "Vettél 3 db kötszert.");
					new payout;
					payout = 5000;
					GiveMoney(playerid,- 5000);
					BizPenz(BIZ_247, 5000);
					format(string, sizeof(string), "~r~-%dFT", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
					PlayerInfo[playerid][pKotszer] += 3;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "Vettél 3 db kötszert.");
					new payout;
					payout = 5000;
					GiveMoney(playerid,- 5000);
					BizPenz(BIZ_247, 5000);
					format(string, sizeof(string), "~r~-%dFT", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				return 1;
			}
			else if (item == 16 && GetMoney(playerid) >= 1500)
			{
				vontatokotel[playerid] = 1;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD4, "Vettél vontatokötelet. Használat: /vontatokotel");
				new payout;
				payout = 1500;
				GiveMoney(playerid,- 1500);
				BizPenz(BIZ_247, 1500);
				format(string, sizeof(string), "~r~-%dFT", payout);
				GameTextForPlayer(playerid, string, 5000, 1);
				return 1;
			}
			else if (item == 17 && GetMoney(playerid) >= 500)
			{
				if(PlayerInfo[playerid][pCigi] == 0)
				{
					PlayerInfo[playerid][pCigi] = 5;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "Vettél cigarettát. Használat: /cigi");
					new payout;
					payout = 500;
					GiveMoney(playerid,- 500);
					BizPenz(BIZ_247, 500);
					format(string, sizeof(string), "~r~-%dFT", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
					PlayerInfo[playerid][pCigi] = PlayerInfo[playerid][pCigi] + 5;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "Vettél cigarettát. Használat: /cigi");
					new payout;
					payout = 500;
	    			GiveMoney(playerid,- 500);
	    			BizPenz(BIZ_247, 500);
					format(string, sizeof(string), "~r~-%dFT", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				return 1;
			}
			else if (item == 18 && GetMoney(playerid) >= 3000)
			{
				if(PlayerInfo[playerid][pNikotin] == 0)
				{
					PlayerInfo[playerid][pNikotin] = 1;
	                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "Vettél nikotin tapaszt. Használat: /nikotin");
					new payout;
					payout = 3000;
					GiveMoney(playerid,- 3000);
					BizPenz(BIZ_247, 3000);
					format(string, sizeof(string), "~r~-%dFT", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
	    			PlayerInfo[playerid][pNikotin] = PlayerInfo[playerid][pNikotin] + 1;
	                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "Vettél nikotin tapaszt. Használat: /nikotin");
					new payout;
					payout = 3000;
					GiveMoney(playerid,- 3000);
					BizPenz(BIZ_247, 3000);
					format(string, sizeof(string), "~r~-%dFT", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				return 1;
			}
		 	else if (item == 19 && GetMoney(playerid) >= 150)
			{
				if(PlayerInfo[playerid][pGyujto] == 0)
				{
					PlayerInfo[playerid][pGyujto] = 5;
	                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "Vettél gyújtót. 5 cigire elég lesz.");
					new payout;
					payout = 150;
					GiveMoney(playerid,- 150);
					BizPenz(BIZ_247, 150);
					format(string, sizeof(string), "~r~-%dFT", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
	    			PlayerInfo[playerid][pGyujto] = PlayerInfo[playerid][pGyujto] + 5;
	                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "Vettél gyújtót. 5 cigire elég lesz.");
					new payout;
					payout = 150;
					GiveMoney(playerid,- 150);
					BizPenz(BIZ_247, 150);
					format(string, sizeof(string), "~r~-%dFT", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				return 1;
			}
		 	else if (item == 20 && GetMoney(playerid) >= 170)
			{
				if(PlayerInfo[playerid][pPia] == 0)
				{
					PlayerInfo[playerid][pPia] = 1;
	                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "Vettél piát. Használat: /ivás");
					new payout;
					payout = 170;
					GiveMoney(playerid,- 170);
					BizPenz(BIZ_247, 170);
					format(string, sizeof(string), "~r~-%dFT", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
	    			PlayerInfo[playerid][pPia] = PlayerInfo[playerid][pPia] + 1;
	                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "Vettél piát. Használat: /ivás");
					new payout;
					payout = 170;
					GiveMoney(playerid,- 170);
					BizPenz(BIZ_247, 170);
					format(string, sizeof(string), "~r~-%dFT", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				return 1;
			}
			else if (item == 21 && GetMoney(playerid) >= 200)
			{
				if(UresUveg[playerid] == 5) return Msg(playerid, "Max 5 üveg lehet nálad.");
				UresUveg[playerid]++;
				GiveMoney(playerid,- 200);
				BizPenz(BIZ_247, 200);
				SendFormatMessage(playerid, COLOR_GRAD4, "Vettél 1db üres üveget, most %d van nálad.", UresUveg[playerid]);
				GameTextForPlayer(playerid, "~r~-200FT", 5000, 1);
				return 1;
			}
			else
			{
				Msg(playerid, "???");
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/kocka", true) == 0)
 	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerToPoint(8.0, playerid, 1871.4955, -1711.7728, 1286.0610))
	  		{
				GiveMoney(playerid, -800);
				gDice[playerid] = 1;
				SendClientMessage(playerid, COLOR_WHITE, " Kocka megvéve. A /kockahelp parancsban sok segítséget találsz");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, " Nem vagy a kaszinó bárjánál!");
		}
		return 1;
	}
	if(strcmp(cmd, "/buyhouse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pPhousekey] != NINCS && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(PlayerInfo[playerid][pPremiumPont] < 1)
					return Msg(playerid, "Már van egy házad! Ha szeretnél második házat, vegyél prémiumot!");
				else if(PlayerInfo[playerid][pPremiumPont] > 0 && PlayerInfo[playerid][pPhousekey2] != NINCS)
					return Msg(playerid, "Már két házad van!");
				else if(PlayerInfo[playerid][pPremiumPont] > 0 && PlayerInfo[playerid][pPhousekey2] == NINCS && Biztos[playerid] != 1)
				{
					Biztos[playerid] = 1;
					return Msg(playerid, "Biztos vagy benne, hogy a prémium pontodat felhasználod második házra? Kocsit is vehetsz belõle. Ha biztos van benne, írd be újra a parancsot!");
				}
			}
			
			GetPlayerName(playerid, playername, sizeof(playername));
			new hazak = sizeof(HouseInfo);
			for(new h = 0; h < hazak; h++)
			{
				if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
				{
					if(HouseInfo[h][hCsak] == 1)
					{
					    if(strcmp(playername, HouseInfo[h][hCsakneki], true))
					    {
					        format(string, sizeof(string), "Ezt a házat csak %s veheti meg!", HouseInfo[h][hCsakneki]);
					        SendClientMessage(playerid, COLOR_RED, string);
					        return 1;
	        			}
					}

					if(GetMoney(playerid) >= HouseInfo[h][hValue])
					{
					    new neki[MAX_PLAYER_NAME];
						neki = "Nemigenyles";
						
						HouseInfo[h][hOwned] = 1;
						HouseInfo[h][hCsak] = 0;
						
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						
						GiveMoney(playerid,-HouseInfo[h][hValue]);
						
						PlayerPlayMusic(playerid);
						new HazBelso = HouseInfo[h][hBelso];
						
						SetPlayerInterior(playerid,IntInfo[HazBelso][iNumber]);
						SetPlayerPos(playerid,IntInfo[HazBelso][iExitX],IntInfo[HazBelso][iExitY],IntInfo[HazBelso][iExitZ]);
						SetPlayerVirtualWorld(playerid, h);
						PlayerInfo[playerid][pLocal] = h;
						SendClientMessage(playerid, COLOR_WHITE, "Gratulálok! Megvetted új házadat!");
						
						if(PlayerInfo[playerid][pPhousekey] == NINCS)
							PlayerInfo[playerid][pPhousekey] = h;
						else
						{
							PlayerInfo[playerid][pPhousekey2] = h;
							Msg(playerid, "Ezzel felhasználtad a prémium pontodat", COLOR_LIGHTBLUE);
							PlayerInfo[playerid][pPremiumPont] = 0;
						}
						Biztos[playerid] = 0;
						
						SendClientMessage(playerid, COLOR_WHITE, "A /help paranncsal több infóra is lelsz, a házzal kapcsolatban");
						DestroyDynamicPickup(HazPickup[h]);
						HazPickup[h] = UjPickup(1239, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);

						//HazUpdate(h, "Eladva='1', Tulaj='%s', Csak='0'", sendername);
						HazUpdate(h, HAZ_Owned, HAZ_Owner, HAZ_Csak);

						BizPenz(BIZ_HAZ, HouseInfo[h][hValue]);

						DateProp(playerid, DP_Haz);
						PlayerUpdate(playerid, "House='%d'", h);
						return 1;
					}
					else
					{
					    format(string, sizeof(string), "Nincs elég pénzed a ház megvételére! Még %dFt KP kell! A ház ára %dFt", (HouseInfo[h][hValue] - GetMoney(playerid)), HouseInfo[h][hValue]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rentroom", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			new hazak = sizeof(HouseInfo);
			for(new h = 0; h < hazak; h++)
			{
				if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
				{
					if(VanHaza(playerid) > 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Már van házad...");
						return 1;
					}
					if(GetMoney(playerid) > HouseInfo[h][hRent])
					{
						PlayerInfo[playerid][pBerlo] = h;
						GiveMoney(playerid,-HouseInfo[h][hRent]);
						HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
						PlayerPlayMusic(playerid);
						new HazBelso = HouseInfo[h][hBelso];
						SetPlayerInterior(playerid,IntInfo[HazBelso][iNumber]);
						SetPlayerPos(playerid,IntInfo[HazBelso][iExitX],IntInfo[HazBelso][iExitY],IntInfo[HazBelso][iExitZ]);
						SetPlayerVirtualWorld(playerid, h);
						GameTextForPlayer(playerid, "~w~Udv itt", 5000, 3);
						PlayerInfo[playerid][pLocal] = h;
						SendClientMessage(playerid, COLOR_WHITE, "Gratulálunk, kibérelted a házat!");
						//SendClientMessage(playerid, COLOR_WHITE, "Type /househelp to review the new property help section.");
						PlayerUpdate(playerid, "House='%d'", h);
						return 1;
					}
					else
					{
      					SendFormatMessage(playerid, COLOR_WHITE, "Nincs elég pénzed! Még %dFt kell KPba! Bérlés Ára: %dFt", (HouseInfo[h][hRent] - GetMoney(playerid)), HouseInfo[h][hRent]);
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rentcar", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
		    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy jármûben!");
		    new kocsi = GetPlayerVehicleID(playerid);
			if(kocsi >= BerelhetoKocsik[0] && kocsi <= BerelhetoKocsik[1])
			{
				if(BizzInfo[BIZ_BERLES1][bProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Kifogyott", 5000, 1);
					return 1;
				}
				if(PlayerInfo[playerid][pPbiskey] == 0)
				{
					GameTextForPlayer(playerid, "~w~Neked ingyen van", 5000, 3);
					TogglePlayerControllable(playerid, 1);
					return 1;
				}
				if (GetMoney(playerid) <  BizzInfo[BIZ_BERLES1][bEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Nincs eleg penzed!");
					return 1;
				}
				GiveMoney(playerid,-BizzInfo[BIZ_BERLES1][bEntranceCost]);
				BizPenz(BIZ_BERLES1, BizzInfo[BIZ_BERLES1][bEntranceCost]);
				BizzInfo[BIZ_BERLES1][bProducts]--;
				//BizUpdate(BIZ_BERLES1, "Prod='%d', Kassza='%d'", BizzInfo[BIZ_BERLES1][bProducts], BizzInfo[BIZ_BERLES1][bTill]);
				BizUpdate(BIZ_BERLES1, BIZ_Products, BIZ_Till);
			}
			else if(kocsi >= BerelhetoKocsik2[0] && kocsi <= BerelhetoKocsik2[1])
			{
				if(BizzInfo[BIZ_BERLES2][bProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Kifogyott", 5000, 1);
					return 1;
				}
				if(PlayerInfo[playerid][pPbiskey] == 0)
				{
					GameTextForPlayer(playerid, "~w~Neked ingyen van", 5000, 3);
					TogglePlayerControllable(playerid, 1);
					return 1;
				}
				if (GetMoney(playerid) <  BizzInfo[BIZ_BERLES2][bEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Nincs eleg penzed!");
					return 1;
				}
				GiveMoney(playerid,-BizzInfo[BIZ_BERLES2][bEntranceCost]);
				BizPenz(BIZ_BERLES2, BizzInfo[BIZ_BERLES2][bEntranceCost]);
				BizzInfo[BIZ_BERLES2][bProducts]--;
				//BizUpdate(BIZ_BERLES2, "Prod='%d', Kassza='%d'", BizzInfo[BIZ_BERLES2][bProducts], BizzInfo[BIZ_BERLES2][bTill]);
				BizUpdate(BIZ_BERLES2, BIZ_Products, BIZ_Till);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Ez a kocsi nem bérelhetõ.");
			    return 1;
			}
			if(HireCar[playerid] != NINCS)
			{
				gCarLock[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
			}
			HireCar[playerid] = GetPlayerVehicleID(playerid);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			TogglePlayerControllable(playerid, 1);
			GameTextForPlayer(playerid, "~g~Kiberelted az autot!~n~Zarni a /lock-al tudod", 5000, 3);
		}
		return 1;
	}
	/*if(strcmp(cmd, "/hirecar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /hirecar [key id]");
					return 1;
				}
				new car = strval(tmp);
				HireCar[playerid] = car;
				format(string, sizeof(string), "Key Fashioned You Can Lock Car %d.",car);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /lock ");
				return 1;
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/switchkey", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] == NINCS && PlayerInfo[playerid][pPhousekey] == NINCS)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs házkocsid, se béreltkocsid!");

			if(HireCar[playerid] == NINCS)
				SwitchKey[playerid] = 1;
			else if(PlayerInfo[playerid][pPcarkey] == NINCS)
				SwitchKey[playerid] = 0;


			if(!SwitchKey[playerid])
			{
				if(PlayerInfo[playerid][pPhousekey] != NINCS)
				{
					SwitchKey[playerid] = 1;
					GameTextForPlayer(playerid, "~y~A hazkocsidat nyitod", 5000, 3);
				}
				else
				{
					GameTextForPlayer(playerid, "~h~~r~Nincs hazkocsid!", 5000, 3);
				}
				return 1;
			}
			else
			{
				if(HireCar[playerid] != NINCS)
				{
					SwitchKey[playerid] = 0;
					GameTextForPlayer(playerid, "~y~A berelt kocsid nyitod", 5000, 3);
				}
				else
				{
					GameTextForPlayer(playerid, "~h~~r~Nincs berelt kocsid!", 5000, 3);
				}
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/givekey", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			new car;
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /givekey [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(HireCar[playerid] == NINCS && PlayerInfo[playerid][pPhousekey] == NINCS)
			{
				SendClientMessage(playerid, COLOR_GRAD1, " Nincs kulcsod");
				return 1;
			}
			else
			{
				if(HireCar[playerid] != NINCS && SwitchKey[playerid] == 0)
				{
					car = HireCar[playerid];
					gCarLock[car] = 0;
					UnLockCar(car);
					HireCar[playerid] = NINCS;
				}
				else
				{
					car = PlayerInfo[playerid][pPhousekey]+1;
				}
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if(ProxDetectorS(5.0, playerid, giveplayerid))
					{
						if(HireCar[giveplayerid] != NINCS)
						{
							gCarLock[HireCar[giveplayerid]] = 0;
							UnLockCar(HireCar[giveplayerid]);
						}
						HireCar[giveplayerid] = car;
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "Oda adtad a kocsi kulcsaid neki: %s", giveplayer);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "%s oda adta a kocsija kulcsait.", sendername);
						SendClientMessage(giveplayerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "* Valaki elövette a kulcsait, és átadta valakinek.");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/unrentcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != NINCS)
			{
				gCarLock[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = -1;
				GameTextForPlayer(playerid, "~w~Már nem berled a kocsit", 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/unrent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(Berlo(playerid) == NINCS)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Nincs bérelt házad !");
				return 1;
			}
			PlayerInfo[playerid][pBerlo] = NINCS;
			SendClientMessage(playerid, COLOR_WHITE, "Bérlés lemondva.");
		}
		return 1;
	}

	if(strcmp(cmd, "/asellbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /asellbiz [bizid]");
				return 1;
			}
			new biz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				BizzInfo[biz][bLocked] = 1;
				BizzInfo[biz][bOwned] = 0;
				strmid(BizzInfo[biz][bOwner], "The State", 0, strlen("The State"), 255);
				strmid(BizzInfo[biz][bExtortion], "No-one", 0, strlen("No-one"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Eladtad a bizniszt");
				GameTextForPlayer(playerid, string, 10000, 3);
				//BizUpdate(biz, "Zarva='%d', Eladva='0', Tulaj='Nincs_Tulaj', Extortion='No-One'", 0);
				BizUpdate(biz, BIZ_Locked, BIZ_Owned, BIZ_Owner, BIZ_Extortion);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nem használhatod a parancsot.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/asellhouse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /asellhouse [houseid]");
				return 1;
			}
			new house = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hLock] = 0;
				HouseInfo[house][hOwned] = 0;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Eladtad a hazat", HouseInfo[house][hValue]);
				GameTextForPlayer(playerid, string, 10000, 3);
				DestroyDynamicPickup(HazPickup[house]);
				HazPickup[house] = UjPickup(1273, 23, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey], HouseInfo[house][hEntrancez]);
				//HazUpdate(house, "Eladva='%d', Tulaj='Nincs_Tulaj', Zarva='0', Elet='0', Pajzs='0'", HouseInfo[house][hOwned]);
				HazUpdate(house, HAZ_Owned, HAZ_Owner, HAZ_Lock, HAZ_Hel, HAZ_Arm);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nem használhatod ezt a parancsot.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/sellhouse", true) == 0)
	{
		if(playerid != -1) return Msg(playerid, "Átmenetileg tiltva");
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] == NINCS)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nincs is házad.");
				return 1;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Házas ember vagy, miért adnád el a házad ?!");
		        return 1;
		    }
			if(PlayerInfo[playerid][pPhousekey] != NINCS && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				new house = PlayerInfo[playerid][pPhousekey];
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hLock] = 0;
				HouseInfo[house][hOwned] = 0;

				//HazUpdate(house, "Eladva='0', Zarva='0', Elet='0', Pajzs='%d'", 0);
				HazUpdate(house, HAZ_Owned, HAZ_Lock, HAZ_Hel, HAZ_Arm);

				GetPlayerName(playerid, sendername, sizeof(sendername));
				ConsumingMoney[playerid] = 1;
				GiveMoney(playerid, (HouseInfo[house][hValue] / 2));

				BizPenz(BIZ_HAZ, HouseInfo[house][hValue] / 2);

				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Sikeresen~n~ eladtad a hazad ~n~~g~%dFt-ert", (HouseInfo[house][hValue] / 2));
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPhousekey] = NINCS;
				if(PlayerInfo[playerid][pLocal] == house)
				{
					SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
				}
				PlayerUpdate(playerid, "House='%d'", NINCS);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nincs is házad.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/houseupgrade", true) == 0 || strcmp(cmd, "/hu", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pPhousekey] == NINCS && PlayerInfo[playerid][pPhousekey2] == NINCS)
				return Msg(playerid, "Nincs házad!");
		
			GetPlayerName(playerid, playername, sizeof(playername));
			
			new house = HazaElottVan(playerid);
			if(house != NINCS)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használata: /houseupgrade [szám]");
					SendClientMessage(playerid, COLOR_GRAD1, "|_______ Ház fejlesztések _______|");
					SendClientMessage(playerid, COLOR_GRAD2, "| 1: Hûtõ 50000Ft");
					SendClientMessage(playerid, COLOR_GRAD3, "| 2: Mellény szekrény (péncél) 100000Ft");
					return 1;
				}
				new item = strval(tmp);
				switch (item)
				{
					case 1:
					{
						if(BizzInfo[BIZ_HAZ][bProducts] < 1)
						{
							GameTextForPlayer(playerid, "~r~Kifogyott", 5000, 1);
							return 1;
						}
						if(GetMoney(playerid) < 50000)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Nincs elég pénzed!");
							return 1;
						}
						HouseInfo[house][hHel] = 1;
						//HazUpdate(house, "Elet='%d'", HouseInfo[house][hHel]);
						HazUpdate(house, HAZ_Hel);
						GiveMoney(playerid,-50000);
						BizPenz(BIZ_HAZ, 50000);
						BizzInfo[BIZ_HAZ][bProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Mostmár otthon is töltheted az életed. Parancs: /heal.");
					}
					case 2:
					{
					    if(!IsACop(playerid))
					    {
							SendClientMessage(playerid, COLOR_GREY, "   Nem vagy rendõr, ezért nem vehetsz pajzsot a házadba!");
							return 1;
					    }
						if(BizzInfo[BIZ_HAZ][bProducts] < 1)
						{
							GameTextForPlayer(playerid, "~r~Kifogyott", 5000, 1);
							return 1;
						}
						if(GetMoney(playerid) < 100000)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Nincs elég pénzed!");
							return 1;
						}
						HouseInfo[house][hArm] = 1;
						//HazUpdate(house, "Pajzs='%d'", HouseInfo[house][hArm]);
						HazUpdate(house, HAZ_Arm);
						GiveMoney(playerid,-100000);
						BizPenz(BIZ_HAZ, 100000);
						BizzInfo[BIZ_HAZ][bProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Mostmár otthon is van pajzsod. Parancs: /heal.");
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Nem vagy a házad elõtt!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setrent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(NincsHaza(playerid)) return Msg(playerid, "Nincs házad!");
			
			new bouse = HazaElottVan(playerid);
			GetPlayerName(playerid, playername, sizeof(playername));
			if(bouse != NINCS)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /setrent [ár]");
					return 1;
				}
				if(strval(tmp) < 1 || strval(tmp) > 99999)
				{
					SendClientMessage(playerid, COLOR_WHITE, "A minimum érték 1Ft, a maximum pedig 99999Ft.");
					return 1;
				}
				HouseInfo[bouse][hRent] = strval(tmp);
				//HazUpdate(bouse, "KAra='%d'", strval(tmp));
				HazUpdate(bouse, HAZ_Rent);
				format(string, sizeof(string), "A hazad berelheto %dFt-ert", HouseInfo[bouse][hRent]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, " Nem vagy a házad elõtt!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/evictall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(NincsHaza(playerid)) return Msg(playerid, "Nincs házad!");
			
			new bouse = HazaElottVan(playerid);
			if(bouse != NINCS)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(i != playerid)
						{
							if (PlayerInfo[i][pPhousekey] == bouse )
							{
								SendClientMessage(i, COLOR_WHITE, "A ház tulaja kilakoltatott.");
								SendClientMessage(playerid, COLOR_WHITE, "Mindenkit sikeresen kilakoltattál a házadból.");
								PlayerInfo[i][pPhousekey] = NINCS;
								return 1;
							}
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Nem vagy a házad elõtt!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/evict", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != NINCS && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /evict [playerid/PartOfName]");
				}
				new target;
				//target = strval(tmp);
				target = ReturnUser(tmp);
				if (target == playerid)
				{
					SendClientMessage(target, COLOR_WHITE, "Vicces, saját magad nem lakoltatod ki.");
					return 1;
				}
				if(IsPlayerConnected(target))
				{
				    if(target != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[target][pPhousekey] == PlayerInfo[playerid][pPhousekey])
						{
							SendClientMessage(target, COLOR_WHITE, "A ház tulaja kilakoltatott.");
							SendClientMessage(playerid, COLOR_WHITE, "A játékost kilakoltattad.");
							PlayerInfo[target][pPhousekey] = NINCS;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "A játékos nem a te házadban lakik.");
						    return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincs is házad!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setrentable", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(NincsHaza(playerid))
				return Msg(playerid, "Nincs házad!");
				
			GetPlayerName(playerid, playername, sizeof(playername));
			new bouse = HazaElottVan(playerid);
			if(bouse != NINCS)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp) || strval(tmp) != 1 && strval(tmp) != 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /setrentable [0/1]");
				}
				HouseInfo[bouse][hRentabil] = strval(tmp);
				//HazUpdate(bouse, "Kiado='%d'", strval(tmp));
				HazUpdate(bouse, HAZ_Rentabil);
				format(string, sizeof(string), "Haz kiadosaga: %d.", HouseInfo[bouse][hRentabil]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Nem vagy a házad elõtt!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/call", true) == 0)
	{
	    if(!Bortonben(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /call [phonenumber]");
				return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Nincs telefonod!");
				return 1;
			}

			new phonenumb = strval(tmp);
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Magadat hívod fel?");
				return 1;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Már hívásban vagy!");
				return 1;
			}

			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* Valaki elõveszi a telefonját");
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			if(phonenumb == 12345 && AMT(playerid, MUNKA_AUTOKERESKEDO))
			{
				if(UresKocsiHely() == -1 || playerid == playerid)
					return Msg(playerid, "Import Kft.: Sajnálom, jelenleg nincs eladó!", false);

				if(RendelesDatum != gdate)
				{
					RendeltKocsik = 0;
					RendelesDatum = gdate;
					//SaveStuff();
				}
				if(RendelesAlatt != 0)
				{
					SendFormatMessage(playerid, COLOR_LIGHTRED, "Jelenleg rendelés alatt van egy importkocsi! Név: %s, hátramaradt befizetés: %dFt", GetVehicleModelName(RendelesModel), RendelesPenz);
					return 1;
				}
				if(RendeltKocsik >= MAXRENDELES)
				{
					SendFormatMessage(playerid, COLOR_WHITE, "Ma már rendeltek%d kocsit, az importosok csak ennyit hoznak egy nap!", MAXRENDELES);
					return 1;
				}
				new data_car[1024];
				for(new j = 0; j < sizeof(RendelesID); j++)
				{
					if(j == 0)
						Format(data_car, "%dFt\t%s\n", RendelesAra[j], RendelesNev[j]);
					else
						Format(data_car, "%s%dFt\t%s\n", data_car, RendelesAra[j], RendelesNev[j]);
				}
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
				ShowPlayerDialog(playerid, DIALOG_CAR, DIALOG_STYLE_LIST, "Rendelés", data_car, "Rendel", "Mégse");
				SendClientMessage(playerid, COLOR_ALLDEPT, "Import Kft.: Üdvözlöm, milyen kocsit szeretne?");
				return 1;
			}
			else
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

			if(phonenumb == 911)
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Sürgõsségi: Kit szeretnél hívni? Rendõrség, vagy mentõ?");
				//SendClientMessage(playerid, COLOR_ALLDEPT, "HINT:Please SAY Your LOCATION When Calling");
				Mobile[playerid] = 911;
				return 1;
			}

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
				        new Hivasara = BizzInfo[BIZ_TELEFON][bEntranceCost];
						if(PlayerInfo[playerid][pTeloEgyenleg] < Hivasara)
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Nem áll rendelkezésre elegendõ összeg a hívás kapcsolásához. (Feltöltés: '/telefonfeltöltés')");
							return 1;
						}
						
						if(PlayerInfo[giveplayerid][pJailed] != 0)
							return Msg(playerid, "Börtönben van!");
						
				        if(PhoneOnline[giveplayerid] > 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Ki van kapcsolva a telefonja.");
				            return 1;
				        }
						if(Mobile[giveplayerid] == 255)
						{
						    new hivo = PlayerInfo[playerid][pPnumber];
							if(!Rejtett[playerid])
								format(string, sizeof(string), "Csörög a telefonod! Hívó: %d (/pickup)", hivo);
							else if(PlayerInfo[giveplayerid][pAdmin] > 1)
								format(string, sizeof(string), "Csörög a telefonod! Hívó: Ismeretlen (/pickup) - %d", hivo);
							else
								format(string, sizeof(string), "Csörög a telefonod! Hívó: Ismeretlen (/pickup)");
							SendClientMessage(giveplayerid, COLOR_YELLOW, string);
							GetPlayerName(giveplayerid, sendername, sizeof(sendername));
							RingTone[giveplayerid] = 10;
							format(string, sizeof(string), "* Valakinek csörög a telefonja", sendername);
							ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							CellTime[playerid] = 1;

							return 1;
						}
						else
							Msg(playerid, "Foglalt... Hívásban van...");
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "Nincs ilyen telefonszám.");
		}
		else
			Msg(playerid, "Börtönben nem lehet!");
		return 1;
	}
	if(egyezik(cmd, "/hs") || egyezik(cmd, "/hitmansms"))
	{
			if(!IsDirector(playerid)) return 1;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) return Msg(playerid, "/HitmanSMS [Telefonszám] [Szöveg]");
			new phonenumb = strval(tmp);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result)) return Msg(playerid, "/HitmanSMS [Telefonszám] [Szöveg]");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
				{
					SendFormatMessage(i, COLOR_YELLOW, "SMS: %s, Feladó: Hitman", result);
					SendFormatMessage(playerid, COLOR_YELLOW, "SMS elküldve.(Telefonszám: %d)", phonenumb);
					SendFormatMessage(playerid, COLOR_YELLOW, "SMS Szövege: %s", result);
				}
			}	
	}	
	if(strcmp(cmd, "/sms", true) == 0)
	{
	    if(!Bortonben(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /sms [telefonszám] [SMS szövege]");
				SendClientMessage(playerid, COLOR_GRAD2, "103[Riporter]");
				return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Nincs telefonod! 24/7-be lehet venni!");
				return 1;
			}
			if(PhoneOnline[playerid] > 0)
   			{
      		SendClientMessage(playerid, COLOR_GREY, "A telefonod kivan kapcsolva...");
	        return 1;
	        }
			new phonenumb = strval(tmp);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /sms [telefonszám] [SMS szövege]");
				SendClientMessage(playerid, COLOR_GRAD2, "103[Riporter]");
				return 1;
			}
			
			if(SzovegEllenorzes(playerid, result, "/sms"))
				return 1;

			new ara = BizzInfo[BIZ_TELEFON][bEntranceCost] / 5;
			new egyenleg = PlayerInfo[playerid][pTeloEgyenleg];

			if(egyenleg < ara)
			{
	            format(string, sizeof(string), "[Szolgáltató]SMS: Egy SMShez %dFtra van szükség, így nem tudsz SMS-t küldeni! (( Feltöltés: /telefonfeltöltés ))", ara);
	            SendClientMessage(playerid, COLOR_YELLOW, string);
	            return 1;
			}

			if(phonenumb == 103)
			{
				if(!LMT(playerid, LMUNKA_RIPORTER))
				{
					if(rtelo == 0)
					{
						SendClientMessage(playerid, COLOR_RED, "A szám jelenleg nem kapcsolható!");
						return 1;
					}
					if(PlayerInfo[playerid][pTeloEgyenleg] < 1)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Nincs pénz a telefonodon!");
						return 1;
					}
					FrakcioInfo[LMUNKA_RIPORTER][fPenz] += ara;
					PlayerInfo[playerid][pTeloEgyenleg] = PlayerInfo[playerid][pTeloEgyenleg] - ara;
					format(string, sizeof(string), "[Riporter]SMS: %s | Telefonszám: [%d]", result,PlayerInfo[playerid][pPnumber]);
					GetPlayerName(giveplayerid, sendername, sizeof(sendername));
					SendClientMessage(playerid, COLOR_WHITE, "Üzenet elküldve a riportereknek!");
					SendRadioMessage(LMUNKA_RIPORTER, COLOR_YELLOW, string);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Valaki elõvette a telefonját, és írt egy sms-t.");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, " A játékos telefonja kivan kapcsolva!");
						            return 1;
						        }
								if(Bortonben(giveplayerid))
									return Msg(playerid, "Õ börtönben van!");
									
								format(string, sizeof(string), "SMS: %s | Telefonszám: [%d]", result,PlayerInfo[playerid][pPnumber]);
								GetPlayerName(giveplayerid, sendername, sizeof(sendername));
								//format(string, sizeof(string), "* %s's phone beeps.", sendername);
								RingTone[giveplayerid] = 20;
								SendClientMessage(playerid, COLOR_WHITE, "Üzenet elküldve!");
								SendClientMessage(giveplayerid, COLOR_YELLOW, string);
								SendClientMessage(playerid,  COLOR_YELLOW, string);
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Valaki elõvette a telefonját, és írt egy sms-t.");
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								format(string, sizeof(string), "~r~-%dFT", ara);
								GameTextForPlayer(playerid, string, 5000, 1);
								BizPenz(BIZ_TELEFON, ara);
								PlayerInfo[playerid][pTeloEgyenleg] = PlayerInfo[playerid][pTeloEgyenleg] - ara;
					           	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					           	Mobile[playerid] = 255;
								return 1;
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  Üzenet elküldése sikertelen...");
		}
		else
			Msg(playerid, "Börtönben nem lehet!");
		return 1;
	}
//----------------------------------[pickup]-----------------------------------------------

	if(strcmp(cmd, "/pickup", true) == 0 || strcmp(cmd, "/p", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, " Már telefonálsz.");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(Mobile[i] == playerid)
					{
						Mobile[playerid] = i; //caller connecting
						SendClientMessage(i,  COLOR_GRAD2, "   Felvették a telefont.");
						GetPlayerName(playerid, sendername, sizeof(sendername));
						Cselekves(playerid, "felvette  a telefonját");
						RingTone[playerid] = 0;
					}

				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/hangup", true) == 0 || strcmp(cmd, "/h", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new caller = Mobile[playerid];
			if(IsPlayerConnected(caller))
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_GRAD2, "Lerakták.");
							SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
							CellTime[caller] = 0;
							CellTime[playerid] = 0;
							SendClientMessage(playerid,  COLOR_GRAD2, "Leraktad.");
							Mobile[caller] = 255;
						}
						Mobile[playerid] = 255;
						CellTime[playerid] = 0;
						RingTone[playerid] = 0;
						return 1;
					}
				}
			}
			else
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							CellTime[playerid] = 0;
							SendClientMessage(playerid,  COLOR_GRAD2, "Leraktad.");
						}
						Mobile[playerid] = 255;
						CellTime[playerid] = 0;
						RingTone[playerid] = 0;
						return 1;
					}
				}
			}
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SendClientMessage(playerid,  COLOR_GRAD2, "A telefonod beraktad a zsebedbe.");
			Cselekves(playerid, "letette a telefonját");
		}
		return 1;
	}
//----------------------------------[TIME]-----------------------------------------------
    if(strcmp(cmd, "/fixr", true) == 0)
    {
        if(IsPlayerConnected(playerid))
		{
			PlayerFixRadio(playerid);
		}
		return 1;
	}
	if(strcmp(cmd, "/time", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    new mtext[20];
			new year, month,day;
			getdate(year, month, day);
			if(month == 1) { mtext = "Januar"; }
			else if(month == 2) { mtext = "Februar"; }
			else if(month == 3) { mtext = "Marcius"; }
			else if(month == 4) { mtext = "Aprilis"; }
			else if(month == 5) { mtext = "Majus"; }
			else if(month == 6) { mtext = "Junius"; }
			else if(month == 7) { mtext = "Julius"; }
			else if(month == 8) { mtext = "Augusztus"; }
			else if(month == 9) { mtext = "Szeptember"; }
			else if(month == 10) { mtext = "Oktober"; }
			else if(month == 11) { mtext = "November"; }
			else if(month == 12) { mtext = "December"; }
		    new hour,minuite,second;
			gettime(hour,minuite,second);

			ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch", 4.1, 0, 0, 0, 0, -1);

			if (minuite < 10)
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
					format(string, sizeof(string), "~y~%s %d~n~~g~|~w~%d:0%d~g~|~n~~w~B¨rt¨n: %dmp", mtext, day, hour, minuite, PlayerInfo[playerid][pJailTime]);
				}
				else
				{
					format(string, sizeof(string), "~y~%s %d~n~~g~|~w~%d:0%d~g~|", mtext, day, hour, minuite);
				}
			}
			else
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
					format(string, sizeof(string), "~y~%s %d~n~~g~|~w~%d:%d~g~|~n~~w~B¨rt¨n: %dmp", mtext, day, hour, minuite, PlayerInfo[playerid][pJailTime]);
				}
				else
				{
					format(string, sizeof(string), "~y~%s %d~n~~g~|~w~%d:%d~g~|", mtext, day, hour, minuite);
				}
			}
			GameTextForPlayer(playerid, string, 5000, 1);
			format(string, sizeof(string), "* Valaki megnézte az óráját.");
			ProxDetector(30.0, playerid,string , COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
//----------------------{HOUSES}-------------------
	if(strcmp(cmd, "/house", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /house [housenumber]");
					return 1;
				}
				new housenum = strval(tmp);
				if(HouseInfo[housenum][Van] != 1)
				{
				    SendClientMessage(playerid, COLOR_RED, "Nincs ilyen ház");
				    return 1;
				}
				new HazBelso = HouseInfo[housenum][hBelso];
				SetPlayerInterior(playerid,IntInfo[HazBelso][iNumber]);
				SetPlayerPos(playerid,IntInfo[HazBelso][iExitX],IntInfo[HazBelso][iExitY],IntInfo[HazBelso][iExitZ]);
				SetPlayerVirtualWorld(playerid, housenum);
				GameTextForPlayer(playerid, "~w~Mindjart ottvagyunk", 5000, 1);
				PlayerInfo[playerid][pLocal] = housenum;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/houseo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /houseo [housenumber]");
					return 1;
				}
				new housenum = strval(tmp);
				if(HouseInfo[housenum][Van] != 1)
				{
				    SendClientMessage(playerid, COLOR_RED, "Nincs ilyen ház");
				    return 1;
				}
				SetPlayerPos(playerid,HouseInfo[housenum][hEntrancex],HouseInfo[housenum][hEntrancey],HouseInfo[housenum][hEntrancez]);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
				GameTextForPlayer(playerid, "~w~ Mindjart ottvagyunk", 5000, 1);
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/biz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /biz [biznumber]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid,BizzInfo[housenum][bEntranceX],BizzInfo[housenum][bEntranceY],BizzInfo[housenum][bEntranceZ]);
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/edit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 4)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nem vagy Admin! !");
				return 1;
			}
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Edit __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /edit [name] [ammount] (Házaknak és Bizniszeknek)");
				SendClientMessage(playerid, COLOR_GREY, "Ezeket írhatod: Level, Belepo, Price, Funds, Products, Maxprod, Prodara");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /edit [name] [ammount]");
				return 1;
			}
			new proplev = strval(tmp);
	        //if(strcmp(x_job,"car",true) == 0)
	        new hazak = sizeof(HouseInfo);
	        for(new i = 0; i < hazak; i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					format(string, sizeof(string), "House: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"price",true) == 0)
					    {
							HouseInfo[i][hValue] = proplev;
							//HazUpdate(i, "Ara='%d'", proplev);
							HazUpdate(i, HAZ_Value);
						}
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					format(string, sizeof(string), "Biz: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"level",true) == 0)
					    {
							BizzInfo[i][bLevelNeeded] = proplev;
							//BizUpdate(i, "Szint='%d'", proplev);
							BizUpdate(i, BIZ_LevelNeeded);
						}
						else if(strcmp(x_job,"price",true) == 0)
					    {
							BizzInfo[i][bBuyPrice] = proplev;
							//BizUpdate(i, "Ara='%d'", proplev);
							BizUpdate(i, BIZ_BuyPrice);
						}
						else if(strcmp(x_job,"funds",true) == 0)
					    {
							BizzInfo[i][bTill] = proplev;
							//BizUpdate(i, "Kassza='%d'", proplev);
							BizUpdate(i, BIZ_Till);
						}
						else if(strcmp(x_job,"products",true) == 0)
					    {
							BizzInfo[i][bProducts] = proplev;
							//BizUpdate(i, "Prod='%d'", proplev);
							BizUpdate(i, BIZ_Products);
						}
						else if(strcmp(x_job,"maxprod",true) == 0)
					    {
							BizzInfo[i][bMaxProducts] = proplev;
							//BizUpdate(i, "MaxProd='%d'", proplev);
							BizUpdate(i, BIZ_MaxProducts);
						}
						else if(strcmp(x_job,"belepo",true) == 0)
					    {
							BizzInfo[i][bEntranceCost] = proplev;
							//BizUpdate(i, "BelepesAra='%d'", proplev);
							BizUpdate(i, BIZ_EntranceCost);
						}
						else if(strcmp(x_job,"prodara",true) == 0)
					    {
							BizzInfo[i][bPriceProd] = proplev;
							//BizUpdate(i, "ProdPrice='%d'", proplev);
							BizUpdate(i, BIZ_PriceProd);
						}
					}
				}
			}
			format(string, sizeof(string), "A(z) %s értékét átírtad erre: %d", x_job, proplev);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/load", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			if(!IsATruck(tmpcar))
			{
				GameTextForPlayer(playerid, "~r~Nem vagy prodos/teherszallito kocsiban!", 5000, 1);
				return 1;
			}
			format(string, sizeof(string), "Prodok: %d/%d.", MAXPROD,PlayerHaul[tmpcar][pLoad]);
			SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/buyprods", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			new compcost = 50;
			if(PlayerToPoint(60.0, playerid, 2487.3169, -2106.0815, 13.5445))
			{
				if(IsATruck(tmpcar))
				{
					if(PlayerHaul[tmpcar][pLoad] < MAXPROD)
					{
					    new amount;
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Használat: /buyprods [amount]");
							return 1;
						}
						amount = strval(tmp);
						if(amount < 1 || amount > MAXPROD) { SendFormatMessage(playerid, COLOR_GREY, "A kocsiban max %d prod fér el!", MAXPROD); return 1; }
						new check= PlayerHaul[tmpcar][pLoad] + amount;
						if(check > MAXPROD)
						{
						    format(string, sizeof(string), "A kocsi maximum %d prodot bír el!",MAXPROD);
						    SendClientMessage(playerid, COLOR_GREY, string);
						    return 1;
						}
						new cost = amount*compcost;
						if(GetMoney(playerid) >= cost)
						{
							PlayerHaul[tmpcar][pLoad] += amount;
							format(string, sizeof(string), "Prodok: %d/%d.", MAXPROD, PlayerHaul[tmpcar][pLoad]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Vettél %d prodot %dFt-ért", amount,cost);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							GiveMoney(playerid,-cost);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "Nincs elég pénzed(%dFt) %d pod megvételére!", cost, amount);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							return 1;
						}
					}
					else
					{
							format(string, sizeof(string), "Prodok: %d/%d.", MAXPROD, PlayerHaul[tmpcar][pLoad]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, TEAM_GROVE_COLOR, "Nem vagy teherszállító kocsiban!");
					return 1;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sellprods", true) == 0)
	{
	    new cashmade;
	    new tmpcar;
	    if(IsPlayerConnected(playerid))
		{
			tmpcar = GetPlayerVehicleID(playerid);
			if(!IsATruck(tmpcar))
			{
				GameTextForPlayer(playerid, "~r~Nem vagy teherszállítóban!", 5000, 1);
				return 1;
			}
			if(PlayerHaul[tmpcar][pLoad] == 0)
			{
				GameTextForPlayer(playerid, "~r~A kocsi ures", 5000, 1);
				format(string, sizeof(string), "Prodok: %d/%d.", MAXPROD, PlayerHaul[tmpcar][pLoad]);
				SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
				return 1;
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(10, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					//printf("Found House :%d",i);
					for(new l = PlayerHaul[tmpcar][pLoad]; l > 0; l--)
					{
						if(BizzInfo[i][bProducts] == BizzInfo[i][bMaxProducts])
						{
							GameTextForPlayer(playerid, "~r~A biznisz tele", 5000, 1);
							format(string, sizeof(string), "Kaptál érte %dFt-t", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Prodok: %d/%d.", MAXPROD, PlayerHaul[tmpcar][pLoad]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							return 1;
						}
						if(BizzInfo[i][bPriceProd] > BizzInfo[i][bTill])
						{
							GameTextForPlayer(playerid, "~r~Nem tudjuk kifizetni mindet", 5000, 1);
							format(string, sizeof(string), "Kaptál érte %dFt-t", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Prodok: %d/%d.", MAXPROD, PlayerHaul[tmpcar][pLoad]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							return 1;
						}
						PlayerHaul[tmpcar][pLoad]--;
						BizzInfo[i][bProducts]++;
						cashmade = cashmade+BizzInfo[i][bPriceProd];
						ConsumingMoney[playerid] = 1;
						GiveMoney(playerid,BizzInfo[i][bPriceProd]);
						BizzInfo[i][bTill] -= BizzInfo[i][bPriceProd];
						if(PlayerHaul[tmpcar][pLoad] == 0)
						{
							GameTextForPlayer(playerid, "~r~A kocsi ures", 5000, 1);
							format(string, sizeof(string), "Kaptál érte %dFt-t", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Prodok: %d/%d.", MAXPROD, PlayerHaul[tmpcar][pLoad]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					//BizUpdate(i, "Kassza='%d', Prod='%d'", BizzInfo[i][bTill], BizzInfo[i][bProducts]);
					BizUpdate(i, BIZ_Till, BIZ_Products);
					return 1;
				}
			}
		}
		GameTextForPlayer(playerid, "~r~Messze vagy a biznisztol", 5000, 1);
		return 1;
	}
	if(strcmp(cmd, "/enter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new k = GetPlayerVehicleID(playerid);
				new m = GetVehicleModel(k);
				if(m == 483 || m == 508)
				{
					SetPlayerInterior(playerid, 1);
					SetPlayerVirtualWorld(playerid, (k+100));
					SetPlayerPos(playerid, 2513.154, -1729.182, 778.637);
					Freeze(playerid, 5000);
					Cselekves(playerid, "hátra ment...", 1);
				}
			}
			if(PlayerToPoint(3.0, playerid, -2664.251, -8.935, 6.132) || PlayerToPoint(3.0, playerid, -2664.251, -2.160, 6.132))
			{
				SetPlayerVirtualWorld(playerid, 9999);
				SetPlayerPos(playerid, 324.662, 111.907, 1007.965);
				Freeze(playerid, 5000);
				Msg(playerid, "Üdvözöllek az aukciós házban");
			}
			if(PlayerToPoint(5.0, playerid, -2047.288, -91.537, 35.171))
			{
				Tele(playerid, -2046.842, -115.706, 36.5);
				return 1;
			}
			else if(PlayerToPoint(3.0, playerid, -1781.8956,572.6559,35.1641))
			{
				SetPlayerPos(playerid, -1841.6251,335.0611,-41.7493);
				Msg(playerid, "Üdv a riporter bázison!");
			}
			else if(PlayerToPoint(3.0, playerid, -1836.5282,335.0582,-41.7493))
			{
				SetPlayerPos(playerid, -1770.6177,579.8474,234.8906);
				Msg(playerid, "Üdv a tetõn");
			}
			else if(PlayerToPoint(2.0, playerid, 797.5851,-617.5155,16.3359)) // FBI HQ
			{
				new State = GetPlayerState(playerid);
				if(!IsPlayerInAnyVehicle(playerid)) return 1;
		        if(State!=PLAYER_STATE_DRIVER) return 1;
				if(!LMT(playerid, LMUNKA_FBI)) return 1;
				new kocsi = GetPlayerVehicleID(playerid);
				foreach(Jatekosok, player)
				{
					if(IsPlayerInVehicle(player, kocsi))
					{
						SetPlayerInterior(player, 18);
						SetPlayerVirtualWorld(player, 0);
					}
				}
				Tele(playerid, 1292.6230,-0.6250,1001.0198, true, 0, 18);
				Fbibent = 0;
				return 1;
			}
			else if(PlayerToPoint(6, playerid, -2245.1592,2381.9641,5.0748))//Triad fegyverbolt
			{
				SetPlayerInterior(playerid, 6);
				SetPlayerVirtualWorld(playerid, 1002);
				SetPlayerPos(playerid, 316.1754,-169.9490,999.5938);
			}

			else if(PlayerToPoint(1.0, playerid, 2143.198, 1620.651, 1001.338)) // bank széfbõl szellõzõ
			{
				Tele(playerid, -1210.570, -417.099, 14.148, false, 1, 0);
				Cselekves(playerid, "bemászott a szellõzõbe", 1);
				return 1;
			}
			else if(PlayerToPoint(3.0, playerid, -1940.146, 418.298, 35.171)) // kintrõl be a szellõzõbe
			{
				Tele(playerid, -1244.751, -398.654, 15.625, false, 1, 0);
				Cselekves(playerid, "bemászott a szellõzõbe", 1);
				return 1;
			}
			else if(PlayerToPoint(10.0, playerid, -2520.8059,-39.1380,25.6172)) // Camorra lift
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Felmentél a liftel!");
				SetPlayerPos(playerid, -2520.3818,-40.9882,37.3828);
				return 1;
			}
			else if(PlayerToPoint(10.0, playerid, -2541.3821,-47.4891,16.5329)) // Camorra épület
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Üdv a Camorra Private Clubban!");
				SetPlayerVirtualWorld(playerid, 1012);
				SetPlayerPos(playerid, 1812.5616,-1540.1208,-81.2067);
				Freeze(playerid, 5000);
				return 1;
			}
			else if(PlayerToPoint(2.0, playerid, 1804.5605,-1561.5798,-81.2067))//Camorra lépcsõház
			{
				SetPlayerPos(playerid, 1773.3752,-1527.5599,-72.4829);
				return 1;
			}
			else if(PlayerToPoint(2.0, playerid, 1771.8864,-1526.5944,-68.2829))//Camorra gunshop
			{
				SetPlayerPos(playerid, 1771.1146,-1523.8370,-68.3391);
				return 1;
			}
			else if(PlayerToPoint(2.0, playerid, 1787.2323,-1512.5000,-68.3391))//Camorra pálya
			{
				SetPlayerPos(playerid, 1787.1317,-1509.7487,-68.3391);
				return 1;
			}
			else if(PlayerToPoint(2.0, playerid, 1788.0602,-1492.9620,-68.3391))//Camorra doboz
			{
				SetPlayerPos(playerid, 1790.9409,-1492.9364,-68.3391);
				return 1;
			}
			else if(PlayerToPoint(5.0, playerid, 2370.3667,-1034.8651,54.4106)) // Vagos épület
			{
				SetPlayerPos(playerid, 318.5966,1115.7505,1083.8828); 
				SetPlayerInterior(playerid, 5);
				SetPlayerVirtualWorld(playerid, 1001);
				return 1;
			}
			else if(PlayerToPoint(5.0, playerid, 2389.3271,-1037.3076,53.5533)) // Vagos épület
			{
				SetPlayerPos(playerid, -228.1603,1401.0884,27.7656); 
				SetPlayerInterior(playerid, 18);
				SetPlayerVirtualWorld(playerid, 1001);
				return 1;
			}
			else if(PlayerToPoint(3, playerid, -2378.9929,2443.9456,10.1694))//Triad fõépület
			{
				SetPlayerInterior(playerid, 1);
				SetPlayerVirtualWorld(playerid, 1002);
				SetPlayerPos(playerid, -2158.5718,643.0136,1052.3750);
			}
			else if(PlayerToPoint(3, playerid, -2472.2627,2451.2300,17.3230))//Triad strip club
			{
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 5);
				SetPlayerPos(playerid, -2636.2981,1402.4641,906.4609);
			}
			/*else if(PlayerToPoint(3, playerid, )) // Gabi kérte(Stavros)
			{
				SetPlayerVirtualWorld(playerid, 1002);
				SetPlayerInterior(playerid, 1);
				SetPlayerPos(playerid, 963.418762,2108.292480,1011.030273);
			}*/
			else if (PlayerToPoint(3.0,playerid,2470.3616,-1705.2271,13.5195)) // GSF
			{
				Freeze(playerid, 3000);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid,2234.0408,-1654.8405,-43.2996);
			}
			else if(PlayerToPoint(3.0,playerid,1431.8834,-1095.5388,17.5794)) // GSF
			{
				Freeze(playerid, 3000);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid,2221.9070,-1871.2208,-43.1715);
			}
			else if(PlayerToPoint(3.0,playerid,1597.2649,-1560.8527,14.1673)) // GSF
			{
				Freeze(playerid, 3000);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid,2162.3555,-1764.2534,-43.4260);
			}
			else if(PlayerToPoint(3.0,playerid,2007.2767,-1777.7261,17.3565)) // GSF
			{
				Freeze(playerid, 3000);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid,2280.1172,-1764.1310,-43.4205);
			}
			else if(PlayerToPoint(3.0,playerid,2310.6558,-1630.5101,14.4769)) // GSF
			{
				Freeze(playerid, 3000);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid,2212.7971,-1659.4144,-43.2996);
			}
			else if(PlayerToPoint(7.5, playerid, -1979.235, 435.348, 26.061))
			{
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleModel(GetPlayerVehicleID(playerid)) != 428)
					return Msg(playerid, "Ezen az úton csak pénzszállítóval lehet bemenni!");
				Tele(playerid,  2208.422, 1551.530, 1008.640, true, NINCS, 1);
				for(new x = 0; x < MAX_PLAYERS; x++)
				{
					if(!IsPlayerConnected(x) || !IsPlayerInVehicle(x, GetPlayerVehicleID(playerid))) continue;
					SetPlayerInterior(x, 1);
				}
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 271.0);
			}
			else if(PlayerToPoint(3, playerid, 1465.222900, -1010.950683, 26.843750)) //LSBank
			{
				if(ghour < 6)
					Msg(playerid, "A bank éjféltõl reggel 6ig zárva van!");
				else
				{
					SetPlayerVirtualWorld(playerid, 0);
					Tele(playerid, 2305.358398, -16.142288, 26.749565, false);
				}
				return 1;
			}
			else if(PlayerToPoint(3, playerid, -1942.973876, 556.252868, 35.171875)) //SFBank
			{
				if(ghour < 6)
					Msg(playerid, "A bank éjféltõl reggel 6ig zárva van!");
				else
				{
					SetPlayerVirtualWorld(playerid, 2);
					Tele(playerid, 2305.358398, -16.142288, 26.749565, false);
				}
				return 1;
			}
			else if(PlayerToPoint(3.0, playerid, 2315.571044, 0.354859, 26.742187) && GetPlayerVirtualWorld(playerid) == 2) //SF Bank Széf
			{
				SetPlayerVirtualWorld(playerid, 0);
				Tele(playerid, 2147.8445,1603.7917,1006.1677, false);
				SetPlayerInterior(playerid, 1);
				//Freeze(playerid, 600);
				if(!IsACop(playerid))
				{
					if(random(5) == 1)
					{
						Cselekves(playerid, "Valakit észrevett a kamera", 2);
						Msg(playerid, "Vigyázz, mert a kamera észrevett téged!", false);
						SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, "Biztonsági központ: Figyelem! Valaki lement a San Fierroi bank széfjébe!");
						SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, "Biztonsági központ: Figyelem! Valaki lement a San Fierroi bank széfjébe!");
						SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, "Biztonsági központ: Figyelem! Valaki lement a San Fierroi bank széfjébe!");
						SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, "Biztonsági központ: Figyelem! Valaki lement a San Fierroi bank széfjébe!");
					}
					else
						Msg(playerid, "A kamera nem vett észre, menj nyugodtan.", false, COLOR_LIGHTGREEN);
				}
				return 1;
			}

			new PlayerVW = GetPlayerVirtualWorld(playerid), PlayerInt = GetPlayerInterior(playerid);
			for(new i = 0; i < MAXAJTO; i++)
			{
				if(Ajtok[i][Van] == 1 && PlayerToPoint(3, playerid, Ajtok[i][BeX], Ajtok[i][BeY], Ajtok[i][BeZ]) && PlayerVW == Ajtok[i][BeVW] && PlayerInt == Ajtok[i][BeInt])
				{
					//printf("Found House :%d",i);
					if(Ajtok[i][Zarva] == 0 || Ajtok[i][Zarva] == 1 && IsAdmin(playerid))
					{
						SetPlayerPos(playerid, Ajtok[i][KiX], Ajtok[i][KiY], Ajtok[i][KiZ]);
						SetPlayerVirtualWorld(playerid, Ajtok[i][KiVW]);
						SetPlayerInterior(playerid,Ajtok[i][KiInt]);
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Zarva", 5000, 1);
					}
				}
			}

			new hazak = sizeof(HouseInfo);
			for(new i = 0; i < hazak; i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					//printf("Found House :%d",i);
					if(HouseInfo[i][hLock] == 0) //PlayerInfo[playerid][pPhousekey] == i || Berlo(playerid) == i || 
					{
					    new HazBelso = HouseInfo[i][hBelso];
						SetPlayerInterior(playerid,IntInfo[HazBelso][iNumber]);
						SetPlayerPos(playerid,IntInfo[HazBelso][iExitX],IntInfo[HazBelso][iExitY],IntInfo[HazBelso][iExitZ]);
						SetPlayerVirtualWorld(playerid, i);
						GameTextForPlayer(playerid, "~w~Udv itt!", 5000, 1);
						PlayerInfo[playerid][pLocal] = i;
						Hazbanvan[playerid] = 1;
						new zseka = Fbios[playerid];
						SendFormatMessage(zseka, Pink, "PDA Üzenet: %s bement a %d számú házba.", PlayerName(playerid), i)
						SetPlayerMarkerForPlayer(zseka, playerid, COLOR_INVISIBLE);
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Zarva", 5000, 1);
					}
				}

			}

			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if(BizzInfo[i][bVanBelso] || i == BIZ_PB)
				{
					if(!PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ])) continue;

					/*if(i == BIZ_TUNING || i == BIZ_SFTUNING)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Itt van melletted a mûhely ember!");
					    return 1;
					}*/
					if(PlayerInfo[playerid][pPbiskey] == i || GetMoney(playerid) >= BizzInfo[i][bEntranceCost])
					{
						if(BizzInfo[i][bLocked] == 1)
						{
							GameTextForPlayer(playerid, "~r~Zarva", 5000, 1);
							return 1;
						}
						if(BizzInfo[i][bProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Kifogyott", 5000, 1);
							return 1;
						}

						if(i == BIZ_PB)
						{
						    PaintballPlayers ++;
						    PlayerPaintballing[playerid] = 1;
							PlayerPaintballKills[playerid] = 0;
						    //new rand = random(sizeof(PaintballSpawns));
							//SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
							SetPlayerSpawn(playerid);
								
							if(PaintballRound == 0) TogglePlayerControllable(playerid, 0);
								
						}
							
						if(i == BIZ_PIGPEN)
						{
						    SetPlayerInterior(playerid, 2);
							SetPlayerPos(playerid, 1205.5602,-11.6379,1000.9219);
							format(string, sizeof(string), "Jó szórakozást kíván: %s", BizzInfo[i][bMessage]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}

						GiveMoney(playerid,-BizzInfo[i][bEntranceCost]); 
						format(string, sizeof(string), "~r~-%dFt", BizzInfo[i][bEntranceCost]);

						BizPenz(i, BizzInfo[i][bEntranceCost]);
						BizzInfo[i][bProducts]--;
						//BizUpdate(i, "Prod='%d', Kassza='%d'", BizzInfo[i][bProducts], BizzInfo[i][bTill]);
						BizUpdate(i, BIZ_Products, BIZ_Till);
						GameTextForPlayer(playerid, string, 5000, 3);

						if(i != BIZ_PB)
						{
							SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
							SetPlayerVirtualWorld(playerid, i);
							SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
						}
						new dood[MAX_PLAYER_NAME];
						GetPlayerName(playerid, dood, sizeof(dood));
						format(string, sizeof(string), "%s payed %dFt to enter biz %d", dood, BizzInfo[i][bEntranceCost], i);
						printf("%s", string);
						PayLog(string);
						//PlayerInfo[playerid][pLocal] = i;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Nincs elég pénzed", 5000, 1);
					}
				}
			}

			if (PlayerToPoint(3.0, playerid,1073.0619,-344.5148,73.9922))
			{
			    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
			    {
				    SetPlayerInterior(playerid,2);
					SetPlayerPos(playerid,1205.0947,-10.1685,1000.9219);
					PlayerInfo[playerid][pInt] = 2;
					PlayerInfo[playerid][pLocal] = 242;
				}
			}
			else if (PlayerToPoint(3.0, playerid,2695.6235,-1704.6960,11.8438))
			{
			    GameTextForPlayer(playerid, "~w~Welcome to the 8ball Track", 5000, 1);
			    SetPlayerInterior(playerid,7);
				SetPlayerPos(playerid,-1404.5299,-259.0602,1043.6563);
			}
			else if (PlayerToPoint(8.0, playerid,-2111.5686,-443.9720,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Welcome to the Dirt Track", 5000, 1);
			    SetPlayerInterior(playerid,4);
				SetPlayerPos(playerid,-1443.0554,-581.1879,1055.0472);
			}
			else if (PlayerToPoint(8.0, playerid,-2080.3079,-406.0309,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Welcome to the Stunting Track", 5000, 1);
			    SetPlayerInterior(playerid,14);
				SetPlayerPos(playerid,-1464.7732,1557.5533,1052.5313);
			}
			else if (PlayerToPoint(8.0, playerid,2035.1941,-1304.8467,20.9037))
			{
			    GameTextForPlayer(playerid, "~w~Welcome to the Los Aztecas's HQ", 5000, 1);
			    SetPlayerInterior(playerid,8);
				SetPlayerPos(playerid,2365.3000,-1132.9200,1050.8750);
			}
			else if (PlayerToPoint(8.0, playerid,1784.5400,-1298.2241,13.3750))
			{
			    GameTextForPlayer(playerid, "~w~Welcome to the News HQ", 5000, 1);
			    SetPlayerInterior(playerid,2);
				SetPlayerPos(playerid,2567.52 ,-1294.59 ,1063.25);
			}
			else if(PlayerToPoint(10, playerid, 1766.8898,-2031.8942,13.8273)) // Aztecas raktár
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					SetVehiclePos(GetPlayerVehicleID(playerid), 1058.1696,2087.5898,10.8203);
				else Msg(playerid, "Itt csak kocsival lehet bemenni!");
				return 1;
			}
			else if (PlayerToPoint(8.0, playerid, 1173.3047, -1323.4340, 15.3936))
			{
			    GameTextForPlayer(playerid, "~h~~g~Udv a korhazban", 5000, 3);
				SetPlayerVirtualWorld(playerid, 2);				
				SendClientMessage(playerid, COLOR_GREY, "5 másodpercre lefagyasztunk, hogy betöltsön a kórház belsõ!");
				SetPlayerPos(playerid, 1112.79, -1281.89, -26.18);
		        TogglePlayerControllable(playerid, 0);
				//SetTimer("kfreeze", 5000, 0);				
				Freeze(playerid, 5000);
			}
			else if (GetPlayerState(playerid) == 2 && PlayerToPoint(3, playerid, 979.7841,-1254.8965,16.9473))
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1062.5363,2082.5569,10.8203);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				GameTextForPlayer(playerid, "~h~~g~Raktar", 5000, 3);

			}
			else if(PlayerToPoint(1, playerid, 1204.9697,12.4485,1000.9219))
			{
			    if(PrivatEngedely[playerid] == NINCS) return Msg(playerid, "Nem kaptál engedélyt hogy bemehess...");
				Tele(playerid, 1204.7235,13.6836,1000.9219);
				Msg(playerid, "Üdv a privát szobában!");
			}
           /*else if (GetPlayerState(playerid) == 2 && PlayerToPoint(3, playerid, 1643.5533,-1523.0732,13.5588))
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerToPoint(3, i, 1643.6934,-1516.3153,13.1927))
						{
							SendClientMessage(playerid, COLOR_YELLOW, "Valaki van benn! Sztem így nem kéne bemenni...");
							return 1;
						}
					}
				}
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1643.6934,-1516.3153,13.1927);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				GameTextForPlayer(playerid, "~h~~g~Tuning Muhely", 5000, 3);
				TogglePlayerControllable(playerid, 0);
				tuningolo[playerid] = 1;
			}*/
			/*else if (GetPlayerState(playerid) == 2 && PlayerToPoint(3, playerid, -2089.8782,95.2754,35.3203))
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerToPoint(2, i, -2083.9976,95.3304,35.3087))
						{
							SendClientMessage(playerid, COLOR_YELLOW, "Valaki van benn! Sztem így nem kéne bemenni...");
							return 1;
						}
					}
				}
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -2083.9976,95.3304,35.3087);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				GameTextForPlayer(playerid, "~h~~g~Tuning Muhely", 5000, 3);
				TogglePlayerControllable(playerid, 0);
				tuningolo[playerid] = 2;
			}*/
		}
		Msg(playerid, "5mp freeze!");
		Freeze(playerid, 5000);
		return 1;
	}
	if(strcmp(cmd, "/exit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerToPoint(2.0, playerid, 2513.154, -1729.182, 778.637) && GetPlayerInterior(playerid) == 1)
			{
				for(new k = 0; k < MAX_VEHICLES; k++)
				{
					if(IsAVsKocsi(k) == -1) continue;
					new m = GetVehicleModel(k);
					if(m == 483 || m == 508)
					{
						if((k + 100) == GetPlayerVirtualWorld(playerid))
						{
							new Float:x, Float:y, Float:z;
							GetVehiclePos(k, x, y, z);
							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerInterior(playerid, 0);
							SetPlayerPos(playerid, x+2, y, z);
							//PutPlayerInVehicle(playerid, k, 1);
							Cselekves(playerid, "kijött a lakókocsiból...", 1);
						}
					}
				}
			}
			if(PlayerToPoint(3.0, playerid, 324.662, 111.907, 1007.965))
			{
				if(Licitalt[playerid])
					return Msg(playerid, "Sajnálom, de nem mehetsz ki, amíg nincs vége az árverésnek");
					
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPos(playerid, -2664.251, -8.935, 6.132);
				return 1;
			}
			if(PlayerToPoint(5.0, playerid, -2046.842, -115.706, 35.239))
			{
				Tele(playerid, -2047.288, -91.537, 36.5);
				return 1;
			}
			else if(PlayerToPoint(10.0, playerid, -2520.3818,-40.9882,37.3828))
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Lementél a liftel!");
				SetPlayerPos(playerid, -2520.8059,-39.1380,25.6172);
				return 1;
			}
			else if(PlayerToPoint(3.0, playerid, -1841.6251,335.0611,-41.7493))	//Riporter inti
			{
				SetPlayerPos(playerid, -1781.8956,572.6559,35.1641);
			}
			else if(PlayerToPoint(3.0, playerid, -1770.6177,579.8474,234.8906))	//Riporter tetõ	
			{
				SetPlayerPos(playerid, -1836.5282,335.0582,-41.7493);
			}
			else if(PlayerToPoint(10.0, playerid, 1812.5616,-1540.1208,-81.2067)) // Camorra épület
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Viszlát, jöjjön máskor is!");
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPos(playerid, -2541.3821,-47.4891,16.5329); 
				return 1;
			}
			else if(PlayerToPoint(2.0, playerid, 1773.3752,-1527.5599,-72.4829))//Camorra lépcsõház
			{
				SetPlayerPos(playerid, 1804.5605,-1561.5798,-81.2067); 
				return 1;
			}
			else if(PlayerToPoint(2.0, playerid, 1771.1146,-1523.8370,-68.3391))//Camorra gunshop
			{
				SetPlayerPos(playerid, 1771.8864,-1526.5944,-68.2829); 
				return 1;
			}
			else if(PlayerToPoint(2.0, playerid, 1787.1317,-1509.7487,-68.3391))//Camorra pálya
			{
				SetPlayerPos(playerid, 1787.2323,-1512.5000,-68.3391); 
				return 1;
			}
			else if(PlayerToPoint(2.0, playerid, 1790.9409,-1492.9364,-68.3391))//Camorra doboz
			{
				SetPlayerPos(playerid, 1788.0602,-1492.9620,-68.3391); 
				return 1;
			}
			else if(PlayerToPoint(10, playerid, 1058.1696,2087.5898,10.8203)) // Aztecas raktár
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					SetVehiclePos(GetPlayerVehicleID(playerid), 1766.8898,-2031.8942,13.8273);
				else Msg(playerid, "Itt csak kocsival lehet bemenni!");
				return 1;
			}

			else if(PlayerToPoint(5.0, playerid, 318.5966,1115.7505,1083.8828) && GetPlayerVirtualWorld(playerid) == 1001) // Vagos épület
			{
				SetPlayerPos(playerid, 2370.3667,-1034.8651,54.4106); 
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				return 1;
			}
			else if(PlayerToPoint(5.0, playerid, -228.1603,1401.0884,27.7656) && GetPlayerVirtualWorld(playerid) == 1001) // Vagos épület
			{
				SetPlayerPos(playerid, 2389.3271,-1037.3076,53.5533); 
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				return 1;
			}
			else if(PlayerToPoint(2.0, playerid, 1292.6230,-0.6250,1001.0198)) // FBI HQ
			{
				new State = GetPlayerState(playerid);
				if(!IsPlayerInAnyVehicle(playerid)) return 1;
		        if(State!=PLAYER_STATE_DRIVER) return 1;
				if(!LMT(playerid, LMUNKA_FBI)) return 1;
				if(Fbibent == 1) return Msg(playerid, "Épp valaki bent áll az épület elött hogy bejöjjön szóval állj félre de kurvagyorsan!");
				new kocsi = GetPlayerVehicleID(playerid);
				foreach(Jatekosok, player)
				{
					if(IsPlayerInVehicle(player, kocsi))
					{
						SetPlayerInterior(player, 0);
						SetPlayerVirtualWorld(player, 0);
					}
				}
				Tele(playerid, 797.5851,-617.5155,16.3359, true, 0, 0);
				return 1;
			}

			new PlayerVW = GetPlayerVirtualWorld(playerid), PlayerInt = GetPlayerInterior(playerid);
			for(new i = 0; i < MAXAJTO; i++)
			{
				if (Ajtok[i][Van] == 1 && PlayerToPoint(3, playerid, Ajtok[i][KiX], Ajtok[i][KiY], Ajtok[i][KiZ]) && PlayerVW == Ajtok[i][KiVW] && PlayerInt == Ajtok[i][KiInt])
				{
					SetPlayerPos(playerid, Ajtok[i][BeX], Ajtok[i][BeY], Ajtok[i][BeZ]);
					SetPlayerVirtualWorld(playerid, Ajtok[i][BeVW]);
					SetPlayerInterior(playerid,Ajtok[i][BeInt]);
				}

			}

			new hazak = sizeof(HouseInfo);
			for(new i = 0; i < hazak; i++)
			{
				//printf("House :%d",i);
				new HazBelso = HouseInfo[i][hBelso];
				if (PlayerToPoint(5, playerid,IntInfo[HazBelso][iExitX], IntInfo[HazBelso][iExitY], IntInfo[HazBelso][iExitZ]) && GetPlayerVirtualWorld(playerid) == i && GetPlayerInterior(playerid) == IntInfo[HazBelso][iNumber])
				{
					if(HouseInfo[i][hLock] != 0) return GameTextForPlayer(playerid, "~r~Zarva", 5000, 1);
					new haz = GetPlayerVirtualWorld(playerid);
					SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pLocal] = NINCS;
					Hazbanvan[playerid] = 0;
					new zseka = Fbios[playerid];
					SendFormatMessage(zseka, Pink, "PDA Üzenet: %s kiment a %d számú házból.", PlayerName(playerid), haz)
					SetPlayerMarkerForPlayer(zseka, playerid, Pink);
					if(GetDistance(2143.0840,-101.2796,4.2551, HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]) < 5.0)
						Freeze(playerid, 3000);
				}
			}
			for(new i = 0; i <  sizeof(BizzInfo); i++)
			{
				//printf("Bizz :%d",i);
				if (PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]) && PlayerInt == BizzInfo[i][bInterior] && PlayerVW == i)
				{
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerPos(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
					PlayerInfo[playerid][pLocal] = NINCS;
				}
			}
			/*else if (GetPlayerState(playerid) == 2 && PlayerToPoint(3, playerid, 1643.6934,-1516.3153,13.1927))
			{
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerToPoint(3, i, 1643.5533,-1523.0732,13.5588))
						{
							SendClientMessage(playerid, COLOR_YELLOW, "Van valaki a bejáratnál! Így nem tudsz kimenni...");
							return 1;
						}
					}
				}
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1643.5533,-1523.0732,13.5588);
				TogglePlayerControllable(playerid, 1);
				tuningolo[playerid] = 0;
			}
			else if (GetPlayerState(playerid) == 2 && PlayerToPoint(3, playerid, -2083.9976,95.3304,35.3087))
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerToPoint(2, i, -2089.8782,95.2754,35.3203))
						{
							SendClientMessage(playerid, COLOR_YELLOW, "Van valaki a bejáratnál! Így nem tudsz kimenni...");
							return 1;
						}
					}
				}
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -2092.5813,95.1218,35.3203);
				TogglePlayerControllable(playerid, 1);
				tuningolo[playerid] = 0;
			}*/
		}
		Msg(playerid, "5mp freeze!");
		Freeze(playerid, 5000);
		return 1;
	}

/*	if(strcmp(cmd, "/home", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pPhousekey] != NINCS)
			{
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   On a mission right now, can't use this command !");
			        return 1;
			    }
				SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez], 4.0);
				GameTextForPlayer(playerid, "~w~Waypoint set ~r~Home", 5000, 1);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are homeless", 5000, 1);
			}
		}
		return 1;
	}*/

	/*
	if(strcmp(cmd, "/towcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != NINCS && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(BizzInfo[8][bProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
				}
				if(CarTow(house+1))
				{
					GameTextForPlayer(playerid, "~w~Car~n~~g~Towed Home~n~~r~$-1000", 5000, 1);
					GiveMoney(playerid,-1000);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					BizzInfo[8][bTill] += 1000;//towcar buisness
					ExtortionSBiz(8, 1000);
					BizzInfo[8][bProducts]--;
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Car is~n~in ~r~use", 5000, 1);
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 1);
			}
		}
		return 1;
	}
 */

/*	if(strcmp(cmd, "/fixcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != NINCS && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(BizzInfo[8][bProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Kifogyott", 5000, 1);
					return 1;
				}
				if(CarRespawn(house+1))
				{
					GameTextForPlayer(playerid, "~w~Kocsi~n~~g~Megjavitva~n~~r~$-1000", 5000, 1);
					GiveMoney(playerid,-1000);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					BizzInfo[8][bTill] += 1000;//towcar buisness
					ExtortionSBiz(8, 1000);
					BizzInfo[8][bProducts]--;
				}
				else
				{
					GameTextForPlayer(playerid, "~w~A kocsit~n~hasznaljak...", 5000, 1);
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~Nincs hazad", 5000, 1);
			}
		}
		return 1;
	}*/
//----------------------------------[BIZZ]-----------------------------------------------
	if(strcmp(cmd, "/buybiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			if(PlayerInfo[playerid][pPbiskey] != 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "  Már van bizniszed! Ha elakarod adni írd be: /sellbiz");
				return 1;
			}
			for(new b = 0; b < sizeof(BizzInfo); b++)
			{
				if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bOwned] == 0)
				{
/*					if(PlayerInfo[playerid][pLevel] > BizzInfo[b][bLevelNeeded])
					{
						format(string, sizeof(string), "You Must Be Level %d To Purchase This",BizzInfo[b][bLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
*/					if(GetMoney(playerid) >= BizzInfo[b][bBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = b;
						BizzInfo[b][bOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(BizzInfo[b][bOwner], sendername, 0, strlen(sendername), 255);
						GiveMoney(playerid,-BizzInfo[b][bBuyPrice]);
						PlayerPlayMusic(playerid);
						SendClientMessage(playerid, COLOR_WHITE, "Gratulálunk az új bizniszedhez!");
						DestroyDynamicPickup(BizPickup[b]);

						//BizUpdate(b, "Tulaj='%s', Eladva='1'", sendername);
						BizUpdate(b, BIZ_Owner, BIZ_Owned);
						
						PlayerUpdate(playerid, "Bizz='%d'", b);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Nincs elég pénzed hogy megvedd a bizniszt!");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sellbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPbiskey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nincs bizniszed.");
				return 1;
			}
			/*if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   You are Married, can't sell the House !");
		        return 1;
		    }*/
			if(strcmp(playername, BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pPbiskey];
				BizzInfo[bouse][bLocked] = 1;
				BizzInfo[bouse][bOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(BizzInfo[bouse][bOwner], "The State", 0, strlen("The State"), 255);
				strmid(BizzInfo[bouse][bExtortion], "No-one", 0, strlen("No-one"), 255);
				ConsumingMoney[playerid] = 1;
				GiveMoney(playerid,BizzInfo[bouse][bTill]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Siker~n~ Eladtad a bizniszed ~n~~g~%dFT-ert", BizzInfo[bouse][bTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				BizzInfo[bouse][bTill] = 0;
				PlayerInfo[playerid][pPbiskey] = 255;

				//BizUpdate(bouse, "Tulaj='Nincs_Tulaj', Kassza='0', Eladva='%d'", 0);
				BizUpdate(bouse, BIZ_Owner, BIZ_Owned, BIZ_Till);
				PlayerUpdate(playerid, "Bizz='%d'", 255);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nincs bizniszed.");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/bizinfo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if(bouse == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nincs bizniszed.");
				return 1;
			}
			PrintBizInfo(playerid,bouse);
		}
		return 1;
	}
	if(strcmp(cmd, "/prodprice", true) == 0)
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   Nincs bizniszed!");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Használata: /prodprice [egy darab prod ára]");
		}
		if(strval(tmp) < 100 || strval(tmp) > 100000)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Minimum 100Ft, maximum 100,000Ft!");
			return 1;
		}

		if(strval(tmp) > BizzInfo[bouse][bTill])
		{
			SendClientMessage(playerid, COLOR_WHITE, "Nincs ennyi a biznisz kasszájában!");
			return 1;
		}
		BizzInfo[bouse][bPriceProd] = strval(tmp);
		format(string, sizeof(string), "A biznisz a prodokat mostmár %d forintért fogja venni", BizzInfo[bouse][bPriceProd]);

		//BizUpdate(bouse, "ProdPrice='%d'", BizzInfo[bouse][bPriceProd]);
		BizUpdate(bouse, BIZ_PriceProd);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/bizfee", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincs bizniszed!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használata: /bizfee [összeg]");
			}
			if(strval(tmp) < 0 || strval(tmp) > 5000)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Minimum 0Ft, és max 5000Ft!");
				return 1;
			}

			BizzInfo[bouse][bEntranceCost] = strval(tmp);
			format(string, sizeof(string), "A belépés ára mostmár %dFt.", BizzInfo[bouse][bEntranceCost]);

			//BizUpdate(bouse, "BelepesAra='%d'", BizzInfo[bouse][bEntranceCost]);
			BizUpdate(bouse, BIZ_EntranceCost);
			
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/extortion", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Nincs bizniszed!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Használat: /extortion [ID/név] (or 555 for No-one)");
			    return 1;
			}

			if(strcmp(tmp, "555", true))
				giveplayerid = ReturnUser(tmp);
			else
				giveplayerid = 555;

			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "* %s meghívott társtulajnak a bizniszéhez.",sendername);
			        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			        format(string, sizeof(string), "* %s meghívtad társtulajnak a bizniszedhez.",giveplayer);
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

					format(string, sizeof(string), "%s",giveplayer);
					strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
					//BizUpdate(bouse, "Extortion='%s'", string);
					BizUpdate(bouse, BIZ_Extortion);

					format(string, sizeof(string), "Új társtulaj: %s",BizzInfo[bouse][bExtortion]);
					SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else if(giveplayerid == 555)
			{

			    format(string, sizeof(string), "No-one");
				strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
				//BizUpdate(bouse, "Extortion='%s'", string);
				BizUpdate(bouse, BIZ_Extortion);

				format(string, sizeof(string), "Új társtulaj: %s",BizzInfo[bouse][bExtortion]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Nincs ilyen játékos a szerveren!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bizname", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Nincs bizniszed!");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /bizname [Name]");
			}

			if(HibasBizNev(result))
				return Msg(playerid, "Hibás biznisz név!");

			strmid(BizzInfo[bouse][bMessage], result, 0, 64, 255);
			format(string, sizeof(string), "Biznisz név átírva: %s",BizzInfo[bouse][bMessage]);
			SendClientMessage(playerid, COLOR_WHITE, string);

			//BizUpdate(bouse, "Nev='%s'", result);
			BizUpdate(bouse, BIZ_Message);
		}
		return 1;
	}
	if(strcmp(cmd, "/bizwithdraw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Nincs bizniszed!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{

				format(string, sizeof(string), "  A bizniszben %dFt van", BizzInfo[bouse][bTill]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				SendClientMessage(playerid, COLOR_GRAD2, "Használata: /bizwithdraw [összeg]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használata: /bizwithdraw [összeg]");
				return 1;
			}

			if (cashdeposit > BizzInfo[bouse][bTill] || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Ennyi nincs benne!");
				return 1;
			}

			if(!PlayerToPoint(2, playerid,BizzInfo[bouse][bEntranceX],BizzInfo[bouse][bEntranceY],BizzInfo[bouse][bEntranceZ]))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Messze vagy a bizniszedtõl!");
				return 1;
			}
			else
			{
				GiveMoney(playerid,cashdeposit);
				BizzInfo[bouse][bTill] -= cashdeposit;
				format(string, sizeof(string), "  Kivettél %d forintot a bizniszedbõl, még maradt %dFt ", cashdeposit,BizzInfo[bouse][bTill]);
				SendClientMessage(playerid, COLOR_YELLOW, string);

				//BizUpdate(bouse, "Kassza='%d'", BizzInfo[bouse][bTill]);
				BizUpdate(bouse, BIZ_Till);
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bizbank", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincs bizniszed!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				format(string, sizeof(string), "  %dFt van a széfbe.", BizzInfo[bouse][bTill]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				SendClientMessage(playerid, COLOR_GRAD2, "Használata: /bizbank [összeg]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használata: /bizbank [összeg]");
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Nincs ennyi pénzed!");
				return 1;
			}

			if(!PlayerToPoint(2, playerid,BizzInfo[bouse][bEntranceX],BizzInfo[bouse][bEntranceY],BizzInfo[bouse][bEntranceZ]))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Túl messze vagy a bizniszedtõl!");
				return 1;
			}
			else
			{
				GiveMoney(playerid,-cashdeposit);
				BizPenz(bouse, cashdeposit);
				//BizUpdate(bouse, "Kassza='%d'",BizzInfo[bouse][bTill]);
				BizUpdate(bouse, BIZ_Till);

				format(string, sizeof(string), "  Beraktál %d forintot a bizniszedbe, összesen %dFt van benne", cashdeposit,BizzInfo[bouse][bTill]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				return 1;
			}
		}
		return 1;
	}
//-----------------------------------[HEAL]-------------------------------------------------------------------------
	if(strcmp(cmd, "/heal", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(!strlen(tmp))
			{
				new x, haz = NINCS, HazBelso;
				for(x = 0; x < sizeof(HouseInfo); x++)
				{
					if(HouseInfo[x][Van] == 1)
					{
						HazBelso = HouseInfo[x][hBelso];
						if(PlayerToPoint(200, playerid, IntInfo[HazBelso][iExitX], IntInfo[HazBelso][iExitY], IntInfo[HazBelso][iExitZ]) && GetPlayerVirtualWorld(playerid) == x && GetPlayerInterior(playerid) == IntInfo[HazBelso][iNumber])
						{
							haz = x;
							break;
						}
					}
				}

				if(haz != NINCS)
				{
					if(HouseInfo[haz][hArm] == 1)
					{
						if(IsACop(playerid))
						{
							format(string, sizeof(string), "* Valaki felvett egy golyóálló mellényt.");
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SetPlayerArmour(playerid, 100.0);
						}
						else Msg(playerid, "Nem vagy rendvédelmis, ezért nem veheted fel a mellényt...");
					}
					else
					{
						format(string, sizeof(string), "Ezen a helyen nincs golyóálló mellény.");
						SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
					}
					if(HouseInfo[haz][hHel] == 1)
					{
						if(HouseInfo[haz][hKaja] >= 1)
							HouseInfo[haz][hKaja]--;
						else
							return SendClientMessage(playerid, COLOR_GREY, "A hûtõ üres...");
							
						new Float:tempheal;
						GetPlayerHealth(playerid,tempheal);
						if(tempheal < 150.0)
						{
							SetHealth(playerid, 150.0);

							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "* %s megevett egy szendvicset, amit a hûtõben talált.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
							SendClientMessage(playerid, TEAM_GREEN_COLOR,"Tele vagy... nem bírsz többet enni.");
					}
					else
					{
						format(string, sizeof(string), "Ezen a helyen nincs hûtõ.");
						SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
					}
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /heal [playerid/PartOfName]");
					return 1;
				}
			}
			giveplayerid = ReturnUser(tmp);
			if (!ProxDetectorS(10.0, playerid, giveplayerid)) return Msg(playerid, "Nincs a közeledben!");
			moneys = 500;

			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new giveambu = GetPlayerVehicleID(giveplayerid);
					new playambu = GetPlayerVehicleID(playerid);
					if(LMT(playerid, LMUNKA_MENTO) || LMT(playerid, LMUNKA_SFMENTO))//model
					{
						if(IsAnAmbulance(playambu) && playambu == giveambu)
						{
							new Float:tempheal;
							GetPlayerHealth(giveplayerid,tempheal);
							if(tempheal >= (MAXHP - 25.0))
								return SendClientMessage(playerid, TEAM_GREEN_COLOR," Játékos nem szorul ellátásra.");
								
							format(string, sizeof(string), "~y~Meggyogyitottad ~n~~w~%s-t~n~~g~%dFt", giveplayer,moneys);
							GameTextForPlayer(playerid, string, 5000, 1);
							GiveMoney(playerid,moneys);
							GiveMoney(giveplayerid,-moneys);
					        SetHealth(giveplayerid, MAXHP);
							
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Meggyógyítottak %dFt-ért", moneys);
							SendClientMessage(giveplayerid, TEAM_GREEN_COLOR,string);
							if(STDPlayer[giveplayerid] > 0)
				            {
								STDPlayer[giveplayerid] = 0;
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STD anymore because of the Medics help !");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Mentõs jármûben kell lenned");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Nem használhatod a parancsot.");
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d nem aktív játékos.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[ADMINADMIN]-----------------------------------------------
//----------------------------------[HQ]-----------------------------------------------
	if(strcmp(cmd, "/hq", true) && playerid == NINCS)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /hq [hq text]");
				return 1;
			}
			format(string, sizeof(string), "HQ: %s, vége.", result);
			// blabla át kell írni, gteam kiszedve
			printf("HQ: %s", result);
		}
		return 1;
	}
//----------------------------------[RECON]-----------------------------------------------
	if(strcmp(cmd, "/bigears", true) == 0 && PlayerInfo[playerid][pAdmin] >= 5)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!BigEar[playerid])
			{
				BigEar[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   De nagy füleid lettek!");
			}
			else if (BigEar[playerid])
			{
				(BigEar[playerid] = 0);
				SendClientMessage(playerid, COLOR_GRAD2, "   A füleid újra normál méretûek.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/id", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Használat: /id [játékos]");
			return 1;
		}
		new target;
		target = ReturnUser(tmp);
		new sstring[60];
		if(target == INVALID_PLAYER_ID || HitmanDuty[target] == 1 || IsClint(target)) return Msg(playerid, "Nincs ilyen játékos");
		GetPlayerName(target, giveplayer, sizeof(giveplayer));
		format(sstring, sizeof(sstring), "ID: [%d]%s",target,giveplayer);
		SendClientMessage(playerid, COLOR_GRAD1, sstring);
		return 1;
	}

	if(strcmp(cmd, "/tv", true) == 0 || strcmp(cmd, "/megfigyel", true) == 0)
	{
	    if(IsAS(playerid) || Admin(playerid))
	    {
			/*if(Spectate[playerid] == 255 && PlayerInfo[playerid][pLocal] != NINCS || Spectate[playerid] == 255 && PlayerInfo[playerid][pAdmin] > 0 || Spectate[playerid] == 255 && TvEngedely[playerid] == 1)
			{
				GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
				Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
				Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
				PlayerInfo[playerid][pLocal] = NINCS;
			}*/
			
			tmp = strtok(cmdtext, idx);
			
			if(strlen(tmp) && egyezik(tmp, "vissza"))
			{
				MostLepettBe[playerid] = 1;
				Msg(playerid, "Visszarakva");
				OnPlayerSpawn(playerid);
				PlayerInfo[playerid][pCPosX] = 0.0;
			}
			
			giveplayerid = ReturnUser(tmp);
			if(!strlen(tmp) || egyezik(tmp, "off"))
			{
			    if(Tevezik[playerid] != NINCS)
			    {
					//Spectate[playerid] = 253;
					
					TogglePlayerSpectating(playerid, 0);
					
					GameTextForPlayer(playerid, "~w~                TV~n~~r~                Ki", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(TvEngedely[playerid] == 1)
					{
						format(string, sizeof(string), "<< Adminsegéd %s befejezte %s figyelését! >>", sendername, PlayerName(Tevezik[playerid]));
						ABroadCast(COLOR_LIGHTRED, string, 0);
					}
					else if(PlayerInfo[Tevezik[playerid]][pAdmin] == 0 || PlayerInfo[playerid][pAdmin] <= PlayerInfo[Tevezik[playerid]][pAdmin])
					{
						format(string, sizeof(string), "<< Admin %s befejezte %s figyelését! >>", AdminName(playerid), PlayerName(Tevezik[playerid]));
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
					Tevezve[Tevezik[playerid]] = NINCS;
					Tevezik[playerid] = NINCS;
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Jelenleg nem TVzel");
				    return 1;
				}
			}

			/*if(PlayerInfo[playerid][pAdmin] >= 1)
			{
			    new HazBelso = HouseInfo[PlayerInfo[playerid][pPhousekey]][hBelso];
				if (!PlayerToPoint(100, playerid,IntInfo[HazBelso][iExitX],IntInfo[HazBelso][iExitY],IntInfo[HazBelso][iExitZ]) || GetPlayerInterior(playerid) != IntInfo[HazBelso][iNumber])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Nem vagy a házadban!");
					return 1;
				}
			}*/

			if(PlayerInfo[playerid][pAdmin] >= 1 || TvEngedely[playerid] == 1)
			{
				giveplayerid = ReturnUser(tmp);
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if(IsFoAdmin(giveplayerid))
						SendFormatMessage(giveplayerid, COLOR_GREY, "[TV]%s tévéz téged", PlayerName(playerid));

					/*GetPlayerPos(playerid, TVPos[playerid][0], TVPos[playerid][1], TVPos[playerid][2]);
					TVInt[playerid] = GetPlayerInterior(playerid);
					TVVW[playerid] = GetPlayerVirtualWorld(playerid);*/
					
					if(Tevezik[playerid] == NINCS)
					{
						for(new x = 0; x < 12; x++)
							GetPlayerWeaponData(playerid, x, PlayerInfo[playerid][pFegyver][x], PlayerInfo[playerid][pTolteny][x]);
					
						GetPlayerPos(playerid, PlayerInfo[playerid][pCPosX], PlayerInfo[playerid][pCPosY], PlayerInfo[playerid][pCPosZ]);
						PlayerInfo[playerid][pCInt] = GetPlayerInterior(playerid);
						PlayerInfo[playerid][pCVW] = GetPlayerVirtualWorld(playerid);
						GetPlayerHealth(playerid, PlayerInfo[playerid][pCelet]);
						GetPlayerArmour(playerid, PlayerInfo[playerid][pCpajzs]);
					}
					else
						Tevezve[Tevezik[playerid]] = NINCS;
					
					Tevezik[playerid] = giveplayerid;
					TogglePlayerSpectating(playerid, 1);
					
					if(!IsPlayerInAnyVehicle(giveplayerid))
						PlayerSpectatePlayer(playerid, giveplayerid);
					else
						PlayerSpectateVehicle(playerid, GetPlayerVehicleID(giveplayerid));
						
					SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
					SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));

			        //Spectate[playerid] = giveplayerid;
					/*new Float:health, Float:pajzs;
					GetPlayerHealth(Spectate[playerid], health);
					GetPlayerArmour(Spectate[playerid], pajzs);
					new cash =  GetMoney(Spectate[playerid]);*/
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					
					if(TvEngedely[playerid] == 1)
					{
						format(string, sizeof(string), "<< Adminsegéd %s megfigyeli %s-t! >>", sendername, giveplayer);
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
					else
					{
						if(PlayerInfo[giveplayerid][pAdmin] == 0 || PlayerInfo[playerid][pAdmin] <= PlayerInfo[giveplayerid][pAdmin])
						{
							format(string, sizeof(string), "<< Admin %s megfigyeli %s-t! >>", AdminName(playerid), giveplayer);
							ABroadCast(COLOR_LIGHTRED, string, 1);
						}
					}
					/*if (PlayerInfo[playerid][pAdmin] >= 1)
					{
						format(string, sizeof(string), "Recon: (%d) %s %dFt Élete:%.0f Pajzsa:%.0f",Spectate[playerid],giveplayer,cash,health,pajzs);
					}
					else
					{
						format(string, sizeof(string), "UAV: (%d) %s",Spectate[playerid],giveplayer);
					}
					SendClientMessage(playerid, COLOR_GREEN, string);*/
					Tevezik[playerid] = giveplayerid;
					Tevezve[giveplayerid] = playerid;
				}
			}
			else
				SendClientMessage(playerid, COLOR_GREEN, "Target is not available.");
		}
		return 1;
	}
//----------------------------------[UNCON]-----------------------------------------------

	if(strcmp(cmd, "/uncon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SetCamBack(playerid);
		}
		return 1;
	}

//----------------------------------[AdminChat]-----------------------------------------------

	if(strcmp(cmd, "/as", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!Admin(playerid, 1) && !IsAS(playerid)) return 1;

			if(noas == 1 && !Admin(playerid, 1))
				return Msg(playerid, "Az adminsegéd chat ki van kapcsolva.");

			if(!PlayerInfo[playerid][pAdminAlnevBe])
				GetPlayerName(playerid, sendername, sizeof(sendername));
			else
				strmid(sendername, PlayerInfo[playerid][pAdminAlnev], 0, strlen(PlayerInfo[playerid][pAdminAlnev]));

			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[96];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/as) [adminsegéd chat]");
				return 1;
			}

			new szint = PlayerInfo[playerid][pAdmin];

			if(szint >= 1)
				format(string, sizeof(string), "* Admin %s: %s", sendername, result);
			else if(IsAS(playerid))
				format(string, sizeof(string), "* Adminsegéd %s: %s", sendername, result);

			for(new x = 0; x < MAX_PLAYERS; x++)
			{
			    if(Admin(x, 1) || IsAS(x))
			        SendClientMessage(x, COLOR_YELLOW, string);
			}
			//SendAdminMessage(COLOR_LIGHTBLUE, string);
		}
		return 1;
	}

	if(strcmp(cmd, "/admin", true) == 0 || strcmp(cmd, "/a", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!Admin(playerid, 1)) return 1;

			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[96];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/a)dmin [admin chat]");
				return 1;
			}

			new szint = PlayerInfo[playerid][pAdmin];

			if(szint == 5555)
				format(string, sizeof(string), "* Scripter %s: %s", AdminName(playerid), result);
			else if(szint == 1338)
				format(string, sizeof(string), "* Super Admin %s: %s", AdminName(playerid), result);	
			else if(szint == 1337)
				format(string, sizeof(string), "* Fõadmin %s: %s", AdminName(playerid), result);
			else
				format(string, sizeof(string), "* Admin %s: %s", AdminName(playerid), result);

			SendAdminMessage(COLOR_GREEN, string);
		}
		return 1;
	}

	if(egyezik(cmd, "/fa"))
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!Admin(playerid, 1337)) return 1;

			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[96];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /fa [admin chat]");
				return 1;
			}

			new szint = PlayerInfo[playerid][pAdmin];

			if(szint == 5555)
				format(string, sizeof(string), "* Scripter %s: %s", AdminName(playerid), result);
			else if(szint == 1338)
				format(string, sizeof(string), "* Super Admin %s: %s", AdminName(playerid), result);	
			else if(szint == 1337)
				format(string, sizeof(string), "* Fõadmin %s: %s", AdminName(playerid), result);
			else
				format(string, sizeof(string), "* Admin %s: %s", AdminName(playerid), result);

			SendFAdminMessage(TEAM_ORANGE_COLOR, string);
		}
		return 1;
	}
	if(egyezik(cmd, "/sa"))
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsScripter(playerid)) return 1;

			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[96];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /sa [admin chat]");
				return 1;
			}

			//new szint = PlayerInfo[playerid][pAdmin];

			format(string, sizeof(string), "* Scripter %s: %s", AdminName(playerid), result);
			SendSAdminMessage(COLOR_LIGHTBLUE, string);
		}
		return 1;
	}
//----------------------------------[cnn]-----------------------------------------------
	if(strcmp(cmd, "/cnn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /cnn [szöveg ~n~=Új sor ~r~=Piros ~g~=Zöld ~b~=Kék ~w~=Fehér ~y~=Sárga]");
					return 1;
				}
				format(string, sizeof(string), "~b~%s: ~w~%s",AdminName(playerid),result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						GameTextForPlayer(i, string, 5000, 6);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/cnnn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				tmp = strtok(cmdtext, idx);
				new txtid;
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /cnnn <type> ");
					return 1;
				}
				txtid = strval(tmp);
				if(txtid == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Nem választhatod ki a 2-est");
					return 1;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /cnnn <type> [szöveg ~n~=Új sor ~r~=Piros ~g~=Zöld ~b~=Kék ~w~=Fehér ~y~=Sárga]");
					return 1;
				}
				format(string, sizeof(string), "~w~%s",result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) == 1)
					{
						GameTextForPlayer(i, string, 5000, txtid);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
				return 1;
			}
		}
		return 1;
	}
//[ADMIN]______________________________________________________________________________
//-----------------------------------[JAIL]-------------------------------------------------------------------------
//----------------------------------[TOD]-----------------------------------------------

	if(strcmp(cmd, "/tod", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /tod [timeofday] (0-23)");
				return 1;
			}
			new hour;
			hour = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
	            SetWorldTime(hour);
				format(string, sizeof(string), "   Az idõ átírva. Az új idõ:%d óra.", hour);
				BroadCast(COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/startlotto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 1337)
	        {
	            format(string, sizeof(string), "Lottó hírek: Lottó sorsolás.");
	            OOCOff(COLOR_WHITE, string);
	            Lotto();
	            GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "<< Admin %s elindított egy lottó sorsolást! >>", AdminName(playerid));
				ABroadCast(COLOR_LIGHTRED, string, 1);
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nem használhatod ezt a parancsot !");
	            return 1;
	        }
	    }
		return 1;
	}
//-----------------------------------editstat---------------------------------------
	if(strcmp(cmd, "/setstat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /setstat [playerid/PartOfName] [statcode] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Level |2 SpawnHealth |3 UpgradePoints |4 Model ");
				SendClientMessage(playerid, COLOR_GRAD3, "|5 BankAccount |6 PhoneNumber |7 RespectPoints ");
				SendClientMessage(playerid, COLOR_GRAD2, "|8 HouseKey |9 BizKey |10 DonateRank |11 FMember |20 Kocsikulcs");
				SendClientMessage(playerid, COLOR_GRAD2, "|12 Det |13 Lawyer |14 Fixer |15 News |16 Jack |17 Drug |18 Nem |19 Box |20 PassKey");
                SendClientMessage(playerid, COLOR_GRAD2, "|21 ConnectTime(szint) |22 Életkor |23 Materials | 24 Házasság | 25 PrémiumPont | 26 PrémiumCsomag | 27 PrémiumIdõ");
				SendClientMessage(playerid, COLOR_GRAD2, "|28 Bankszámlaszám");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
	    	{
	    	    if(giveplayerid != INVALID_PLAYER_ID)
	    	    {
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Használat: /setstat [playerid/PartOfName] [statcode] [amount]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 Level |2 SpawnHealth |3 UpgradePoints |4 Model ");
						SendClientMessage(playerid, COLOR_GRAD3, "|5 BankAccount |6 PhoneNumber |7 RespectPoints ");
						SendClientMessage(playerid, COLOR_GRAD2, "|8 HouseKey |9 BizKey |10 DonateRank |11 Fmember |20 Kocsikulcs");
						SendClientMessage(playerid, COLOR_GRAD2, "|12 Det |13 Lawyer |14 Fixer |15 News |16 Jack |17 Drug |18 Sex |19 Box");
						return 1;
					}
					new stat;
					stat = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Használat: /setstat [playerid/PartOfName] [statcode] [amount]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 Level |2 SpawnHealth |3 UpgradePoints |4 Model ");
						SendClientMessage(playerid, COLOR_GRAD3, "|5 BankAccount |6 PhoneNumber |7 RespectPoints ");
						SendClientMessage(playerid, COLOR_GRAD2, "|8 HouseKey |9 BizKey |10 DonateRank |11 Fmember |20 Kocsikulcs");
						SendClientMessage(playerid, COLOR_GRAD2, "|12 Det |13 Lawyer |14 Fixer |15 News |16 Jack |17 Drug |18 Sex |19 Box");
						return 1;
					}
					new amount;
					amount = strval(tmp);
					if (PlayerInfo[playerid][pAdmin] >= 1337)
					{
						switch (stat)
						{
							case 1:
							{
								PlayerInfo[giveplayerid][pLevel] = amount;
								format(string, sizeof(string), "   A játékos szintje átírva erre: %d", amount);
							}
							case 2:
							{
								PlayerInfo[giveplayerid][pSHealth] = amount;
								format(string, sizeof(string), "   A játékos kezdési élete átírva erre: %d", amount);
							}
							case 3:
							{
								PlayerInfo[giveplayerid][gPupgrade] = amount;
								format(string, sizeof(string), "   A játékos Upgrade Pontjai átírva erre: %d", amount);
							}
							case 4:
							{
								PlayerInfo[giveplayerid][pModel] = amount;
								format(string, sizeof(string), "   A játékos skinje átírva erre: %d", amount);
							}
							case 5:
							{
								PlayerInfo[giveplayerid][pAccount] = amount;
								format(string, sizeof(string), "   A játékos bankszámla összege átírva erre: %dFt", amount);
							}
							case 6:
							{
								PlayerInfo[giveplayerid][pPnumber] = amount;
								format(string, sizeof(string), "   A játékos telefonszáma átírva erre: %d", amount);
							}
							case 7:
							{
								PlayerInfo[giveplayerid][pExp] = amount;
								format(string, sizeof(string), "   A játékos tisztelet pontja átírva erre: %d", amount);
							}
							case 8:
							{
								PlayerInfo[giveplayerid][pPhousekey] = amount;
								format(string, sizeof(string), "   A játékos házszáma átírva erre: %d", amount);
							}
							case 9:
							{
								PlayerInfo[giveplayerid][pPbiskey] = amount;
								format(string, sizeof(string), "   A játékos biznisze átírva erre: %d", amount);
							}
							case 10:
							{
								PlayerInfo[giveplayerid][pDonateRank] = amount;
								format(string, sizeof(string), "   A játékos támogatási rangja átírva erre: %d", amount);
							}
							case 11:
							{
								PlayerInfo[giveplayerid][pFMember] = amount;
								format(string, sizeof(string), "   A játékos frakció tagsága átírva erre: %d", amount);
							}
							case 12:
							{
								PlayerInfo[giveplayerid][pDetSkill] = amount;
								format(string, sizeof(string), "   A játékos detektív képessége átírva erre: %d", amount);
							}
							case 13:
							{
								PlayerInfo[giveplayerid][pLawSkill] = amount;
								format(string, sizeof(string), "   A játékos ügyvéd képessége átírva erre: %d", amount);
							}
							case 14:
							{
								PlayerInfo[giveplayerid][pMechSkill] = amount;
								format(string, sizeof(string), "   A játékos szerelõ képessége átírva erre: %d", amount);
							}
							case 15:
							{
								PlayerInfo[giveplayerid][pNewsSkill] = amount;
								format(string, sizeof(string), "   A játékos riporter képességének szintje átírva erre: %d", amount);
							}
							case 16:
							{
								PlayerInfo[giveplayerid][pJackSkill] = amount;
								format(string, sizeof(string), "   A játékos autólopás képessége átírva erre: %d", amount);
							}
							case 17:
							{
								PlayerInfo[giveplayerid][pDrugsSkill] = amount;
								format(string, sizeof(string), "   A játékos drog árus képessége átírva erre: %d", amount);
							}
							case 18:
							{
								PlayerInfo[giveplayerid][pSex] = amount;
								format(string, sizeof(string), "   Játékos neme átírva(1=Férfi | 2=Nõ). %d", amount);
							}
							case 19:
							{
								PlayerInfo[giveplayerid][pBoxSkill] = amount;
								format(string, sizeof(string), "   A játékos boxolási képessége átírva erre: %d", amount);
							}
							case 20:
							{
								PlayerInfo[giveplayerid][pPcarkey] = amount;
								format(string, sizeof(string), "   Mostantól övé a %d kocsi (v-s)", amount);
							}
							case 21:
							{
								PlayerInfo[giveplayerid][pConnectTime] = amount;
								format(string, sizeof(string), " A játékos szintjét átírtad erre: %d", amount);
							}
							case 22:
							{
								PlayerInfo[giveplayerid][pAge] = amount;
								format(string, sizeof(string), " A játékos korát átírtad erre: %d", amount);
							}
							case 23:
							{
								PlayerInfo[giveplayerid][pMats] = amount;
								format(string, sizeof(string), " A játékos materialsait átírtad erre: %d", amount);
							}
							case 24:
							{
							   ClearMarriage(giveplayerid);
							}
							case 25:
							{
								//if(!Admin(playerid, 1338)) return Msg(playerid, "Szeretnéd mi ? :)");
								
								PlayerInfo[giveplayerid][pPremiumPont] = amount;
								format(string, sizeof(string), " A játékos prémiumpontjai: %d", amount);
							}
							case 26:
							{
								//if(!Admin(playerid, 1338)) return Msg(playerid, "Szeretnéd mi ? :)");
								
								PlayerInfo[giveplayerid][pPremiumCsomag] = amount;
								format(string, sizeof(string), " A játékos prémumcsomagja: %d", amount);
							}
							case 27:
							{
								//if(!Admin(playerid, 1338)) return Msg(playerid, "Szeretnéd mi ? :)");
								
								PlayerInfo[giveplayerid][pPremiumIdo] = amount;
								format(string, sizeof(string), " A játékos prémiumideje: %d", amount);
							}
							case 28:
							{
								PlayerInfo[giveplayerid][pBankSzamlaSzam] = amount;
								format(string, sizeof(string), " A játékos bankszámlaszámát átírtad erre: %d", amount);
							}
							case 77:
							{
								PlayerInfo[giveplayerid][pJob1] = amount;
								format(string, sizeof(string), "   A játékos munkája átírva erre: %d", amount);
							}
							case 78:
							{
								PlayerInfo[giveplayerid][pContractTime] = amount;
								format(string, sizeof(string), "   A játékos kötelezõ munkaideje(kilépés elõtt) átírva erre: %d", amount);
							}
							case 88:
							{
								PlayerInfo[giveplayerid][pJob2] = amount;
								format(string, sizeof(string), "   A játékos második munkája átírva erre: %d", amount);
							}
							case 89:
							{
								PlayerInfo[giveplayerid][pContractTime2] = amount;
								format(string, sizeof(string), "   A játékos második munkájának kötelezõ munkaideje(kilépés elõtt) átírva erre: %d", amount);
							}
							case 100:
							{
								PlayerInfo[giveplayerid][pMats] = amount;
								format(string, sizeof(string), "   Játákos materialjainak száma átírva erre: %d", amount);
							}
							case 101:
							{
								PlayerInfo[giveplayerid][pHeroin] = amount;
								format(string, sizeof(string), "   Játákos heroinjainak száma átírva erre: %d", amount);
							}
							case 102:
							{
								PlayerInfo[giveplayerid][pMarihuana] = amount;
								format(string, sizeof(string), "   Játákos marihuanajainak száma átírva erre: %d", amount);
							}
							case 103:
							{
								PlayerInfo[giveplayerid][pKokain] = amount;
								format(string, sizeof(string), "   Játákos kokainjainak száma átírva erre: %d", amount);
							}
							default:
							{
								format(string, sizeof(string), "Szerintem elírtál valamit!");
							}

						}
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
					}
				}//not valid id
			}//not connected
		}
		return 1;
	}
	if(strcmp(cmd, "/setfamily", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new family;
			family = strval(tmp);
			if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
			family -= 1;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new stat;
			stat = strval(tmp);
			if(stat < 1 || stat > 1) { SendClientMessage(playerid, COLOR_GREY, "   Stat Code can't be below 1 or above 1 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new amount;
			amount = strval(tmp);
			if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   Amount can't be below 1 or above 10 !"); return 1; }
			switch (stat)
			{
			    case 1:
			    {
					FamilyInfo[family][FamilyMembers] = amount;
					format(string, sizeof(string), "   Family %s set to %d members", FamilyInfo[family][FamilyName], amount);
			    }
			    default:
			    {
			    	format(string, sizeof(string), "   Invalid Stat Code");
			    }
			}
			SendClientMessage(playerid, COLOR_GREY, string);
		}
		return 1;
	}
//----------------------------------[SETINT]-----------------------------------------------
	if(strcmp(cmd, "/setvw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /setvw [virtualworld]");
				return 1;
			}
			new intid;
			intid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				SetPlayerVirtualWorld(playerid,intid);
				format(string, sizeof(string), "   Virtual World %d.", intid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod !");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/setint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /setint [interiorid]");
				return 1;
			}
			new intid;
			intid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				SetPlayerInterior(playerid,intid);
				PlayerInfo[playerid][pInt] = intid;
				format(string, sizeof(string), "   Interior %d.", intid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod !");
			}
		}
		return 1;
	}
//----------------------------------[SKYDIVE]------------------------------------------------
	if(strcmp(cmd, "/skydive", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				GetPlayerPos(playerid, rx, ry, rz);
				if (IsPlayerConnected(playerid))
				{
					GiveWeapon(playerid, 46, 1);
					SetPlayerPos(playerid,rx, ry, rz+1500);
					SendClientMessage(playerid, COLOR_WHITE, "Gyerünk!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
//----------------------------------[FOURDIVE]------------------------------------------------
	if(strcmp(cmd, "/fourdive", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /fourdive [playerid1] [playerid2] [playerid3] [playerid4]");
				return 1;
			}
			new para1;
			new para2;
			new para3;
			new para4;
			para1 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para2 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para3 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para4 = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (IsPlayerConnected(para1)){ GiveWeapon(para1, 46, 0); SetPlayerPos(para1,1536.0, -1360.0, 1350.0);SetPlayerInterior(para1,0);PlayerInfo[para1][pInt] = 0;SendClientMessage(para1, COLOR_WHITE, "Gyerünk!");}
				if ((IsPlayerConnected(para2)) && (para2>0)) { GiveWeapon(para2, 46, 0); SetPlayerPos(para2,1536.0, -1345.0, 1350.0);SetPlayerInterior(para2,0);PlayerInfo[para2][pInt] = 0;SendClientMessage(para2, COLOR_RED, "Gyerünk!");}
				if ((IsPlayerConnected(para3)) && (para3>0)) { GiveWeapon(para3, 46, 0); SetPlayerPos(para3,1552.0, -1345.0, 1350.0);SetPlayerInterior(para3,0);PlayerInfo[para3][pInt] = 0;SendClientMessage(para3, COLOR_RED, "Gyerünk!");}
				if ((IsPlayerConnected(para4)) && (para4>0)) { GiveWeapon(para4, 46, 0); SetPlayerPos(para4,1552.0, -1360.0, 1350.0);SetPlayerInterior(para4,0);PlayerInfo[para4][pInt] = 0;SendClientMessage(para4, COLOR_RED, "Gyerünk!");}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
//----------------------------------[INVITE]------------------------------------------------
	if(strcmp(cmd, "/invite", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				Msg(playerid, "/invite [Játékos Neve / ID]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (PlayerInfo[para1][pMember] == 0 && PlayerInfo[para1][pFMember] == 255)
					    {							
							if(PlayerInfo[playerid][pLeader] < 1 || PlayerInfo[playerid][pLeader] > sizeof(Szervezetneve)) return 1;
							
							if(FrakcioInfo[ PlayerInfo[playerid][pLeader] ][fUtolsoTagFelvetel] > (gettime() - 300))
								{ SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Csak 5percenként lehet tagot felvenni / kirúgni! A következõhöz kell még %dmp", FrakcioInfo[ PlayerInfo[playerid][pLeader] ][fUtolsoTagFelvetel] - (gettime() - 300)); return 1; }
							
							if(FrakcioInfo[ PlayerInfo[playerid][pLeader] ][fTagokSzama] >= SzervezetLimit[ PlayerInfo[playerid][pLeader] - 1 ])
								return Msg(playerid, "A frakció tele van!");
								
							FrakcioInfo[ PlayerInfo[playerid][pLeader] ][fUtolsoTagFelvetel] = gettime();
							FrakcioInfo[ PlayerInfo[playerid][pLeader] ][fTagokSzama]++;
							
							new szt = PlayerInfo[playerid][pLeader] - 1;
							ChosenSkin[para1] = szt;
							SetPlayerSkin(para1, Skinek[szt][0]);
							
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pMember] = PlayerInfo[playerid][pLeader];
							PlayerInfo[para1][pRank] = 0;
							printf("AdmCmd: %s has invited %s to join %s.", sendername, giveplayer, Szervezetneve[szt][0]);
							format(string, sizeof(string), "Csatlakoztál ide: %s", Szervezetneve[szt][0]);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Meghívtad %s-t hozzátok (%s)", giveplayer, Szervezetneve[szt][0]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

							SetPlayerInterior(para1,0);
							new rand = random(sizeof(gInviteSpawns));
							SetPlayerPos(para1, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
							SetPlayerFacingAngle(para1, gInviteSpawns[rand][3]);
							SetPlayerCameraPos(para1,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
							SetPlayerCameraLookAt(para1,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
							TogglePlayerControllable(para1, 0);
						    SelectChar[para1] = 255;
						    SelectCharID[para1] = PlayerInfo[para1][pMember];
						    SelectCharPlace[para1] = 1;
					    	PlayerInfo[para1][pChar] = ChosenSkin[para1];
						    SendClientMessage(para1, COLOR_LIGHTRED, "* A következõ skinért ird be 'next'");
						    SendClientMessage(para1, COLOR_LIGHTRED, "* Ha végeztél írd be, hogy 'done'.");
							
							new queryx[128];
							format(queryx, 128, "UPDATE %s SET Member='%d' WHERE ID='%d'", SQL_DB_Player, PlayerInfo[playerid][pLeader], SQLID(para1));
							mysql_query(queryx);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  A játékos már egy Szerverezet / Banda / Család tagja!");
						    return 1;
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod(csak leader)!");
			}
		}
		return 1;
	}
//----------------------------------[UNINVITE]------------------------------------------------
	if(strcmp(cmd, "/uninvite", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /uninvite [playerid/PartOfName]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if(PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (PlayerInfo[para1][pMember] > 0)
					    {
							if (PlayerInfo[playerid][pLeader] == PlayerInfo[para1][pMember])
							{
								if(PlayerInfo[para1][pLeader] == PlayerInfo[playerid][pLeader])
									return Msg(playerid, "Õ is leader, nem rughatod ki!");
									
								if(FrakcioInfo[ PlayerInfo[playerid][pLeader] ][fUtolsoTagFelvetel] > (gettime() - 300))
									{ SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Csak 5percenként lehet tagot felvenni / kirúgni! A következõhöz kell még %dmp", FrakcioInfo[ PlayerInfo[playerid][pLeader] ][fUtolsoTagFelvetel] - (gettime() - 300)); return 1; }
								
								FrakcioInfo[ PlayerInfo[playerid][pLeader] ][fUtolsoTagFelvetel] = gettime();
								FrakcioInfo[ PlayerInfo[playerid][pLeader] ][fTagokSzama]--;
								
								GetPlayerName(para1, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								printf("AdmCmd: %s has uninvited %s.", sendername, giveplayer);
								SendClientMessage(para1, COLOR_LIGHTBLUE, "* Fõnök kirúgott! Ismét civil vagy.");
								PlayerInfo[para1][pMember] = 0;
								PlayerInfo[para1][pRank] = 0;
								PlayerInfo[para1][pChar] = 0;
								PlayerInfo[para1][pSwattag] = 0;
								PlayerInfo[para1][pSwatRang] = 0;
								new rand = random(sizeof(CIV));
								SetSpawnInfo(para1, SPAWNID, PlayerInfo[para1][pModel],0.0,0.0,0.0,0,0,0,0,0,0,0);
								PlayerInfo[para1][pModel] = CIV[rand];
								MedicBill[para1] = 0;
								SpawnPlayer(para1);
								format(string, sizeof(string), "Kirúgtad: %s", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							
								new queryx[128];
								format(queryx, 128, "UPDATE %s SET Member='%d' WHERE ID='%d'", SQL_DB_Player, PlayerInfo[playerid][pLeader], SQLID(para1));
								mysql_query(queryx);
							}
							else
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nem azonos szervezethez tartoztok! Ezért nem rúghatod ki...");
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Leadernek csak!");
			}
		}
		return 1;
	}
//----------------------------------[MAKEADMIN]------------------------------------------------
	if(strcmp(cmd, "/makeadmin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!Admin(playerid, 1337) && !IsScripter(playerid)) return 1;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /makeadmin [playerid/PartOfName] [AdminSzint]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			GetPlayerName(playerid, playername, sizeof(playername));
			
			if(level < 0 || level > 5 && level < 1337 || level > 1338 && !IsScripter(para1))
				return Msg(playerid, "Hibás adminszint! Adminszintek: 1, 2, 3, 4, 5, 1337, 1338");
			
			if(level >= 1337 && level <= 1338 && !egyezik(playername, "Tamasi_Gabor") && !IsClint(playerid))
				return Msg(playerid, "Fõadmint nem rakhatsz be!");
			
			if(playerid == para1 && !egyezik(playername, "Tamasi_Gabor") && !IsScripter(playerid))
				return SendClientMessage(playerid, COLOR_LIGHTRED, "Mi a faszt képzelsz? Na nem! Magadnak nem adsz admint!");
			
	        if(para1 != INVALID_PLAYER_ID)
	        {
				if(level < 1)
					Channel(para1, NINCS, true);
					
				GetPlayerName(para1, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				PlayerInfo[para1][pAdmin] = level;
				format(string, sizeof(string), "* %s Kinevezett %d szintû adminná!", AdminName(playerid), level);
				SendClientMessage(para1, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), " * Kinevezted %s-t %d szintû adminná!", PlayerName(para1), level);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "<< %s kinevezte %s-t %d szintû adminná! >>", AdminName(playerid), giveplayer, level);
				ABroadCast(COLOR_LIGHTRED, string, 1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "-.-\"");
			}
		}
		return 1;
	}
//----------------------------------[MAKEIRCADMIN]----------------------------------------------
    if(strcmp(cmd, "/makeircadmin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /makeircadmin [playerid/PartOfName] [ChannelNr]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /makeircadmin [playerid/PartOfName] [ChannelNr]");
				return 1;
			}
			new channel = strval(tmp);
			if(channel > sizeof(IRCInfo) || channel < 1) { SendClientMessage(playerid, COLOR_GREY, "  Csak 1 és 50 között!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Mostantól %s IRC admin a következõ szobán: %d.", giveplayer, channel);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s kinevezett IRC adminnak a következõ szobán: %d.", sendername, channel);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s", giveplayer);

						new chn = channel - 1;
						strmid(IRCInfo[chn][iAdmin], string, 0, strlen(string), 255);
						IRCInfo[chn][iNeedPass] = 0; IRCInfo[chn][iLock] = 0;

						SaveIRC();
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs a szerveren!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Nem használhatod ezt a parancsot !");
			    return 1;
			}
		}
		return 1;
	}
//----------------------------------[MAKELEADER]------------------------------------------------
	if(strcmp(cmd, "/makeleader", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    Msg(playerid, "=================[Leader Osztás]=================");
				Msg(playerid, "Használat: /makeleader [playerid/PartOfName] [Leaderes Meló]");
				Msg(playerid, "Leaderes melók:");
				Msg(playerid, "SCPD(1) FBI(2) Ballas(3) LS Mentõ(4) LCN(5) Triad(6) Önkormányzat(7)  D. Cortez Mafia(8) Riporter(9)");
				Msg(playerid, "LS Taxi(10)  Vagos(11) Sacra Corina Unita(12) Los Aztecas(13) Katonaság(14) SF Rendõrség(15)");
				Msg(playerid, "Oktató(16) Grove Street Families(17), SF Taxi(18) SF Mentõ(19), VPOP(20), Russian Maffia(21)");
                Msg(playerid,"=================[Leader Osztás]=================");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > sizeof(Rangok) || level < 0) { SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen leaderes meló!"); return 1; }
            if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pLeader] = level;
						PlayerInfo[para1][pMember] = level;
						PlayerInfo[para1][pFMember] = 255;

						if(!IsScripter(para1))
						{
							if(level != 0)
							{
								format(string, sizeof(string), "Kineveztek egy csapat vezetõjévé!", sendername);
								SendClientMessage(para1, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "Kinevezted %s-t leaderré!", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "<< %s kinevezte %s-t leaderré! Frakció ID: %d >>", AdminName(playerid), giveplayer, level);
								ABroadCast(COLOR_LIGHTRED, string, 1);
							}
							else
							{
								format(string, sizeof(string), "Elvették a leaderséged!");
								SendClientMessage(para1, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "Elvetted %s leaderségét!", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "<< %s elvette %s leaderségét! >>", AdminName(playerid), giveplayer);
								ABroadCast(COLOR_LIGHTRED, string, 1);
								return 1;
							}
						}

						if(level == 0)
							PlayerInfo[para1][pChar] = PlayerInfo[para1][pModel];

						if(!IsHitman(playerid))
							PlayerInfo[para1][pChar] = LeaderSkinek[level][PlayerInfo[playerid][pSex] - 1];
						else
                            PlayerInfo[para1][pChar] = PlayerInfo[para1][pModel];

						if(PlayerInfo[para1][pChar] > 0 && OnDuty[para1] || PlayerInfo[para1][pChar] > 0 && !LegalisSzervezetTagja(para1) && !IsHitman(para1))
							SetPlayerSkin(para1, PlayerInfo[para1][pChar]);
						else
							SetPlayerSkin(para1, PlayerInfo[para1][pModel]);
					}
				}//not connected
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/telefonfeltöltés", true) == 0 || strcmp(cmd, "/telefonfeltoltes", true) == 0)
 	{
  			if(IsAt(playerid, IsAt_ATM)
			/*PlayerToPoint(5.0,playerid,1469.341675, -1772.268066, 18.363657) ||
	        PlayerToPoint(6.0,playerid,1836.913452, -1677.364624, 12.975209) ||
            PlayerToPoint(7.0,playerid,1927.790283, -1765.892456, 13.156972) ||
	        PlayerToPoint(8.0,playerid,1304.649658, -1367.892456, 13.182307) ||
            PlayerToPoint(6.0,playerid,1810.772461, -1877.020142, 13.226860) ||
            PlayerToPoint(7.0,playerid,2051.406494, -1897.543457, 13.196700) ||
            PlayerToPoint(8.0,playerid,2231.275879, -1722.784912, 13.204838) ||
            PlayerToPoint(6.0,playerid,2232.996582, -1362.803345, 23.635086) ||
            PlayerToPoint(7.0,playerid,2235.976074, -1150.396362, 25.530949) ||
            PlayerToPoint(8.0,playerid,1628.364380, -1171.898438, 23.721024) ||
            PlayerToPoint(6.0,playerid,1010.001892, -1115.541504, 23.542313) ||
            PlayerToPoint(7.0,playerid,622.896423, -1774.111816, 13.856520) ||
		    PlayerToPoint(8.0,playerid,453.312622, -1475.028076, 30.363472) ||
		    PlayerToPoint(8.0,playerid,986.761230, -1336.739380, 13.346378) ||
		    PlayerToPoint(8.0,playerid,2215.514404, -2196.378418, 13.346378)*/)
		    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /telefonfeltöltés [összeg]");
				format(string, sizeof(string), "  %dFt  van bankszámládon.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				format(string, sizeof(string), "  %dFt van a telefonodon.", PlayerInfo[playerid][pTeloEgyenleg]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /telefonfeltöltés [összeg]");
				format(string, sizeof(string), "  %dFt van a bankszámládon.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				format(string, sizeof(string), "  %dFt van a telefonodon.", PlayerInfo[playerid][pTeloEgyenleg]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if(cashdeposit > PlayerInfo[playerid][pAccount] || cashdeposit < 1)
			{
				format(string, sizeof(string), "  %dFt van a bankszámládon.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			PlayerInfo[playerid][pAccount] = PlayerInfo[playerid][pAccount]-cashdeposit;
			PlayerInfo[playerid][pTeloEgyenleg] = PlayerInfo[playerid][pTeloEgyenleg] + cashdeposit;
			new ujegyenleg = PlayerInfo[playerid][pTeloEgyenleg];
			new regiegyenleg = PlayerInfo[playerid][pTeloEgyenleg] - cashdeposit;
			format(string, sizeof(string), " [Szolgáltató]SMS: Feltöltöttél %dFt-t. Régi Egyenleg: %dFt, Új Egyenleg: %dFt, Egyenleg lekérés: ('/egyenleglekérés')", cashdeposit, regiegyenleg ,ujegyenleg);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			Cselekves(playerid, "feltöltötte az egyenlegét...");
		    }
			else
			{
	      		SendClientMessage(playerid, COLOR_YELLOW, "Egyenleg feltöltés bank automatáknál lehetséges!(ATM)");
			}
			return 1;
	}

	if(strcmp(cmd, "/egyenleglekérés", true) == 0 || strcmp(cmd, "/egyenleglekeres", true) == 0)
 	{
		new egyenleg = PlayerInfo[playerid][pTeloEgyenleg];
     	format(string, sizeof(string), "[Szolgáltató]SMS: Egyenleged %dFt. Egyenleg feltöltés: ('/telefonfeltöltés')", egyenleg);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
		Cselekves(playerid, "lekérte az egyenlegét...");
 	}

	if(strcmp(cmd, "/forceskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /forceskin [playerid/PartOfName]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
				        if(PlayerInfo[para1][pMember] < 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs semmilyen szervezetben!");
				            return 1;
				        }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Az egyik admin kötelezte a Frakció ruha váltást. Admin neve: %s", sendername);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Kötelezted %s-nak/nek a frakció ruha váltást.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

//						if(PlayerInfo[para1][pMember] == 1) { PlayerInfo[para1][pTeam] = 5; ChosenSkin[para1] = 59; }
//				        else if(PlayerInfo[para1][pMember] == 2) { PlayerInfo[para1][pTeam] = 6; ChosenSkin[para1] = 121; }
//				        else if(PlayerInfo[para1][pMember] == 3) { PlayerInfo[para1][pTeam] = 7; ChosenSkin[para1] = 98; }
//				        else if(PlayerInfo[para1][pMember] == 4) { PlayerInfo[para1][pTeam] = 8; ChosenSkin[para1] = 46; }
//				        else if(PlayerInfo[para1][pMember] == 5) { PlayerInfo[para1][pTeam] = 9; ChosenSkin[para1] = 174; }
//				        else if(PlayerInfo[para1][pMember] == 6) { PlayerInfo[para1][pTeam] = 2; ChosenSkin[para1] = 280; }
//				        else if(PlayerInfo[para1][pMember] == 7) { PlayerInfo[para1][pTeam] = 2; ChosenSkin[para1] = 164; }
//				        else if(PlayerInfo[para1][pMember] == 8) { PlayerInfo[para1][pTeam] = 10; ChosenSkin[para1] = 186; }
//				        else { return 1; }

                        SetPlayerInterior(para1,0);
						new rand = random(sizeof(gInviteSpawns));
						SetPlayerPos(para1, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
						SetPlayerFacingAngle(para1, gInviteSpawns[rand][3]);
						SetPlayerCameraPos(para1,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						SetPlayerCameraLookAt(para1,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						TogglePlayerControllable(para1, 0);
					    SelectChar[para1] = 255;
					    SelectCharID[para1] = PlayerInfo[para1][pMember];
					    SelectCharPlace[para1] = 1;
					    PlayerInfo[para1][pModel] = ChosenSkin[para1];
				    	PlayerInfo[para1][pChar] = ChosenSkin[para1];
					    SendClientMessage(para1, COLOR_LIGHTRED, "* Írd be 'next' hogy a következõ skint lásd.");
					    SendClientMessage(para1, COLOR_LIGHTRED, "* Ha megtaláltad a skined írd be(lehet kétszer kell): 'done' ");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
//----------------------------------[GIVERANK]------------------------------------------------
	if(strcmp(cmd, "/giverank", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /giverank [playerid/PartOfName] [0-7] (Nem minden helyen van 7es!)");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /giverank [playerid/PartOfName] [0-7] (Nem minden helyen van 7es!)");
				return 1;
			}

			level = strval(tmp);
			if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNKA_VPOP) || LMT(playerid, LMUNKA_KATONA))
			{
				if(level < 0 || level > 12) return Msg(playerid, "0-12");
			}
			else if(LMT(playerid, LMUNKA_YAKUZA))
			{
				if(level < 0 || level > 8) return Msg(playerid, "0-8");
			}
			else if(LMT(playerid, LMUNKA_CAMORRA))
			{
				if(level < 0 || level > 9) return Msg(playerid, "0-9");
			}

			else if(LMT(playerid, LMUNKA_COLUMBIA))
			{
				if(level < 0 || level > 10) return Msg(playerid, "0-10");
			}
			else
			{
				if(level < 0 || level > 7) return Msg(playerid, "0-7");
			}	
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
			            if (PlayerInfo[playerid][pLeader] == PlayerInfo[para1][pMember])
					    {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pRank] = level;
						format(string, sizeof(string), " Új rangot (%d) adtál neki: %s", level, giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "A fõnöködtõl új rangot kaptál!");
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						}
						else
						{
						SendClientMessage(playerid, COLOR_LIGHTRED, "Pff... Nem te vagy a fõnöke, és rangot akarsz neki adni?");
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nem használahatod ezt a parancsot(Leadereknek csak)!");
			}
		}
		return 1;
	}
//----------------------------------[setteam]------------------------------------------------
	/*if(strcmp(cmd, "/setteam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /setteam [playerid/PartOfName] [team 1(civ) - 2(cop)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pTeam] = level;
						gTeam[para1] = level;
						//SetPlayerWeapons(para1);
						SetPlayerSpawn(para1);
						ClearCrime(para1);
						printf("AdmCmd: %s has switched %s to team %d.", sendername, giveplayer, level);
						format(string, sizeof(string), "   You have been switched to team %d by %s", level, sendername);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "   You have switched %s to team %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}*/
//----------------------------------[Bankrob]-----------------------------------------------
	if(strcmp(cmd, "/rob", true) == 0)
 	{
		/*if(playerid != NINCS)
			return Msg(playerid, "Átmenetileg tiltva... fejlesztés alatt...");*/
		if(IsPlayerConnected(playerid))
		{
			if(Szint(playerid) < 8) return Msg(playerid, "8as szinttõl!");
			if(ghour < 6) return Msg(playerid, "A bank éjféltõl reggel 6ig zárva van!");
			if(LegalisSzervezetTagja(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, "Legális szervezethez tartozol ezért nem rabolhatod ki a bankot!");
			if(PlayerToPoint(4, playerid, 2144.5344,1640.4023,993.6882)) //1409.305786, -988.493835, 4780.224609
			{
				if(MikorRabolhato > 0) return Msg(playerid, "Nem rabolhatod ki a bankot");
				if(Rabol[playerid] != 1)
				{
					if(BankSzef < 50000) return Msg(playerid, "Nem rabolhatod ki a bankot, legalább 50.000Ft-nak kell a széfben lennie.");
					if(JatekosZsak[playerid] == NINCS) return Msg(playerid, "Nincs zsákod! Menj és vegyél ki egyet a pénzszállítóból!");
					if(JatekosZsak[playerid] >= MAXZSAKPENZ) return Msg(playerid, "A zsákod tele van");
					
					Rabol[playerid] = 1;

					Msg(playerid, "Pakolod a pénzt (befejezés: /rob)");
					Cselekves(playerid, "elkezdte pakolni a pénzt");
					Freeze(playerid);
					ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
					return 1;
				}
				else
				{
					Rabol[playerid] = 0;

					Cselekves(playerid, "végzett a pénz pakolással");
					ClearAnimations(playerid);
					UnFreeze(playerid);
					return 1;
				}
			}
	        else if(PlayerToPoint(3, playerid, 2308.8762,-2.6650,26.7422) && GetPlayerVirtualWorld(playerid) == 0)
			{
				if(Rob == 1)
				{
					return 1;
				}
				ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s rabolja az LS bankot >>", PlayerName(playerid));
				format(string, sizeof(string), "** RIADÓ: Los Santos-ban kirabolják a bankot, siess! **");
  				Rob = 1;
				SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
				SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
				SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
				SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
				SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
				robmoney = Rand(50000, 500000);
				robpenzido[playerid] = 90;
				SetTimerEx("robpenzpakolas", 3050, false, "i", playerid);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, "Rabolod, varj...", 3000, 4);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy bankba!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotosf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -2705.837402, 376.239288, 4.968334);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, -2705.837402, 376.239288, 4.968334);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Sikeresen elteleportáltál. !");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod !");
			}
		}
		return 1;
  	}
	if(strcmp(cmd, "/gotols", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Sikeresen elteleportáltál. !");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod !");
			}
		}
		return 1;
  	}
	
	if(strcmp(cmd, "/gotolv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Sikeresen elteleportáltál.");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
  	}
	
	if(strcmp(cmd, "/ahegy", true) == 0)
	{
		if(!Admin(playerid, 3)) return 1;
		
		new melyik = 1;
		if(params > 0)
		{
			melyik = strval(param[1]);
			if(melyik < 1 || melyik > 6)
				melyik = 1;
		}
			
		if(melyik == 1) Tele(playerid, -372.81, 2128.20, 133.18);
		else if(melyik == 2) Tele(playerid, -340.553, 1985.268, 131.489);
		else if(melyik == 3) Tele(playerid, -319.854, 1945.073, 132.412);
		else if(melyik == 4) Tele(playerid, -483.645, 2114.076, 133.547);
		else if(melyik == 5) Tele(playerid, -427.619, 2503.875, 124.304);
		else Tele(playerid, -459.990, 2371.782, 117.802);
		
		SendClientMessage(playerid, COLOR_GRAD1, "   Üdv a hegyen. Itt lehet normálisan beszélgetni másokkal(OOC)!");
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid, 0);

		return 1;
	}

	if(strcmp(cmd, "/bmx", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1615.738037, 507.918854, 521.063171);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1615.738037, 507.918854, 521.063171);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Sikeresen elteleportáltál.");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/entercar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /entercar [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				PutPlayerInVehicle(playerid, testcar, 1);
				SendClientMessage(playerid, COLOR_GRAD1, "   Sikeresen a kocsiba teleportáltál.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		Hazbanvan[playerid] = 0;
		return 1;
	}
	if(strcmp(cmd, "/gotocar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /gotocar [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(testcar, cwx2, cwy2, cwz2);
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, cwx2, cwy2, cwz2+2);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, cwx2, cwy2, cwz2+2);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Sikeresen a kocsihoz teleportáltál.");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		Hazbanvan[playerid] = 0;
		return 1;
	}

	if(strcmp(cmd, "/gotocar2", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /gotocar2 [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				PutPlayerInVehicle(playerid, testcar, 0);
				format(string, sizeof(string),"   Sikeresen a kocsihoz teleportáltál.! (Car-VW:%d, Te-VW:%d)",GetVehicleVirtualWorld(testcar),GetPlayerVirtualWorld(playerid));
				SendClientMessage(playerid, COLOR_GRAD1, string);
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/mark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				SendClientMessage(playerid, COLOR_GRAD1, "   Teleportálási pozíció elmentve.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotomark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Sikeresen odateleportáltál a mentett pozícióhoz.");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				}
				else
				{
					SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Sikeresen elteleportáltál.");
				SetPlayerInterior(playerid,1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotostad", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1435.75, -652.664, 1054.94);
				}
				else
				{
					SetPlayerPos(playerid, -1435.75, -652.664, 1054.94);
				}
				SetPlayerInterior(playerid,4);
				SendClientMessage(playerid, COLOR_GRAD1, "   Sikeresen elteleportáltál.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotojet", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34);
				}
				else
				{
					SetPlayerPos(playerid, 1.71875, 30.4062, 1200.34);
				}
				SetPlayerInterior(playerid,1);
				SendClientMessage(playerid, COLOR_GRAD1, "   Sikeresen elteleportáltál.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/goto", true) == 0)
	{
		if(!Admin(playerid, 1))
			return 1;
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /goto [playerid/PartOfName]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(tmp);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if(PlayerInfo[plo][pAdmin] < 1337 && PlayerInfo[plo][pAdmin] > PlayerInfo[playerid][pAdmin])
					{
						Msg(playerid, "Majd õ oda teléz hozzád ha akar!");
						SendFormatMessage(plo, COLOR_GREY, "%s oda akart gotozni hozzád", PlayerName(playerid));
						return 1;
					}
					if(PlayerInfo[playerid][pAdmin] >= 3 )
					{
						GetPlayerPos(plo, plocx, plocy, plocz);
						if(PlayerInfo[plo][pInt] > 0)
						{
							SetPlayerInterior(playerid,PlayerInfo[plo][pInt]);
							PlayerInfo[playerid][pInt] = PlayerInfo[plo][pInt];
							PlayerInfo[playerid][pLocal] = PlayerInfo[plo][pLocal];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(playerid,0);
						}
						if(plocz > 530.0 && PlayerInfo[plo][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(playerid,1);
							PlayerInfo[playerid][pInt] = 1;
						}
						if (GetPlayerState(playerid) == 2)
						{
							new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
							SetVehicleVW(tmpcar,GetPlayerVirtualWorld(plo));
							TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
						}
						else
						{
							SetPlayerPos(playerid,plocx,plocy+2, plocz);
							SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(plo));
							SetPlayerInterior(playerid, GetPlayerInterior(plo));
						}
						SendClientMessage(playerid, COLOR_GRAD1, "   Sikeresen odateleportáltál.");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d nincs fent a szerveren.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[GETHERE]-----------------------------------------------
	if(strcmp(cmd, "/gethere", true) == 0)
	{
		if(!Admin(playerid, 1))
			return 1;
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /gethere [playerid/PartOfName]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(tmp);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if(PlayerInfo[plo][pAdmin] > PlayerInfo[playerid][pAdmin])
					{
						Msg(playerid, "Majd õ gotozik hozzád ha akar!");
						SendFormatMessage(plo, COLOR_GREY, "%s oda akart teleportálni hozzá", PlayerName(playerid));
						return 1;
					}
					if (PlayerInfo[playerid][pAdmin] >= 3)
					{
						GetPlayerPos(playerid, plocx, plocy, plocz);
						if(PlayerInfo[playerid][pInt] > 0)
						{
							SetPlayerInterior(plo,PlayerInfo[playerid][pInt]);
							PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
							PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
						}
						if (GetPlayerState(plo) == 2)
						{
							TelePos[plo][0] = 0.0;
							TelePos[plo][1] = 0.0;
							new tmpcar = GetPlayerVehicleID(plo);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
							SetVehicleVW(GetPlayerVehicleID(plo), GetPlayerVirtualWorld(playerid));
						}
						else
							SetPlayerPos(plo,plocx,plocy+2, plocz);

						SetPlayerInterior(plo, GetPlayerInterior(playerid));
						SetPlayerVirtualWorld(plo, GetPlayerVirtualWorld(playerid));
						SendClientMessage(plo, COLOR_GRAD1, "   Valaki elteleportált magához.");
						Hazbanvan[plo] = 0;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d nincs fent a szerveren.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/getcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /getcar [carid]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(plo,plocx,plocy+4, plocz);
				SetVehicleVW(plo, GetPlayerVirtualWorld(playerid));
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/oldcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    format(string, sizeof(string), "Az elõzõ autód rendszáma(amiben ültél): %d", gLastCar[playerid]);
		    SendClientMessage(playerid, COLOR_GREY, string);
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fuelcars", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            for(new c=0;c<MAX_VEHICLES;c++)
				{
					if(IsVehicleConnected(c))
						Gas[c] = MaxBenzin(c);
				}
				SendClientMessage(playerid, COLOR_GREY, "   Minden jármû megtankolva! ");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nem vagy Admin!");
	            return 1;
	        }
	    }
	    return 1;
	}
//----------------------------------[GiveGun]------------------------------------------------
	if(strcmp(cmd, "/givegun", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /givegun [playerid/PartOfName] [weaponid(eg. 46 = Parachute)] [ammo]");
				return 1;
			}
			new playa;
			new gun;
			new ammo;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			
			gun = GetGunID(tmp);
			
			if(gun < 1)
				gun = strval(tmp);
				
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /givegun [playerid/PartOfName] [weaponid] [ammo]");
				SendClientMessage(playerid, COLOR_GRAD4, "3(Club) 4(knife) 5(bat) 6(Shovel) 7(Cue) 8(Katana) 10-13(Dildo) 14(Flowers) 16(Grenades) 18(Molotovs) 22(Pistol) 23(SPistol)");
				SendClientMessage(playerid, COLOR_GRAD3, "24(Eagle) 25(shotgun) 29(MP5) 30(AK47) 31(M4) 33(Rifle) 34(Sniper) 37(Flamethrower) 41(spray) 42(exting) 43(Camera) 46(Parachute)");
				return 1;
			}
			if(gun==11231234||gun==446||gun==247||gun==11234||gun==21234||gun==41239||gun==417||gun==149||gun==240||gun==241||gun==346||gun==348||gun==349||gun==4046||gun==464||gun==41236)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   Rossz fegyver ID!"); return 1; }
			tmp = strtok(cmdtext, idx);
			ammo = strval(tmp);
			if(ammo < -5000 || ammo > 5000)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   A töltény 1 és 5000 között legyen!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GiveWeapon(playa, gun, ammo);
                        format(string, sizeof(string), "<< Admin %s fegyvert adott %s-nak/nek! Fegyver ID: %d - Töltény: %d >>", AdminName(playerid), giveplayer, gun, ammo);
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nem használhatod ezt a parancsot!");
			}
		}
		return 1;
	}
//----------------------------------[sethp]------------------------------------------------
	if(strcmp(cmd, "/sethp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /sethp [playerid/PartOfName] [health]");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new playa;
			new Float:health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = floatstr(tmp);
			GetPlayerName(playa, giveplayer, sizeof(giveplayer));
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        if(health <= 2000)
				        {
							new Float:hp;
							GetPlayerHealth(playa, hp);
							SetHealth(playa, health);
							format(string, sizeof(string), "<< Admin %s HPt adott neki: %s - Régi: %1.f - Új: %1.f >>", AdminName(playerid), giveplayer, hp, health);
							ABroadCast(COLOR_LIGHTRED, string, 1);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nem használhatod ezt a parancsot!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /setarmor [playerid/PartOfName] [armor]");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new playa;
			new Float:health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = floatstr(tmp);
			GetPlayerName(playa, giveplayer, sizeof(giveplayer));
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						new Float:hp;
						GetPlayerArmour(playa, hp);
						SetPlayerArmour(playa, health);
						format(string, sizeof(string), "<< Admin %s Armort adott neki: %s - Régi: %1.f - Új: %1.f >>", AdminName(playerid), giveplayer, hp, health);
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nem használhatod ezt a parancsot!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/veh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!Admin(playerid, 1337)) return 1;

			tmp = strtok(cmdtext, idx);
//			new length = strlen(cmdtext);
//			while ((idx < length) && (cmdtext[idx] <= ' '))
//			{
//				idx++;
//			}
//			new offset = idx;
//			new result[128];
//			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
//			{
//				result[idx - offset] = cmdtext[idx];
//				idx++;
//			}
//			result[idx - offset] = EOS;

			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /veh [név] ([szín1] [szín2])");
				return 1;
			}
			new car;
			if(GetVehicleModelIDFromName(tmp) == -1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Ilyen kocsiról még nem hallottam...");
			    return 1;
			}
			car = GetVehicleModelIDFromName(tmp);

			new szin1, szin2;

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			    szin1 = 0;
			else
			    szin1 = strval(tmp);

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			    szin2 = 0;
			else
			    szin2 = strval(tmp);

			if(szin1 < 0 || szin1 > 126 || szin2 < 0 || szin2 > 126)
			    return SendClientMessage(playerid, COLOR_GREY, "A szín 0 és 126 között lehet!");

			new Float:X, Float:Y, Float:Z, Float:A;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			new carid = UjKocsi(car, X, Y, Z, A, szin1, szin2);
			CreatedCars[CreatedCar] = carid;
			CreatedCar ++;
			format(string, sizeof(string), "Kocsi %d lerakva!", carid);
			SendClientMessage(playerid, COLOR_GREY, string);
			SetPlayerPos(playerid, X, Y, (Z+2));
		}
		return 1;
	}

	if(strcmp(cmd, "/fixveh", true) == 0)
	{
		if(!Admin(playerid, 5)) return 1;
		if(params != 1) return Msg(playerid, "/fixveh [1/2] - 1: Alap javítás - 2: Alap javítás + Külsõ javítás");

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(strval(param[1]) == 1)
				SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
			else if(strval(param[1]) == 2)
				RepairVehicle(GetPlayerVehicleID(playerid));
		    Msg(playerid, "Javítva!");
		}
		return 1;
	}
	if(strcmp(cmd, "/destroycars", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!Admin(playerid, 1337)) return 1;
			for(new i = 0; i < sizeof(CreatedCars); i++)
			{
				if(CreatedCars[i] != 0)
			    	DestroyVehicle(CreatedCars[i]);
			}
			SendClientMessage(playerid, COLOR_GREY, "   Az összes '/veh'-el lerakott autó eltûntetve!");
		}
		return 1;
	}
	if(strcmp(cmd, "/weather", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1337)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Használat: /weather [weatherid]");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			//if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45 !"); return 1; }
			SetPlayerWeather(playerid, weather);
			SendClientMessage(playerid, COLOR_GREY, "   Idõjárás átállítva(csak neked)!");
		}
		return 1;
	}
	if(strcmp(cmd, "/weatherall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1337)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Használat: /weatherall [weatherid]");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			//if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45 !"); return 1; }
			SetWeather(weather);
			SendClientMessage(playerid, COLOR_GREY, "   Idõjárás átállítva !");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "<< Admin %s Idõjárást váltott: %d >>", AdminName(playerid), weather);
			ABroadCast(COLOR_LIGHTRED, string, 1);
		}
		return 1;
	}
//----------------------------------[Money]------------------------------------------------
	if(strcmp(cmd, "/money", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /money [playerid/PartOfName] [money]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						ResetMoney(playa);
						ConsumingMoney[playa] = 1;
						GiveMoney(playa, (GetMoney(playa) + money));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "<< Admin %s pénzt adott %s-nek/nak! Összeg: %d >>", AdminName(playerid), giveplayer, money);
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
//----------------------------------[GiveMoney]------------------------------------------------
	if(strcmp(cmd, "/adminadomany", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /adminadomany [playerid/PartOfName] [money]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            ConsumingMoney[playa] = 1;
						GiveMoney(playa, money);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "<< Admin %s pénzt adott %s-nek/nak! Összeg: %d >>", AdminName(playerid), giveplayer, money);
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
 }
	if(strcmp(cmd, "/givemoney", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /givemoney [playerid/PartOfName] [money]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            ConsumingMoney[playa] = 1;
						GiveMoney(playa, money);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "<< Admin %s pénzt adott %s-nek/nak! Összeg: %d >>", AdminName(playerid), giveplayer, money);
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
//-----------------------------------[Slap]-----------------------------------------------
	if(strcmp(cmd, "/pacsi", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /slap [playerid/PartOfName]");
				return 1;
			}
			new playa;
			new Float:shealth;
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playerid][pAdmin] >=1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						if(IsScripter(playa) || PlayerInfo[playerid][pAdmin] < PlayerInfo[playa][pAdmin])
							playa = playerid;
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetHealth(playa, shealth-5);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+5);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						format(string, sizeof(string), "<< %s pacsit adott neki: %s >>", sendername, giveplayer);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/hangszál", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /hangszál [playerid/PartOfName]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[playa][pMuted] == 0)
						{
							PlayerInfo[playa][pMuted] = 1;
							printf("(Némítás) [Admin]%s %s hangszálaival játszik",sendername,  giveplayer);
							format(string, sizeof(string),"(Némítás) [Admin]%s %s hangszálaival játszik",sendername,  giveplayer);
							format(string, sizeof(string), "(Némítás) %s -t elnémította %s",giveplayer ,sendername);
							ABroadCast(COLOR_LIGHTRED,string,1);
						}
						else
						{
							PlayerInfo[playa][pMuted] = 0;
							printf("(Némítás vége) [Admin]%s %s hangszálait a helyére tette",sendername,  giveplayer);
							format(string, sizeof(string),"(Némítás vége) [Admin]%s %s hangszálait a helyére tette",sendername,  giveplayer);
							format(string, sizeof(string), "(Némítás vége) %s -ról/rõl a némítás feloldva %s által",giveplayer ,sendername);
							ABroadCast(COLOR_LIGHTRED,string,1);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}

//----------------------------------[Kick]------------------------------------------------
    if(strcmp(cmd, "/rszabaly", true) == 0 || strcmp(cmd, "/rszabály", true) == 0)
	{
        SendClientMessage(giveplayerid, COLOR_YELLOW,"");
		return 1;
	}
	if(strcmp(cmd, "/urlap", true) == 0 || strcmp(cmd, "/ürlap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Nincsbelepve(playerid)) return 1;
            tmp = strtok(cmdtext, idx);
  			giveplayerid = ReturnUser(tmp);
	        if(!strlen(tmp))
	        {
     	       	SendClientMessage(playerid, COLOR_WHITE, "Használata: /urlap [playerid]");
         		return 1;
	        }
       		if(PlayerInfo[playerid][pLeader] == 1)
			{
				urlap[giveplayerid] = 1;
				SendClientMessage(giveplayerid, COLOR_YELLOW,"A rendõrfönök adott egy ürlapot");
				SendClientMessage(giveplayerid, COLOR_YELLOW,"/kitöltés");
				return 1;
	        }
		}
		return 1;
	}
	if(strcmp(cmd, "/kitoltes", true) == 0 || strcmp(cmd, "/kitöltés", true) == 0)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(urlap[playerid] == 1)
		    {
		        if(PlayerInfo[i][pLeader] == 1)
		    	{
					format(string, sizeof(string), "%s", GetPlayerName(playerid, sendername, sizeof(sendername)));
					SendClientMessage(i, COLOR_YELLOW, string);
					SendClientMessage(playerid, COLOR_YELLOW, "Mióta vagy a városban(mióta játszol)?");
					SendClientMessage(playerid, COLOR_YELLOW, "/ürlap2 [text]");
					urlap[playerid] = 2;
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/urlap2", true) == 0 || strcmp(cmd, "/ürlap2", true) == 0)
	{
	    if(urlap[playerid] == 2)
	    {
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /ürlap2 [text]");
				return 1;
			}
			format(string, sizeof(string), "%s mióta van a városban: %s", sendername, result);
			//ABroadCast(COLOR_RED,string,1);
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(PlayerInfo[x][pLeader] == 1)
				{
					SendClientMessage(x, COLOR_RED, string);
					SendClientMessage(playerid, COLOR_YELLOW, "miért szeretnél belépni?");
					SendClientMessage(playerid, COLOR_YELLOW, "/ürlap3 [text]");
					urlap[playerid] = 3;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/urlap3", true) == 0 || strcmp(cmd, "/ürlap3", true) == 0)
	{
	    if(urlap[playerid] == 3)
	    {
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /ürlap3 [text]");
				return 1;
			}
			format(string, sizeof(string), "%s ezért szeretne belépni: %s", sendername, result);
			//ABroadCast(COLOR_RED,string,1);
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(PlayerInfo[x][pLeader] == 1)
				{
					SendClientMessage(x, COLOR_RED, string);
					SendClientMessage(playerid, COLOR_YELLOW, "mibõl gondolod hogy alkalmas vagy rá?");
					SendClientMessage(playerid, COLOR_YELLOW, "/ürlap4 [text]");
					urlap[playerid] = 4;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/urlap4", true) == 0 || strcmp(cmd, "/ürlap4", true) == 0)
	{
	    if(urlap[playerid] == 4)
	    {
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /ürlap4 [text]");
				return 1;
			}
			format(string, sizeof(string), "%s ezért alkalmas rá: %s", sendername, result);
			//ABroadCast(COLOR_RED,string,1);
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(PlayerInfo[x][pLeader] == 1)
				{
					SendClientMessage(x, COLOR_RED, string);
					SendClientMessage(playerid, COLOR_YELLOW, "szabályzatot elfogadod?(/rszabály)");
					SendClientMessage(playerid, COLOR_YELLOW, "/ürlap5 [text]");
					urlap[playerid] = 5;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/urlap5", true) == 0 || strcmp(cmd, "/ürlap5", true) == 0)
	{
	    if(urlap[playerid] == 5)
	    {
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /urlap5 [igen/nem]");
				return 1;
			}
			if(strcmp(x_nr,"igen",true) == 0)
			{
			    for(new x = 0; x < MAX_PLAYERS; x++)
				{
					if(PlayerInfo[x][pLeader] == 1)
					{
					    GetPlayerName(playerid, sendername, sizeof(sendername));
	                    format(string, sizeof(string), "* %s elfogadta a szabályzatot.", sendername);
						SendClientMessage(x, COLOR_RED, string);
						urlap[playerid] = 0;
					}
				}
				return 1;
			}
			else if(strcmp(x_nr,"nem",true) == 0)
			{
	  			for(new x = 0; x < MAX_PLAYERS; x++)
				{
					if(PlayerInfo[x][pLeader] == 1)
					{
					    GetPlayerName(playerid, sendername, sizeof(sendername));
	                    format(string, sizeof(string), "* %s nem fogadta el a szabályzatot.", sendername);
						SendClientMessage(x, COLOR_RED, string);
						urlap[playerid] = 0;
					}
				}
				return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/kick", true) == 0)
	{
	    if(IsPlayerConnected(playerid) && Admin(playerid, 1))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /kick [playerid/PartOfName] [reason]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(giveplayerid == INVALID_PLAYER_ID) return 1;
			
			if(IsPlayerNPC(giveplayerid)) SeeKick(playerid, "Ne rúgd már ki az NPC-t...");
			
			if(IsClint(giveplayerid) && giveplayerid != playerid)
			{
				SendFormatMessage(giveplayerid, COLOR_YELLOW, "<< %s ki akar rúgni >>", PlayerName(playerid));
				Msg(playerid, "Nincs ilyen játékos");
				return 1;
			}

			if(strcmp(PlayerName(giveplayerid), "Tamasi_Gabor", true) == 0)
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: Tamásit akarod kirúgni? Mekkora egy idióta vagy!", AdminName(playerid));
				Kick(playerid);
				return 1;
			}

			if(PlayerInfo[playerid][pAdmin] < PlayerInfo[giveplayerid][pAdmin] && PlayerInfo[giveplayerid][pAdmin] < 1337)
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: Nagyobb admint akarsz kirúgni? -.-", AdminName(playerid));
				Kick(playerid);
				return 1;
			}

			if(playerid == giveplayerid)
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: Ezaz! %s kirúgta magát! Hurrá!!", PlayerName(playerid));
				Kick(playerid);
				return 1;
			}

			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Használat: /kick [playerid/PartOfName] [reason]");
							return 1;
						}
						if(PlayerInfo[playerid][pAdmin] < PlayerInfo[giveplayerid][pAdmin])
						{
							SendClientMessage(playerid, COLOR_LIGHTRED, "[Gates]: Mekkora egy kretén vagy... admint akarsz kirugni? -.-''");
							return 1;
						}
						new year, month,day, ora, perc, mp;
						getdate(year, month, day);
						gettime(ora, perc, mp);
						format(string, sizeof(string), "[Gates]: %s ki lett rugva %s által | Oka: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year, ora, perc, mp);
						KickLog(string);

						format(string, sizeof(string), "[Gates]: %s ki lett rugva %s által | Oka: %s", giveplayer, AdminName(playerid), (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);

						Kick(giveplayerid);
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/skick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /skick [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(giveplayerid == INVALID_PLAYER_ID) return 1;
			
			if(IsPlayerNPC(giveplayerid)) SeeKick(playerid, "Ne kickeld már ki az NPC-t...");
			
			if(IsClint(giveplayerid) && giveplayerid != playerid)
			{
				SendFormatMessage(giveplayerid, COLOR_YELLOW, "<< %s ki akar rúgni /skickel >>", PlayerName(playerid));
				Msg(playerid, "Nincs ilyen játékos");
				return 1;
			}

			if(strcmp(PlayerName(giveplayerid), "Tamasi_Gabor", true) == 0)
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: Tamásit akarod kirúgni? Mekkora egy idióta vagy!", PlayerName(playerid));
				Kick(playerid);
				return 1;
			}

			
			if(PlayerInfo[playerid][pAdmin] < PlayerInfo[giveplayerid][pAdmin])
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: Mekkora egy kretén vagy... nagyobb admint akarsz kirugni? -.-''", PlayerName(playerid));
				Kick(playerid);
				return 1;
			}

			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        Kick(giveplayerid);
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "   %d nincs fent a szerveren.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/kickres", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] < 1)
			{
				return 1;
			}
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /kickres [level] [ammount]");
				return 1;
			}
			new level = strval(tmp);
			if(level < 0 || level > 5) { SendClientMessage(playerid, COLOR_GREY, "Szint: Csak 0-tól 5-ig!"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /kickres [level] [ammount]");
				return 1;
			}
			new ammount = strval(tmp);
			if(ammount < 1 || ammount > 10) { SendClientMessage(playerid, COLOR_GREY, "Játékosok: Csak 1-tõl 10-ig!"); return 1; }
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(PlayerInfo[i][pLevel] == level && PlayerInfo[i][pAdmin] < 1 && PlayerInfo[i][pDonateRank] < 1 && ammount > 0)
			        {
			            ammount -= 1;
						Kick(i);
			        }
			    }
			}
 		}
		return 1;
	}

	if(strcmp(cmd, "/warn", true) == 0 || strcmp(cmd, "/figyelmeztet", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /warn [playerid/PartOfName] [reason]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(giveplayerid == INVALID_PLAYER_ID) return 1;

			if(IsPlayerNPC(giveplayerid)) SeeKick(playerid, "Ne kickeld már ki az NPC-t...");

			if(IsClint(giveplayerid) && giveplayerid != playerid)
			{
				SendFormatMessage(giveplayerid, COLOR_YELLOW, "<< %s /warnolni akar >>", PlayerName(playerid));
				Msg(playerid, "Nincs ilyen játékos");
				return 1;
			}

			if(strcmp(PlayerName(giveplayerid), "Tamasi_Gabor", true) == 0)
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: Tamásit akarod kirúgni? Mekkora egy idióta vagy!", PlayerName(playerid));
				Kick(playerid);
				return 1;
			}
			if(PlayerInfo[playerid][pAdmin] < PlayerInfo[giveplayerid][pAdmin])
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: Mekkora egy kretén vagy... nagyobb admint akarsz kirugni? -.-''", PlayerName(playerid));
				Kick(playerid);
				return 1;
			}

			if(Admin(playerid, 1) || IsAS(playerid))
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Használat: /warn [playerid/PartOfName] [reason]");
							return 1;
						}
						format(string, sizeof(string), "Figyelmeztetted %s-t, Oka: %s", giveplayer, result);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "[Kick]%s figyelmeztetett | Oka: %s", sendername, result);
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "[Kick]%s figyelmeztette %s-t | Oka: %s", sendername, giveplayer, result);
						ABroadCast(COLOR_LIGHTRED, string, 0);
						PlayerInfo[giveplayerid][pKWarns] += 1;
						if(PlayerInfo[giveplayerid][pKWarns] >= 3)
						{
						    PlayerInfo[giveplayerid][pKWarns] = 0;
						    new year, month, day;
							getdate(year, month, day);
							format(string, sizeof(string), "[Gates]: %s kirúgva egy adminsegéd(%s) által | Oka: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
							KickLog(string);
							format(string, sizeof(string), "[Gates]: %s kirúgva egy admin(segéd) által | Oka: %s", giveplayer, result);
							SendClientMessageToAll(COLOR_LIGHTRED, string);
							Kick(giveplayerid);
							return 1;
						}
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d nincs fent a szerveren.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/bwarn", true) == 0)
	{
		if(!Admin(playerid, 1)) return 1;
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /bwarn [playerid/PartOfName] [reason]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(giveplayerid == INVALID_PLAYER_ID) return 1;

			if(IsPlayerNPC(giveplayerid)) SeeKick(playerid, "Ne bannold már ki az NPC-t...");

			if(IsClint(giveplayerid) && giveplayerid != playerid)
			{
				SendFormatMessage(giveplayerid, COLOR_YELLOW, "<< %s /bwarnolni akar >>", PlayerName(playerid));
				Msg(playerid, "Nincs ilyen játékos");
				return 1;
			}

			if(strcmp(PlayerName(giveplayerid), "Tamasi_Gabor", true) == 0)
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: Tamásit akarod bannolni? Mekkora egy idióta vagy!", PlayerName(playerid));
				Kick(playerid);
				return 1;
			}
			if(PlayerInfo[playerid][pAdmin] < PlayerInfo[giveplayerid][pAdmin])
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: Mekkora egy kretén, nagyobb admint akar bannolni...", PlayerName(playerid));
				Kick(playerid);
				return 1;
			}

			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Használat: /bwarn [playerid/PartOfName] [reason]");
							return 1;
						}
						PlayerInfo[giveplayerid][pWarns] += 1;
						format(string, sizeof(string), "Figyelmeztetted %s-t, Oka: %s", giveplayer, (result));
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "[Ban]%s figyelmeztette %s-t | Oka: %s", sendername, giveplayer, (result));
						ABroadCast(COLOR_LIGHTRED, string, 1);
						format(string, sizeof(string), "*Admin %s figyelmeztetett! Oka: %s", sendername, (result));
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
						if(PlayerInfo[giveplayerid][pWarns] >= 3)
						{
							PlayerInfo[giveplayerid][pWarns] = 0;
						    new year, month, day;
							getdate(year, month, day);
							format(string, sizeof(string), "[Gates]: %s bannolva %s által(5 figyelmeztetése megvolt) | Oka: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
							BanLog(string);
							format(string, sizeof(string), "[Gates]: %s bannolva %s által(5 figyelmeztetése megvolt) | Oka: %s", giveplayer, sendername, (result));
							SendClientMessageToAll(COLOR_LIGHTRED, string);
							format(string, sizeof(string), "5 figyelmeztetés - Ok: %s", (result));
							SeeBan(giveplayerid, 0, playerid, string);
							return 1;
						}
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d nincs fent a szerveren.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/sban", true) == 0)
	{
		if(!Admin(playerid, 1)) return 1;

     	if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /sban [playerid/PartOfName] [reason]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(giveplayerid == INVALID_PLAYER_ID) return 1;

			if(strcmp(PlayerName(giveplayerid), "Tamasi_Gabor", true) == 0)
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: Tamásit akarod bannolni? Mekkora egy idióta vagy!", PlayerName(playerid));
				Kick(playerid);
				return 1;
			}
			if(IsClint(giveplayerid))
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: haha -.-", PlayerName(playerid));
				Kick(playerid);
				return 1;
			}
			if(PlayerInfo[playerid][pAdmin] < PlayerInfo[giveplayerid][pAdmin])
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: Mekkora egy kretén, nagyobb admint akar bannolni...", PlayerName(playerid));
				Kick(playerid);
				return 1;
			}

			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Használat: /sban [playerid/PartOfName] [reason]");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "[Karakter+IP][Gates]: %s bannolva %s által | Oka: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						BanLog(string);
						format(string, sizeof(string), "[Gates]: [S]%s ki lett bannolva %s által | Oka: %s", giveplayer, AdminName(playerid), (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						Ban(giveplayerid);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d nincs fent a szerveren.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/ban", true) == 0)
	{
		if(!Admin(playerid, 2)) return 1;
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
				return SendClientMessage(playerid, COLOR_GRAD2, "Használat: /ban [játékos] [idõ - óra] [oka]");

			giveplayerid = ReturnUser(tmp);
			if(giveplayerid == INVALID_PLAYER_ID) return 1;
			
			if(IsPlayerNPC(giveplayerid)) SeeKick(playerid, "Ne bannold már ki az NPC-t...");
			
			if(IsClint(giveplayerid) && giveplayerid != playerid)
			{
				SendFormatMessage(giveplayerid, COLOR_YELLOW, "<< %s ki akar bannolni >>", PlayerName(playerid));
				Msg(playerid, "Nincs ilyen játékos");
				return 1;
			}
			
			if(PlayerInfo[playerid][pAdmin] < PlayerInfo[giveplayerid][pAdmin] && PlayerInfo[giveplayerid][pAdmin] < 1337)
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s kirúgva a rendszer által | Oka: Mekkora egy kretén, nagyobb admint akar bannolni...", PlayerName(playerid));
				Kick(playerid);
				return 1;
			}
			if(playerid == giveplayerid)
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s ki lett bannolva a rendszer által | Oka: Magadat bannolod? Akkor így is maradsz!", PlayerName(playerid));
				SeeBan(giveplayerid, 0, playerid, "/ban", false);
				return 1;
			}

			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						new ido;
						ido = strval(strtok(cmdtext, idx));

					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[128];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
							return SendClientMessage(playerid, COLOR_GRAD2, "Használat: /ban [játékos] [idõ - óra] [oka]");

						if(!IsNumeric(param[2]) && !egyezik(param[2], "örök") && !egyezik(param[2], "orok") || IsNumeric(param[2]) && strval(param[2]) <= 0)
							return SendClientMessage(playerid, COLOR_GRAD2, "Helyesen kell megadnod az idõtartamot! (Szám vagy \"örök\"!)");

						new meddig[128];
						if(ido < 24) Format(meddig, "%d órára", ido);
						else if(ido >= 24 && ido < (24*7))
						{
							if(ido % 24 == 0)
								Format(meddig, "%d napra", (ido / 24));
							else
								Format(meddig, "%d napra és %d órára", floatround(ido/24, floatround_floor), (ido%24));
						}
						else if(ido >= (24*7))// && ido < (24*7*4))
						{
							if(ido % (24*7) == 0)
								Format(meddig, "%d hétre", (ido/24/7));
							else
							{
								if(ido % 24 == 0)
									Format(meddig, "%d hétre és %d napra", floatround(ido/24/7, floatround_floor), floatround((ido/24)%7, floatround_floor));
								else
									Format(meddig, "%d hétre, %d napra, és %d órára", floatround(ido/24/7, floatround_floor), floatround((ido/24)%7, floatround_floor), (ido%24));
							}
						}

						ido = gettime() + (60*60*ido);

						if(egyezik(param[2], "örök") || egyezik(param[2], "orok"))
						{
							format(string, sizeof(string), "[Gates]: %s ki lett bannolva %s által | Oka: %s", giveplayer, AdminName(playerid), result); BanLog(string);
							SendClientMessageToAll(COLOR_LIGHTRED, string);
							ido = 0;
						}
						else
						{
							format(string, sizeof(string), "[Gates]: %s ki lett bannolva %s által %s", giveplayer, AdminName(playerid), meddig); BanLog(string);
							SendClientMessageToAll(COLOR_LIGHTRED, string);

							format(string, sizeof(string), "[Gates]: Oka: %s", (result)); BanLog(string);
							SendClientMessageToAll(COLOR_LIGHTRED, string);
						}

						SeeBan(giveplayerid, ido, playerid, (result));
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d nincs fent a szerveren.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[Freeze]------------------------------------------------
	if(strcmp(cmd, "/jégkocka", true) == 0 || strcmp(cmd, "/freeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /freeze [playerid/PartOfName]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
//			if(PlayerInfo[playa][pAdmin] > 0)
//			{
//				SendClientMessage(playerid, COLOR_GRAD2, "Admins can not be frozen");
//				return 1;
//			}
			if (PlayerInfo[playerid][pAdmin] >= 1 || IsAS(playerid))
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 0);
						format(string, sizeof(string), "AdmCmd: %s Freezes %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "[Gates]: %s lefagyasztotta %s-t",AdminName(playerid),giveplayer);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
		}
		return 1;
	}

//----------------------------------[unfreeze]------------------------------------------------
	if(strcmp(cmd, "/unfreeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /unfreeze [playerid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1 || IsAS(playerid))
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 1);
						format(string, sizeof(string), "AdmCmd: %s UnFroze %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "[Gates]: %s kiolvasztotta %s-t",AdminName(playerid),giveplayer);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
		}
		return 1;
	}

//----------------------------------[GMX]-----------------------------------------------

	if(strcmp(cmd, "/szerver", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Admin(playerid, 1338))
			{
				if(params != 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "Használata: /szerver [funkció] [idõ]");
					SendClientMessage(playerid, COLOR_GREY, "Funkciók: gmx, stop");
					return 1;
				}

				tmp = GetParam(cmdtext, 1);
				new ido = strval(param[2]);

				if(ido < 45 || ido > 300)
					return Msg(playerid, "Minimum 45mp, max 5perc másodperc!");

				if(strcmp(tmp, "gmx", true) == 0)
				{
					SendClientMessageToAll(COLOR_LIGHTRED, "<<< ======================================== >>>");
					SendFormatMessageToAll(COLOR_LIGHTBLUE, "<<< A szerver újraindul kb. %d másodperc mulva >>>", ido);
					SendClientMessageToAll(COLOR_LIGHTRED, "<<< ======================================== >>>");

					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						GameTextForPlayer(i, "~r~~h~================~n~Restart!~n~~r~~h~================", 3000, 5);
					}

					//SetTimer("Restart", ((ido*1000)+1000), false);
					SaveAccounts();
					
					UpdatePerSec[uHaz] = 20;
					UpdatePerSec[uKocsi] = 20;
					UpdatePerSec[uBiz] = 20;
					
					MySQLUpdater();
					resivan = 1;
				}
				
				else if(strcmp(tmp, "gmx-clint", true) == 0)
				{
					SendClientMessageToAll(COLOR_LIGHTRED, "<<< ======================================== >>>");
					SendFormatMessageToAll(COLOR_LIGHTBLUE, "<<< A szerver újraindul kb. %d másodperc mulva >>>", ido);
					SendClientMessageToAll(COLOR_LIGHTRED, "<<< ======================================== >>>");

					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						GameTextForPlayer(i, "~r~~h~================~n~Restart!~n~~r~~h~================", 3000, 5);
					}

					SetTimer("Restart", ((ido*1000)+1000), false);
					SaveAccounts();
					
					UpdatePerSec[uHaz] = 20;
					UpdatePerSec[uKocsi] = 20;
					UpdatePerSec[uBiz] = 20;
					
					MySQLUpdater();
					resivan = 1;
				}

				else if(strcmp(tmp, "stop", true) == 0)
				{
					if(!IsFoAdmin(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Ezt csak a szerver legfõbb adminjai használhatják.");

					SendClientMessageToAll(COLOR_LIGHTRED, "<<< ================================= >>>");
					SendFormatMessageToAll(COLOR_LIGHTBLUE, "<<< A szerver leáll %d másodperc mulva >>>", ido);
					SendClientMessageToAll(COLOR_LIGHTRED, "<<< ================================= >>>");

					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						GameTextForPlayer(i, "~r~~h~==============~n~Szerver leallas!~n~~r~~h~==============", 3000, 5);
					}

					SetTimer("Stop", ((ido*1000)+1000), false);
					SaveAccounts();
					
					UpdatePerSec[uHaz] = 20;
					UpdatePerSec[uKocsi] = 20;
					UpdatePerSec[uBiz] = 20;
					
					MySQLUpdater();
					resivan = 1;
				}

				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Használata: /szerver [funkció] [idõ]");
					SendClientMessage(playerid, COLOR_GREY, "Funkciók: gmx, stop");
				}
			}
		}
		return 1;
	}

	/*if(strcmp(cmd, "/gmx", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				SendClientMessageToAll(COLOR_LIGHTRED, "<<< ====================================================================================== >>>");
				SendClientMessageToAll(COLOR_LIGHTBLUE, "<<< A szerver újraindul 5 másodperc mulva! Nem kell kilépned! Az ujrainditási idõ 5-10sec között lesz >>>");
				SendClientMessageToAll(COLOR_LIGHTRED, "<<< ====================================================================================== >>>");

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					GameTextForPlayer(i, "~r~~h~===================~n~Restart!~n~~r~~h~===================", 5000, 5);
				}

				SetTimer("Restart", 6000, false);
				SaveAccounts();
				//GameModeExit();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod !");
			}
		}
		return 1;
	}*/

	if (strcmp(cmd, "/cam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /cam [1/2/3/4]");
				return 1;
			}
			Unspec[playerid][sCam] = strval(tmp);
			format(string, sizeof(string), "Switching to cam %d",Unspec[playerid][sCam]);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if (strcmp(cmd, "/admins", true) == 0)
    {
		if(!Admin(playerid, 1)) return 1;
		new count = 0, szint;
		SendClientMessage(playerid, COLOR_GREEN, "==========[Adminok]==========");
		foreach(Jatekosok, i)
		{
			if(Admin(i, 1) && !IsClint(i) && !HitmanDuty[i])
			{
				szint = PlayerInfo[i][pAdmin];
				if(szint >= 1 && szint <= 1337 || szint >= 1338 && Admin(playerid, 1337))
				{
					GetPlayerName(i, sendername, sizeof(sendername));

					if(PlayerInfo[playerid][pAdmin] >= 1337)
						format(string, sizeof(string), "[%i]%s (Szint %d)", i, AdminName(i), PlayerInfo[i][pAdmin]);
					else
						format(string, sizeof(string), "%s", AdminName(i));

					SendClientMessage(playerid,COLOR_LIGHTGREEN, string);
					count++;
				}
			}
		}
		if (count == 0) SendClientMessage(playerid,COLOR_GREY,"Nincs admin, de See RPG szeme mindent lát.");
		return 1;
    }

	if (strcmp(cmd, "/adminsegédek", true) == 0 || strcmp(cmd, "/adminsegedek", true) == 0)
    {
		if(!Admin(playerid, 1)) return 1;
		new count = 0;
		SendClientMessage(playerid, COLOR_GREEN, "=====[Adminsegédek]=====");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i))
			{
				if(IsAS(i))
				{
					GetPlayerName(i, sendername, sizeof(sendername));

					if(PlayerInfo[i][pAS] == 1)
						format(string, sizeof(string), "[%i]%s (Örök)", i, sendername);
					else if(Adminseged[i] == 1)
						format(string, sizeof(string), "[%i]%s (Ideiglenes)", i, sendername);

					SendClientMessage(playerid,COLOR_LIGHTGREEN, string);
					count++;
				}
			}
		}
		if (count == 0) SendClientMessage(playerid,COLOR_GREY,"Nincs adminsegéd.");
		SendClientMessage(playerid,COLOR_GREEN, "[_______________________]");
		return 1;
    }

//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/rules", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    SendClientMessage(playerid, COLOR_LIGHTRED,"A szabályzatot a weboldalon találod!");
		}
		return 1;
	}
	/*if(strcmp(cmd, "/amegyek1", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!Admin(playerid, 1338)) return 1;
			
			SendFormatMessageToAll(COLOR_LIGHTRED, "[Gates]: %s elrepült egy messzi messzi galaxisba( Kirúgta magát, majd visszajön ne hiányoljátok :) ).", AdminName(playerid));
			Kick(playerid);
		}
	}*/
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/help", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    /*SendClientMessage(playerid, COLOR_YELLOW,"*** Egyéb *** /pdhelp - /atmwithdraw - /atmdeposit - /kaszinóhelp - /bankrobhelp - /kockahelp ");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Ismeretlen cselekvések *** /l - /v /cv - /sv - /bv - /va - /ismmegpróbál");
		    SendClientMessage(playerid, COLOR_YELLOW,"*** FELHASZNÁLÓ *** /rules /login /stats /upgrade");
			SendClientMessage(playerid, COLOR_YELLOW,"*** TUDNIVALÓ *** /pay /charity /time /buy /unrentcar /givekey /switchkey /id /drink /music /showlicenses /clothes");
			SendClientMessage(playerid, COLOR_YELLOW,"*** TUDNIVALÓ *** /resetupgrades(100k) /buyweapon /lock /skill /portable /licenses /lotto /stopani");
			SendClientMessage(playerid, COLOR_YELLOW,"*** TUDNIVALÓ *** /report /cancel /accept /eject /usedrugs /contract /fill /fillcar /clear /service /families");
	  		SendClientMessage(playerid, COLOR_YELLOW,"*** TÁRSALGÁS *** (/w)hisper (/o)oc (/s)hout (/c)lose (/l)ocal (/b) (/ad)vertise (/f)amily /me /togooc /tognews /togradio /togwhisper /fuel");
			SendClientMessage(playerid, COLOR_YELLOW,"*** BANK *** /balance /withdraw /deposit /transfer Rablás: /entersafe /exitsafe /rob /leugrás /felmászás");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Egyéb *** /megpróbál ");*/
			SendClientMessage(playerid, COLOR_YELLOW,"Vásárlás: /buy /buyweapon | Adminnak írás: /report /ü  ");
			SendClientMessage(playerid, COLOR_YELLOW,"Felhasználói parancsok *** /login /stats /zsebem /jelszovaltas");
			SendClientMessage(playerid, COLOR_YELLOW,"Ház parancsok: /open /setrent /setrentable /házszéf /berak /kivesz");
			SendClientMessage(playerid, COLOR_YELLOW,"Tankolás: /fill /fillcar /get fuel | Bank: /rob /bankszámla");
			SendClientMessage(playerid, COLOR_YELLOW,"Cselekvések kifejezõi: /me /va /do /megpróbál | Kommunikáció: /w /o /s /c /l /b ");
			SendClientMessage(playerid, COLOR_YELLOW,"Egyéb: /v /átad /f /eldob /accept /cancel /pay /pays /nyit /zar /enter /exit");
			SendClientMessage(playerid, COLOR_YELLOW, "Egyéb: /enginehelp /cellphonehelp /househelp /renthelp /businesshelp /leaderhelp /fishhelp /cookhelp /irchelp");
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"*** OTHER *** /enginehelp /cellphonehelp /househelp /renthelp /businesshelp /leaderhelp /fishhelp /cookhelp /irchelp");

			if(AMT(playerid, MUNKA_DETEKTIV))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Detektív) *** /find /adat");

		    if(AMT(playerid, MUNKA_UGYVED))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Ügyvéd) *** /free");

		    if(AMT(playerid, MUNKA_PROSTI))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Prostituált) *** /sex");

		    if(AMT(playerid, MUNKA_DROG))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Drogkereskedõ) *** /szed /készít");

		    if(AMT(playerid, MUNKA_AUTOTOLVAJ))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(AutóTolvaj) *** /car /ellop");

		    if(AMT(playerid, MUNKA_SZERELO))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(AutóSzerelõ) *** /repair /szerelés");

		    if(AMT(playerid, MUNKA_TESTOR))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Testõr) *** /guard");

		    if(AMT(playerid, MUNKA_FEGYVER))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(FegyverKereskedõ) *** /felvesz /készít");

		    if(AMT(playerid, MUNKA_AUTOKERESKEDO))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(AutóKereskedõ) *** (/k)ereskedõ | Importálás: /call 12345");

		    if(AMT(playerid, MUNKA_BOXOLO))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Boxoló) *** /fight /boxstats");

		    if(AMT(playerid, MUNKA_UJSAGOS))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Újságos) *** /papers /bring /deliver");

		    if(AMT(playerid, MUNKA_UTTISZTITO))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Úttisztító) *** /úttisztítás");

            if(AMT(playerid, MUNKA_HACKER))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Hacker) *** /hack");
				
			if(AMT(playerid, MUNKA_PANCEL))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Páncélkészítõ) *** /készít");

			if(AMT(playerid, MUNKA_KAMIONOS))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Kamionos) *** /kamion /kr(kamionrádió)");

            if(AMT(playerid, MUNKA_FARMER))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Farmer) *** /farmerkedés");

			if(AMT(playerid, MUNKA_FUNYIRO))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Fûnyíró) *** /fûnyírás");

			if(AMT(playerid, MUNKA_EPITESZ))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Építész) *** /felújítás");
				
			if(AMT(playerid, MUNKA_KUKAS))
				SendClientMessage(playerid,COLOR_YELLOW2,"*** Munka(Kukás) *** /kukás");

			if(LMT(playerid, LMUNKA_MENTO) || LMT(playerid, LMUNKA_SFMENTO))
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** SAMD *** (/r)adio (/d)epartments /heal /duty");
			}
			if(IsHitman(playerid))
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Hitman *** /portable /(h)itman(r)ádió /méreg");
			}
   			if(IsDirector(playerid))
			{
       			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Hitman Director *** /hitman /hitmannév");
  			}
		}
		return 1;
	}
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/cellphonehelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if (PlayerInfo[playerid][pPnumber] > 0)
			{
				SendClientMessage(playerid, COLOR_WHITE,"*** Segítség ***");
				SendClientMessage(playerid, COLOR_GRAD1,"*** Telefon *** /call 'eg: /call 911' /sms (/p)ickup (/h)angup /number");
				SendClientMessage(playerid, COLOR_GRAD2,"Egyéb :/jobcommand /househelp /renthelp /businesshelp /leaderhelp /fishhelp /cookhelp /irchelp");
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE,"Telefont a 24/7-ben vehetsz.");
			}
		}
		return 1;
	}


	if(strcmp(cmd, "/househelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Ház segítség *** ");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Ház *** /enter /exit /open /home /heal /houseupgrade (/hu) /setrentable /tv (off/player)");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Ház *** /carupgrade /carcolor /evictall /towcar /fixcar /modcar /modst /modlr /setrent /evict /housewithdraw");
			SendClientMessage(playerid, COLOR_GRAD4,"*** Egyéb *** /cellphonehelp /jobcommand /renthelp /businesshelp /leaderhelp /fishhelp /cookhelp /irchelp");
		}
		return 1;
	}
	if(egyezik(cmd, "/pdhelp"))
	{
		Msg(playerid, "*** LSPD/SFPD/FBI(Szokásos1) *** /ruha - /m - /su - /mdc - /arrest - /duty - /frisk - /take");
		Msg(playerid, "*** LSPD/SFPD/FBI(Szokásos2) *** /ticket - /gov - /camera - /ram - /detain - /wanted");
		Msg(playerid, "*** LSPD/SFPD/FBI(Szokásos3) *** /tazer - /cuff - /visz - /felszerelések");
		Msg(playerid, "*** LSPD/SFPD/FBI(Erõsítés1) *** /erõsítés - /útonvagyok - /erõsítéslemond");
		Msg(playerid, "*** LSPD/SFPD/FBI(Erõsítés2) *** /pderõsítés - /pdútonvagyok - /pderõsítéslemond");
		Msg(playerid, "*** LSPD/SFPD/FBI(Beépített) *** /beépített - /beépítettvége ");
		Msg(playerid, "*** LSPD/SFPD/FBI/VPOP(Úttorlasz) *** /út lezár - /út megnyit ");
		return 1;
	}
	if(strcmp(cmd, "/lspdhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
				Msg(playerid, "Átírva: /pdhelp");
		}
		return 1;
	}
	if(strcmp(cmd, "/pizzakihordas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Elsõ lépés *** Szállj fel egy Pizza Kihordó robogóra(Pizzériánál van).");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Második lépés *** Nyomd meg a sima 2-es gombot, vagy a numpad 2-es gombot.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Harmadik lépés *** Ha nem indulna el nyomkodd töbször.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Negyedik lépés *** Menj a legközelebbi pizzériához, vedd fel a pizzát.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Ötödik lépés *** Szállítsd le a pizzát.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Hatodik lépés *** Folytasd ezt a folyamatot.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Bónusz lépés *** Minden 5-ik pizza után bónusz 500FT-at kapsz.");
			}
		return 1;
	}
	if(strcmp(cmd, "/csomagkihordas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Elsõ lépés *** Szállj fel egy Mountain Bike-ra(Városházánál van).");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Második lépés *** Nyomd meg a sima 2-es gombot, vagy a numpad 2-es gombot.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Harmadik lépés *** Ha nem indulna el nyomkodd töbször.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Negyedik lépés *** Helyben vedd fel a csomagot.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Ötödik lépés *** Szállítsd le.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Hatodik lépés *** Folytasd ezt a folyamatot.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Bónusz lépés *** Minden 5-ik csomag után bónusz 800FT-at kapsz.");
			}
		return 1;
	}
	if(strcmp(cmd, "/renthelp", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Bérléshez Segítségek ***");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Bérlés *** /unrent /enter /exit /lock /home");
			SendClientMessage(playerid, COLOR_GRAD4,"*** Egyéb *** /cellphonehelp /househelp /jobcommand  /businesshelp /leaderhelp /fishhelp /cookhelp /irchelp");
		}
		return 1;
	}
	if(strcmp(cmd, "/businesshelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Biznisz Segítségek ***");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Biznisz *** /bizinfo /bizfee /bizname /prodprice /extortion");
			SendClientMessage(playerid, COLOR_GRAD4,"*** Biznisz *** /enter /exit /open /sellbiz /bizbank /bizwithdraw");
			SendClientMessage(playerid, COLOR_GRAD4,"*** Egyéb *** /cellphonehelp /househelp /renthelp /jobcommand ");
		}
		return 1;
	}
	if(strcmp(cmd, "/leaderhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pLeader] >= 1)
		    {
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"*** Leader Segítségek ***");
				SendClientMessage(playerid, COLOR_GRAD3,"*** Leader *** /invite /uninvite /giverank");
				if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6)
				{
				    SendClientMessage(playerid, COLOR_GRAD3,"*** Leader *** /allowcreation /deletecreation /giveturf");
				}
				if(PlayerInfo[playerid][pLeader] == 7)
				{
					SendClientMessage(playerid, COLOR_GRAD3,"*** Leader *** /settax /givetax (Give some money to the Cops)");
				}
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Nem vezeted az egyik frakciót sem!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/irchelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE,"*** IRC Segítség *** ");
	        SendClientMessage(playerid, COLOR_WHITE,"*** IRC *** (/irc join [channelnr] vagy /irc join [channelnr] [password])  (/irc leave)");
			SendClientMessage(playerid, COLOR_WHITE,"*** IRC *** (/irc Password [channelnr])  (/irc NeedPass [channelnr])  (/irc Lock [channelnr])");
			SendClientMessage(playerid, COLOR_WHITE,"*** IRC *** (/irc Admins)  (/irc MOTD [motdtext])  (/irc status [channelnr])  (/i [text])");
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fishhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Horgászás*** ");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Segítség *** /fish (Megpróbálsz halat fogni)   /fishes (Megmutatja a kifogott halakat)");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Segítség *** /throwback (Elengeded a legutóbbi kifogott halat)   /throwbackall(Minden halat visszadobsz)");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Segítség *** /releasefish (Elengeded az egyik halat)");
		}
		return 1;
	}  
	if(strcmp(cmd, "/cookhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Fõzés *** ");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Segítség *** /fõzés (Kiírja a lehetõségeket)   /megfõzve (Kiírja miket fõztél meg)");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Segítség *** /enni (Megeszed a fõztöd)");
		}
		return 1;
	}
	/*if(strcmp(cmd, "/setage", true) == 0)
	{
	    if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			tmp = strtok(cmdtext, idx);
			giveplayerid = ReturnUser(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_RED, "/setage [playerid] [age]");
				return 1;
			}
			new age;
			tmp = strtok(cmdtext, idx);
			age = strval(tmp);
			PlayerInfo[playerid][pAge] = age;
		}
		return 1;
	}*/
	if(strcmp(cmd, "/ahelp", true) == 0 || strcmp(cmd, "/ah", true) == 0)
	{
	    if(!Admin(playerid, 1) && !IsAS(playerid)) return Msg(playerid, "Nem vagy Admin/Adminsegéd.");
		if(IsPlayerConnected(playerid))
	    {
			if(IsAS(playerid))
				SendClientMessage(playerid, COLOR_YELLOW, "Adminsegéd: /tv /asay(n) /warn /name /vá /cvá /gotokezdõ /kezdõk /enged [CSAK FELELÕSSÉGGEL!!]");
			
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
				Msg(playerid, "Admin(1) parancsok: /tv /tele /pacsi /bwarn /rendezvény /check /onduty /asegit /jail", false);
				Msg(playerid, "Admin(1) parancsok: /respawn /nevek /unfreeze /freeze /adminsegédek /crs /kivanitt /ajailosok ", false);
				Msg(playerid, "Admin(1) parancsok: /kórházban /asayn /kick /vá /set ", false);
			}

			if(PlayerInfo[playerid][pAdmin] >= 2)
				Msg(playerid, "Admin(2) parancsok: /ban /kban /iban /cnn /cnnn /apark ", false);
			
			if(PlayerInfo[playerid][pAdmin] >= 3)
				Msg(playerid, "Admin(3) parancsok: /goto /gethere /lenyomoz /noooc /ahegy /gotols /gotolv /gotosf /oldcar /getcar /gotocar /robbant /entercar /auncuff", false);
				
			if(PlayerInfo[playerid][pAdmin] >= 4)
				Msg(playerid, "Admin(4) parancsok: /forceskin /sethp /setarmor /adminadomany /atuning /alock /forceskin /noas", false);

			if(PlayerInfo[playerid][pAdmin] >= 5)
			    Msg(playerid, "Admin(5) parancsok: /setskin /tvengedely /biz /fixveh /bigears /helper", false);

			if(PlayerInfo[playerid][pAdmin] >= 1337)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"FõAdmin(1337):/fa /bigears /acr /acrmost /acr30 /weather /weatherall /makeleader /tod /startlotto");
				SendClientMessage(playerid, COLOR_YELLOW,"FõAdmin(1337):/deleteaccount /givegun /money /setstat, /zero");
			}
			
			if(PlayerInfo[playerid][pAdmin] == 1338)
				SendClientMessage(playerid, COLOR_ORANGE,"FõAdmin(1338): Olyan Super vagy Ron hogy nem látszol az adminlistán..(kyofej) [Szeretettel Somyxd]");

		}
		return 1;
	}
//----------------------------- Gravity -------------------------------------------
	if(strcmp(cmd,"/gravity",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Nincsbelepve(playerid)) return 1;
	        if(!Admin(playerid, 1337)) return 1;

	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
	            SendClientMessage(playerid, COLOR_WHITE, "Használat: /gravity [alapértelmezett: 0.008]");
	            return 1;
			}
			new Float:gravity = floatstr(tmp);
			SetGravity(gravity);
			format(string, sizeof(string), "* Gravitáció átállítva: %f",gravity);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		return 1;
	}
//------------------------------ Mission Making -----------------------------------
    if(strcmp(cmd,"/mk",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 4)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nem vagy Admin! !");
	            return 1;
	        }
	        new x_mk[256];
			x_mk = strtok(cmdtext, idx);
			if(!strlen(x_mk)) {
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /mk [name]");
				SendClientMessage(playerid, COLOR_GREY, "Available names: (/mk text [number] [text]) (/mk game [number] [text]) (/mk cp [number])");
				SendClientMessage(playerid, COLOR_GREY, "Available names: (/mk title [text]) (/mk reward [price]) (/mk usecp)");
				return 1;
			}
	        if(strcmp(x_mk,"text",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /mk text [number] [text]");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 18) { SendClientMessage(playerid, COLOR_GREY, "   Number can't be below 1 or above 18 !"); return 1; }
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/mk text [number] [text]");
					return 1;
				}
				switch(number)
				{
				    case 1:
				    {
						strmid(MissionInfo[mText1], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 1st Text Line of the Mission.");
				    }
				    case 2:
				    {
				        strmid(MissionInfo[mText2], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 2nd Text Line of the Mission.");
				    }
				    case 3:
				    {
				        strmid(MissionInfo[mText3], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 3rd Text Line of the Mission.");
				    }
				    case 4:
				    {
				        strmid(MissionInfo[mText4], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 4th Text Line of the Mission.");
				    }
				    case 5:
				    {
				        strmid(MissionInfo[mText5], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 5th Text Line of the Mission.");
				    }
				    case 6:
				    {
				        strmid(MissionInfo[mText6], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 6th Text Line of the Mission.");
				    }
				    case 7:
				    {
				        strmid(MissionInfo[mText7], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 7th Text Line of the Mission.");
				    }
				    case 8:
				    {
				        strmid(MissionInfo[mText8], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 8th Text Line of the Mission.");
				    }
				    case 9:
				    {
				        strmid(MissionInfo[mText9], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 9th Text Line of the Mission.");
				    }
				    case 10:
				    {
				        strmid(MissionInfo[mText10], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 10th Text Line of the Mission.");
				    }
				    case 11:
				    {
				        strmid(MissionInfo[mText11], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 11th Text Line of the Mission.");
				    }
				    case 12:
				    {
				        strmid(MissionInfo[mText12], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 12th Text Line of the Mission.");
				    }
				    case 13:
				    {
				        strmid(MissionInfo[mText13], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 13th Text Line of the Mission.");
				    }
				    case 14:
				    {
				        strmid(MissionInfo[mText14], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 14th Text Line of the Mission.");
				    }
				    case 15:
				    {
				        strmid(MissionInfo[mText15], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 15th Text Line of the Mission.");
				    }
				    case 16:
				    {
				        strmid(MissionInfo[mText16], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 16th Text Line of the Mission.");
				    }
				    case 17:
				    {
				        strmid(MissionInfo[mText17], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 17th Text Line of the Mission.");
				    }
				    case 18:
				    {
				        strmid(MissionInfo[mText18], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 18th Text Line of the Mission.");
				    }
				}
			}
			else if(strcmp(x_mk,"game",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /mk game [number] [text]");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Number can't be below 1 or above 6 !"); return 1; }
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/mk game [number] [text]");
					return 1;
				}
				switch(number)
				{
				    case 1:
				    {
				        strmid(MissionInfo[mGText1], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 1st GameText Line of the Mission.");
				    }
				    case 2:
				    {
				        strmid(MissionInfo[mGText2], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 2nd GameText Line of the Mission.");
				    }
				    case 3:
				    {
				        strmid(MissionInfo[mGText3], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 3rd GameText Line of the Mission.");
				    }
				    case 4:
				    {
				        strmid(MissionInfo[mGText4], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 4th GameText Line of the Mission.");
				    }
				    case 5:
				    {
				        strmid(MissionInfo[mGText5], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 5th GameText Line of the Mission.");
				    }
				    case 6:
				    {
				        strmid(MissionInfo[mGText6], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 6th GameText Line of the Mission.");
				    }
				}
			}
			else if(strcmp(x_mk,"cp",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /mk cp [number]");
					return 1;
				}
			    new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Number can't be below 1 or above 6 !"); return 1; }
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
                switch(number)
				{
				    case 1:
				    {
				        MissionInfo[mCP1][0] = X; MissionInfo[mCP1][1] = Y; MissionInfo[mCP1][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 1st Checkpoint of the Mission.");
				    }
				    case 2:
				    {
				        MissionInfo[mCP2][0] = X; MissionInfo[mCP2][1] = Y; MissionInfo[mCP2][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 2nd Checkpoint Line of the Mission.");
				    }
				    case 3:
				    {
				        MissionInfo[mCP3][0] = X; MissionInfo[mCP3][1] = Y; MissionInfo[mCP3][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 3rd Checkpoint Line of the Mission.");
				    }
				    case 4:
				    {
				        MissionInfo[mCP4][0] = X; MissionInfo[mCP4][1] = Y; MissionInfo[mCP4][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 4th Checkpoint Line of the Mission.");
				    }
				    case 5:
				    {
				        MissionInfo[mCP5][0] = X; MissionInfo[mCP5][1] = Y; MissionInfo[mCP5][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 5th Checkpoint Line of the Mission.");
				    }
				    case 6:
				    {
				        MissionInfo[mCP6][0] = X; MissionInfo[mCP6][1] = Y; MissionInfo[mCP6][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 6th Checkpoint Line of the Mission.");
				    }
				}
			}
			else if(strcmp(x_mk,"usecp",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /mk usecp [0/1]");
					return 1;
				}
			    new toggle = strval(tmp);
				if(toggle == 0 || toggle == 1) { }
				else { SendClientMessage(playerid, COLOR_GREY, "   CheckpointUse number must be 0 (OFF) or 1 (ON) !"); return 1; }
				MissionInfo[mToggle] = toggle;
				if(toggle == 0) { SendClientMessage(playerid, COLOR_WHITE, "You've set the Use of Checkpoints to 0 (OFF)."); }
				else if(toggle == 1) { SendClientMessage(playerid, COLOR_WHITE, "You've set the Use of Checkpoints to 1 (ON)."); }
			}
			else if(strcmp(x_mk,"title",true) == 0)
			{
			    new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: (/mk title [text]");
					return 1;
				}
				strmid(MissionInfo[mTitle], result, 0, strlen(result), 255);
		        SendClientMessage(playerid, COLOR_WHITE, "You've made the Title of the Mission.");
			}
			else if(strcmp(x_mk,"reward",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /mk reward [price]");
					return 1;
				}
			    new price = strval(tmp);
				if(price < 1 || price > 50000) { SendClientMessage(playerid, COLOR_GREY, "   Reward Price can't be below 1 or above 50000 !"); return 1; }
				MissionInfo[mReward] = price;
				SendClientMessage(playerid, COLOR_WHITE, "You've made the Reward Price for the Mission.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Invalid Mission Making name !");
				return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/savemission", true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /savemission [missionname]");
					return 1;
				}
				SaveMission(playerid,tmp);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/loadmission", true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /loadmission [missionname]");
					return 1;
				}
				LoadMission(playerid,tmp);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Ezt a parancsot nem használhatod!");
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/stopani",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        ClearAnimations(playerid);
	    }
	    return 1;
	}
	if(strcmp(cmd,"/skill",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Skill Információ __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /skill [szám]");
		  		SendClientMessage(playerid, COLOR_GREY, "| 1: Detective            7: Car Mechanic");
		  		SendClientMessage(playerid, COLOR_GREY, "| 2: Lawyer               8: Car Dealer");
		  		SendClientMessage(playerid, COLOR_GREY, "| 3: Whore                9: Boxer");
		  		SendClientMessage(playerid, COLOR_GREY, "| 4: Drugs Dealer		  10: Fishing");
		  		SendClientMessage(playerid, COLOR_GREY, "| 5: Car Jacker			11:Hacker");
		  		SendClientMessage(playerid, COLOR_GREY, "| 6: News Reporter");
				SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"1",true) == 0)//Detective
			{
			    new level = PlayerInfo[playerid][pDetSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Detective Skill Level = 1."); format(string, sizeof(string), "You need to find %d more people to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Detective Skill Level = 2."); format(string, sizeof(string), "You need to find %d more people to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Detective Skill Level = 3."); format(string, sizeof(string), "You need to find %d more people to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Detective Skill Level = 4."); format(string, sizeof(string), "You need to find %d more people to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your Detective Skill Level = 5."); }
			}
			else if(strcmp(x_nr,"2",true) == 0)//Lawyer
			{
			    new level = PlayerInfo[playerid][pLawSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 1."); format(string, sizeof(string), "You need to free %d more people to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 2."); format(string, sizeof(string), "You need to free %d more people to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 3."); format(string, sizeof(string), "You need to free %d more people to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 4."); format(string, sizeof(string), "You need to free %d more people to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 5."); }
			}
			else if(strcmp(x_nr,"3",true) == 0)//Whore
			{
			    new level = PlayerInfo[playerid][pSexSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Whore Skill Level = 1."); format(string, sizeof(string), "You need to have sex %d times more to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Whore Skill Level = 2."); format(string, sizeof(string), "You need to have sex %d times more to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Whore Skill Level = 3."); format(string, sizeof(string), "You need to have sex %d times more to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Whore Skill Level = 4."); format(string, sizeof(string), "You need to have sex %d times more to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your Whore Skill Level = 5."); }
			}
			else if(strcmp(x_nr,"4",true) == 0)//Drugs Dealer
			{
			    new level = PlayerInfo[playerid][pDrugsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 1."); format(string, sizeof(string), "You need to sell drugs %d times more to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 2."); format(string, sizeof(string), "You need to sell drugs %d times more to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 3."); format(string, sizeof(string), "You need to sell drugs %d times more to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 4."); format(string, sizeof(string), "You need to sell drugs %d times more to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 5."); }
			}
			else if(strcmp(x_nr,"5",true) == 0)//Car Jacker
			{
			    new level = PlayerInfo[playerid][pJackSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Jacker Skill Level = 1."); format(string, sizeof(string), "You need to drop %d cars more to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Jacker Skill Level = 2."); format(string, sizeof(string), "You need to drop %d cars more to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Jacker Skill Level = 3."); format(string, sizeof(string), "You need to drop %d cars more to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Jacker Skill Level = 4."); format(string, sizeof(string), "You need to drop %d cars more to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Jacker Skill Level = 5."); }
			}
			else if(strcmp(x_nr,"6",true) == 0)//News Reporter
			{
			    new level = PlayerInfo[playerid][pNewsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your New Reporter Skill Level = 1."); format(string, sizeof(string), "You need to use /news %d times more to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your New Reporter Skill Level = 2."); format(string, sizeof(string), "You need to use /news %d times people to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your New Reporter Skill Level = 3."); format(string, sizeof(string), "You need to use /news %d times people to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your New Reporter Skill Level = 4."); format(string, sizeof(string), "You need to use /news %d times people to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your New Reporter Skill Level = 5."); }
			}
			else if(strcmp(x_nr,"7",true) == 0)//Car Mechanic
			{
			    new level = PlayerInfo[playerid][pMechSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 1."); format(string, sizeof(string), "You need to fix/fill a car for %d times more to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 2."); format(string, sizeof(string), "You need to fix/fill a car for %d times people to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 3."); format(string, sizeof(string), "You need to fix/fill a car for %d times people to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 4."); format(string, sizeof(string), "You need to fix/fill a car for %d times people to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 5."); }
			}
			else if(strcmp(x_nr,"8",true) == 0)//Car Dealer
			{
			    new level = PlayerInfo[playerid][pCarSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Dealer Skill Level = 1."); format(string, sizeof(string), "You need to sell %d more cars to people to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Dealer Skill Level = 2."); format(string, sizeof(string), "You need to sell %d more cars to people to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Dealer Skill Level = 3."); format(string, sizeof(string), "You need to sell %d more cars to people to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Dealer Skill Level = 4."); format(string, sizeof(string), "You need to sell %d more cars to people to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Dealer Skill Level = 5."); }
			}
			else if(strcmp(x_nr,"9",true) == 0)//Boxer
			{
			    new level = PlayerInfo[playerid][pBoxSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 1."); format(string, sizeof(string), "You need to Win %d more Matches to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 2."); format(string, sizeof(string), "You need to Win %d more Matches to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 3."); format(string, sizeof(string), "You need to Win %d more Matches to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 4."); format(string, sizeof(string), "You need to Win %d more Matches to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 5."); }
			}
			else if(strcmp(x_nr,"10",true) == 0)//Fishing
			{
			    new level = PlayerInfo[playerid][pFishSkill];
				if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 1."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level < 250) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 2."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 250 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 251 && level < 500) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 3."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 500 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 501 && level < 1000) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 4."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 1000 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 1000) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 5."); }
			}
			else if(strcmp(x_nr,"11",true) == 0)//Hacker
			{
			    new level = PlayerInfo[playerid][pHackingSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Hacking Skill Level = 1."); format(string, sizeof(string), "You need to hack %d to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Hacking Skill Level = 2."); format(string, sizeof(string), "You need to hack %d to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Hacking Skill Level = 3."); format(string, sizeof(string), "You need to hack %d to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Hacking Skill Level = 4."); format(string, sizeof(string), "You need to hack %d to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your Hacking Skill Level = 5."); }
			}
			else if(strcmp(x_nr,"12",true) == 0)//Fishing
			{
			    new level = PlayerInfo[playerid][pRiasztoSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Alarm neutralization Skill Level = 1."); format(string, sizeof(string), "You need to neutralizate %d more alarm to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 250) { SendClientMessage(playerid, COLOR_YELLOW, "Your Alarm neutralization Skill Level = 2."); format(string, sizeof(string), "You need to neutralizate %d more alarm to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 251 && level <= 500) { SendClientMessage(playerid, COLOR_YELLOW, "Your Alarm neutralization Skill Level = 3."); format(string, sizeof(string), "You need to neutralizate %d more alarm to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 501 && level <= 999) { SendClientMessage(playerid, COLOR_YELLOW, "Your Alarm neutralization Skill Level = 4."); format(string, sizeof(string), "You need to neutralizate %d more alarm to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 1000) { SendClientMessage(playerid, COLOR_YELLOW, "Your Alarm neutralization Skill Level = 5."); }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid Skill Number !");
			    return 1;
			}
	    }
	    return 1;
	}

	if(egyezik(cmd, "/árak") || egyezik(cmd, "/arak"))
	{
		if(!IsPlayerConnected(playerid)) return 1;
		if(PlayerInfo[playerid][pLeader] != 16) return Msg(playerid, "Csak Oktató Leader.");
		if(params < 1)
		{
			Msg(playerid, "/árak [jogosítványnév] [Ár]");
			SendClientMessage(playerid,COLOR_LIGHTRED,"Jogosítványok: Autó, Motor, Kamion, Repülõ, Hajó, Fegyver, Horgász");
			SendFormatMessage(playerid,COLOR_LIGHTRED, "Auto Jogosítvány : %d Ft.", Autojogsi);
			SendFormatMessage(playerid,COLOR_LIGHTRED, "Motor Jogosítvány : %d Ft.", Motorjogsi);
			SendFormatMessage(playerid,COLOR_LIGHTRED,"Hajó Jogosítvány : %d Ft.", Hajojogsi);
			SendFormatMessage(playerid,COLOR_LIGHTRED, "Kamion Jogosítvány : %d Ft.", Kamionjogsi);
			SendFormatMessage(playerid,COLOR_LIGHTRED, "Repülõ Jogosítvány : %d Ft.", Repulojogsi);
			SendFormatMessage(playerid,COLOR_LIGHTRED, "Fegyverengedély : %d Ft.", Fegyverjogsi);
			SendFormatMessage(playerid,COLOR_LIGHTRED, "Horgászengedély : %d Ft.", Horgaszjogsi);
			return 1;
		}
		if(egyezik(param[1], "autó") || egyezik(param[1], "auto"))
		{
			if(params < 2) return Msg(playerid, "/árak Autó [ár]");
			new ar = strval(param[2]);
			if(ar < 1) return Msg(playerid, "NADEMICSINÁLSZ!!0.0")
			Autojogsi = ar;
			SendFormatMessage(playerid,COLOR_LIGHTRED, "Sikeresen átírtad a jogosítvány árát erre: %d Ft.", ar);
			
		}
		else if(egyezik(param[1], "motor"))
		{
			if(params < 2) return Msg(playerid, "/árak Motor [ár]");
			new ar = strval(param[2]);
			if(ar < 1) return Msg(playerid, "NADEMICSINÁLSZ!!0.0")
			Motorjogsi = ar;
			SendFormatMessage(playerid,COLOR_LIGHTRED, "Sikeresen átírtad a jogosítvány árát erre: %d Ft.", ar);
		}
		else if(egyezik(param[1], "kamion"))
		{
			if(params < 2) return Msg(playerid, "/árak Kamion [ár]");
			new ar = strval(param[2]);
			if(ar < 1) return Msg(playerid, "NADEMICSINÁLSZ!!0.0")
			Kamionjogsi = ar;
			SendFormatMessage(playerid,COLOR_LIGHTRED,"Sikeresen átírtad a jogosítvány árát erre: %d Ft.", ar);
		}
		else if(egyezik(param[1], "repülõ") || egyezik(param[1], "repulo") || egyezik(param[1], "repülö"))
		{
			if(params < 2) return Msg(playerid, "/árak Repülõ [ár]");
			new ar = strval(param[2]);
			if(ar < 1) return Msg(playerid, "NADEMICSINÁLSZ!!0.0")
			Repulojogsi = ar;
			SendFormatMessage(playerid,COLOR_LIGHTRED, "Sikeresen átírtad a jogosítvány árát erre: %d Ft.", ar);
		}
		else if(egyezik(param[1], "fegyver"))
		{
			if(params < 2) return Msg(playerid, "/árak Fegyver [ár]");
			new ar = strval(param[2]);
			if(ar < 1) return Msg(playerid, "NADEMICSINÁLSZ!!0.0")
			Fegyverjogsi = ar;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Sikeresen átírtad az engedély árát erre: %d Ft.", ar);
		}
		else if(egyezik(param[1], "horgász") || egyezik(param[1], "horgasz"))
		{
			if(params < 2) return Msg(playerid, "/árak Horgász [ár]");
			new ar = strval(param[2]);
			if(ar < 1) return Msg(playerid, "NADEMICSINÁLSZ!!0.0")
			Horgaszjogsi = ar;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Sikeresen átírtad a engedély árát erre: %d Ft.", ar);
		}
		else if(egyezik(param[1], "hajó") || egyezik(param[1], "hajo"))
		{
			if(params < 2) return Msg(playerid, "/árak Hajó [ár]");
			new ar = strval(param[2]);
			if(ar < 1) return Msg(playerid, "NADEMICSINÁLSZ!!0.0")
			Hajojogsi = ar;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Sikeresen átírtad a jogosítvány árát erre: %d Ft.", ar);
		}
		else
		{
			Msg(playerid, "Ilyen Jogosítványról még nem hallotam..ellenõrizd hogy jól irtad be!");
			return 1;
		}
		SaveStuff();
	}
		
		

	
	/*if(strcmp(cmd, "/givelicense", true) == 0) Kivéve SomoS által uj Oktató rendszer miatt.
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) 
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Használat: /givelicense [jogsinév] [playerid/PartOfName]");
				    SendClientMessage(playerid, COLOR_WHITE, "Nevek: Autó,Repülõ, Hajó, Horgász, Fegyver, Motor, Kamion");
					return 1;
				}
			    if(strcmp(x_nr,"driving",true) == 0 || strcmp(x_nr,"autó",true) == 0 || strcmp(x_nr,"auto",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /givelicense [jogsinév] [playerid/PartOfName]]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2) return Msg(playerid, "A játékos nincs a közelben.");
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if(PlayerInfo[playerid][pRank] >= 1)
							{
								GetPlayerName(playerid, sendername, sizeof(sendername));
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								format(string, sizeof(string), "* Átadtál egy Autó jogsit neki: %s.",giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Oktató %s átadott neked egy Autó/motor jogsit.",sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								PlayerInfo[giveplayerid][pCarLic] = 1;
								return 1;
							}
							else 
							{	
								Msg(playerid, "Minimum 1-es rang!");	
							}
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"flying",true) == 0 || strcmp(x_nr,"repülõ",true) == 0 || strcmp(x_nr,"repulo",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /givelicense [jogsinév] [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2) return Msg(playerid, "A játékos nincs a közelben.");
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if(PlayerInfo[playerid][pRank] >= 4)
							{
								GetPlayerName(playerid, sendername, sizeof(sendername));
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								format(string, sizeof(string), "* Átadtál egy Repülõ engedélyt neki: %s.",giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Oktató %s átadott neked egy Repülõ engedélyt.",sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								PlayerInfo[giveplayerid][pFlyLic] = 1;
								return 1;
							}
							else 
							{	
								Msg(playerid, "Minimum 4-es rang!");	
							}
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"sailing",true) == 0 || strcmp(x_nr,"hajó",true) == 0 || strcmp(x_nr,"hajo",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /givelicense [jogsinév] [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2) return Msg(playerid, "A játékos nincs a közelben.");
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if(PlayerInfo[playerid][pRank] >= 3)
							{
								GetPlayerName(playerid, sendername, sizeof(sendername));
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								format(string, sizeof(string), "* Átadtál egy hajó engedélyt neki: %s.",giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Oktató %s átadott neked egy hajó engedélyt.",sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								PlayerInfo[giveplayerid][pBoatLic] = 1;
								return 1;
							}
							else 
							{	
								Msg(playerid, "Minimum 3-as rang!");	
							}
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"fishing",true) == 0 || strcmp(x_nr,"horgász",true) == 0 || strcmp(x_nr,"horgasz",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /givelicense [jogsinév] [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2) return Msg(playerid, "A játékos nincs a közelben.");
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if(PlayerInfo[playerid][pRank] >= 1)
							{
								GetPlayerName(playerid, sendername, sizeof(sendername));
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								format(string, sizeof(string), "* Átadtál egy horgász engedélyt neki: %s..",giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Oktató %s átadott neked egy horgász engedélyt.",sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								PlayerInfo[giveplayerid][pFishLic] = 1;
								return 1;
							}
							else 
							{	
								Msg(playerid, "Minimum 1-es rang!");	
							}	
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"weapon",true) == 0 || strcmp(x_nr,"fegyver",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /givelicense weaponlicense [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2) return Msg(playerid, "A játékos nincs a közelben.");
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if(PlayerInfo[playerid][pRank] >= 5)
							{
								GetPlayerName(playerid, sendername, sizeof(sendername));
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								format(string, sizeof(string), "* Átadtál egy FegyverEngedélyt neki: %s.",giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Oktató %s átadott neked egy FegyverEngedélyt.",sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								PlayerInfo[giveplayerid][pGunLic] = 1;
								return 1;
							}
							else
							{
								Msg(playerid, "Minimum 5-ös rang!");
							}
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"motor",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /givelicense motor [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2) return Msg(playerid, "A játékos nincs a közelben.");
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if(PlayerInfo[playerid][pRank] >= 2)
							{
								GetPlayerName(playerid, sendername, sizeof(sendername));
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								format(string, sizeof(string), "* Átadtál egy motor jogsit neki: %s.",giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Oktató %s átadott neked egy motor jogsit.",sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								PlayerInfo[giveplayerid][pMotorJogsi] = 1;
								return 1;
							}
							else 
							{	
								Msg(playerid, "Minimum 2-es rang!");	
							}
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"kamion",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /givelicense kamion [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2) return Msg(playerid, "A játékos nincs a közelben.");
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if(PlayerInfo[playerid][pRank] >= 4)
							{
								GetPlayerName(playerid, sendername, sizeof(sendername));
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								format(string, sizeof(string), "* Átadtál egy kamion jogsit neki: %s.",giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Oktató %s átadott neked egy kamion jogsit.",sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								PlayerInfo[giveplayerid][pKamionJogsi] = 1;
								return 1;
							}
							else 
							{	
								Msg(playerid, "Minimum 4-es rang!");	
							}
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nem vagy oktató !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/startlesson", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Használat: /startlesson [playerid/PartOfName]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Elindítottad %s óráját.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Oktató %s elindította az órád.",sendername);
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        TakingLesson[giveplayerid] = 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nem vagy oktató !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/stoplesson", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Használat: /stoplesson [playerid/PartOfName]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(TakingLesson[giveplayerid] != 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Ennek a játékosnak nincs is elindítva !");
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Leállítóttad %s óráját.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Oktató %s leállítótta az órád.",sendername);
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        TakingLesson[giveplayerid] = 0;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nem vagy oktató !");
	            return 1;
	        }
	    }
	    return 1;
	}*/
	if(strcmp(cmd, "/families", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    new number = 0;
		        for(new i = 0; i < sizeof(FamilyInfo); i++)
		        {
		            number ++;
		            format(string, sizeof(string), "Family %d| Name: %s | Leader: %s | Members: %d.",number,FamilyInfo[i][FamilyName],FamilyInfo[i][FamilyLeader],FamilyInfo[i][FamilyMembers]);
		            SendClientMessage(playerid, COLOR_WHITE, string);
		        }
		        return 1;
	        }
	        new family = strval(tmp);
	        if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
			family -= 1;
			if(FamilyInfo[family][FamilyTaken] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr hasn't been Taken yet !");
			    return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(PlayerInfo[i][pFMember] == family)
			        {
			            GetPlayerName(i, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "* Family %d: %s | Rank: %d.",family,giveplayer,PlayerInfo[i][pRank]);
			            SendClientMessage(playerid, COLOR_GREY, string);
			        }
			    }
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/adjust", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] <= 3)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not in a Family !");
	            return 1;
	        }
	        new family = PlayerInfo[playerid][pFMember];
	        new wstring[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s", sendername);
			strmid(wstring, string, 0, strlen(string), 255);
	        if(strcmp(FamilyInfo[family][FamilyLeader],wstring, true ) == 0 )
			{
			    new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /adjust [name]");
					SendClientMessage(playerid, COLOR_WHITE, "Available Names: Name, MOTD, Color, Spawn, Invite, Uninvite, Rank");
					return 1;
				}
			    if(strcmp(x_nr,"name",true) == 0)
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Használat: /adjust Name [Family Name]");
						return 1;
					}
					strmid(FamilyInfo[family][FamilyName], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's Name.");
				}
				else if(strcmp(x_nr,"motd",true) == 0)
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Használat: /adjust MOTD [Family MOTD Text]");
						return 1;
					}
					strmid(FamilyInfo[family][FamilyMOTD], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's MOTD.");
				}
				else if(strcmp(x_nr,"color",true) == 0)
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Használat: /adjust color [Family Color Sample: 0xFFFFFFAA]");
						return 1;
					}
					if(offset < 10)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Wrong Color number, take a look at the Sample ! (0xFFFFFFAA)");
					    return 1;
					}
					strmid(FamilyInfo[family][FamilyMOTD], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's Color.");
				}
				else if(strcmp(x_nr,"spawn",true) == 0)
				{
				    GetPlayerPos(playerid, FamilyInfo[family][FamilySpawn][0],FamilyInfo[family][FamilySpawn][1],FamilyInfo[family][FamilySpawn][2]);
				    GetPlayerFacingAngle(playerid, FamilyInfo[family][FamilySpawn][3]);
				    FamilyInfo[family][FamilyInterior] = GetPlayerInterior(playerid);
				    SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's Spawnplace.");
				}
				else if(strcmp(x_nr,"invite",true) == 0)
				{
				    if(FamilyInfo[family][FamilyMembers] >= 10)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Your Family has reached the Maximum of 10 Family Members, can't invite more !");
				        return 1;
				    }
					tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /adjust invite [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != 255)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   That player is already in a Family !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), "* You've invited %s to join '%s'.",giveplayer, FamilyInfo[family][FamilyName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* %s has invited you to join '%s', you are now a Member of it.",sendername, FamilyInfo[family][FamilyName]);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFMember] = family;
					        PlayerInfo[giveplayerid][pRank] = 1;
					        FamilyInfo[family][FamilyMembers] ++;
					        SaveFamilies();
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs a szerveren!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"uninvite",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /adjust uninvite [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != family)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   That player is not in your Family !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), "* You've kicked %s out of your Family.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Family Leader %s has kicked your out of the Family.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFMember] = 255;
					        PlayerInfo[giveplayerid][pRank] = 0;
					        FamilyInfo[family][FamilyMembers] --;
					        SaveFamilies();
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs a szerveren!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"rank",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /adjust rank [RankNr] [playerid/PartOfName]");
					    return 1;
					}
					new rank = strval(tmp);
					if(rank < 1 || rank > 6) { SendClientMessage(playerid, COLOR_GREY, "   RankNr can't be below 1 or above 6 !"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /adjust rank [RankNr] [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != family)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   That player is not in your Family !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), "* You've given %s Rank %d.",giveplayer,rank);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Family Leader %s has given you Rank %d.",sendername,rank);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pRank] = rank;
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs a szerveren!");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Invalid Adjust name !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of your Family !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/giveturf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /giveturf [FamilyNr]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
				if(PlayerInfo[playerid][pLeader] == 5 && family > 5) { SendClientMessage(playerid, COLOR_GREY, "   Grove Street Leader can only take FamilyNr 1 till 5 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 6 && family < 6) { SendClientMessage(playerid, COLOR_GREY, "   Yakuza Leader can only take FamilyNr 6 till 10 !"); return 1; }
				family -= 1;
				if(FamilyInfo[family][FamilyTaken] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr hasn't been Taken yet !");
				    return 1;
				}
				new Found = 0;
				for(new j=0; j<sizeof(TurfInfo);j++)
				{
					if(IsPlayerInTurf(playerid,j))
					{
					    Found = 1;
         				format(string, sizeof(string), "%s", FamilyInfo[family][FamilyName]);
						strmid(TurfInfo[j][zOwner], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s", FamilyInfo[family][FamilyColor]);
						strmid(TurfInfo[j][zColor], string, 0, strlen(string), 255);
					}
				}
				if(Found)
				{
				    SaveTurfs();
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Turf adjusted.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not in a Turf !");
				}
			}
			else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of one of the Organisations !");
	            return 1;
	        }
		}
		return 1;
	}
	if(strcmp(cmd, "/allowcreation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /allowcreation [FamilyNr] [playerid/PartOfName]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
				if(PlayerInfo[playerid][pLeader] == 5 && family > 5) { SendClientMessage(playerid, COLOR_GREY, "   Grove Street Leader can only take FamilyNr 1 till 5 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 6 && family < 6) { SendClientMessage(playerid, COLOR_GREY, "   Yakuza Leader can only take FamilyNr 6 till 10 !"); return 1; }
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /allowcreation [FamilyNr] [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        family -= 1;
				        if(FamilyInfo[family][FamilyTaken] == 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr is already taken !" );
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* You've made %s the Leader of FamilyNr %d.",giveplayer,family);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        if(PlayerInfo[playerid][pLeader] == 5)
				        {
				            format(string, sizeof(string), "* Grove Street Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        else if(PlayerInfo[playerid][pLeader] == 6)
				        {
				            format(string, sizeof(string), "* Yakuza Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        format(string, sizeof(string), "%s",giveplayer);
				        strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 255);
				        FamilyInfo[family][FamilyMembers] ++;
				        FamilyInfo[family][FamilyTaken] = 1;
				        PlayerInfo[giveplayerid][pFMember] = family;
				        SaveFamilies();
				    }
				}
				else
				{
                    SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs a szerveren!");
                    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of one of the Organisations !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/deletecreation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /deletecreation [FamilyNr]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
				if(PlayerInfo[playerid][pLeader] == 5 && family > 5) { SendClientMessage(playerid, COLOR_GREY, "   Grove Street Leader can only take FamilyNr 1 till 5 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 6 && family < 6) { SendClientMessage(playerid, COLOR_GREY, "   Yakuza Leader can only take FamilyNr 6 till 10 !"); return 1; }
				family -= 1;
				if(FamilyInfo[family][FamilyTaken] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr isn't taken !");
				    return 1;
				}
				ClearFamily(family);
				SaveFamilies();
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of one of the Organisations !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/ram", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid) || Admin(playerid, 1337))
            {
	            new hazak = sizeof(HouseInfo);
                for(new i = 0; i < hazak; i++)
				{
					if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
					{
					    new HazBelso = HouseInfo[i][hBelso];
					    SetPlayerInterior(playerid,IntInfo[HazBelso][iNumber]);
						SetPlayerVirtualWorld(playerid, i);

						SetPlayerPos(playerid,IntInfo[HazBelso][iExitX],IntInfo[HazBelso][iExitY],IntInfo[HazBelso][iExitZ]);
						GameTextForPlayer(playerid, "~r~Betortel a hazba", 5000, 1);
						Cselekves(playerid, "betörte a ház ajtaját", 1);
						PlayerInfo[playerid][pLocal] = i;
						HouseInfo[i][hLock] = 0;
					}
				}
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "Nem vagy rendõr!");
			    return 1;
            }
		}
		return 1;
	}
	if(strcmp(cmd, "/camera", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                if(!PlayerToPoint(8.0,playerid,211.6222,1811.9565,21.8594))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not at the Area51 Security Panel !");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /camera [number 1 - 6]  (6 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Camera Number can't be below 1 or above 6 !"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 118.1011,1931.3221,22.5527); SetPlayerCameraLookAt(playerid, 98.9656,1920.9819,18.2180); }
				else if(number == 2) { SetPlayerCameraPos(playerid, 213.5340,1875.3075,17.6406); SetPlayerCameraLookAt(playerid, 213.8679,1884.1714,13.8945); }
				else if(number == 3) { SetPlayerCameraPos(playerid, 266.0640,1894.8856,38.6459); SetPlayerCameraLookAt(playerid, 224.0039,1887.1532,17.6406); }
				else if(number == 4) { SetPlayerCameraPos(playerid, 260.8112,1808.0175,38.6303); SetPlayerCameraLookAt(playerid, 227.5645,1818.4778,17.6406); }
				else if(number == 5) { SetPlayerCameraPos(playerid, 114.5196,1814.3483,38.6029); SetPlayerCameraLookAt(playerid, 123.6176,1846.4792,17.6549); }
				else if(number == 6)
				{
				    MedicBill[playerid] = 0;
					TogglePlayerControllable(playerid, 1);
					SetSpawnInfo(playerid, SPAWNID, PlayerInfo[playerid][pModel], Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not a Cop / Soldier !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/divorce",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMarried] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy házas !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /divorce [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Nem válhatsz el magadtól!"); return 1; }
					    new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "%s", giveplayer);
						strmid(wstring, string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedTo]);
						strmid(dstring, string, 0, strlen(string), 255);
						if(strcmp(dstring ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "* Elküldted a válási papírokat neki: %s.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s elküldte a válási papírokat. Ha el akarsz válni: /accept divorce.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        DivorceOffer[giveplayerid] = playerid;
					        return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Nem is ismered!");
						    return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs a közeledben !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs a szerveren!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/propose",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetMoney(playerid) < 100000)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   A házasság költségei 100000Ft !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMarried] > 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Már házas vagy !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /propose [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pMarried] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ez a játékos már házas !");
			            return 1;
			        }
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Nem veheted el magad!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Megkérdted %s kezét.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s megkérte a kezed (írd /accept marriage) hogy elfogadd.", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        ProposeOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs a közeledben !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs a szerveren!");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd,"/witness",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /witness [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Nem lehetsz a saját tanud!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Megkérted %s-t hogy legyen a tanud.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s megkért hogy legyél a tanuja (írd /accept witness) hogy elfogadd.", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        MarryWitnessOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Ez a játékos nincs melleted !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ez a játékos offline !");
			    return 1;
			}
	    }
	    return 1;
	}
	/*if(strcmp(cmd, "/bomba", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	   	{
			if(!IsHitman(playerid)) return 1;

			new kocsim = GetPlayerVehicleID(playerid);

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
				return SendClientMessage(playerid, COLOR_GREY, "Használható: /bomba [berak/robbant]");

			if(strcmp(tmp, "berak", true) == 0)
			{
					if(!IsPlayerInAnyVehicle(playerid)) return 1;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Bomba telepítve. Várd meg míg beszáll a célpont és elindul! Aztán '/bomba robbant'");
					hbomba[playerid] = kocsim;
					return 1;
			}
			else if(strcmp(tmp, "robbant", true) == 0)
			{
					if(hbomba[playerid] == 0) return 1;
					new kocsi = hbomba[playerid];
					new Float:x, Float:y, Float:z;
					GetVehiclePos(kocsi, x, y, z);
					CreateExplosion(x, y, z, 2, 500.0);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Bomba felrobbantva.");
					hbomba[playerid] = 0;
					return 1;
			}
			else
			{
					return 1;
			}
		}
		return 1;
	}*/
	if(strcmp(cmd,"/irc",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid,  COLOR_UJIRC, "Használat: (/irc join [channelnr] or /irc join [channelnr] [password])  (/irc Leave)  (/irc Admins)");
				SendClientMessage(playerid,  COLOR_UJIRC, "Használat: /irc [name] [channelnr]");
				SendClientMessage(playerid, COLOR_UJIRC, "Választható: MOTD, Password, NeedPass, Lock, Kick, Status");
				return 1;
			}
		    if(strcmp(x_nr,"join",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid,  COLOR_UJIRC, "Használat: /irc join [channelnr] or /irc join [channelnr] [password]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > sizeof(IRCInfo)) { SendClientMessage(playerid,  COLOR_UJIRC, "   Nincs ilyen IRC channel"); return 1; }
				channel -= 1;
			    if(IRCInfo[channel][iLock] == 0)
			    {
			        if(IRCInfo[channel][iNeedPass] == 0)
			        {
			            JoinChannelNr(playerid, channel);
				    }
				    else
				    {
				        tmp = strtok(cmdtext, idx);
				        if(!strlen(tmp))
						{
						    SendClientMessage(playerid,  COLOR_UJIRC, " Jelszó szükséges a csatlakozáshoz");
							SendClientMessage(playerid,  COLOR_UJIRC, "Használat: /irc join [channelnr] [password]");
							return 1;
						}
						JoinChannel(playerid,channel,tmp);
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "  Ez levan zárva, használj egy másikat");
				    return 1;
			    }
			}
			else if(strcmp(x_nr,"status",true) == 0)
			{
			    for(new i = 0; i < sizeof(IRCInfo); i++)
			    {
			        format(string, sizeof(string), "Channel %d: %d játékos kapcsolódva.",i + 1, IRCInfo[i][iPlayers]);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"password",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Használat: /irc password [channelnr] [password]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > sizeof(IRCInfo)) { SendClientMessage(playerid, COLOR_GREY, " Nincs ilyen IRC channel"); return 1; }
				channel -= 1;

				if(strcmp(IRCInfo[channel][iAdmin], PlayerName(playerid), true ) == 0 || Admin(playerid, 3))
				{
				    tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /irc password [channelnr] [password]");
					    return 1;
					}
					strmid(IRCInfo[channel][iPassword], tmp, 0, strlen(tmp), 255);
					format(string, sizeof(string), " Átírtad az IRC channel jelszavát erre: %s",IRCInfo[channel][iPassword]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy IRC admin");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"needpass",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Használat: /irc needpass [channelnr]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > sizeof(IRCInfo)) { SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen IRC channel"); return 1; }
				channel -= 1;

				if(strcmp(IRCInfo[channel][iAdmin], PlayerName(playerid), true ) == 0 || Admin(playerid, 3))
				{
				    if(IRCInfo[channel][iNeedPass] != 0)
				    {
				        IRCInfo[channel][iNeedPass] = 0;
				        SendClientMessage(playerid, COLOR_YELLOW, " A szobához már nem kell jelszó");
				    }
					else
					{
					    IRCInfo[channel][iNeedPass] = 1;
						SendClientMessage(playerid, COLOR_YELLOW, " A szobához mostmár jelszó kellesz");
					}
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy IRC admin");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"lock",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Használat: /irc lock [channelnr]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > sizeof(IRCInfo)) { SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen IRC channel"); return 1; }
				channel -= 1;

				if(strcmp(IRCInfo[channel][iAdmin], PlayerName(playerid), true ) == 0 || Admin(playerid, 3))
				{
				    if(IRCInfo[channel][iLock] != 0)
				    {
				        IRCInfo[channel][iLock] = 0;
				        SendClientMessage(playerid, COLOR_YELLOW, " Feloldottad az IRC channelt");
				    }
					else
					{
					    IRCInfo[channel][iLock] = 1;
						SendClientMessage(playerid, COLOR_YELLOW, " Lezártad az IRC channelt");
					}
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy IRC admin");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"motd",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Használat: /irc motd [channelnr] [motdtext]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > sizeof(IRCInfo)) { SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen IRC channel"); return 1; }
				channel -= 1;

				if(strcmp(IRCInfo[channel][iAdmin], PlayerName(playerid), true ) == 0 || Admin(playerid, 3))
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Használat: /irc motd [motdtext]");
						return 1;
					}
					strmid(IRCInfo[channel][iMOTD], result, 0, strlen(result), 255);
					SendClientMessage(playerid, COLOR_YELLOW, " Átirtad az IRC üdvõzlõüzenetet");
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy IRC admin");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"leave",true) == 0)
			{
			    if(PlayersChannel[playerid] < 999)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        format(string, sizeof(string), "* %s kilépett a channelrõl.", sendername);
			        SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
			        IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
			        PlayersChannel[playerid] = 999;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Nem vagy IRC channelen!");
			        return 1;
			    }
			}
			else if(strcmp(x_nr,"admins",true) == 0)
			{
				for(new i = 0; i < sizeof(IRCInfo); i++)
			    {
				    format(string, sizeof(string), "Channel %d: %s.", i + 1, IRCInfo[i][iAdmin]);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"kick",true) == 0)
			{
			    if(PlayersChannel[playerid] == 999)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Nem vagy IRC channelen!");
			        return 1;
			    }

				if(strcmp(IRCInfo[PlayersChannel[playerid]][iAdmin], PlayerName(playerid), true ) == 0 || Admin(playerid, 3))
				{
				    tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /irc kick [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayersChannel[giveplayerid] == PlayersChannel[playerid])
					        {
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "* Kirúgtad az IRC channelrõl: %s",giveplayer);
					            SendClientMessage(playerid, COLOR_YELLOW, string);
					            format(string, sizeof(string), "* Kirúgtak az IRC channelrõl: %s.",sendername);
					            SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					            format(string, sizeof(string), "* %s kilépett (Kicked).", giveplayer);
						        SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
					            IRCInfo[PlayersChannel[giveplayerid]][iPlayers] -= 1;
					            PlayersChannel[giveplayerid] = 999;
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "  A játékos nincs az IRC channelen");
							    return 1;
					        }
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos");
					    return 1;
					}
                }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy IRC admin!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Hibás IRC channel!");
			    return 1;
			}
		}
		return 1;
 	}
 	if(strcmp(cmd,"/i",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayersChannel[playerid] == 999)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nem vagy IRC szobában!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Nem beszélhetsz, néma vagy!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /i [irc chat]");
				return 1;
			}
			format(string, sizeof(string), "** [IRC-Rádió]%s: %s. **", sendername, result);
			SendIRCMessage(PlayersChannel[playerid],  COLOR_UJIRC, string);
			format(string, sizeof(string), "[RÁDIÓ]Valaki mondja: %s", result);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    }
	    return 1;
	}

	if(strcmp(cmd,"/mission",true)==0)
    {
        if(IsPlayerConnected(playerid))
        {
			if(!PlayerToPoint(3.0,playerid,1381.0413,-1088.8511,27.3906))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not at the Bill Board !");
			    return 1;
			}
			if(MissionPlayable == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No Mission has been Activated !");
			    return 1;
			}
			if(PlayerInfo[playerid][pMissionNr] == MissionPlayable)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You've already completed the Active Mission !");
			    return 1;
			}
			RingTone[playerid] = 20;
			PlayerOnMission[playerid] = PlayMission[kNumber];
			MissionCheckpoint[playerid] = 1;
			format(string, sizeof(string), "~w~Mission started: ~n~~r~%s", PlayMission[kTitle]);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "%s", PlayMission[kText1]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "%s", PlayMission[kText2]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "%s", PlayMission[kText3]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			if(PlayMission[kToggle] == 1)
			{
				SetPlayerCheckpoint(playerid, PlayMission[kCP1][0], PlayMission[kCP1][1], PlayMission[kCP1][2], 8);
			}
        }
        return 1;
    }
	if(strcmp(cmd,"/settax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(!LMT(playerid, LMUNKA_ONKORMANYZAT) && !Admin(playerid, 1337))
				return SendClientMessage(playerid, COLOR_GREY, "Nem vagy (Al)Elnök!");

	        if(!Munkarang(playerid, 5))
				return SendClientMessage(playerid, COLOR_GREY, "Minimum Alelnöki rang szükséges!");

	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /settax [összeg]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 50000) { SendClientMessage(playerid, COLOR_GREY, "Minimum 1, és max 50000 lehet!"); return 1; }
			//SaveStuff();
			format(string, sizeof(string), "* Az új adó mostmár %dFt! (A régi %dFt volt)", moneys, TaxValue);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			TaxValue = moneys;
	    }
	    return 1;
	}
	/*if(egyezik(cmd, "/fbi"))
	{
		if(!LMT(playerid, LMUNKA_FBI)) return Msg(playerid, "Nem vagy az FBI Tagja!");
		if(params < 1) return Msg(playerid, "/FBI [Széf]");
		if(egyezik(param[1], "Széf") || egyezik(param[1], "Szef"))
		{
			if(params < 2) return Msg(playerid, "/fbi széf [Megnéz / Kivesz / Berak]");
			if(egyezik(param[2], "megnéz") || egyezik(param[2], "megnez"))
			{
				if(!PlayerToPoint(3, playerid, 297.6240,186.0050,1007.1719)) return Msg(playerid, "Nem vagy a széfnél!");
				if(FBISzef > 0) 
				{
					SendFormatMessage(playerid, COLOR_LIGHTRED, "%dFt található a széfbe.", FBISzef);
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Nem található pénz a széfbe!");
				}
				Cselekves(playerid, "megnézte a széf tartalmát...");
			}
			if(egyezik(param[2], "kivesz"))
			{
				if(!PlayerToPoint(3, playerid, 297.6240,186.0050,1007.1719)) return Msg(playerid, "Nem vagy a széfnél!");
				if(params < 3) return Msg(playerid, "/fbi széf kivesz [Összeg]");
				if(!Munkarang(playerid, 4)) return Msg(playerid, "Minimum 4-as rangra van szükséged hogy kivehess...");
				new osszeg = strval(param[3]);
				if(FBISzef < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nem található pénz a széfbe!");
				if(FBISzef - osszeg < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nem található enyi pénz a széfbe!");
				FBISzef -= osszeg;
				GiveMoney(playerid, osszeg);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Kivettél %dFt-ot, maradt %dFt.", osszeg, FBISzef);
				Cselekves(playerid, "pénzt vett ki a széfbõl...");
			}
			if(egyezik(param[2], "berak"))
			{
				if(!PlayerToPoint(3, playerid, 297.6240,186.0050,1007.1719)) return Msg(playerid, "Nem vagy a széfnél!");
				if(params < 3) return Msg(playerid, "/fbi 	 berak [Összeg]");
				new osszeg = strval(param[3]);
				if(GetMoney(playerid) < osszeg) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs nálad enyi pénz!");
				FBISzef += osszeg;
				GiveMoney(playerid, -osszeg);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Beraktál %dFt-ot, Új Összeg: %dFt.", osszeg, FBISzef);
				Cselekves(playerid, "pénzt rakott a széfbe...");
			}
			if(egyezik(param[2], "debug"))
			{
				if(!IsScripter(playerid)) return 1;
				if(params < 3) return Msg(playerid, "/fbi széf debug [Összeg]");
				new osszeg = strval(param[3]);
				FBISzef = osszeg;
				SendFormatMessage(playerid, COLOR_YELLOW, "* FBI Széf összege átírva erre: %dFt", osszeg);
			}
		}
	}*/
	if(strcmp(cmd,"/kassza",true)==0)
    {
		if(playerid != INVALID_PLAYER_ID) return 1;
        if(IsPlayerConnected(playerid))
	    {
	        if(LMT(playerid, LMUNKA_ONKORMANYZAT) && Munkarang(playerid, 6) || Admin(playerid, 1337))
	        {
		        if(Tax < 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "A kasszában nincs pénz!");
					return 1;
				}
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "A kasszában %dFt van!", Tax);
			}
			else
			    return SendClientMessage(playerid, COLOR_GREY, "Nem vagy Elnök!");
		}
		return 1;
	}

	if(strcmp(cmd,"/szefbe",true)==0)
    {
		if(playerid != INVALID_PLAYER_ID) return 1;
        if(IsPlayerConnected(playerid))
	    {
	        if(LMT(playerid, LMUNKA_ONKORMANYZAT) && Munkarang(playerid, 6) || Admin(playerid, 1337))
	        {
	            new penze = GetMoney(playerid);
		        if(penze < 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nincs pénzed!");
					return 1;
				}
				tmp = strtok(cmdtext, idx);

				if(!strlen(tmp))
				    return SendClientMessage(playerid, COLOR_GREY, "Használata: /szefbe [pénz]");

				new penz = strval(tmp);

				if(penz > penze)
				{
                    SendFormatMessage(playerid, COLOR_GREY, "Nincs %dFt-od!", penz);
                    return 1;
    			}

				GiveMoney(playerid, -penz);
				Tax += penz;

				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Beraktál a kasszába %dFt-t! %dFt van benne!", penz, Tax);
			}
			else
			    return SendClientMessage(playerid, COLOR_GREY, "Nem vagy Elnök!");
		}
		return 1;
	}

	if(strcmp(cmd,"/szefki",true)==0)
    {
		if(playerid != INVALID_PLAYER_ID) return 1;
        if(IsPlayerConnected(playerid))
	    {
			/*if(playerid != NINCS)
				return Msg(playerid, "A-a! Több visszaélés nincs!");*/

	        if(LMT(playerid, LMUNKA_ONKORMANYZAT) && Munkarang(playerid, 6) || Admin(playerid, 1337))
	        {
		        if(Tax < 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "A kasszában nincs pénz!");
					return 1;
				}
				tmp = strtok(cmdtext, idx);

				if(!strlen(tmp))
				    return SendClientMessage(playerid, COLOR_GREY, "Használata: /szefki [pénz]");

				new penz = strval(tmp);

				if(penz > Tax)
				{
                    SendFormatMessage(playerid, COLOR_GREY, "A kasszában csak %dFt van!", Tax);
                    return 1;
    			}

				GiveMoney(playerid, penz);
				Tax -= penz;

				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Kivettél a kasszából %dFt-t! Még %dFt van benne!", penz, Tax);
			}
			else
			    return SendClientMessage(playerid, COLOR_GREY, "Nem vagy Elnök!");
		}
		return 1;
	}

	if(strcmp(cmd,"/givetax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(!LMT(playerid, LMUNKA_ONKORMANYZAT) || !Munkarang(playerid, 6))
	        {
				if(!Admin(playerid, 1337))
				{
					SendClientMessage(playerid, COLOR_GREY, "Nem vagy az Elnök!");
					return 1;
				}
	        }
	        if(FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "A kasszában nincs pénz!");
				return 1;
			}

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Használata: /givetax [leaderesmeló] [pénz]");
			    SendClientMessage(playerid, COLOR_GREY, "Leaderesmelók: Rendõrség, Mentõ, Taxi, Riporter, Katona, Civil, FBI, Oktató, NAV, SWAT, Kisebbség");
			    SendFormatMessage(playerid, COLOR_GREY, "Kassza: %dFt", FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz]);
			    return 1;
			}
			new csapat[256];
			csapat = tmp;

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Használata: /givetax [leaderesmeló] [pénz]");
			    SendClientMessage(playerid, COLOR_GREY, "Leaderesmelók: Rendõrség, Mentõ, Taxi, Riporter, Katona, Civil, FBI, Oktató, NAV, SWAT, Kisebbség");
			    SendFormatMessage(playerid, COLOR_GREY, "Kassza: %dFt", FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz]);
			    return 1;
			}
			new penz = strval(tmp);
			if(penz > FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz])
			{
			    SendFormatMessage(playerid, COLOR_GREY, "A kasszában nincs %dFt, csak %dFt!", penz, FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz]);
			    return 1;
			}

   			if(strcmp(csapat, "Rendõrség", true) == 0)
			{
				new Tagok = 0;
				foreach(Jatekosok, i)
				{
		        	if(LMT(i, LMUNKA_SCPD))
			            Tagok += 1;
				}

				if(Tagok >= 1)
				{
			    	foreach(Jatekosok, i)
					{
				        if(LMT(i, LMUNKA_SCPD))
				        {
			    	        format(string, sizeof(string), "* A nagylelkû (al)elnök átutalta az adók egy részét a rendõrség számára! %dFt került a széfbe!", penz);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
				        }
					}
					
					FrakcioInfo[LMUNKA_SCPD][fPenz] += penz;
					FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] -= penz;
					SendFormatMessage(playerid, COLOR_GREY, " Átutaltál %dFt-ot a rendõrök számára.", penz);
					//SaveStuff();
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Nincs fennt rendõr!");
					return 1;
				}
			}
			
			if(strcmp(csapat, "Kisebbség", true) == 0)
			{
				new Tagok = 0;
				foreach(Jatekosok, i)
				{
					if(LMT(i, LMUNKA_BALLAS) || LMT(i, LMUNKA_CAMORRA) || LMT(i, LMUNKA_YAKUZA) || LMT(i, LMUNKA_VAGOS) || LMT(i, LMUNKA_SAMAFIA) || LMT(i, LMUNKA_AZTEC) || LMT(i, LMUNKA_GSF))
						Tagok += 1;
				}
					

				if(Tagok >= 1)
				{
				    new price = floatround(penz / Tagok);
			    	foreach(Jatekosok, i)
					{
					    if(IsPlayerConnected(i))
						{
							if(LMT(i, LMUNKA_BALLAS) || LMT(i, LMUNKA_CAMORRA) || LMT(i, LMUNKA_YAKUZA) || LMT(i, LMUNKA_HITMAN) || LMT(i, LMUNKA_VAGOS) || LMT(i, LMUNKA_SAMAFIA) || LMT(i, LMUNKA_AZTEC) || LMT(i, LMUNKA_GSF))
							{
				    	        format(string, sizeof(string), "* A nagylelkû (al)elnök segélyt küldött a kisebbség számára. A részed: %d",price);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
								GiveMoney(i, price);
								FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] -= price;
					        }
					    }
					}
					SendFormatMessage(playerid, COLOR_GREY, " Átutaltál %dFt-t a kisebbség számára. %d kisebbségi van, fejenként %dFt-t kaptak!", penz, Tagok, price);
					//SaveStuff();
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Nincs fennt Bandás/Mafiás!");
					return 1;
				}
			}

   			if(strcmp(csapat, "FBI", true) == 0)
			{
				new Tagok = 0;
				foreach(Jatekosok, i)
				{
		        	if(LMT(i, LMUNKA_FBI))
			            Tagok += 1;
				}

				if(Tagok >= 1)
				{
			    	foreach(Jatekosok, i)
					{
				        if(LMT(i, LMUNKA_FBI))
				        {
			    	        format(string, sizeof(string), "* A nagylelkû (al)elnök átutalta az adók egy részét az FBI számára! %dFt került a széfbe!", penz);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
				        }
					}
					
					FrakcioInfo[LMUNKA_FBI][fPenz] += penz;
					FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] -= penz;
					SendFormatMessage(playerid, COLOR_GREY, " Átutaltál %dFt-ot az FBI számára.", penz);
					//SaveStuff();
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Nincs fennt FBIos!");
					return 1;
				}
			}

   			if(strcmp(csapat, "SWAT", true) == 0)
			{
				new Tagok = 0;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
			    	{
			        	if(PlayerInfo[i][pSwattag] == 1)
				        {
				            Tagok += 1;
				        }
				    }
				}

				if(Tagok >= 1)
				{
				    new price = floatround(penz / Tagok);
			    	for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(IsPlayerConnected(i))
					    {
					        if(PlayerInfo[i][pSwattag] == 1)
					        {
				    	        format(string, sizeof(string), "* A nagylelkû (al)elnök átutalta az adók egy részét a SWAT számára. A részed: %d",price);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
								GiveMoney(i, price);
								FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] -= price;
					        }
					    }
					}
					SendFormatMessage(playerid, COLOR_GREY, " Átutaltál %dFt-t a SWAT számára. %d  SWAT-os van, fejenként %dFt-t kaptak!", penz, Tagok, price);
					//SaveStuff();
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Nincs fennt SWAT-os!");
					return 1;
				}
			}

   			if(strcmp(csapat, "NAV", true) == 0)
			{
				new Tagok = 0;
				foreach(Jatekosok, i)
				{
		        	if(LMT(i, LMUNKA_VPOP))
			            Tagok += 1;
				}

				if(Tagok >= 1)
				{
			    	foreach(Jatekosok, i)
					{
				        if(LMT(i, LMUNKA_VPOP))
				        {
			    	        format(string, sizeof(string), "* A nagylelkû (al)elnök átutalta az adók egy részét a NAV számára! %dFt került a széfbe!", penz);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
				        }
					}
					
					FrakcioInfo[LMUNKA_VPOP][fPenz] += penz;
					FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] -= penz;
					SendFormatMessage(playerid, COLOR_GREY, " Átutaltál %dFt-ot a NAV számára.", penz);
					//SaveStuff();
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Nincs fennt NAV tag!");
					return 1;
				}
			}

   			if(strcmp(csapat, "Oktató", true) == 0)
			{
				new Tagok;
				foreach(Jatekosok, i)
				{
		        	if(LMT(i, LMUNKA_OKTATO))
			            Tagok += 1;
				}

				if(Tagok >= 1)
				{
			    	foreach(Jatekosok, i)
					{
				        if(LMT(i, LMUNKA_OKTATO))
				        {
			    	        format(string, sizeof(string), "* A nagylelkû (al)elnök átutalta az adók egy részét a számotokra! %dFt került a széfbe!", penz);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
				        }
					}
					
					FrakcioInfo[LMUNKA_OKTATO][fPenz] += penz;
					FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] -= penz;
					SendFormatMessage(playerid, COLOR_GREY, " Átutaltál %dFt-ot a frakció tagjai számára.", penz);
					//SaveStuff();
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Nincs fennt tag!");
					return 1;
				}
			}

			if(strcmp(csapat, "Katona", true) == 0)
			{
				new Tagok;
				foreach(Jatekosok, i)
				{
		        	if(LMT(i, LMUNKA_KATONA))
			            Tagok += 1;
				}

				if(Tagok >= 1)
				{
			    	foreach(Jatekosok, i)
					{
				        if(LMT(i, LMUNKA_KATONA))
				        {
			    	        format(string, sizeof(string), "* A nagylelkû (al)elnök átutalta az adók egy részét a számotokra! %dFt került a széfbe!", penz);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
				        }
					}
					
					FrakcioInfo[LMUNKA_KATONA][fPenz] += penz;
					FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] -= penz;
					SendFormatMessage(playerid, COLOR_GREY, " Átutaltál %dFt-ot a frakció tagjai számára.", penz);
					//SaveStuff();
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Nincs fennt tag!");
					return 1;
				}
			}

			if(strcmp(csapat, "Taxi", true) == 0)
			{
				new Tagok;
				foreach(Jatekosok, i)
				{
		        	if(LMT(i, LMUNKA_TAXI))
			            Tagok += 1;
				}

				if(Tagok >= 1)
				{
			    	foreach(Jatekosok, i)
					{
				        if(LMT(i, LMUNKA_TAXI))
				        {
			    	        format(string, sizeof(string), "* A nagylelkû (al)elnök átutalta az adók egy részét a számotokra! %dFt került a széfbe!", penz);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
				        }
					}
					
					FrakcioInfo[LMUNKA_TAXI][fPenz] += penz;
					FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] -= penz;
					SendFormatMessage(playerid, COLOR_GREY, " Átutaltál %dFt-ot a frakció tagjai számára.", penz);
					//SaveStuff();
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Nincs fennt tag!");
					return 1;
				}
			}

			if(strcmp(csapat, "Riporter", true) == 0)
			{
				new Tagok;
				foreach(Jatekosok, i)
				{
		        	if(LMT(i, LMUNKA_RIPORTER))
			            Tagok += 1;
				}

				if(Tagok >= 1)
				{
			    	foreach(Jatekosok, i)
					{
				        if(LMT(i, LMUNKA_RIPORTER))
				        {
			    	        format(string, sizeof(string), "* A nagylelkû (al)elnök átutalta az adók egy részét a számotokra! %dFt került a széfbe!", penz);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
				        }
					}
					
					FrakcioInfo[LMUNKA_RIPORTER][fPenz] += penz;
					FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] -= penz;
					SendFormatMessage(playerid, COLOR_GREY, " Átutaltál %dFt-ot a frakció tagjai számára.", penz);
					//SaveStuff();
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Nincs fennt tag!");
					return 1;
				}
			}

			if(strcmp(csapat, "Mentõ", true) == 0)
			{
				new Tagok;
				foreach(Jatekosok, i)
				{
		        	if(LMT(i, LMUNKA_MENTO))
			            Tagok += 1;
				}

				if(Tagok >= 1)
				{
			    	foreach(Jatekosok, i)
					{
				        if(LMT(i, LMUNKA_MENTO))
				        {
			    	        format(string, sizeof(string), "* A nagylelkû (al)elnök átutalta az adók egy részét a számotokra! %dFt került a széfbe!", penz);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
				        }
					}
					
					FrakcioInfo[LMUNKA_MENTO][fPenz] += penz;
					FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] -= penz;
					SendFormatMessage(playerid, COLOR_GREY, " Átutaltál %dFt-ot a frakció tagjai számára.", penz);
					//SaveStuff();
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Nincs fennt tag!");
					return 1;
				}
			}
			
			if(strcmp(csapat, "Civil", true) == 0 || strcmp(csapat, "Civilek", true) == 0)
			{
				new Tagok = 0;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
			    	{
			        	if(PlayerInfo[i][pMember] < 1 && PlayerInfo[i][pLeader] < 1)
				        {
				            Tagok += 1;
				        }
				    }
				}

				if(Tagok >= 1)
				{
				    new price = floatround(penz / Tagok);
			    	for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(IsPlayerConnected(i))
					    {
					        if(PlayerInfo[i][pMember] < 1 && PlayerInfo[i][pLeader] < 1)
					        {
				    	        format(string, sizeof(string), "* A nagylelkû (al)elnök átutalta az adók egy részét a civilek számára. A részed: %d",price);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
								GiveMoney(i, price);
								FrakcioInfo[LMUNKA_ONKORMANYZAT][fPenz] -= price;
					        }
					    }
					}
					SendFormatMessage(playerid, COLOR_GREY, " Átutaltál %dFt-t a civilek számára. %d civil van, fejenként %dFt-t kaptak!", penz, Tagok, price);
					//SaveStuff();
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Nincs fennt civil!");
					return 1;
				}
			}
		}
		return 1;
	}


	if(strcmp(cmd,"/read",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /read [name]");
				SendClientMessage(playerid, COLOR_GREY, "Available names: Paper, TestPaper");
				return 1;
			}
	        if(strcmp(x_job,"paper",true) == 0)
			{
			    if(GotPaper[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "|_______________ Újság _______________|");
			        format(string, sizeof(string), "| %s  |  Írta: %s.",Paper[playerid][pTitle],Paper[playerid][pMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|______________________________________|");
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nincs újságpapírod!");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"testpaper",true) == 0)
			{
			    if(LMT(playerid, LMUNKA_RIPORTER))
			    {
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Használat: /read testpaper [papernr]");
						return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "A száma min 1, és max 10 lehet!"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 0)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ez az újság nem írott!");
					    return 1;
					}
			        SendClientMessage(playerid, COLOR_WHITE, "|_______________ Újság _______________|");
			        format(string, sizeof(string), "| %s  |  Írta: %s.",PaperInfo[paper][PaperTitle],PaperInfo[paper][PaperMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________|");
			        return 1;
				}
				else
				{
        			SendClientMessage(playerid, COLOR_GREY, "Nem vagy riporter!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Használat: /read testpaper [szám]");
				return 1;
			}
		}
		return 1;
	}
	if(egyezik(cmd, "/rabok"))
	{
		if(!IsACop(playerid) && !IsHitman(playerid)) return Msg(playerid, "Nem vagy rendvédelmi szervezet tagja.");
		if(params != 1) return Msg(playerid, "/rabok [SCPD / NAV / FBI]");
		if(egyezik(param[1], "scpd"))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "========== Rabok SCPD börtönben ==========");
	        for(new p = 0; p < MAX_PLAYERS; p++)
	        {
				if(!IsPlayerConnected(p) || !Logged(p)) continue;
	            if(PlayerInfo[p][pJailed] == 1 && PlayerInfo[p][pJailTime] > 0)
	            {
	                if(JailPrice[p] > 0)
		                format(string, sizeof(string), "Név: %s | Idõ: %dmp(%dp) | Óvadék:%d | Oka: %s", PlayerName(p), PlayerInfo[p][pJailTime], floatround(float(PlayerInfo[p][pJailTime] / 60)), JailPrice[p], PlayerInfo[p][pJailOK]);
					else
					    format(string, sizeof(string), "Név: %s | Idõ: %dmp(%dp) | Óvadék:Nincs | Oka: %s", PlayerName(p), PlayerInfo[p][pJailTime], floatround(float(PlayerInfo[p][pJailTime] / 60)), PlayerInfo[p][pJailOK]);
	                SendClientMessage(playerid, COLOR_YELLOW, string);
	            }
	        }
		}
		else if(egyezik(param[1], "nav"))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "========== Rabok NAV börtönben ==========");
	        for(new p = 0; p < MAX_PLAYERS; p++)
	        {
				if(!IsPlayerConnected(p) || !Logged(p)) continue;
	            if(PlayerInfo[p][pJailed] == 4 && PlayerInfo[p][pJailTime] > 0)
	            {
	                if(JailPrice[p] > 0)
		                format(string, sizeof(string), "Név: %s | Idõ: %dmp(%dp) | Óvadék:%d | Oka: %s", PlayerName(p), PlayerInfo[p][pJailTime], floatround(float(PlayerInfo[p][pJailTime] / 60)), JailPrice[p], PlayerInfo[p][pJailOK]);
					else
					    format(string, sizeof(string), "Név: %s | Idõ: %dmp(%dp) | Óvadék:Nincs | Oka: %s", PlayerName(p), PlayerInfo[p][pJailTime], floatround(float(PlayerInfo[p][pJailTime] / 60)), PlayerInfo[p][pJailOK]);
	                SendClientMessage(playerid, COLOR_YELLOW, string);
	            }
	        }
		}
		else if(egyezik(param[1], "fbi"))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "========== Rabok FBI börtönben ==========");
	        for(new p = 0; p < MAX_PLAYERS; p++)
	        {
				if(!IsPlayerConnected(p) || !Logged(p)) continue;
	            if(PlayerInfo[p][pJailed] == 5 && PlayerInfo[p][pJailTime] > 0)
	            {
	                if(JailPrice[p] > 0)
		                format(string, sizeof(string), "Név: %s | Idõ: %dmp(%dp) | Óvadék:%d | Oka: %s", PlayerName(p), PlayerInfo[p][pJailTime], floatround(float(PlayerInfo[p][pJailTime] / 60)), JailPrice[p], PlayerInfo[p][pJailOK]);
					else
					    format(string, sizeof(string), "Név: %s | Idõ: %dmp(%dp) | Óvadék:Nincs | Oka: %s", PlayerName(p), PlayerInfo[p][pJailTime], floatround(float(PlayerInfo[p][pJailTime] / 60)), PlayerInfo[p][pJailOK]);
	                SendClientMessage(playerid, COLOR_YELLOW, string);
	            }
	        }
		}
	}
	/*if(strcmp(cmd, "/rabok", true) == 0)
	{
    	if(IsPlayerConnected(playerid))
	    {
	        if(!IsACop(playerid) && !IsAdmin(playerid))
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy rendõr!");
	            return 1;
	        }
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "========== Rabok LSPD-n ==========");
	        for(new p = 0; p < MAX_PLAYERS; p++)
	        {
				if(!IsPlayerConnected(p) || !Logged(p)) continue;
	            if(PlayerInfo[p][pJailed] == 1 && PlayerInfo[p][pJailTime] > 0)
	            {
	                if(JailPrice[p] > 0)
		                format(string, sizeof(string), "Név: %s | Idõ: %dmp(~%dp) | Óvadék:%d", PlayerName(p), PlayerInfo[p][pJailTime], floatround(float(PlayerInfo[p][pJailTime] / 60)), JailPrice[p]);
					else
					    format(string, sizeof(string), "Név: %s | Idõ: %dmp(~%dp) | Óvadék:Nincs", PlayerName(p), PlayerInfo[p][pJailTime], floatround(float(PlayerInfo[p][pJailTime] / 60)));
	                SendClientMessage(playerid, COLOR_YELLOW, string);
	            }
	        }
	    }
	    return 1;
 	}*/

	if(strcmp(cmd, "/ajailosok", true) == 0)
	{
    	if(IsPlayerConnected(playerid))
	    {
	        if(!Admin(playerid, 1)) return 1;

	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "========== Admin Jailosok ==========");
	        for(new p = 0; p < MAX_PLAYERS; p++)
	        {
				if(!IsPlayerConnected(p) || !Logged(p)) continue;
	            if(PlayerInfo[p][pJailed] == 3 && PlayerInfo[p][pJailTime] > 0)
	            {
	                format(string, sizeof(string), "Név: %s | Idõ: %dmp(~%dp) | Oka: %s", PlayerName(p), PlayerInfo[p][pJailTime], floatround(float(PlayerInfo[p][pJailTime] / 60)), PlayerInfo[p][pJailOK]);
	                SendClientMessage(playerid, COLOR_YELLOW, string);
	            }
	        }
	    }
	    return 1;
 	}

	if(strcmp(cmd, "/kórházban", true) == 0 || egyezik(cmd, "/korhazban"))
	{
    	if(IsPlayerConnected(playerid))
	    {
	        if(!Admin(playerid, 1)) return 1;

	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "========== Kórházban ==========");
	        for(new p = 0; p < MAX_PLAYERS; p++)
	        {
				if(!IsPlayerConnected(p) || !Logged(p)) continue;
	            if(MedicTime[p] > 0)
	            {
	                format(string, sizeof(string), "Név: %s | Idõ: %dmp(~%dp)", PlayerName(p), (NeedMedicTime[p] - MedicTime[p]), floatround(float((NeedMedicTime[p] - MedicTime[p]) / 60)));
	                SendClientMessage(playerid, COLOR_YELLOW, string);
	            }
	        }
	    }
	    return 1;
 	}

 	if(strcmp(cmd, "/fegyencek", true) == 0)
	{
    	if(IsPlayerConnected(playerid))
	    {
	        if(!IsACop(playerid) && !IsAdmin(playerid))
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy rendõr!");
	            return 1;
	        }
	        SendClientMessage(playerid, COLOR_LIGHTRED, "========== Rabok a Fort Demorgan fegyenctelepen ==========");
	        for(new p = 0; p < MAX_PLAYERS; p++)
	        {
				if(!IsPlayerConnected(p) || !Logged(p)) continue;
	            if(PlayerInfo[p][pJailed] == 2 && PlayerInfo[p][pJailTime] > 0)
	            {
				    format(string, sizeof(string), "Név: %s | Idõ: %dmp(~%dp)", PlayerName(p), PlayerInfo[p][pJailTime], floatround(float(PlayerInfo[p][pJailTime] / 60)), JailPrice[p]);
	                SendClientMessage(playerid, COLOR_YELLOW, string);
	            }
	        }
	    }
	    return 1;
 	}

	if(strcmp(cmd, "/átszállít", true) == 0 || strcmp(cmd, "/atszallit", true) == 0)
	{
    	if(IsPlayerConnected(playerid))
	    {
			if(IsACop(playerid) || Admin(playerid, 1337))
            {
                if(!PlayerToPoint(10, playerid, 1527.123291, -1677.797729, 5.890625) && !PlayerToPoint(10, playerid, -1606.3289,675.3354,-5.2422) && !PlayerToPoint(10, playerid, -2446.8914,523.1533,30.2869) && !PlayerToPoint(10, playerid, 734.2736,-1351.9012,13.5000) && !PlayerToPoint(10, playerid, 226.7355,122.7866,999.0410) && !PlayerToPoint(10, playerid, 1221.1991,-1826.3141,13.4106))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy a rabfelvevõhelyen! (LSPD/VPOP/FBI Garázs)");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /átszállít [playerid/PartOfName]");
					return 1;
				}
		        giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Magadat akarod átszállitani fortba? :D"); return 1; }
				        if(PlayerInfo[giveplayerid][pJailed] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Ez az ember nincs börtönben!"); return 1; }
				        if(!IsPlayerInAnyVehicle(playerid)) { SendClientMessage(playerid, COLOR_GREY, "   Persze majd a hátadon fogod elvinni..."); return 1; }
				        new vehid = GetPlayerVehicleID(playerid);
				        if(GetVehicleModel(vehid) != 427) { SendClientMessage(playerid, COLOR_GREY, "   Nem vagy a páncélkocsiban (Enforcer)"); return 1; }
						if(GetPlayerState(playerid) != 2) { SendClientMessage(playerid, COLOR_GREY, "   Sofõrnek kell lenned!"); return 1; }
						
						if(PlayerToPoint(10, playerid, 1527.123291, -1677.797729, 5.890625) && PlayerInfo[giveplayerid][pJailed] != 1)
							return Msg(playerid, "Ez a játékos nem az LSPD Börtönébe van.");
							
						if(PlayerToPoint(10, playerid, 645.771, -1357.328, 13.570) && PlayerInfo[giveplayerid][pJailed] != 4)
							return Msg(playerid, "Ez a játékos nem a NAV Börtönébe van");
							
						if(PlayerToPoint(10, playerid, 1208.880, -1820.819, 13.595) && PlayerInfo[giveplayerid][pJailed] != 5)
							return Msg(playerid, "Ez a játékos nem az FBI Börtönébe van");

						PutPlayerInVehicle(giveplayerid, vehid, 2);
						SetPlayerInterior(giveplayerid, 0);
						SetPlayerVirtualWorld(giveplayerid, 0);
						TogglePlayerControllable(giveplayerid, false);
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "<< %s átszállítása folyamatban a Fort DeMorgan fegyenctelepre >>", giveplayer);
						/*SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTRED, string);
						SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTRED, string);
						SendRadioMessage(LMUNKA_SCPD, COLOR_LIGHTRED, string);
						SendRadioMessage(LMUNKA_SFPD, COLOR_LIGHTRED, string);
						SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTRED, string);*/
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pJailed] = 2;
						//PlayerInfo[giveplayerid][pJailTime] += 120;
						//SetPlayerWorldBounds(giveplayerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Nincs ilyen játékos !");
				    	return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
				    return 1;
				}
            }
		}
		return 1;
	}

	if(strcmp(cmd, "/átszállításvége", true) == 0 || strcmp(cmd, "/atszallitasvege", true) == 0)
	{
    	if(IsPlayerConnected(playerid))
	    {
			if(IsACop(playerid) || Admin(playerid, 1337))
            {
                if(!PlayerToPoint(15.0,playerid, 215.038833, 1862.826782, 13.140625))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy a Fort DeMorgan rabterületén.");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /átszállításvége [playerid/PartOfName]");
					return 1;
				}
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Magadat akarod átszállitani fortba? :D"); return 1; }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "<< %s átszállítva a Fort DeMorgan fegyenctelepre >>", giveplayer);
							/*SendRadioMessage(LMUNKA_FBI, COLOR_LIGHTRED, string);
							SendRadioMessage(LMUNKA_KATONA, COLOR_LIGHTRED, string);
							SendRadioMessage(LMUNKA_SCPD, COLOR_LIGHTRED, string);
							SendRadioMessage(LMUNKA_SFPD, COLOR_LIGHTRED, string);
							SendRadioMessage(LMUNKA_VPOP, COLOR_LIGHTRED, string);*/
							SendClientMessageToAll(COLOR_LIGHTRED, string);
							GameTextForPlayer(giveplayerid, "~w~Udv itthon!~n~~r~Fort DeMorgan fegyenctelep", 5000, 3);
							WantedPoints[giveplayerid] = 0;
							WantedLevel[giveplayerid] = 0;
							RemovePlayerFromVehicle(giveplayerid);
							TogglePlayerControllable(giveplayerid, true);
							PlayerInfo[giveplayerid][pJailed] = 2;
							PlayerInfo[giveplayerid][pJailTime] += 300;
							SetPlayerPos(giveplayerid, 215.038833, 1862.826782, 13.140625);
							SetPlayerWorldBounds(giveplayerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs a közeledben senki !");
				    	return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
				    return 1;
				}
            }
		}
		return 1;
	}

	if(strcmp(cmd, "/deliver", true) == 0)
	{
    	if(IsPlayerConnected(playerid))
	    {
			if(AMT(playerid, MUNKA_UJSAGOS))
            {
		        if(BringingPaper[playerid] != 1)
			        {
		            SendClientMessage(playerid, COLOR_GREY, "   You haven't picked up a Newspaper from the News Reporters Building yet !");
		            return 1;
		        }
		        tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /deliver [playerid/PartOfName]");
					return 1;
				}
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* El akarsz adni neki egy újságot: %s", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Újságárus %s szeretné, ha megvennéd az újságját. /accept paper", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							PaperOffer[giveplayerid] = playerid;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nincs közel hozzád!");
				    	return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Offline!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nem vagy újságárus!");
    	        return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bring", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!AMT(playerid, MUNKA_UJSAGOS))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nem vagy újságkihordó!");
	            return 1;
	        }
			if(PlayerToPoint(3.0,playerid,1778.6409,-1309.8333,13.7053))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /bring [papírszáma]");
					return 1;
				}
		        new paper = strval(tmp);
		        if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "A papír száma min 1 és max 10 lehet!"); return 1; }
				paper -= 1;
				if(PaperInfo[paper][PaperUsed] == 0)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ezen a papíron nincs semmi!");
				    return 1;
				}
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		        format(string, sizeof(string), "* Mostmár ki tudod vinni a papirokat a népnek, újság: %s, Írta: %s.",PaperInfo[paper][PaperTitle],PaperInfo[paper][PaperMaker]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperTitle]);
				strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperMaker]);
				strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText1]);
				strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText2]);
				strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText3]);
				strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText4]);
				strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText5]);
				strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText6]);
				strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText7]);
				strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
				BringingPaper[playerid] = 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not at the News Reporter Building !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/papers", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(LMT(playerid, LMUNKA_RIPORTER) || AMT(playerid, MUNKA_UJSAGOS))
	        {
				if(PlayerToPoint(3.0,playerid,1778.6409,-1309.8333,13.7053))
				{
				    new number = 0;
				    for(new i = 0; i < sizeof(PaperInfo); i++)
				    {
				        number ++;
				        if(PaperInfo[i][PaperUsed] == 1)
				    	{
				        	format(string, sizeof(string), "|%d| Újság: %s, Írta: %s",number,PaperInfo[i][PaperTitle],PaperInfo[i][PaperMaker]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nem vagy a riporter épületnél!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not a Paper Boy / News Reporter !");
	            return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/paper", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(LMT(playerid, LMUNKA_RIPORTER))
	        {
	            if(!PlayerToPoint(3.0,playerid,1778.6409,-1309.8333,13.7053))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nem vagy a riporter épületnél!");
				    return 1;
				}
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /paper write [szám] or /paper delete [szám]");
				    return 1;
				}
			    if(strcmp(x_nr,"write",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Használat: /paper write [szám]");
					    return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "A papir szám min 1, max 10!"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 1)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ezt a számú újságot már megírták! Elõbb törölnöd kell! /paper delete");
					    return 1;
					}
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Írtál egy újságot!");
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Minden, amit most irsz belekerül az újságba! Összesen 7 sort írhatsz!");
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Kérlek add meg az elsõ sorban az újság címét!");
					WritingPaper[playerid] = 1;
					WritingPaperNumber[playerid] = paper;
					WritingLine[playerid] = 1;
				}
				else if(strcmp(x_nr,"delete",true) == 0)
				{
				    if(PlayerInfo[playerid][pRank] >= 3)
				    {
				        tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Használat: /paper delete [szám]");
						    return 1;
						}
						new paper = strval(tmp);
						if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "Az újság száma min 1 és max 10 lehet"); return 1; }
						paper -= 1;
						ClearPaper(paper);
						new number = paper; number += 1;
						format(string, sizeof(string), "Törölted a %d számú újságot",number);
						SendClientMessage(playerid, COLOR_YELLOW, string);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Minimum 3as rang szükséges!");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Használat: /paper write [szám] vagy /paper delete [szám]");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nem vagy riporter!");
	            return 1;
			}
	    }
	    return 1;
	}
	/*if(strcmp(cmd, "/report", true) == 0)
	{
	    if(reporttiltva[playerid] == 0)
	    {
			if(TudReportolni[playerid] > 0) return Msg(playerid, "10 Másodpercenként tudsz reportolni.");
		    if(IsPlayerConnected(playerid))
		    {
		        GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[120];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					Msg(playerid, "/report [Üzenet]");
					return 1;
				}
				format(string, sizeof(string), "[%d]%s reportja: %s", playerid, sendername, (result));
				TudReportolni[playerid] = 10;
				//SetTimer("Reporttimer", 10000, 0);
				//ABroadCast(COLOR_RED,string,1);
				for(new x = 0; x < MAX_PLAYERS; x++)
				{
					if(Admin(x, 1) || IsAS(x))
					{
						if(gReport[x] != 1)
							SendClientMessage(x, COLOR_LIGHTGREEN, string);
					}
				}
				SendClientMessage(playerid, COLOR_YELLOW, string);
				//SendClientMessage(playerid, COLOR_YELLOW, "Szerver: Üzenetedet kézbesítette a rendszer. Várj a válaszra, és ne floodolj/spamolj.");
		    }
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sajnálom te le lettél tiltva a /report-ról");
		}
	    return 1;
	}*/
	if(strcmp(cmd, "/clothes", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] >= 1)
	        {
	            if(IsAtClothShop(playerid))
				{

					/*if(LMT(playerid, LMUNKA_HITMAN))
					    return SendClientMessage(playerid, COLOR_LIGHTRED, "A hitmanoknak nincs külön skin... eléggé feltünõ lenne...");*/

				    new x, skin = -1, leader = -1;
					for(x = 1; x <= (sizeof(LeaderSkinek) - 1); x++)
					{
					    if(PlayerInfo[playerid][pMember] == x)
					    {
							if(PlayerInfo[playerid][pLeader] == x)
								leader = LeaderSkinek[x][PlayerInfo[playerid][pSex] - 1];
							else if(PlayerInfo[playerid][pMember] == x)
								skin = Skinek[x-1][0];
						}
					}

					if(leader != -1)
					{
						SetPlayerSkin(playerid, leader);
					    PlayerInfo[playerid][pChar] = leader;

					    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Mivel leader vagy, ezért a skined automatikusan beállítva!");
					    return 1;
     				}
					if(skin != -1)
					{
					    ChosenSkin[playerid] = skin;
					    SetPlayerSkin(playerid, skin);
					}
					else
					    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy tagja egy Szervezetnek sem!");

					GetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
					ChangePos2[playerid][0] = GetPlayerInterior(playerid);
					ChangePos2[playerid][1] = 1;
				    SetPlayerInterior(playerid,0);
					new rand = random(sizeof(gInviteSpawns));
					SetPlayerPos(playerid, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
					SetPlayerFacingAngle(playerid, gInviteSpawns[rand][3]);
					SetPlayerCameraPos(playerid,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
					SetPlayerCameraLookAt(playerid,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
					TogglePlayerControllable(playerid, 0);
					SelectChar[playerid] = 255;
					SelectCharID[playerid] = PlayerInfo[playerid][pMember];
					SelectCharPlace[playerid] = 1;
			    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Ird be, hogy 'next' a következõ skinhez");
				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Ha vége írd be h 'done'.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Nem vagy ruhaboltban!");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid,COLOR_GREY, "Nem vagy szervezetben!");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/lotto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLottoNr] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Már van 1 lottószelvényed!");
	            return 1;
	        }
			if(!PlayerToPoint(10.0, playerid, 830.5727,3.6759,1004.1797)) return Msg(playerid, "Nem vagy lottózóban!");
	        if(GetMoney(playerid) < 1500)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "A lottó ára 1500Ft");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE,"Használata: /lotto [szám]");
				return 1;
			}
			new lottonr = strval(tmp);
			if(lottonr < 1 || lottonr > 80) { SendClientMessage(playerid, COLOR_GREY, " 1 és 80 között kell választanod!"); return 1; }
			format(string, sizeof(string), "* Vettél egy lottót, a következõ számmal: %d", lottonr);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GiveMoney(playerid, - 1500);
			Jackpot += 1500;
			PlayerInfo[playerid][pLottoNr] = lottonr;
	    }
	    return 1;
	}

	if(strcmp(cmd, "/take", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsACop(playerid) || PlayerInfo[playerid][pAdmin] >= 1337)
	        {
	            if(!LMT(playerid, LMUNKA_FBI) && PlayerInfo[playerid][pRank] < 1 && PlayerInfo[playerid][pAdmin] < 1337)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Minimum 1es rangunak kell lenned!");
	                return 1;
	            }
				
				if(PlayerInfo[playerid][pJailed] != 0) return 1;
					
				new x_nr[128];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Elvehetõ dolgok __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /take [mit] [playerid/PartOfName]");
			  		SendClientMessage(playerid, COLOR_GREY, "Engedélyek: Autó, Motor, Kamion, Repülõ, Hajó, Fegyverengedély");
			  		SendClientMessage(playerid, COLOR_GREY, "|--------------------Tárgyaknál nem kell név------------|");
			  		SendClientMessage(playerid, COLOR_GREY, "Tárgyak: Fegyver, Drog(Heroin,Kokain, Marihuana), Mati");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"autó",true) == 0 || strcmp(x_nr,"auto",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Használat: /take autó [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
						        format(string, sizeof(string), "* Elvetted %s autó jogositványát", PlayerName(giveplayerid));
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Elvették a kocsijogsid");
						        PlayerInfo[giveplayerid][pCarLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Nincs a közeledbe a játékos !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Motor",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Használat: /take motor [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
           						//GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						        format(string, sizeof(string), "* Elvetted %s motor jogositványát", PlayerName(giveplayerid));
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Elvették a motor jogsid");
						        PlayerInfo[giveplayerid][pMotorJogsi] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Nincs a közeledbe a játékos !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"kamion",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Használat: /take kamion [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
           						//GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						        format(string, sizeof(string), "* Elvetted %s kamion jogositványát", PlayerName(giveplayerid));
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Elvették a kamion jogsid");
						        PlayerInfo[giveplayerid][pKamionJogsi] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Nincs a közeledbe a játékos !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"repülõ",true) == 0 || strcmp(x_nr,"repulo",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Használat: /take repülõ [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    //GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						        format(string, sizeof(string), "* Elvetted %s repülõengedélyét", PlayerName(giveplayerid));
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Elvették a repülõengedélyed");
						        PlayerInfo[giveplayerid][pFlyLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Nincs a közeledbe a játékos !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"fegyverengedély",true) == 0 || strcmp(x_nr,"fegyverengedely",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Használat: /take fegyverengedély [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    //GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						        format(string, sizeof(string), "* Elvetted %s fegyverengedélyét", PlayerName(giveplayerid));
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Elvették a fegyverengedélyed");
						        PlayerInfo[giveplayerid][pGunLic] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Nincs a közeledbe a játékos !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"hajó",true) == 0 || strcmp(x_nr,"hajo",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Használat: /take hajó [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    //GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						        format(string, sizeof(string), "* Elvetted %s hajóengedélyét", PlayerName(giveplayerid));
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Elvették a hajóengedélyed");
						        PlayerInfo[giveplayerid][pBoatLic] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Nincs a közeledbe a játékos !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"fegyver",true) == 0)
				{
					giveplayerid = GetClosestPlayer(playerid);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    //GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						        format(string, sizeof(string), "* Elvetted %s fegyvereit", PlayerName(giveplayerid));
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Elvették a fegyvereidet");
						        ResetWeapon(giveplayerid);
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Nincs a közeledbe a játékos !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"drog",true) == 0)
				{
					giveplayerid = GetClosestPlayer(playerid);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    //GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							    format(string, sizeof(string), "* Elvetted %s összes drogját (kokain/heroin)", PlayerName(giveplayerid));
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Elvették a drogjaid (kokain/heroin)");
						        PlayerInfo[giveplayerid][pKokain] = 0;
						        PlayerInfo[giveplayerid][pHeroin] = 0;
								PlayerInfo[giveplayerid][pMarihuana] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Nincs a közeledbe a játékos !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"mati",true) == 0)
				{
					giveplayerid = GetClosestPlayer(playerid);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    //GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							    format(string, sizeof(string), "* Elvetted %s minden matiját", PlayerName(giveplayerid));
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Elvették a matijaid");
						        PlayerInfo[giveplayerid][pMats] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Nincs a közeledbe a játékos !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
					    return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Szerintem elírtál valamit !");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nem vagy zsaru !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/drink", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAtBar(playerid))
	        {
	            if(PlayerDrunk[playerid] < 10)
	            {
	                new Float:health;
	                new x_nr[256];
					x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
						format(string,sizeof(string), "|__________________ %s(Italok) __________________|", BizzInfo[BIZ_KOCSMA][bMessage]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						//SendClientMessage(playerid, COLOR_WHITE, "|__________________ Italok __________________|");
						SendClientMessage(playerid, COLOR_WHITE, "Használat: /drink [Ital]");
				  		SendClientMessage(playerid, COLOR_GREY, "Italok: Sör (150FT), Vodka (190FT), Whiskey (240FT), Pálinka (300FT), Víz (50FT), Kristályvíz (100FT)");
						format(string,sizeof(string), "|__________________ %s(Italok) __________________|", BizzInfo[BIZ_KOCSMA][bMessage]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						return 1;
					}
				    if(strcmp(x_nr,"sör",true) == 0 || strcmp(x_nr,"sor",true) == 0)
					{
						if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Csapos: Csak 18 éven felül adunk szeszes italt!");
						    return 1;
						}
					    BizPenz(BIZ_KOCSMA, 150, playerid);
					    PlayerDrunk[playerid] += 1;
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~You are~n~~p~Drunk", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetHealth(playerid, health + hp); }
							else { SetHealth(playerid, health + 15.0); }
						}
					}
					else if(strcmp(x_nr,"vodka",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Csapos: Csak 18 éven felül adunk szeszes italt!");
						    return 1;
						}
					    BizPenz(BIZ_KOCSMA, 190, playerid);
					    PlayerDrunk[playerid] += 2;
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~You are~n~~p~Drunk", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetHealth(playerid, health + hp); }
							else { SetHealth(playerid, health + 25.0); }
						}
					}
					else if(strcmp(x_nr,"whiskey",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Csapos: Csak 18 éven felül adunk szeszes italt!");
						    return 1;
						}
					    BizPenz(BIZ_KOCSMA, 240, playerid);
					    PlayerDrunk[playerid] += 3;
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~You are~n~~p~Drunk", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 27; SetHealth(playerid, health + hp); }
							else { SetHealth(playerid, health + 27.0); }
						}
					}
					else if(strcmp(x_nr,"pálinka",true) == 0 || strcmp(x_nr,"palinka",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Csapos: Csak 18 éven felül adunk szeszes italt!");
						    return 1;
						}
					    BizPenz(BIZ_KOCSMA, 300, playerid);
					    PlayerDrunk[playerid] += 3;
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~You are~n~~p~Drunk", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 30; SetHealth(playerid, health + hp); }
							else { SetHealth(playerid, health + 30.0); }
						}
					}
					else if(strcmp(x_nr,"víz",true) == 0 || strcmp(x_nr,"viz",true) == 0)
					{
					    BizPenz(BIZ_KOCSMA, 50, playerid);
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
					    if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetHealth(playerid, health + hp); }
							else { SetHealth(playerid, health + 5.0); }
						}
					}
					else if(strcmp(x_nr,"Kristályvíz",true) == 0 || strcmp(x_nr,"Kristalyviz",true) == 0)
					{
					    BizPenz(BIZ_KOCSMA, 100, playerid);
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
					    if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetHealth(playerid, health + hp); }
							else { SetHealth(playerid, health + 5.0); }
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Pultos: Bocs haver, de nem ismerek ilyen italt.");
					    return 1;
					}
					GetPlayerName(playerid, sendername, sizeof(sendername));
					Cselekves(playerid, "ivott valamit...");
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Ehh, ez kicsit sok lesz !");
	                return 1;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Nem vagy bárba!");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/setchamp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /setchamp [playerid/PartOfName]");
					return 1;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
		        if(IsPlayerConnected(giveplayerid))
		        {
		            if(giveplayerid != INVALID_PLAYER_ID)
		            {
		                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		                new nstring[MAX_PLAYER_NAME];
						format(nstring, sizeof(nstring), "%s", giveplayer);
						strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
						Titel[TitelWins] = PlayerInfo[giveplayerid][pWins];
						Titel[TitelLoses] = PlayerInfo[giveplayerid][pLoses];
						SaveBoxer();
						format(string, sizeof(string), "* You have made %s the new Boxing Champion.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Offline");
		            return 1;
		        }
	        }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Fatal error!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/boxstats", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!AMT(playerid, MUNKA_BOXOLO))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nem vagy boxoló!");
	            return 1;
	        }
	        new ttext[20];//Title
	        new clevel = PlayerInfo[playerid][pBoxSkill];
			if(clevel >= 0 && clevel <= 50) { ttext = "Kezdõ"; }
			else if(clevel >= 51 && clevel <= 200) { ttext = "Amatõr"; }
			else if(clevel >= 201 && clevel <= 400) { ttext = "Profi"; }
	        new ntext[20];//NickName
	        new level = PlayerInfo[playerid][pWins];
	        if(level > 0 && PlayerInfo[playerid][pLoses] == 0)
	        {
	            ntext = "Veretlen";
	        }
	        else
	        {
	            if(level >= 0 && level <= 10) { ntext = "Newcomer"; }
	            else if(level >= 11 && level <= 20) { ntext = "Touchy Fist"; }
	            else if(level >= 21 && level <= 30) { ntext = "Nut Cracker"; }
	            else if(level >= 31 && level <= 40) { ntext = "Tommygun"; }
	            else if(level >= 41 && level <= 50) { ntext = "Skull Breaker"; }
	            else if(level >= 51 && level <= 60) { ntext = "Light Speed"; }
	            else if(level >= 61 && level <= 70) { ntext = "Unbroken Warrior"; }
	            else if(level >= 71) { ntext = "Itallion Stallion"; }
	        }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Boxing Records __________________|");
	        format(string, sizeof(string), "| Jelenlegi bajnokság: %s, %d gyõzelem és %d vesztés", Titel[TitelName],Titel[TitelWins],Titel[TitelLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Címed: %s.", ttext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Nickneved: %s.", ntext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Összes gyõzelem: %d.", PlayerInfo[playerid][pWins]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Összes vereség: %d.", PlayerInfo[playerid][pLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
	        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________|");
		}
		return 1;
	}
	if(strcmp(cmd, "/fight", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!AMT(playerid, MUNKA_BOXOLO))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nem vagy boxoló!");
	            return 1;
	        }
	        if(InRing > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Jelenleg küzdelem van!");
	            return 1;
	        }
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Jelenleg is hacolsz!");
	            return 1;
	        }
	        if(!PlayerToPoint(20.0,playerid,765.9343,0.2761,1000.7173))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nem vagy a groove streeti edzõteremben");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /fight [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Magadat akarod leverni?"); return 1; }
						if(PlayerInfo[playerid][pStilus] != 1) return Msg(playerid, "Elöször megkell tanulnod boxolni!");
						if(PlayerInfo[giveplayerid][pStilus] != 1) return Msg(playerid, "Õ nem tud boxolni!");
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Kihívtad küzdelemre %s-t", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Boxoló %s kihívott. Elfogadása: /accept boxing", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        BoxOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Nincs közel hozzád");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Offline !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/music", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pCDPlayer])
	        {
		        new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Music __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /music [name]");
			  		SendClientMessage(playerid, COLOR_GREY, "Available names: On, Off, Next");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"on",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~Zene lejatszo be", 5000, 5);
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
	            else if(strcmp(x_nr,"off",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~Zene lejatszo ki", 5000, 5);
				    PlayerFixRadio(playerid);
				}
				else if(strcmp(x_nr,"next",true) == 0)
				{
				    if(Music[playerid] == 0) { Music[playerid] = 1; }
				    else if(Music[playerid] == 1) { Music[playerid] = 2; }
				    else if(Music[playerid] == 2) { Music[playerid] = 3; }
				    else if(Music[playerid] == 3) { Music[playerid] = 4; }
				    else if(Music[playerid] == 4) { Music[playerid] = 5; }
				    else if(Music[playerid] == 5) { Music[playerid] = 6; }
				    else if(Music[playerid] == 6) { Music[playerid] = 0; }
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "on / off / next");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nincs CD lejátszód!");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/service", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[128];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Szolgálatok __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /service [name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Használhatóak: Taxi, Bus, Medic, Mechanic");
				SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"taxi",true) == 0)
			{
			    if(TaxiDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Nincsenek Taxi sofõrök, próbáld meg késõbb!");
		            return 1;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Most nem hívhatsz taxit!");
		            return 1;
		        }
				
				if(TaxiHivas[playerid] == true)
					return Msg(playerid, "Már hívtál taxit, várj türelmesen!");
				
				/*foreach(Jatekosok, p)
				{
					if(LMT(p, LMUNKA_TAXI))
						SetPlayerMarkerForPlayer(p, playerid, COLOR_LIGHTGREEN);
				}*/
				
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s taxit hívott, ahhoz, hogy elfogadd: /accept taxi %d", sendername, playerid);
		    	SendFamilyMessage(LMUNKA_TAXI, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Hívtál taxit, várj a válaszra.");
		    	//TaxiCall = playerid;
				//TaxiHivas[playerid] = 90;
				TaxiHivas[playerid] = true;
		    	return 1;
			}
			else if(strcmp(x_nr,"medic",true) == 0)
			{
			    if(Medics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Nincs mentõs szolgálatba, próbáld késõbb !");
		            return 1;
		        }
				
				if(MentoHivas[playerid] == true)
					return Msg(playerid, "Már hívtál mentõst, várj türelmesen!");

				/*foreach(Jatekosok, p)
				{
					if(LMT(p, LMUNKA_MENTO))
						SetPlayerMarkerForPlayer(p, playerid, COLOR_LIGHTGREEN);
				}*/

		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s mentõt hívott - Ahhoz hogy elfogadd, /accept medic %d", sendername, playerid);
		    	SendRadioMessage(LMUNKA_MENTO, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Hívtál mentõt, várj a válaszra.");
		    	//MedicCall = playerid;
				MentoHivas[playerid] = true;
		    	return 1;
			}
			else if(strcmp(x_nr,"bus",true) == 0)
			{
			    if(BusDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Nincsenek Busz sofõrök, próbáld meg késõbb !");
		            return 1;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Most nem hívhatsz buszt !");
		            return 1;
		        }
				
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Buszt hívott. ('/accept bus', hogy elfogadd)", sendername);
		    	SendJobMessage(12, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Hívtál egy busz sofõrt, várj a válaszra.");
		    	BusCall = playerid;
		    	return 1;
			}
			else if(strcmp(x_nr,"mechanic",true) == 0)
			{
			    if(Mechanics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Nincs autószerelõ szolgálatba, próbáld késõbb !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Autószerelõt hívott. ('/accept mechanic', hogy elfogadd)", sendername);
		    	SendJobMessage(6, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Hívtál autószerelõt, várj a válaszra.");
		    	MechanicCall = playerid;
		    	return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Elírtál valamit !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /tie [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(PlayerTied[giveplayerid] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Már meg van kötözve!");
				        return 1;
				    }
					if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    new car = GetPlayerVehicleID(playerid);
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Magadat akarod megkötözni? Ne perverzjedé má!"); return 1; }
					    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
					    {
							if(PlayerToPoint(100, playerid, 1477.1985,-1804.2847,13.5469))
							{
								Msg(playerid, "Városháza környékén akarod megkötözni?");
								return 1;
							}
							else if(PlayerToPoint(80, playerid, 1596.8505,-1677.9633,5.8906))
							{
								Msg(playerid, "LSPD környékén akarod megkötözni?");
								return 1;
							}
							else if(PlayerToPoint(50, playerid, 1214.0414,-1324.4862,13.5670))
							{
								Msg(playerid, "Kórház elõtt akarod megkötözni?");
								return 1;
							}
							else if(PlayerToPoint(250, playerid, 175.1913,1904.2084,18.2397))
							{
								Msg(playerid, "Fort környékén akarod megkötözni?");
								return 1;
							}
							else if(PlayerToPoint(140, playerid, -1593.2107,727.9420,-4.9063))
							{
								Msg(playerid, "SFPD környékén akarod megkötözni?");
								return 1;
							}
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Megkötözted %s-t", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Valaki megkötözött");
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Valakit megkötöztek a közelbe...");
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GameTextForPlayer(giveplayerid, "~r~Megkotoztek", 2500, 3);
							TogglePlayerControllable(giveplayerid, 0);
							PlayerTied[giveplayerid] = 1;
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Ez a játékos nincs a kocsiban, vagy nem te vagy a sofõr!");
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nincs hozzád közel!");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Offline");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/untie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /untie [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Magadat akarod kötözni? Ne perverzjedjél már..."); return 1; }
						if(PlayerTied[giveplayerid])
						{
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Kikötözted %s-t!", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Kikötöztek!");
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(giveplayerid, "~g~Kikotozve", 2500, 3);
							TogglePlayerControllable(giveplayerid, 1);
							PlayerTied[giveplayerid] = 0;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Õ nincs megkötözve");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nincs közel hozzád!");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Offline");
			    return 1;
			}
		}//not connected
		return 1;
	}

	if(strcmp(cmd, "/elad", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Eladás __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /elad [Név]");
		  		SendClientMessage(playerid, COLOR_GREY, "Engedélyezettt Nevek: Hal, Sült");
				SendClientMessage(playerid, COLOR_WHITE, "|_____________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"Hal",true) == 0)
			{
			    if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53))//centerpoint 24-7
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  Nem vagy 24/7-ben! ");
					return 1;
				}
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /elad Hal [hal]");
					return 1;
				}
				new price;
				new fishid = strval(tmp);
				if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "  A halak száma nem lehet 1 alatt vagy 5 fölött! "); return 1; }
				else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Nincs hal az 1-es helyen !"); return 1; }
				else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Nincs hal a 2-es helyen !"); return 1; }
				else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Nincs hal a 3-as helyen !"); return 1; }
				else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Nincs hal a 4-es helyen !"); return 1; }
				else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Nincs hal a 5-ös helyen !"); return 1; }
				ConsumingMoney[playerid] = 1;
				switch (fishid)
				{
				    case 1:
				    {
				        if(Fishes[playerid][pWeight1] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Minket csak 20 LBS súlya: vagy annál nagyobb halak érdekelnek ! ");
				            return 1;
				        }
                        price = FishCost(playerid, Fishes[playerid][pFid1]);
                        price = price * Fishes[playerid][pWeight1];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
                        format(string, sizeof(string), "* Eladtad %s ebben a súlyban %d, neki: %dFt.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GiveMoney(playerid, price);
						ClearFishID(playerid, 1);
				    }
				    case 2:
				    {
				        if(Fishes[playerid][pWeight2] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Minket csak 20 LBS súlya: vagy annál nagyobb halak érdekelnek !");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid2]);
                        price = price * Fishes[playerid][pWeight2];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
                        format(string, sizeof(string), "* Eladtad %s ebben a súlyban %d, neki: %dFt.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GiveMoney(playerid, price);
						ClearFishID(playerid, 2);
				    }
				    case 3:
				    {
				        if(Fishes[playerid][pWeight3] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Minket csak 20 LBS súlya: vagy annál nagyobb halak érdekelnek !");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid3]);
                        price = price * Fishes[playerid][pWeight3];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
                        format(string, sizeof(string), "* Eladtad %s ebben a súlyban %d, neki: %dFt.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GiveMoney(playerid, price);
						ClearFishID(playerid, 3);
				    }
				    case 4:
				    {
				        if(Fishes[playerid][pWeight4] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Minket csak 20 LBS súlya: vagy annál nagyobb halak érdekelnek !");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid4]);
                        price = price * Fishes[playerid][pWeight4];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
                        format(string, sizeof(string), "* Eladtad %s ebben a súlyban %d, neki: %dFt.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GiveMoney(playerid, price);
						ClearFishID(playerid, 4);
				    }
				    case 5:
				    {
				        if(Fishes[playerid][pWeight5] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Minket csak 20 LBS súlya: vagy annál nagyobb halak érdekelnek !");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid5]);
                        price = price * Fishes[playerid][pWeight5];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
                        format(string, sizeof(string), "* Eladtad %s ebben a súlyban %d, neki: %dFt..", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GiveMoney(playerid, price);
						ClearFishID(playerid, 5);
				    }
				}
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				return 1;
			}
			else if(strcmp(x_nr,"cooked",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /elad Sült [Sült száma!] [JátékosID/NévRészlet]");
					return 1;
				}
				new cookid = strval(tmp);
				if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Cook number cant be below 1 or above 5 !"); return 1; }
				else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Még nem sütötted meg az 1-es számú halat! "); return 1; }
				else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Még nem sütötted meg az 2-es számú halat!"); return 1; }
				else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Még nem sütötted meg az 3-as számú halat!"); return 1; }
				else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Még nem sütötted meg az 4-es számú halat!"); return 1; }
				else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Még nem sütötted meg az 5-ös számú halat!"); return 1; }
				tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /elad Sült [Sült száma!] [JátékosID/NévRészlet]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
				        switch(cookid)
				        {
							case 1:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "*  %s adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "*  %s adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Ennek a játékosnak nincs több üres helye a listán!");
							        return 1;
							    }
							}
							case 2:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s..",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Ennek a játékosnak nincs több üres helye a listán!");
							        return 1;
							    }
							}
							case 3:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Ennek a játékosnak nincs több üres helye a listán!");
							        return 1;
							    }
							}
							case 4:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Ennek a játékosnak nincs több üres helye a listán!");
							        return 1;
							    }
							}
							case 5:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* adott neked %s súly: %d (használd: /cooked hogy megnézd).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Adtál %s Súly: %d neki: %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Ennek a játékosnak nincs több üres helye a listán!");
							        return 1;
							    }
							}
				        }//switch
				        ClearCookingID(playerid, cookid);
				    }//invalid giveplayerid
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ez a játékos nincs fent!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ismeretlen név!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/fare",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(LMT(playerid, LMUNKA_TAXI) || LMT(playerid, LMUNKA_SFTAXI) || AMT(playerid, MUNKA_BUS))
			{
				if(TransportDuty[playerid] > 0)
				{
				    if(TransportDuty[playerid] == 1)
				    {
				        TaxiDrivers -= 1;
				    }
				    else if(TransportDuty[playerid] == 2)
				    {
				        BusDrivers -= 1;
				    }
				    TransportDuty[playerid] = 0;
					format(string, sizeof(string), "* Kiléptél a szolgálatból, ennyit kaptál: %dFt.", TransportMoney[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					GiveMoney(playerid, TransportMoney[playerid]);
					ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
					return 1;
				}
				if(!IsPlayerInAnyVehicle(playerid))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy jármûben!");

				new Veh = GetVehicleModel(GetPlayerVehicleID(playerid));
				if(Veh == 418 || Veh == 420 || Veh == 438 || Veh == 458)
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "Használat: /fare [price]");
							return 1;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 1000) return SendClientMessage(playerid, COLOR_GREY, "Minimum 1FT és max 1000FT");
						
					    TaxiDrivers += 1;
						TransportDuty[playerid] = 1;
						TransportValue[playerid] = moneys;
						
					    GetPlayerName(playerid,sendername,sizeof(sendername));
					    if(LMT(playerid, LMUNKA_TAXI))
					    {
		    				format(string, sizeof(string), "Taxi Sofõr %s szolgálatban van, viteldíj: %dFt", sendername, TransportValue[playerid]);
		    				OOCNews(TEAM_GROVE_COLOR,string);
	    				}
	    				/*else if(LMT(playerid, LMUNKA_SFTAXI))
	    				{
	    				    format(string, sizeof(string), "San Fierro Taxi Sofõr %s szolgálatban van, viteldíj: %dFT.", sendername, TransportValue[playerid]);
	    					OOCNews(TEAM_GROVE_COLOR,string);
	    				}*/
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nem te vagy a sofõr!");
					    return 1;
					}
				}
				if(Veh == 409)
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "Használat: /fare [price]");
							return 1;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 1000) { SendClientMessage(playerid, COLOR_GREY, "Min 1FT és max 1000FT"); return 1; }
					    TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "Limuzin Sofõr %s szolgálatban van, viteldíj: %dFT.", sendername, TransportValue[playerid]);
	    				OOCNews(TEAM_GROVE_COLOR,string);
					}
				}
				else if(Veh == 431 || Veh == 437)
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "Használat: /fare [price]");
							return 1;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 1000) { SendClientMessage(playerid, COLOR_GREY, "Min 1FT és max 1000FT"); return 1; }
					    BusDrivers += 1; TransportDuty[playerid] = 2; TransportValue[playerid]= moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "Busz sofõr %s szolgálatban van, viteldíj: %dFT.", sendername, TransportValue[playerid]);
	    				OOCNews(TEAM_GROVE_COLOR,string);
					}
				}
			}
	    }
	    return 1;
 	}
 	if(strcmp(cmd,"/enni",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Mialatt harcoslz nem tudsz enni!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /enni [1-5]");
				return 1;
			}
			new cookid = strval(tmp);
			if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "1-5"); return 1; }
			else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "Nincs kajád az 1es zsebedben!"); return 1; }
			else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "Nincs kajád az 2es zsebedben!"); return 1; }
			else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "Nincs kajád az 3as zsebedben!"); return 1; }
			else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "Nincs kajád az 4es zsebedben!"); return 1; }
			else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "Nincs kajád az 5ös zsebedben!"); return 1; }
            GetPlayerName(playerid, sendername, sizeof(sendername));
			new Float:health;
			if(GetPlayerHealth(playerid, health) < 10)
			{
			    new hp = 0;
			    switch (cookid)
			    {
					case 1:
					{
					    if(Cooking[playerid][pCookID1] == 16 || Cooking[playerid][pCookID1] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Veszélyeztetett fajú halt ettél!");
						}
					    SetHealth(playerid, health + (Cooking[playerid][pCWeight1] / 3));
					    hp = Cooking[playerid][pCWeight1];
					    format(string, sizeof(string), "* Valaki evett %s.", Cooking[playerid][pCook1]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook1], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 2:
					{
					    if(Cooking[playerid][pCookID2] == 16 || Cooking[playerid][pCookID2] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Veszélyeztetett fajú halt ettél!");
						}
					    SetHealth(playerid, health + (Cooking[playerid][pCWeight2] / 3));
					    hp = Cooking[playerid][pCWeight2];
					    format(string, sizeof(string), "* Valaki evett %s.", Cooking[playerid][pCook2]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook2], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 3:
					{
					    if(Cooking[playerid][pCookID3] == 16 || Cooking[playerid][pCookID3] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Veszélyeztetett fajú halt ettél!");
						}
					    SetHealth(playerid, health + (Cooking[playerid][pCWeight3] / 3));
					    hp = Cooking[playerid][pCWeight3];
					    format(string, sizeof(string), "* Valaki evett %s.", Cooking[playerid][pCook3]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook3], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 4:
					{
					    if(Cooking[playerid][pCookID4] == 16 || Cooking[playerid][pCookID4] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Veszélyeztetett fajú halt ettél!");
						}
					    SetHealth(playerid, health + (Cooking[playerid][pCWeight4] / 3));
					    hp = Cooking[playerid][pCWeight4];
					    format(string, sizeof(string), "* Valaki evett %s.", Cooking[playerid][pCook4]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook4], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 5:
					{
					    if(Cooking[playerid][pCookID5] == 16 || Cooking[playerid][pCookID5] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Veszélyeztetett fajú halt ettél!");
						}
					    SetHealth(playerid, health + (Cooking[playerid][pCWeight5] / 3));
					    hp = Cooking[playerid][pCWeight5];
					    format(string, sizeof(string), "* Valaki evett %s.", Cooking[playerid][pCook5]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook5], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
			    }
				ClearCookingID(playerid, cookid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nagyon sérült vagy, nem tudsz enni...");
			    return 1;
			}
	    }
	    return 1;
	}  
 	if(egyezik(cmd,"/fõzés") || egyezik(cmd,"/cook"))
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(IsAtCookPlace(playerid))
	        {
	            new x_nr[256];
	            x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /fõzés [típus]");
					SendClientMessage(playerid, COLOR_WHITE, "Használható nevek: utolsóhal, Hal, Csirke, Hamburger, Pizza.");
					return 1;
				}
				if(strcmp(x_nr,"utolsóhal",true) == 0)
				{
				    if(Fishes[playerid][pLastFish] > 0)
	        		{
					    new found = 0;
					    if(Cooking[playerid][pCWeight1] == 0)
					    {
						    format(string, sizeof(string), "Fõztél %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight2] == 0)
					    {
						    format(string, sizeof(string), "Fõztél %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight3] == 0)
					    {
						    format(string, sizeof(string), "Fõztél %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight3] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID3] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight4] == 0)
					    {
						    format(string, sizeof(string), "Fõztél  %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight4] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID4] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight5] == 0)
					    {
						    format(string, sizeof(string), "Fõztél  %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight5] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID5] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "  Üres a fõzés listád !");
					        return 1;
					    }
					    if(found)
					    {
					        ClearFishID(playerid, Fishes[playerid][pLastFish]);
				            Fishes[playerid][pLastFish] = 0;
				            Fishes[playerid][pFishID] = 0;
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Nincs halad !");
				        return 1;
				    }
				}
				else if(strcmp(x_nr,"Hal",true) == 0)
				{
				    new found = 0;
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "Használat: /fõzés hal [id]");
						return 1;
					}
					new fishid = strval(tmp);
					if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Válaszd ki a halat 1 és 5 között !"); return 1; }
					else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Nincsen hall ebben (1) !"); return 1; }
					else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Nincsen hall ebben (2) !"); return 1; }
					else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Nincsen hall ebben (3) !"); return 1; }
					else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Nincsen hall ebben (4) !"); return 1; }
					else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Nincsen hall ebben (5) !"); return 1; }
					if(Cooking[playerid][pCWeight1] == 0)
					{
					    if(fishid == 1)
					    {
						    format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish1]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight1];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid1];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
					    	SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
					    }
						else if(fishid == 2)
					 	{
						    format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight2] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID2] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
						    format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight3] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
    					}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						found = 1;
   					}
					else if(Cooking[playerid][pCWeight4] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
    					}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight5] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Fõztél%s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						found = 1;
   					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Üres a fõzés listád!");
					    return 1;
		    		}
					if(found)
					{
					    ClearFishID(playerid, fishid);
						Fishes[playerid][pLastFish] = 0;
			   			Fishes[playerid][pFishID] = 0;
					}
				}
				else if(strcmp(x_nr,"Csirke",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
				    {//Cluckin Bell
				        if(Groceries[playerid][pChicken] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "csirkét");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "csirkét");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "csirkét");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "csirkét");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "csirkét");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Üres a fõzés litád !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Nincsen csirkéd !");
				            return 1;
				        }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   A Cluckin Bell kell lenned, hogy tudj fõzni !");
					    return 1;
				    }
				}
				else if(strcmp(x_nr,"hamburger",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
					{//Burgershot
					    if(Groceries[playerid][pHamburger] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Készítettél egy Hamburgert");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Készítettél egy Hamburgert");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Készítettél egy Hamburgert");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Készítettél egy Hamburgert");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Készítettél egy Hamburgert");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Üres a fõzés listád !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Nincs nálad Hamburger !");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Burger Shot-be kell lenned, hogy megcsinálhasd !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"pizza",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
					{//Well Stacked Pizza
					    if(Groceries[playerid][pPizza] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Készítettél egy Pizza-t");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Készítettél egy Pizza-t");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Készítettél egy Pizza-t");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Készítettél egy Pizza-t");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Készítettél egy Pizza-t");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Készítettél egy  %s, súlya: %d  LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Üres a fõzés listád !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Nincsen pizza-d !");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Well Stacked-be kell lenned, hogy megcsinálhasd !");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Rosz fõzési név !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Itt nem tudsz Fõzni menj valameik étterembe:(Cluckin Bell / Burger Shot / Well Stacked Pizza).");
	            return 1;
	        }
	    }
	    return 1;
	}  
	if(egyezik(cmd,"/megfõzve") || egyezik(cmd,"/cooked"))
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Megfõzve__________________|");
	        format(string, sizeof(string), "** (1) Sütve: %s.   Tömege: %d.", Cooking[playerid][pCook1], Cooking[playerid][pCWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (2) Sütve: %s.   Tömege: %d.", Cooking[playerid][pCook2], Cooking[playerid][pCWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (3) Sütve: %s.   Tömege: %d.", Cooking[playerid][pCook3], Cooking[playerid][pCWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (4) Sütve: %s.   Tömege: %d.", Cooking[playerid][pCook4], Cooking[playerid][pCWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (5) Sütve: %s.   Tömege: %d.", Cooking[playerid][pCook5], Cooking[playerid][pCWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		}
	    return 1;
 	}
 	if(strcmp(cmd,"/releasefish",true)==0 || strcmp(cmd,"/visszadob",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /releasefish [hal]");
				return 1;
			}
			new fishid = strval(tmp);
			if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "A hal száma 1-5 lehet!"); return 1; }
			else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "Visszadobtad a halat! (1)"); Fishes[playerid][pFish1]=0; Fishes[playerid][pWeight1] = 0;return 1; }
			else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "Visszadobtad a halat! (2)"); Fishes[playerid][pFish2]=0; Fishes[playerid][pWeight2] = 0;return 1; }
			else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "Visszadobtad a halat! (3)"); Fishes[playerid][pFish3]=0; Fishes[playerid][pWeight3] = 0;return 1; }
			else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "Visszadobtad a halat! (4)"); Fishes[playerid][pFish4]=0; Fishes[playerid][pWeight4] = 0;return 1; }
			else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "Visszadobtad a halat! (5)"); Fishes[playerid][pFish5]=0; Fishes[playerid][pWeight5] = 0;return 1; }
			ClearFishID(playerid, fishid);
			Fishes[playerid][pLastFish] = 0;
   			Fishes[playerid][pFishID] = 0;
			PlayerInfo[playerid][pFishes]=PlayerInfo[playerid][pFishes]-1;
		}
		return 1;
	}
 	if(strcmp(cmd,"/throwback",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pLastFish] > 0)
	        {
	            ClearFishID(playerid, Fishes[playerid][pLastFish]);
	            Fishes[playerid][pLastFish] = 0;
	            Fishes[playerid][pFishID] = 0;
				PlayerInfo[playerid][pFishes]=PlayerInfo[playerid][pFishes]-1;
				SendClientMessage(playerid, COLOR_GREY, "Vissza dobtad az utoljára kifogot haladat!");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nem fogtál halat!");
	            return 1;
	        }
	    }
	    return 1;
 	}
 	if(strcmp(cmd,"/throwbackall",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFishes] > 0)
	        {
	            ClearFishes(playerid);
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				PlayerInfo[playerid][pFishes]=0;
				SendClientMessage(playerid, COLOR_GREY, "Vissza dobtad az összes haladat!");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nem fogtál halat még!");
	            return 1;
	        }
	    }
	    return 1;
 	}
	if(strcmp(cmd,"/licenses",true)==0 || strcmp(cmd,"/engedelyeim",true)==0 || strcmp(cmd,"/engedélyeim",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        new text1[10];
	        new text2[10];
	        new text3[10];
	        new text4[10];
	        new text5[10];
			new text6[10];
			new text7[10];
	        text1 = "Nincs";
	        text2 = "Nincs";
	        text3 = "Nincs";
	        text4 = "Nincs";
	        text5 = "Nincs";
			text6 = "Nincs";
	        text7 = "Nincs";

			if(PlayerInfo[playerid][pCarLic] > 0)
				text1 = "Van";

            if(PlayerInfo[playerid][pFlyLic] > 0)
				text4 = "Van";

			if(PlayerInfo[playerid][pBoatLic] > 0)
				text2 = "Van";

	        if(PlayerInfo[playerid][pFishLic] > 0)
				text3 = "Van";

	        if(PlayerInfo[playerid][pGunLic] > 0)
				text5 = "Van";
			
			if(PlayerInfo[playerid][pMotorJogsi] > 0)
				text6 = "Van";
			
			if(PlayerInfo[playerid][pKamionJogsi] > 0)
				text7 = "Van";

	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Engedélyeid __________________|");
			if(PlayerInfo[playerid][pCarLic] > 0)
				format(string, sizeof(string), "** Autó jogsi: %s - Lejár: %d hónap((óra)) múlva.", text1, PlayerInfo[playerid][pCarLic]);
			else
				format(string, sizeof(string), "** Autó jogsi: %s - Lejár: lejárt.", text1);
			SendClientMessage(playerid, COLOR_GREY, string);
			if(PlayerInfo[playerid][pMotorJogsi] > 0)
				format(string, sizeof(string), "** Motor jogsi: %s - Lejár: %d hónap((óra)) múlva.", text6, PlayerInfo[playerid][pMotorJogsi]);
			else
				format(string, sizeof(string), "** Motor jogsi: %s - Lejár: lejárt.", text6);
			SendClientMessage(playerid, COLOR_GREY, string);
			if(PlayerInfo[playerid][pKamionJogsi] > 0)
				format(string, sizeof(string), "** Kamion jogsi: %s - Lejár: %d hónap((óra)) múlva.", text7, PlayerInfo[playerid][pKamionJogsi]);
			else
				format(string, sizeof(string), "** Kamion jogsi: %s - Lejár: lejárt.", text7);
			SendClientMessage(playerid, COLOR_GREY, string);
			if(PlayerInfo[playerid][pFlyLic] > 0)
				format(string, sizeof(string), "** Repülõ engedély: %s - Lejár: %d hónap((óra)) múlva.", text4, PlayerInfo[playerid][pFlyLic]);
			else
				format(string, sizeof(string), "** Repülõ engedély: %s - Lejár: lejárt.", text4);
			SendClientMessage(playerid, COLOR_GREY, string);
			if(PlayerInfo[playerid][pBoatLic] > 0)
				format(string, sizeof(string), "** Hajó engedély: %s - Lejár: %d hónap((óra)) múlva.", text2, PlayerInfo[playerid][pBoatLic]);
			else
				format(string, sizeof(string), "** Hajó engedély: %s - Lejár: lejárt.", text2);
			SendClientMessage(playerid, COLOR_GREY, string);
			if(PlayerInfo[playerid][pFishLic] > 0)
				format(string, sizeof(string), "** Horgász engedély: %s - Lejár: %d hónap((óra)) múlva.", text3, PlayerInfo[playerid][pFishLic]);
			else
				format(string, sizeof(string), "** Horgász engedély: %s - Lejár: lejárt.", text3);
			SendClientMessage(playerid, COLOR_GREY, string);
			if(PlayerInfo[playerid][pGunLic] > 0)
				format(string, sizeof(string), "** Fegyver engedély: %s - Lejár: %d hónap((óra)) múlva.", text5, PlayerInfo[playerid][pGunLic]);
			else
				format(string, sizeof(string), "** Fegyver engedély: %s - Lejár: lejárt.", text5);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________|");
		}
	    return 1;
 	}
 	if(strcmp(cmd,"/showlicenses",true)==0 || strcmp(cmd,"/engedelyek",true)==0 || strcmp(cmd,"/engedélyek",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /engedélyek [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Magadnak nem tudod megmutatni! Használd a /licenses parancsot!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20];
				        new text2[20];
				        new text3[20];
				        new text4[20];
				        new text5[20];
						new text6[20];
				        new text7[20];
						if(PlayerInfo[playerid][pCarLic] > 0) { text1 = "Van"; } else { text1 = "Nincs"; }
                        if(PlayerInfo[playerid][pFlyLic] > 0) { text4 = "Van"; } else { text4 = "Nincs"; }
						if(PlayerInfo[playerid][pBoatLic] > 0) { text2 = "Van"; } else { text2 = "Nincs"; }
				        if(PlayerInfo[playerid][pFishLic] > 0) { text3 = "Van"; } else { text3 = "Nincs"; }
				        if(PlayerInfo[playerid][pGunLic] > 0) { text5 = "Van"; } else { text5 = "Nincs"; }
						if(PlayerInfo[playerid][pMotorJogsi] > 0) { text6 = "Van"; } else { text6 = "Nincs"; }
				        if(PlayerInfo[playerid][pKamionJogsi] > 0) { text7 = "Van"; } else { text7 = "Nincs"; }

				        format(string, sizeof(string), "|__________%s Engedélyei __________|", sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        /*format(string, sizeof(string), "** Autó jogsi: %s.", text1);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Motor jogsi: %s.", text6);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Kamion jogsi: %s.", text7);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Repülõ engedély: %s.", text4);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Hajó engedély: %s.", text2);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Horgászengedély: %s.", text3);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Fegyverengedély: %s.", text5);
						SendClientMessage(giveplayerid, COLOR_GREY, string);*/
						if(PlayerInfo[playerid][pCarLic] > 0)
							format(string, sizeof(string), "** Autó jogsi: %s - Lejár: %d hónap((óra)) múlva.", text1, PlayerInfo[playerid][pCarLic]);
						else
							format(string, sizeof(string), "** Autó jogsi: %s - Lejár: lejárt.", text1);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						if(PlayerInfo[playerid][pMotorJogsi] > 0)
							format(string, sizeof(string), "** Motor jogsi: %s - Lejár: %d hónap((óra)) múlva.", text6, PlayerInfo[playerid][pMotorJogsi]);
						else
							format(string, sizeof(string), "** Motor jogsi: %s - Lejár: lejárt.", text6);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						if(PlayerInfo[playerid][pKamionJogsi] > 0)
							format(string, sizeof(string), "** Kamion jogsi: %s - Lejár: %d hónap((óra)) múlva.", text7, PlayerInfo[playerid][pKamionJogsi]);
						else
							format(string, sizeof(string), "** Kamion jogsi: %s - Lejár: lejárt.", text7);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						if(PlayerInfo[playerid][pFlyLic] > 0)
							format(string, sizeof(string), "** Repülõ engedély: %s - Lejár: %d hónap((óra)) múlva.", text4, PlayerInfo[playerid][pFlyLic]);
						else
							format(string, sizeof(string), "** Repülõ engedély: %s - Lejár: lejárt.", text4);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						if(PlayerInfo[playerid][pBoatLic] > 0)
							format(string, sizeof(string), "** Hajó engedély: %s - Lejár: %d hónap((óra)) múlva.", text2, PlayerInfo[playerid][pBoatLic]);
						else
							format(string, sizeof(string), "** Hajó engedély: %s - Lejár: lejárt.", text2);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						if(PlayerInfo[playerid][pFishLic] > 0)
							format(string, sizeof(string), "** Horgász engedély: %s - Lejár: %d hónap((óra)) múlva.", text3, PlayerInfo[playerid][pFishLic]);
						else
							format(string, sizeof(string), "** Hajó engedély: %s - Lejár: lejárt.", text3);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						if(PlayerInfo[playerid][pGunLic] > 0)
							format(string, sizeof(string), "** Fegyver engedély: %s - Lejár: %d hónap((óra)) múlva.", text5, PlayerInfo[playerid][pGunLic]);
						else
							format(string, sizeof(string), "** Fegyver engedély: %s - Lejár: lejárt.", text5);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "* %s megmutatta neked az engedélyeit.", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Megmutattad az engedélyeidet neki: %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Valaki elõvette az egyik iratát és felmutatta...");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ez a játékos nincs a közelben!");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs fennt!");
	            return 1;
	        }
		}
	    return 1;
 	}

	if(strcmp(cmd,"/személyi",true)==0 || strcmp(cmd,"/szemelyi",true)==0 || strcmp(cmd,"/showic",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /személyi [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));

						new neme[32];

						if(PlayerInfo[playerid][pSex] == 1)
							neme = "Férfi";
						else if(PlayerInfo[playerid][pSex] == 2)
							neme = "Nõ";
						else
						    neme = "Semleges ((??))";

						if(PlayerInfo[playerid][pHamisNev] == 0)
							format(string, sizeof(string), "=== %s személyi igazolványa ===", sendername);
						else
							format(string, sizeof(string), "=== %s személyi igazolványa ===",PlayerInfo[playerid][pHamisNev]);

						SendClientMessage(giveplayerid, COLOR_WHITE, string);

						if(PlayerInfo[playerid][pHamisNev] == 0)
							format(string, sizeof(string), "Neve %s", sendername);
						else
							format(string, sizeof(string), "Neve %s", PlayerInfo[playerid][pHamisNev]);

						SendClientMessage(giveplayerid, COLOR_GRAD2, string);

						format(string, sizeof(string), "%s", neme);
						SendClientMessage(giveplayerid, COLOR_GRAD2, string);

						format(string, sizeof(string), "%d éves", PlayerInfo[playerid][pAge]);
						SendClientMessage(giveplayerid, COLOR_GRAD2, string);

						/*format(string, sizeof(string), "%d napja lakik a városban((óra))", PlayerInfo[playerid][pConnectTime]);
						SendClientMessage(giveplayerid, COLOR_GRAD2, string);*/

						format(string, sizeof(string), "* Megmutattad az személyid neki: %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						/*format(string, sizeof(string), "%s megmutatta a személyiét neki: ", sendername, giveplayer);
	    				ProxDetector2(30.0, string, 554.769287, -2223.505859, 1.501912, COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED);*/
	    				format(string, sizeof(string), "* Valaki elõvette az egyik iratát és felmutatta...");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ez a játékos nincs a közelben!");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs fennt!");
	            return 1;
	        }
		}
	    return 1;
 	}

	if(strcmp(cmd,"/forgalmi",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /forgalmi [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));


						format(string, sizeof(string), "=== %s forgalmija ===", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);

						if(PlayerInfo[playerid][pPcarkey] != NINCS)
						{
						    new carid = PlayerInfo[playerid][pPcarkey];
							new rendszam = CarInfo[carid][cId];
							new kocsi = CarInfo[carid][cModel] - 400;
							SendFormatMessage(giveplayerid, COLOR_GREY, "Saját autó rendszáma: %d | Model: %s", rendszam, vehName[kocsi]);
						}
						else
							SendClientMessage(giveplayerid, COLOR_GRAD2, "Saját autó rendszáma: Nincs");


						if(HireCar[playerid] != NINCS)
						{
							new rendszam = HireCar[playerid];
							new kocsi = GetVehicleModel(rendszam) - 400;
							SendFormatMessage(giveplayerid, COLOR_GREY, "Saját autó rendszáma: %d | Model: %s", rendszam, vehName[kocsi]);
						}
						else
							SendClientMessage(giveplayerid, COLOR_GRAD2, "Saját autó rendszáma: Nem bérel");


						format(string, sizeof(string), "Megmutattad a forgalmid neki: %s", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Valaki elõvette az egyik iratát és felmutatta...");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);



					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ez a játékos nincs a közelben!");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   A játékos nincs fennt!");
	            return 1;
	        }
		}
	    return 1;
 	}

 	if(strcmp(cmd,"/frisk",true)==0 || strcmp(cmd,"/motoz",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			if(FloodCheck(playerid)) return 1;
			giveplayerid = GetClosestPlayer(playerid);
			if(IsPlayerConnected(giveplayerid) || giveplayerid != INVALID_PLAYER_ID)
			{
			    if(ProxDetectorS(2.0, playerid, giveplayerid))
				{
				    if(giveplayerid == playerid)
						return Msg(playerid, "Magadat akarod megmotozni? -.-");
						
					OnePlayAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
					OnePlayAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);					
					Msg(playerid, "|__________ Tárgyak a személynél __________|", false, COLOR_WHITE);
					new drogok;
					if(PlayerInfo[giveplayerid][pKokain] > 0)
						drogok += PlayerInfo[giveplayerid][pKokain];
					if(PlayerInfo[giveplayerid][pHeroin] > 0)
						drogok += PlayerInfo[giveplayerid][pHeroin];
					if(PlayerInfo[giveplayerid][pMarihuana] > 0)
						drogok += PlayerInfo[giveplayerid][pMarihuana];
					
				    if(PlayerInfo[giveplayerid][pKokain] > 0 || PlayerInfo[giveplayerid][pHeroin] > 0 || PlayerInfo[giveplayerid][pMarihuana] > 0)
						SendClientMessage(playerid, COLOR_GREY, "- Drog");
							
				    if(PlayerInfo[giveplayerid][pMats] > 0)
						SendClientMessage(playerid, COLOR_GREY, "- Material");
						
				    if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0)
						SendClientMessage(playerid, COLOR_GREY, "- Hal");
						
				    if(PlayerInfo[giveplayerid][pPhoneBook] > 0)
						SendClientMessage(playerid, COLOR_GREY, "- Telefonkönyv");
						
				    if(PlayerInfo[giveplayerid][pCDPlayer] > 0)
						SendClientMessage(playerid, COLOR_GREY, "- MP4");
					
				    if(PlayerInfo[giveplayerid][pLokator] > 0)
						SendClientMessage(playerid, COLOR_GREY, "- GPS Lokátor");
						
				    if(PlayerInfo[giveplayerid][pCigi] > 0)
						SendClientMessage(playerid, COLOR_GREY, "- Cigaretta");
					
				    if(PlayerInfo[giveplayerid][pPia] > 0)
						SendClientMessage(playerid, COLOR_GREY, "- Üdítõ");
						
				    if(PlayerInfo[giveplayerid][pGyujto] > 0)
						SendClientMessage(playerid, COLOR_GREY, "- Gyujtó");
						
					new fegyverek[96], fegyverek2[96], fegyok, fegyo, ammo, ammo2[8];
					for(new x = 0; x < 13; x++)
					{
						GetPlayerWeaponData(giveplayerid, x, fegyo, ammo);
						if(x == 0 && fegyo != 1) continue;
			
						if(ammo > 0) Format(ammo2, "[%d]", ammo);
						else ammo2[0] = EOS;
			
						if(ammo != 0)
						{
							fegyok++;
							if(fegyok < 6)
								if(fegyok == 1)
									Format(fegyverek, "Fegyverek: (%d)%s%s", fegyo, aWeaponNames[fegyo], ammo2);
								else
									Format(fegyverek, "%s, (%d)%s%s", fegyverek, fegyo, aWeaponNames[fegyo], ammo2);
							else
								if(fegyok == 6)
									Format(fegyverek2, "Fegyverek: (%d)%s%s", fegyo, aWeaponNames[fegyo], ammo2);
								else
									Format(fegyverek2, "%s, (%d)%s%s", fegyverek2, fegyo, aWeaponNames[fegyo], ammo2);
						}
					}
		
					if(fegyok > 0)
						SendClientMessage(playerid, COLOR_GRAD3, fegyverek);
		
					if(fegyok >= 6)
						SendClientMessage(playerid, COLOR_GRAD4, fegyverek2);
						
					Cselekves(playerid, "átkutatott valakit");
					}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nincs a közeledben a játékos!");
				    return 1;
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
	            return 1;
	        }
		}
	    return 1;
 	}


	if(strcmp(cmd,"/sellcar",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!AMT(playerid, MUNKA_AUTOKERESKEDO))
			{
			    SendClientMessage(playerid,COLOR_GREY,"Nem vagy autókereskedõ");
			    return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid,COLOR_GREY,"Nem vagy kocsiban!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /sellcar [playerid/PartOfName] [price]");
				return 1;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /sellcar [playerid/PartOfName] [price]");
				return 1;
			}
			new money = strval(tmp);
			if(money < 1 || money > 100000) { SendClientMessage(playerid, COLOR_GREY, "Az árnak 1 és 100000FT között kell lennie!"); return 1; }
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Magadnak nem adhatod el");
					        return 1;
					    }
					    if(CarCalls[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Õ már vett egy kocsit!");
					        return 1;
					    }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Felajánlottad neki: %s, hogy vegye meg a kocsidat %dFt-ért .", giveplayer, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Autókereskedõ %s eladná neked saját kocsiját %dFt-ért (/accept car)", sendername, money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						CarOffer[giveplayerid] = playerid;
						CarPrice[giveplayerid] = money;
						CarID[giveplayerid] = GetPlayerVehicleID(playerid);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nincs hozzád közel!");
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Hibás név");
			    return 1;
			}
	    }
		return 1;
	}
	if(strcmp(cmd,"/portable",true)==0 || strcmp(cmd,"/laptop",true)==0)
	{
	    if(IsHitman(playerid))
	    {
		    if(ConnectedToPC[playerid] == 255)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Lekapcsolódtál az Ügynökség hálózatáról, és kikapcsoltad a laptopod");
		        ConnectedToPC[playerid] = 0;
		        return 1;
		    }
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bekapcsoltad a laptopod és rákapcsolódtál az Ügynökségre");
			SendClientMessage(playerid, COLOR_WHITE, "====[ Laptop ]====");
			if(IsDirector(playerid))
			{
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - /hitman");
			}
			SendClientMessage(playerid, COLOR_YELLOW2, "| - Tagok - Hírdetés");
			SendClientMessage(playerid, COLOR_YELLOW2, "| - Vérdíjak  - Ruha");
			SendClientMessage(playerid, COLOR_YELLOW2, "| - Célpontok - Álnév");
			SendClientMessage(playerid, COLOR_YELLOW2, "| - Rendelés - Bilincs");
			SendClientMessage(playerid, COLOR_YELLOW2, "| - Bomba - Munka");
			ConnectedToPC[playerid] = 255;
		}
	    return 1;
	}

    if(strcmp(cmd,"/sellgun",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if(!AMT(playerid, MUNKA_FEGYVER))
			    return SendClientMessage(playerid,COLOR_GREY,"   Nem vagy fegyverkereskedõ !");

			if(FloodCheck(playerid)) return 1;

			new x_weapon[256],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: /sellgun [név] [fegyver]");
				SendClientMessage(playerid, COLOR_GREY, "Fegyverek: silenced(900) colt45(1000) deagle(1000)");
				SendClientMessage(playerid, COLOR_GREY, "Fegyverek: mp5(1500) shotgun(2000)");
				SendClientMessage(playerid, COLOR_GREY, "Fegyverek: ak47(4000) m4(4000) rifle (3000)");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					x_weapon = strtok(cmdtext, idx);
					if(!strlen(x_weapon))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Használat: /sellgun [név] [fegyver]");
						SendClientMessage(playerid, COLOR_GREY, "Fegyverek: silenced(900) colt45(1000) deagle(1000)");
						SendClientMessage(playerid, COLOR_GREY, "Fegyverek: mp5(1500) shotgun(2000)");
						SendClientMessage(playerid, COLOR_GREY, "Fegyverek: ak47(4000) rifle (3000)");
						return 1;
					}
				}

				if(strcmp(x_weapon,"silenced",true) == 0) { if(PlayerInfo[playerid][pMats] >= 900) { weapon[playerid] = 23; price[playerid] = 900; ammo[playerid] = 100; } else { SendClientMessage(playerid,COLOR_GREY,"   Nincs elég anyagod a fegyver elkészítéséhez!"); return 1; } }
				else if(strcmp(x_weapon,"colt45",true) == 0) {	if(PlayerInfo[playerid][pMats] >= 1000) { weapon[playerid] =22; price[playerid] = 1000; ammo[playerid] = 100; } else { SendClientMessage(playerid,COLOR_GREY,"   Nincs elég anyagod a fegyver elkészítéséhez!"); return 1; } }
				else if(strcmp(x_weapon,"deagle",true) == 0) {	if(PlayerInfo[playerid][pMats] >= 1000) { weapon[playerid] =24; price[playerid] = 1000; ammo[playerid] = 100; } else { SendClientMessage(playerid,COLOR_GREY,"   Nincs elég anyagod a fegyver elkészítéséhez!"); return 1; } }
				else if(strcmp(x_weapon,"mp5",true) == 0) {	if(PlayerInfo[playerid][pMats] >= 1500) { weapon[playerid] = 29; price[playerid] = 1500; ammo[playerid] = 500; } else { SendClientMessage(playerid,COLOR_GREY,"   Nincs elég anyagod a fegyver elkészítéséhez!"); return 1; } }
				else if(strcmp(x_weapon,"shotgun",true) == 0) {	if(PlayerInfo[playerid][pMats] >= 2000) { weapon[playerid] = 25; price[playerid] = 2000; ammo[playerid] = 150; } else { SendClientMessage(playerid,COLOR_GREY,"   Nincs elég anyagod a fegyver elkészítéséhez!"); return 1; } }
				else if(strcmp(x_weapon,"ak47",true) == 0) { if(PlayerInfo[playerid][pMats] >= 4000) { weapon[playerid] = 30; price[playerid] = 4000; ammo[playerid] = 400; } else { SendClientMessage(playerid,COLOR_GREY,"   Nincs elég anyagod a fegyver elkészítéséhez!"); return 1; } }
				else if(strcmp(x_weapon,"rifle",true) == 0) { if(PlayerInfo[playerid][pMats] >= 3000) { weapon[playerid] = 33; price[playerid] = 3000; ammo[playerid] = 100; } else { SendClientMessage(playerid,COLOR_GREY,"   Nincs elég anyagod a fegyver elkészítéséhez!"); return 1; } }
				else { SendClientMessage(playerid,COLOR_GREY,"   Rossz fegyvernév!!"); return 1; }
				if (ProxDetectorS(5.0, playerid, giveplayerid))
				{
					if(PlayerInfo[playerid][pMiserPerk] > 0)
					{
					    new skill = 3 * PlayerInfo[playerid][pMiserPerk];
					    new mats = price[playerid] / 100;
					    price[playerid] -= (mats)*(skill);
					}
					ConsumingMoney[playerid] = 1;
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "   Adtál neki (%s) egy %s-t %ddb tölténnyel. %d materialodba került.", giveplayer,x_weapon, ammo[playerid], price[playerid]);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "   Kaptál egy %s-t %ddb tölténnyel, tõle: %s", x_weapon, ammo[playerid], sendername);
					SendClientMessage(giveplayerid, COLOR_GRAD1, string);
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* Valaki összerakott egy fegyvert.");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GiveWeapon(giveplayerid,weapon[playerid],ammo[playerid]);
					PlayerInfo[playerid][pMats] -= price[playerid];
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Túl távol vagy a játékostól.");
					return 1;
				}
			}
			else
			{
				format(string, sizeof(string), "%d nem is játszik.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(egyezik(cmd, "/get"))
	{
		if(params < 1) return Msg(playerid, "/Get [Fuel(1-100)]");
		if(egyezik(param[1], "fuel"))
		{
			new kut = IsAtGasStation(playerid);
			if(kut == NINCS) return Msg(playerid, "Nem vagy benzinkútnál");
			if(PlayerInfo[playerid][pFuel] == 30) return Msg(playerid, "Tele a benzines kannád.");
			if(params != 2) return Msg(playerid, "/Get Fuel [Liter]");
			new liter = strval(param[2]);
			new price = liter * BenzinKutak[kut][bBenzinAra];
			if(liter < 1 || liter > 30) return Msg(playerid, "1-30 liter");
			if((liter + PlayerInfo[playerid][pFuel]) > 30)
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Enyi nem fér a kannádba! (%d Liter van benne)", PlayerInfo[playerid][pFuel]);
				return 1;
			}
			if((BenzinKutak[kut][bBenzin] - liter) < 0)
			{
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Ezen a benzinkúton %d/%d liter van, nem tudsz ennyit tankolni.", BenzinKutak[kut][bBenzin], BenzinKutak[kut][bMaxBenzin]);
				return 1;
			}			
			if((GetMoney(playerid) - price) < 0) 
			{
				//new menyikell = GetMoney(playerid) - price;
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Nincs elég pénzed hogy %d litert tölts a kannádba.", liter);
				//SendFormatMessage(playerid, COLOR_LIGHTRED, "* Még %dFt-ra van szükséged.", menyikell);
				return 1;
			}
			BenzinKutak[kut][bBenzin] -= liter;
			PlayerInfo[playerid][pFuel] += liter;
			BenzinKutak[kut][bSzef] += price;
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Feltöltötted a benzines kannád %d literrel, most %d liter van benne, %dFt-ba került.", liter, PlayerInfo[playerid][pFuel], price);
			GiveMoney(playerid, - price);
			Cselekves(playerid, "feltöltötte a kannáját benzinnel.");
		}
	}
	/*if(strcmp(cmd,"/get",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);

			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Get __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /get [name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Available names: Fuel");
				SendClientMessage(playerid, COLOR_GREEN, "|_________________________________________|");
				return 1;
			}

			if(strcmp(x_job,"fuel",true) == 0)
			{
			    if(IsAtGasStation(playerid))
				{
				    if(PlayerInfo[playerid][pFuel] == 100) return Msg(playerid, "Tele a benzines kannád.");

				    new price = 20 * BizzInfo[BIZ_OLAJ][bEntranceCost];
				    format(string, sizeof(string), "* A benzinkannádat feltöltötted 20% benzinnel, %dFT-ért",price);
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				    PlayerInfo[playerid][pFuel] = 20;
					GiveMoney(playerid, - price);
					return 1;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"Nem vagy a benzinkúton!");
					return 1;
				}
			}
			else { return 1; }
		}//not connected
		return 1;
	}*/
	
	if(egyezik(cmd, "/fill"))
	{
		if(FloodCheck(playerid)) return 1;
		if(Tankol[playerid][0] != 0)
		{
			Tankol[playerid][0] = 0;
			Cselekves(playerid, "befejezte a tankolást");
			UnFreeze(playerid);
			return 1;
		}
		new kut = IsAtGasStation(playerid);
		if(kut == NINCS) return Msg(playerid, "Nem vagy benzinkútnál");

		if(IsPlayerInAnyVehicle(playerid))  return Msg(playerid, "Jármûben hogy töltöd bele? o.O");
		new kocsi = GetClosestVehicle(playerid);
		
		if(GetDistanceToVehicle(playerid, kocsi) > 5.0)
			return Msg(playerid, "Nincs melletted jármû!");
		
		if(Gas[kocsi] > MaxBenzin(kocsi))
			return Msg(playerid, "A kocsi tele van!");
		
		if(BenzinKutak[kut][bBenzin] < 1)
			return Msg(playerid, "* Ez a benzinkút üres");

		new BenzinAra = BenzinKutak[kut][bBenzinAra];
		if(GetMoney(playerid) < BenzinAra && ( IngyenTankol(playerid, kocsi) && FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] < BenzinAra || !IngyenTankol(playerid, kocsi) ) )
		{
			SendFormatMessage(playerid, COLOR_LIGHTRED, "* Nincs elég pénzed! Egy liter benzin ára %dFt", BenzinAra);
			return 1;
		}
		
		if(IngyenTankol(playerid, kocsi) && FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] >= BenzinAra)
			FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] -= BenzinAra;
		else
			GiveMoney(playerid, -BenzinAra);
			
		BenzinKutak[kut][bBenzin]--;
		BenzinKutak[kut][bSzef] += BenzinAra;
		
		SetTimerEx("BenzinTankolas", 1000, false, "d", playerid);
		
		Msg(playerid, "Elkezdted megtankolni a jármûvedet");
		Cselekves(playerid, "elkezdte megtankolni a jármûvét.");

		Gas[kocsi] += 1;
		Tankol[playerid][0] = kocsi;
		Tankol[playerid][1] = kut;
		Freeze(playerid);
		
		return 1;
	}
	
	/*if(egyezik(cmd, "/fill"))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Szálj bele egy jármûbe.");
		if(!IsAtGasStation(playerid)) return Msg(playerid, "Nem vagy benzinkútnál.");
		if(Tankol[playerid] > 0)
		{
			SendFormatMessage(playerid, COLOR_LIGHTRED, "* Még %dmp...", Tankol[playerid]);
			return 1;
		}
		if(params != 1) return Msg(playerid, "/Fill [Liter(1-100)]");
		new liter = strval(param[1]);
		if(liter < 1 || liter > 100) return Msg(playerid, "Liter 1-100");
		new kocsi = GetPlayerVehicleID(playerid);
		if(Gas[kocsi] == 100) return Msg(playerid, "Tele van!");
		new UjBenzin = (Gas[kocsi] + liter);
		if(UjBenzin > 100) return Msg(playerid, "Enyi benzin nem fér bele...");
		new BenzinAra = liter * BizzInfo[BIZ_OLAJ][bEntranceCost];
		if(GetMoney(playerid) < BenzinAra && !IsACop(playerid))
		{
			SendFormatMessage(playerid, COLOR_LIGHTRED, "* Nincs elég pénzed! (%dFt a benzin ára)", BenzinAra);
			return 1;
		}
		Tankol[playerid] = 30;
		MenyitTankol[playerid] = liter;
		MenyiABenzinAra[playerid] = BenzinAra;
		engineOn[kocsi] = 0;
		Freeze(playerid);
		Msg(playerid, "Tankolsz, várj.");
		Cselekves(playerid, "tankol...", 1);
		if(egyezik(param[1], "debug"))
		{
			if(!Admin(playerid, 2)) return 1;
			if(params < 2) return Msg(playerid, "/fill debug [Játékos Neve / ID]");
			new player;
			player = ReturnUser(param[1]);
			if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos");
			Tankol[player] = 0;
			Msg(playerid, "Ok.");
		}
	}*/
	/*if(strcmp(cmd, "/fill", true) == 0)
	{
		if(!IsPlayerInAnyVehicle(playerid))
			return 1;
		new kell, benzinkell, kocsi;
		kocsi = GetPlayerVehicleID(playerid);
		benzinkell =  GasMax - Gas[kocsi];
		kell = benzinkell * BizzInfo[BIZ_OLAJ][bEntranceCost];
		if(kell > GetMoney(playerid) && !LegalisSzervezetTagja(playerid))
		{
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Nincs elég pénzed a tankoláshoz! Még %d forintra van szükséged!", (kell - GetMoney(playerid)));
			return 1;
		}

	    if(IsPlayerConnected(playerid))
	    {
			if(IsAtGasStation(playerid))
			{
			    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Tankolas... varj...",2000,3);
				SetTimer("Fillup",RefuelWait,0);
				SetTimerEx("Fagyasztas", RefuelWait, false, "ii", playerid);
				Refueling[playerid] = 1;
				TogglePlayerControllable(playerid, 0);
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"Nem vagy a benzinkúton!");
			}
		}
    	return 1;
	}*/
	if(egyezik(cmd, "/fillcar"))
	{
		if(PlayerInfo[playerid][pFuel] < 1) return Msg(playerid, "Nincs benzin a kannádba.");
		if(params < 1) return Msg(playerid, "/fillcar [benzin]");
		new liter = strval(param[1]);
		if(liter < 1 || liter > 100) return Msg(playerid, "Minimum 1, maximum 100liter");
		
		new kocsi;
		if(IsPlayerInAnyVehicle(playerid))  return Msg(playerid, "Kocsiban hogy töltöd bele? o.O");
		kocsi = GetClosestVehicle(playerid);
		if((PlayerInfo[playerid][pFuel] - liter) < 0)
		{
			SendFormatMessage(playerid, COLOR_LIGHTRED, "* Nincs enyi liter benzin a kannádba. (%d liter van)", PlayerInfo[playerid][pFuel]);
			return 1;
		}
		if(GetDistanceToVehicle(playerid, kocsi) > 5.0) return Msg(playerid, "Nincs melletted jármû!");
		if((Gas[kocsi] + liter) > MaxBenzin(kocsi)) return Msg(playerid, "Enyi benzin nem fér bele.");
		Gas[kocsi] += liter;
		PlayerInfo[playerid][pFuel] -= liter;
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Megtöltötted %d literrel a jármûvet, most %d liter van benne.", liter, Gas[kocsi]);
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Kannádba maradt %d liter.", PlayerInfo[playerid][pFuel]);
		Cselekves(playerid, "megtöltötte a jármûvet benzinnel.");
		if(engineOn[kocsi] == 1)
		{
			new Float:x, Float:y, Float:z;
			GetVehiclePos(kocsi, x, y, z);
			CreateExplosion(x, y, z, 2, 500.0);
			SetHealth(playerid, 0);
			Msg(playerid, "A jármû berobbant mert nem állítóttad le a motort!");
			new filluzi[128];
			Format(filluzi, "[Tankolás][%d]%s járó motornál tankolt és berobbant.", playerid, PlayerName(playerid));
			ABroadCast(COLOR_LIGHTRED, filluzi, 1);
		}	
	}
	/*if(strcmp(cmd, "/fillcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pFuel] > 0)
		    {
				new kocsi;
		        if(IsPlayerInAnyVehicle(playerid))  return Msg(playerid, "Kocsiban hogy töltöd bele? o.O"); //kocsi = GetPlayerVehicleID(playerid);
		        else kocsi = GetClosestVehicle(playerid);

				if(GetDistanceToVehicle(playerid, kocsi) > 5.0)
					return Msg(playerid, "Nincs melletted jármû!");

		        if((Gas[kocsi] + PlayerInfo[playerid][pFuel]) < 100)
		        {
			        SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Megtöltötted %d literrel a jármûvet.", PlayerInfo[playerid][pFuel]);
			        Gas[kocsi] += PlayerInfo[playerid][pFuel];
			        PlayerInfo[playerid][pFuel] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "A kocsiba nem fér be ennyi benzin!");
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "A benzinkannád üres");
		    }
		}
		return 1;
    }*/
	if(egyezik(cmd, "/detain"))
	{
		if(params < 2) return Msg(playerid, "/detain [Játékos Neve / ID] [Ülés(1-3)]");
		new player;
		player = ReturnUser(param[1]);
		new ules;
		ules = strval(param[2]);
		if(player == INVALID_PLAYER_ID) return Msg(playerid, "Nincs ilyen játékos");
		if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Jármûbõl nem használhatod!");
		if(ules < 1 || ules > 3) return Msg(playerid, "Ülés csak 1-3 lehet.");
		if(GetDistanceBetweenPlayers(playerid,player) > 5) return Msg(playerid, "A játékos nincs a közelben.");
		if(playerid == player) return Msg(playerid, "Idióta, magadat?-.-");
		if(IsPlayerInAnyVehicle(player)) return Msg(playerid, "A játékos jármûben van, elöször szedd ki onnan!");
		if(PlayerCuffed[player] < 1 && !Leutve[player]) return Msg(playerid, "A játékos nincs megbilincselve!");
		new kocsi;
		kocsi = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, kocsi) > 5) return Msg(playerid, "A közeledben nincs jármû!");
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* %s-t beraktad a jármûbe.", PlayerName(player));
		SendClientMessage(player, COLOR_LIGHTRED, "* Beraktak egy jármûbe.");
		Cselekves(playerid, "berakta a célszemélyt a jármûbe.");
		ClearAnimations(player);
		TogglePlayerControllable(player, 0);
		PutPlayerInVehicle(player, kocsi, ules);
	}
	/*if(strcmp(cmd, "/detain", true) ==0)
	{
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
			SendClientMessage(playerid, COLOR_WHITE, "Használat: /detain [ülés (1-3)]");
	        return 1;
        }
        //giveplayerid = ReturnUser(tmp);
		giveplayerid = GetClosestPlayer(playerid);
		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Nincs ilyen játékos.");
			return 1;
		}
		if(!IsACop(playerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Nem vagy rendõr");
			return 1;
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Menj a bûnözõ mellé, autóban nem használhatod ezt a parancsot!");
			return 1;
		}
		if(!ProxDetectorS(3.0, playerid, giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Ez a játékos nincs hozzád közel!");
			return 1;
		}
		if(playerid==giveplayerid)
		{
			SendClientMessage(playerid, COLOR_GREY, "Magadat? O.O");
			return 1;
		}
		if(IsACop(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Rendõrt nem rakhatsz be");
			return 1;
		}
		if(IsPlayerInAnyVehicle(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Autóban van, elõször szedd ki onnan!");
			return 1;
		}
		if(PlayerCuffed[giveplayerid] < 2)
		{
			SendClientMessage(playerid, COLOR_GREY, "Elõször bilincseld meg!");
			return 1;
		}
		new seatid;
		tmp = strtok(cmdtext, idx);
		if (!strlen(tmp))
		{
			seatid=1;
		}
		else
		{
			seatid = strval(tmp);
			if(seatid < 1 && seatid > 3)
			    seatid = 1;
		}
		new Dcarid = GetClosestVehicle(playerid);
		new Float:DPositions[3][3];
		GetPlayerPos( playerid, DPositions[0][0], DPositions[0][1], DPositions[0][2]);
		GetPlayerPos( giveplayerid, DPositions[1][0], DPositions[1][1], DPositions[1][2]);
		GetVehiclePos( Dcarid, DPositions[2][0], DPositions[2][1], DPositions[2][2]);
		if (GetDistance( DPositions[0][0], DPositions[0][1], DPositions[0][2], DPositions[1][0], DPositions[1][1], DPositions[1][2]) < 15.0 )
		if (GetDistance( DPositions[0][0], DPositions[0][1], DPositions[0][2], DPositions[2][0], DPositions[2][1], DPositions[2][2]) < 15.0 )
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "* Valaki berakott a kocsiba");
		SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Beraktad a kocsiba.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Valakit beraktak egy kocsiba...",giveplayer);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		GameTextForPlayer(giveplayerid, "~r~Berakva", 2500, 3);
		ClearAnimations(giveplayerid);
		TogglePlayerControllable(giveplayerid, 0);
		PutPlayerInVehicle(giveplayerid, Dcarid, seatid);
		return 1;
	}*/

	if(strcmp(cmd, "/tazer", true) ==0 || strcmp(cmd, "/sokk", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(OnDuty[playerid]==1)
			{
				if(Sokkolt[playerid] > 0)
				{	
					SendFormatMessage(playerid, COLOR_LIGHTRED, "[Gates]: Várnod kell még %d másodpercet.", Sokkolt[playerid]);
					return 1;
				}
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Autóban sokkolni? Esszeednééélvaaagy? Lesüüüül a motor vazzee!");
			        return 1;
			    }
				if(Fegyvere[playerid] != 24 && Fegyvere[playerid] != 23) return Msg(playerid, "Ezzel a fegyverrel nem tudsz sokkolni!");
			    new suspect;
				if(params > 0)
					suspect = strval(param[1]);
				else
					suspect = GetClosestPlayer(playerid);
					
				if(suspect == playerid) return 1;
				
			    if(IsPlayerConnected(suspect))
				{
				    if(PlayerCuffed[suspect] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Játékos már bilincsben van !");
				        return 1;
				    }
				    if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
					{
					    /*if(IsACop(suspect) && !Admin(playerid, 1337))
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Nem sokkolhatsz rendvédelmi szerveseket !");
					        return 1;
					    }*/
					    if(IsPlayerInAnyVehicle(suspect))
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Célszemély autóban van, szedd ki elõször !");
					        return 1;
					    }
						if(Rabol[suspect] == 1) Rabol[suspect] = 0;
					    GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Lesokkolt egy rendõr, és 60 másodpercig megbénultál.");
						SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Lesokkoltad 60 másodpercre.");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Valaki lõ a sokkolóval, és lesokkolja a célszemélyt.");
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(suspect, "~r~Sokkoltak", 2500, 3);
						Bilincs(suspect, 1);
						ApplyAnimation(suspect,"CRACK","crckdeth2",4.1,0,1,1,1,0);
						Fegyvere[suspect] = 0;
						SetPlayerArmedWeapon(suspect, 0);
						Sokkolt[playerid] = 15;
		            }
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "A közeledben nincs senki!");
					    return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nem vagy szolgálatban!");
			}
		}//not connected
	    return 1;
	}
	if(strcmp(cmd, "/cuff", true) == 0 || strcmp(cmd, "/bilincs", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(IsACop(playerid) && OnDuty[playerid]==1)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
			       SendClientMessage(playerid, COLOR_GREY, "Autóban nem bilincselhetsz !");
			       return 1;
				}
				if(params > 0)
					giveplayerid = strval(param[1]);
				else
					giveplayerid = GetClosestPlayer(playerid);
				
				if(playerid == giveplayerid) return 1;
				
				
				if (IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
                        if(PlayerCuffed[giveplayerid] == 2)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Már meg van bilincselve");
					        return 1;
					    }
						/*if(IsACop(giveplayerid) && !Admin(playerid, 1337))
						{
							SendClientMessage(playerid, COLOR_GREY, "Rendvédelmiseket nem bilincselhetsz meg!");
							return 1;
						}*/
						if(ProxDetectorS(8.0, playerid, giveplayerid))
						{
						   if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vadállat, magadat megbilincselni?! Ilyen perverz vagy?!"); return 1; }
						   {
								if(Rabol[playerid] == 1) Rabol[playerid] = 0;
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Rendõr megbilincselt jó szorosan.");
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Megbilincselted a személyt.");
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Valaki megbilincseli a célszemélyt.");
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~Megbilincseltek", 2500, 3);
								Bilincs(giveplayerid, 2);
								ApplyAnimation(giveplayerid,"ped","cower",1,1,0,0,0,0);
								ApplyAnimation(giveplayerid,"ped","cower",1,1,0,0,0,0);
								FegyverElrak(giveplayerid);
						   }
						}
						else
						{
						   SendClientMessage(playerid, COLOR_GREY, "Nincs senki a közeledben");
						   return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nem vagy szolgálatban!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/uncuff", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsACop(playerid) && OnDuty[playerid] == 1)
			{
				if(params > 0)
					giveplayerid = strval(param[1]);
				else
					giveplayerid = GetClosestPlayer(playerid);
					
				if(playerid == giveplayerid) return 1;
				
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if(ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Magadat nem tudod uncuffolni"); return 1; }
							if(PlayerCuffed[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Rendõr levette rólad a bilincseket");
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Levetted a személy bilincseit");
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Bilincs leveve", 2500, 3);
								Bilincs(giveplayerid, 0);
								ClearAnimations(giveplayerid);
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Nincs megbilincselve");
								Bilincs(giveplayerid, 0);
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "A közeledben nincs senki");
						    return 1;
						}
					}
				}
			}
			else
				SendClientMessage(playerid, COLOR_GREY, "Nem vagy rendõr");
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/hack", true) == 0)
	{
	    if(!Bortonben(playerid))
	    {
	        if(AMT(playerid, MUNKA_HACKER))
		    {
				//new mennyi;
                new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				new hack = random(2);
				//new miert;
				if(!strlen(x_nr))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Használat: /hack [típus]");
					SendClientMessage(playerid, COLOR_WHITE, "Típusok:utalás,számla,player(Személy)");
					return 1;
				}
			    /*if(strcmp(x_nr,"körözés",true) == 0)
				{
					tmp = strtok(cmdtext, idx);
	    			giveplayerid = ReturnUser(tmp);
        			tmp = strtok(cmdtext, idx);
           			mennyi = strval(tmp);
              		tmp = strtok(cmdtext, idx);
                	miert = strval(tmp);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Használat: /hack2 körözés [ki] [mennyi] [miért]");
						return 1;
					}
					WantedLevel[giveplayerid] = mennyi;
					format(string, sizeof(string), "%s", miert);
					SetPlayerCriminal(giveplayerid,255, string);
 					format(string, sizeof(string), "* Valaki meghackele a rendõrség adatbázisát.");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					new igen = random(2);
	    			format(string, sizeof(string), "Feljelentettek %s ért", miert);
	    			SendClientMessage(giveplayerid, COLOR_YELLOW, string);
	    			if(igen == 1)
					{
	    				WantedPoints[playerid]+=3; SetPlayerCriminal(playerid,255, "Hackerkedés!");
	    				return 1;
					}
					return 1;
				}*/
				if(strcmp(x_nr,"utalás",true) == 0)
				{
				    if(hack == 1)
				    {
				        if(utalas[playerid] == 0)
				        {
				            ConsumingMoney[playerid] = 1;
					        utalas[playerid] = 1;
						    new penz = 10000+random(100000);
						    PlayerInfo[playerid][pAccount] += penz;
						    format(string, sizeof(string), "* Valaki kinyitotta a laptopját.");
						    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						    format(string, sizeof(string), "* Valaki betört a bank adatbázisába.");
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			 				format(string, sizeof(string), "* Valaki meghackelte a bank adatbázisát.");
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						return 1;
					}
					else
					{
					    WantedPoints[playerid]+=3; SetPlayerCriminal(playerid,255, "Hackerkedés!");
					    SendClientMessage(playerid, COLOR_YELLOW, "Feljelentettek hackerkedésért!");
					}
					return 1;
				}
				else if(strcmp(x_nr,"számla",true) == 0)
				{
				    tmp = strtok(cmdtext,idx);
				    giveplayerid = ReturnUser(tmp);
				    if(!strlen(tmp))
				    {
				        SendClientMessage(playerid, COLOR_RED, "/hack számla [playerid]");
				        return 1;
					}
				    GetPlayerName(giveplayerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "%s: %d", sendername, PlayerInfo[giveplayerid][pAccount]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
				else if(strcmp(x_nr,"player",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					giveplayerid = ReturnUser(tmp);
					if(!strlen(tmp))
				    {
				        SendClientMessage(playerid, COLOR_RED, "/hack számla [playerid]");
				        return 1;
					}
					GetPlayerName(giveplayerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "Név: %s", sendername);
     				SendClientMessage(playerid, COLOR_YELLOW, string);
     				if(PlayerInfo[giveplayerid][pPhousekey] != NINCS)
     				{
     					format(string, sizeof(string), "Házszám: %d",PlayerInfo[giveplayerid][pPhousekey]);
     					SendClientMessage(playerid, COLOR_YELLOW, string);
					}
					if(PlayerInfo[giveplayerid][pPcarkey] != 0)
     				{
     					format(string, sizeof(string), "Kocsi(V): %d", PlayerInfo[giveplayerid][pPcarkey]);
     					SendClientMessage(playerid, COLOR_YELLOW, string);
					}
					if(PlayerInfo[giveplayerid][pJob1] != 0)
					{
	    				if(AMT(giveplayerid, MUNKA_DETEKTIV))
	    				{
	    					format(string, sizeof(string), "Munka: Detektív");
     						SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_UGYVED))
		    			{
		    				format(string, sizeof(string), "Munka: Ügyvéd");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_PROSTI))
		    			{
		    				format(string, sizeof(string), "Munka: Prostituált");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_DROG))
		    			{
		    				format(string, sizeof(string), "Munka: Drog díler");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_AUTOTOLVAJ))
		    			{
		    				format(string, sizeof(string), "Munka: Autótolvaj");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_SZERELO))
		    			{
		    				format(string, sizeof(string), "Munka: Autószerelõ");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_TESTOR))
		    			{
		    				format(string, sizeof(string), "Munka: Testõr");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_FEGYVER))
		    			{
		    				format(string, sizeof(string), "Munka: Fegyverkereskedõ");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_AUTOKERESKEDO))
		    			{
		    				format(string, sizeof(string), "Munka: Autókereskedõ");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_BOXOLO))
		    			{
		    				format(string, sizeof(string), "Munka: Boxoló");
	   						SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_BUS))
		    			{
		    				format(string, sizeof(string), "Munka: Buszsofõr");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_UJSAGOS))
		    			{
		    				format(string, sizeof(string), "Munka: Újságkihordó");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_UTTISZTITO))
		    			{
		    				format(string, sizeof(string), "Munka: Úttisztító");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_HACKER))
		    			{
		    				format(string, sizeof(string), "Munka: Hacker");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_PANCEL))
		    			{
		    				format(string, sizeof(string), "Munka: Páncélkészítõ");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_FARMER))
		    			{
		    				format(string, sizeof(string), "Munka: Farmer");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
						else if(AMT(giveplayerid, MUNKA_KAMIONOS))
		    			{
		    				format(string, sizeof(string), "Munka: KamionSofõr");
	     					SendClientMessage(playerid, COLOR_YELLOW, string);
						}
					}
					new hismoney;
					hismoney = GetMoney(giveplayerid);
     				format(string, sizeof(string), "Kézpénz: %d", hismoney);
     				SendClientMessage(playerid, COLOR_YELLOW, string);
     				format(string, sizeof(string), "Bankszámla: %d", PlayerInfo[giveplayerid][pAccount]);
     				SendClientMessage(playerid, COLOR_YELLOW, string);
     				format(string, sizeof(string), "Telefonszám: %d", PlayerInfo[giveplayerid][pPnumber]);
     				SendClientMessage(playerid, COLOR_YELLOW, string);
     				if(PlayerInfo[giveplayerid][pPbiskey] != 255)
     				{
     					format(string, sizeof(string), "Biznisz kulcs: %d", PlayerInfo[giveplayerid][pPbiskey]);
    					SendClientMessage(playerid, COLOR_YELLOW, string);
					}
					format(string, sizeof(string), "Letartóztatva: %d", PlayerInfo[giveplayerid][pArrested]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "Gyilkosságok: %d", PlayerInfo[giveplayerid][pKills]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
		}
		else
			Msg(playerid, "Börtönben nem lehet!");
		return 1;
	}
    if(strcmp(cmd, "/find", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(!AMT(playerid, MUNKA_DETEKTIV)) return Msg(playerid, "Nem vagy detektív.");
		    if(PlayerOnMission[playerid] > 0) return  Msg(playerid, "Küldetésben vagy.");
			if(UsedFind[playerid] != 0 && PlayerInfo[playerid][pDetSkill] < 401) return Msg(playerid, "Már kerestél az elmúlt 2 percben, várnod kell.");
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) return Msg(playerid, "/find [Játékos Neve / ID]");
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) return Msg(playerid, "Mivan eltévedtél?");
					if(PhoneOnline[giveplayerid] > 0) return Msg(playerid, "A játékosnak ki van kapcsolva a telefonja!");
					if(PlayerInfo[giveplayerid][pPnumber] == 0) return Msg(playerid, "Nincs telefonja!");
			        new points;
			        new level = PlayerInfo[playerid][pDetSkill];
					if(level >= 0 && level <= 50)
					{ points = 5; }
					else if(level >= 51 && level <= 100)
					{ points = 8; }
					else if(level >= 101 && level <= 200)
					{ points = 10; }
					else if(level >= 201 && level <= 400)
					{ points = 12; }
					else if(level >= 401)
					{ points = 15; }
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					FindTime[playerid] = 1;
					FindTimePoints[playerid] = points;
					PlayerInfo[playerid][pDetSkill] ++;
					UsedFind[playerid] = 1;
					if(PlayerInfo[playerid][pDetSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* A detektív skilled elérte a 2es szintet!"); }
					else if(PlayerInfo[playerid][pDetSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* A detektív skilled elérte a 3as szintet!"); }
					else if(PlayerInfo[playerid][pDetSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* A detektív skilled elérte a 4es szintet!"); }
					else if(PlayerInfo[playerid][pDetSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* A detektív skilled elérte a 5ös szintet!"); }
				}
			}
			else
			{
			    Msg(playerid, "A játékos nem online.");
			}
		}
	    return 1;
	}
	if(strcmp(cmd, "/guard", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(!AMT(playerid, MUNKA_TESTOR))
		    {
				SendClientMessage(playerid, COLOR_GREY, "Nem vagy testõr!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /guard [playerid/PartOfName] [ennyiért]");
				return 1;
			}
			new money;
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 100000) { SendClientMessage(playerid, COLOR_GREY, "Az összeg 1 és 100000 között lehet!"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Megnézném, hogy véded meg magad... O.O");
					        return 1;
					    }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Felajánlottad neki: %s, hogy megvéded %dFt-ért", giveplayer, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Testõr %s felajánlotta, hogy megvéd téged %dFt-ért! Elfogadása: /accept bodyguard", sendername, money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						GuardOffer[giveplayerid] = playerid;
						GuardPrice[giveplayerid] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nincs a közeledben");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nincs fennt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/free", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(!AMT(playerid, MUNKA_UGYVED))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Nem vagy ügyvéd!");
		        return 1;
		    }
		    if(PlayerInfo[playerid][pLawSkill] >= 401)
		    {
		        ApprovedLawyer[playerid] = 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /free [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID)
                {
                    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Magadat nem tudod kihozni!"); return 1; }
					if(PlayerInfo[giveplayerid][pJailed] == 1 && ApprovedLawyer[playerid] == 1)
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Kihoztat %s-t a börtönbõl", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s ügyvéd kihozott a börtönbõl", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						ApprovedLawyer[playerid] = 0;
						WantLawyer[giveplayerid] = 0;
						CallLawyer[giveplayerid] = 0;
						JailPrice[giveplayerid] = 0;
						PlayerInfo[giveplayerid][pJailTime] = 1;
						PlayerInfo[playerid][pLawSkill] ++;
						if(PlayerInfo[playerid][pLawSkill] == 50)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Az ügyvéd melóval egyre jobb lettél! A szinted megnõtt! (2) Több pénzt kapsz, és hamarabb hozhatod ki!"); }
						else if(PlayerInfo[playerid][pLawSkill] == 100)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Az ügyvéd melóval egyre jobb lettél! A szinted megnõtt! (3) Több pénzt kapsz, és hamarabb hozhatod ki!"); }
						else if(PlayerInfo[playerid][pLawSkill] == 200)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Az ügyvéd melóval egyre jobb lettél! A szinted megnõtt! (4) Több pénzt kapsz, és hamarabb hozhatod ki!"); }
						else if(PlayerInfo[playerid][pLawSkill] == 400)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Az ügyvéd melóval egyre jobb lettél! A szinted megnõtt! (5) Több pénzt kapsz, és hamarabb hozhatod ki!"); }
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Neki nincs szüksége ügyvédre / ninsc börtönben");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nincs fennt!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/cancel",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[128];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Cancel __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /cancel [name]");
				SendClientMessage(playerid, COLOR_GREY, "Választható: Sex, Drugs, Repair, Lawyer, Bodyguard, Live, Refill, Car, Boxing");
				SendClientMessage(playerid, COLOR_GREY, "Választható: Taxi, Bus, Medic, Mechanic, Paper, Ticket, Witness, Marriage, Divorce");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
			if(strcmp(x_job,"sex",true) == 0) {	SexOffer[playerid] = 999; SexPrice[playerid] = 0; }
			else if(egyezik(x_job, "adasveteli") || egyezik(x_job, "adásvételi"))
			{
				Msg(playerid, "Visszautasítottad");
				AdasVeteliNeki[playerid] = NINCS;
			}
			else if(strcmp(x_job,"drugs",true) == 0) { DrugOffer[playerid] = 999; DrugPrice[playerid] = 0; DrugGram[playerid] = 0; }
			else if(strcmp(x_job,"repair",true) == 0) {	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
			else if(strcmp(x_job,"lawyer",true) == 0) { WantLawyer[playerid] = 0; CallLawyer[playerid] = 0; }
			else if(strcmp(x_job,"bodyguard",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
			else if(strcmp(x_job,"live",true) == 0) { LiveOffer[playerid] = 999; }
			else if(strcmp(x_job,"refill",true) == 0) { RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; }
			else if(strcmp(x_job,"car",true) == 0) { CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; }
			else if(strcmp(x_job,"boxing",true) == 0) { BoxOffer[playerid] = 999; }
			else if(strcmp(x_job,"paper",true) == 0) { PaperOffer[playerid] = 999; }
			else if(strcmp(x_job,"witness",true) == 0) { MarryWitnessOffer[playerid] = 999; }
			else if(strcmp(x_job,"marriage",true) == 0) { ProposeOffer[playerid] = 999; }
			else if(strcmp(x_job,"divorce",true) == 0) { DivorceOffer[playerid] = 999; }
			else if(strcmp(x_job,"ticket",true) == 0) { TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; }
			//else if(strcmp(x_job,"medic",true) == 0) { if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller !"); return 1; } } }
			else if(strcmp(x_job,"mechanic",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller !"); return 1; } } }
			else if(egyezik(x_job, "taxi"))
			{
				/*if(!TaxiHivas[playerid])
					return Msg(playerid, "Nem hívtál még taxit");*/
				
				format(string, sizeof(string), "** %s visszamondta a taxit", PlayerName(playerid));
				SendFamilyMessage(LMUNKA_TAXI, TEAM_AZTECAS_COLOR, string);
				Msg(playerid, "Hívás visszavonva");
				
				//TaxiHivas[playerid] = 0;
				
				foreach(Jatekosok, p)
				{
					SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
					if(KiertMegy[p] == playerid) KiertMegy[p] = NINCS;
				}
				return 1;
			}
			else if(egyezik(x_job, "medic"))
			{
				if(MentoHivas[playerid] == false)
					return Msg(playerid, "Nem hívtál még mentõst");
				
				format(string, sizeof(string), "** %s visszamondta a segélyhívást", PlayerName(playerid));
				SendFamilyMessage(LMUNKA_MENTO, TEAM_AZTECAS_COLOR, string);
				Msg(playerid, "Hívás visszavonva");
				
				MentoHivas[playerid] = false;
				
				foreach(Jatekosok, p)
				{
					SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
					if(KiertMegy[p] == playerid) KiertMegy[p] = NINCS;
				}
				return 1;
			}
			/*else if(strcmp(x_job,"taxi",true) == 0)
			{
			    if(TaxiCall < 999)
			    {
			        if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
			        {
			            TaxiAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Visszavontad a~n~~r~taxit", 5000, 1);
						TaxiCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						TaxiCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(TaxiCall)) { if(TaxiCall == playerid) { TaxiCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(TaxiAccepted[i] < 999)
						        {
							        if(TaxiAccepted[i] == playerid)
							        {
							            TaxiAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~A hivo~n~~r~torolte a hivast", 5000, 1);
							            TaxiCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}*/
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(BusCall < 999)
			    {
			        if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
			        {
			            BusAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Visszavontad a~n~~r~buszt", 5000, 1);
						BusCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						BusCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(BusCall)) { if(BusCall == playerid) { BusCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(BusAccepted[i] < 999)
						        {
							        if(BusAccepted[i] == playerid)
							        {
							            BusAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~A hivo~n~~r~torolte a hivast", 5000, 1);
							            BusCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}
			else { return 1; }
			format(string, sizeof(string), "* You have canceled: %s.", x_job);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}//not connected
		return 1;
	}
	
//ACCEPT COMMANDS (Cops)
	if(strcmp(cmd,"/accept",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Accept __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Használat: /accept [név]");
				SendClientMessage(playerid, COLOR_GREY, "Nevek: Sex, Drugs, Repair, Lawyer, Bodyguard, Job, Live, Car");
				//SendClientMessage(playerid, COLOR_GREY, "Nevek: Taxi, Bus, Boxing, Medic, Mechanic, Paper, Ticket, Felujitas, Vizsga");
				SendClientMessage(playerid, COLOR_GREY, "Nevek: Bus, Boxing,Mechanic, Paper, Ticket, Felujitas, Vizsga");
                SendClientMessage(playerid, COLOR_GREY, "Nevek: Privát, Taxi, Medic");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
	        if(strcmp(x_job,"car",true) == 0)
			{
			    if(CarOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(CarOffer[playerid]))
			        {
			            if(GetMoney(playerid) > CarPrice[playerid])
			            {
			                if(IsPlayerInVehicle(CarOffer[playerid], CarID[playerid]))
			                {
				                GetPlayerName(CarOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
				                new points;
				                PlayerInfo[CarOffer[playerid]][pCarSkill] ++;
				                if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 50)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Your Car Dealer Skill is now Level 2, Players that buy Cars from you can call it more often."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 100)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Your Car Dealer Skill is now Level 3, Players that buy Cars from you can call it more often."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 200)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Your Car Dealer Skill is now Level 4, Players that buy Cars from you can call it more often."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 400)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Your Car Dealer Skill is now Level 5, Players that buy Cars from you can call it more often."); }
								new level = PlayerInfo[CarOffer[playerid]][pCarSkill];
								if(level >= 0 && level <= 50) { points = 1; }
								else if(level >= 51 && level <= 100) { points = 2; }
								else if(level >= 101 && level <= 200) { points = 3; }
								else if(level >= 201 && level <= 400) { points = 4; }
								else if(level >= 401) { points = 4; }
				                format(string, sizeof(string), "* You bought a Car for %dFt, from Car Dealer %s. (You can use /callcar %d times)",CarPrice[playerid],giveplayer,points);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* You sold your Car to %s for %dFt, the player can use /callcar %d times.",sendername,CarPrice[playerid],points);
								SendClientMessage(CarOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[CarOffer[playerid]][pPayCheck] += CarPrice[playerid];
								GiveMoney(playerid, -CarPrice[playerid]);
								RemovePlayerFromVehicle(CarOffer[playerid]);
								CarCalls[playerid] = points;
						        CarOffer[playerid] = 999;
								CarPrice[playerid] = 0;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   The Car Dealer is not in the offerd Car !");
						    	return 1;
							}
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   You cant afford the Car !");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No-one offered to buy a Car !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"divorce",true) == 0)
			{
			    if(DivorceOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(DivorceOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid]))
						{
						    GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Elfogadtad %s felkérését a válásra!", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s elfogadta a válási kérésedet", sendername);
							SendClientMessage(DivorceOffer[playerid], COLOR_LIGHTBLUE, string);
							ClearMarriage(playerid);
							ClearMarriage(DivorceOffer[playerid]);
							PlayerInfo[playerid][pPhousekey] = NINCS;
							PlayerInfo[playerid][pPbiskey] = 255;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Nincs közel hozzád!");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Senki nem küldött válási papirokat!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"witness",true) == 0)
			{
			    if(MarryWitnessOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(MarryWitnessOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid]))
						{
						    GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Elfogadtad %s felkérését arra, hogy tanú legyél!", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s elfogadta a felkérésedet. Immár õ a tanú!", sendername);
							SendClientMessage(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, string);
							MarryWitness[MarryWitnessOffer[playerid]] = playerid;
							MarryWitnessOffer[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Aki felkért, hogy tanú legyél, nincs közel hozzád!");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Senki nem kért fel rá, hogy tanú legyél");
				    return 1;
				}
			}
            else if(strcmp(x_job,"vizsga",true) == 0)
			{
			    if(Vizsgafajta[playerid] == 0) return Msg(playerid, "Nem ajánlották fel hogy levizsgáztatnak!");
				if(VizsgaAjanlat[playerid] == INVALID_PLAYER_ID)
				{
					Msg(playerid, "A vizsgáztató nem online!");
					VizsgaAjanlat[playerid] = NINCS;
					Vizsgafajta[playerid] = 0;
					return 1;
				}
				if(!LMT(VizsgaAjanlat[playerid], LMUNKA_OKTATO))
				{
					Msg(playerid, "Hiba történt!");
					VizsgaAjanlat[playerid] = NINCS;
					Vizsgafajta[playerid] = 0;
					return 1;
				}
				if(PlayerInfo[playerid][pBankSzamla] > 0 && PlayerInfo[playerid][pAccount] > VizsgaAr[playerid])
				{
	   				PlayerInfo[playerid][pAccount] -= VizsgaAr[playerid];
					PlayerInfo[VizsgaAjanlat[playerid]][pAccount] += VizsgaAr[playerid];
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Elfogadtad a vizsgáztatást %dFt-ért(Pénzt Utaltuk). Vizsgáztatód: %s", VizsgaAr[playerid], PlayerName(VizsgaAjanlat[playerid]));
    				SendFormatMessage(VizsgaAjanlat[playerid], COLOR_LIGHTBLUE, "* Oktató: %s elfogadta a vizsgáztatást %dFt-ért(Pénzt Utaltuk). Elkezdheted a vizsgáztatást!", PlayerName(playerid), VizsgaAr[playerid]);
					VizsgaAr[playerid] = NINCS;
					new Oktato = VizsgaAjanlat[playerid];
					Jogsineki[Oktato] = playerid;
					Jogsineki[playerid] = playerid;
					if(Vizsgafajta[playerid] == 1)
					{
						Autocp[playerid] = 2;
						SetPlayerCheckpoint(playerid,1064.3995,-1439.7965,13.0631, 5);
						Autocp[Oktato] = 2;
						SetPlayerCheckpoint(Oktato,1064.3995,-1439.7965,13.0631, 5);
						TakingLesson[playerid] = 1;
					}
					else if(Vizsgafajta[playerid] == 2)
					{
						//Igaz hogy Motor de a CPk ugyanazok.
						Autocp[playerid] = 2;
						SetPlayerCheckpoint(playerid,1064.3995,-1439.7965,13.0631, 5);
						Autocp[Oktato] = 2;
						SetPlayerCheckpoint(Oktato,1064.3995,-1439.7965,13.0631, 5);
						TakingLesson[playerid] = 1;
					}
					else if(Vizsgafajta[playerid] == 3)
					{
						Kamioncp[playerid] = 2;
						Kamioncp[Oktato] = 2;
						SetPlayerCheckpoint(playerid,890.1733,-1224.5978,17.9952, 5);
						SetPlayerCheckpoint(Oktato,890.1733,-1224.5978,17.9952, 5);
						TakingLesson[playerid] = 1;
					}
					else if(Vizsgafajta[playerid] == 4)
					{
						Hajocp[playerid] = 2;
						Hajocp[Oktato] = 2;
						SetPlayerCheckpoint(playerid,371.2765,-1994.9741,-0.0225, 5);
						SetPlayerCheckpoint(Oktato,371.2765,-1994.9741,-0.0225, 5);
						TakingLesson[playerid] = 1;
					}
					else if(Vizsgafajta[playerid] == 5)
					{
						Msg(Oktato, "Az Óra elindult, 30 másodpercig tart az óra.");
						Msg(playerid, "Kérem kövesd az oktatód a lõtérre.");
						SetTimerEx("Vizsgaido", 30000, false, "d", Oktato);
						GiveWeapon(playerid, 24, 15);
						Autocp[playerid] = 30;
					}
					else if(Vizsgafajta[playerid] == 6)
					{
						Msg(playerid, "Az engedélyt megkaptad, jó horgászást.");
						Msg(Oktato, "Az engedélyt megkapta.");
						PlayerInfo[playerid][pFishLic] = 1;
					}
					else if(Vizsgafajta[playerid] == 7)
					{
						Repulocp[playerid] = 2;
						Repulocp[Oktato] = 2;
						SetPlayerCheckpoint(playerid,1766.5104,-2285.9961,26.9697,5);
						SetPlayerCheckpoint(Oktato,1766.5104,-2285.9961,26.9697,5);
						TakingLesson[playerid] = JOGSI_HORGASZ;
					}
				}
				else
				{
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Nem bírod kifizetni a vizsga díjat(%dFt), ezért az ajánlat érvénytelen.", VizsgaAr[playerid]);
					SendFormatMessage(VizsgaAjanlat[playerid], COLOR_LIGHTBLUE, "* Oktató: %s nem bírta kifizetni a vizsga díjat(%dFt), ezért az ajánlat érvénytelen.", PlayerName(playerid), VizsgaAr[playerid]);
					VizsgaAjanlat[playerid] = NINCS;
					VizsgaAr[playerid] = NINCS;
					Vizsgafajta[playerid] = 0;
					return 1;
				}
			}
            else if(strcmp(x_job,"privát",true) == 0 || strcmp(x_job,"privat",true) == 0)
			{
			    if(PrivatAjanlat[playerid] == NINCS) return Msg(playerid, "Senki nem akar bemenni a privát szobába!");
				if(PrivatAjanlat[playerid] == INVALID_PLAYER_ID)
				{
					Msg(playerid, "Aki beakart menni a privát szobába, már nem online!");
					PrivatAjanlat[playerid] = NINCS;
					PrivatAr[playerid] = NINCS;
					return 1;
				}
				if(GetMoney(PrivatAjanlat[playerid]) > PrivatAr[playerid])
				{
					GiveMoney(playerid, PrivatAr[playerid]);
					GiveMoney(PrivatAjanlat[playerid], -PrivatAr[playerid]);
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Beleegyeztél hogy %s bemehet a privát szobába %dFt-ért.", PlayerName(PrivatAjanlat[playerid]), PrivatAr[playerid]);
                	SendFormatMessage(PrivatAjanlat[playerid], COLOR_LIGHTBLUE, "* %s beleegyezett hogy bemenj a privát szobába %dFt-ért.", PlayerName(playerid), PrivatAr[playerid]);
					/*new koszonuzi[246];
					format(koszonuzi,sizeof(koszonuzi),"* Jó szórakozást kíván: %s",BizzInfo[BIZ_PIGPEN][bMessage]);
	    			SendClientMessage(PrivatAjanlat[playerid],COLOR_LIGHTBLUE,koszonuzi);*/
					PrivatEngedely[PrivatAjanlat[playerid]] = 1;
					PrivatAjanlat[playerid] = NINCS;
					PrivatAr[playerid] = NINCS;
					return 1;
				}
				else
				{
					SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* %s nem tudja kifizetni(%dFt), ezért az ajánlat érvénytelen.", PlayerName(PrivatAjanlat[playerid]), PrivatAr[playerid]);
					SendFormatMessage(PrivatAjanlat[playerid], COLOR_LIGHTBLUE, "* Nem tudtad kifizetni(%dFt), ezért az ajánlat érvénytelen.", PrivatAr[playerid]);
					PrivatAjanlat[playerid] = NINCS;
					PrivatAr[playerid] = NINCS;
					return 1;
				}
			}
			else if(strcmp(x_job,"locsolás",true) == 0 || strcmp(x_job,"locsolas",true) == 0)
			{
			    if(Locsolniakar[playerid] == NINCS) return Msg(playerid, "Senki nem ajánlotta fel hogy meglocsol.");
				if(Locsolniakar[playerid] == INVALID_PLAYER_ID)
				{
					Msg(playerid, "Aki megakart locsolni, már nem online!");
					Locsolniakar[playerid] = NINCS;
					return 1;
				}
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* %s meglocsolt egy kölnivel.", PlayerName(Locsolniakar[playerid]));
				SendFormatMessage(Locsolniakar[playerid], COLOR_LIGHTBLUE, "* Meglocsoltad %s-t kölnivel.", PlayerName(Locsolas[Locsolniakar[playerid]]));
				Cselekves(playerid, "elõvette a kölnit és meglocsolt valakit.");
				Locsolas[Locsolniakar[playerid]] = NINCS;
				Locsolniakar[playerid] = NINCS;
				return 1;
			}
	        else if(strcmp(x_job,"marriage",true) == 0)
			{
			    if(ProposeOffer[playerid] < 999)
			    {
			        if(!PlayerToPoint(10.0, playerid, -1988.6638,1117.8837,54.4726))
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Nem vagy az SFi templomnál!");
			            return 1;
			        }
			        if(IsPlayerConnected(ProposeOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid]))
						{
						    if(MarryWitness[ProposeOffer[playerid]] == 999)
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Az ajánlónak nincs tanúja!");
						        return 1;
						    }
						    if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]]))
						    {
							    if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]]))
								{
								    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
									format(string, sizeof(string), "* Elfogadtad %s felkérését, hogy a férje legyél.", giveplayer);
									SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "* %s elfogadta a felkérésed, hogy a feleséged legyen", sendername);
									SendClientMessage(ProposeOffer[playerid], COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "Pap: %s, valóban %s-t akarod férjednek? Örökké szeretned kell, és hûséget kell fogadnod neki!", sendername, giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									SendClientMessage(playerid, COLOR_WHITE, "Ha igen, ird be, hogy 'yes', bármi mást írsz be, azzal visszautasítod!");
									MarriageCeremoney[playerid] = 1;
									ProposedTo[ProposeOffer[playerid]] = playerid;
									GotProposedBy[playerid] = ProposeOffer[playerid];
									MarryWitness[ProposeOffer[playerid]] = 999;
									ProposeOffer[playerid] = 999;
									return 1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "A tanú nincs közel a felkérõhöz!");
								    return 1;
								}
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Aki megkérte a kezed, nincs hozzád közel!");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Senki sem kérte meg a kezed!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"ticket",true) == 0)
			{
			    if(TicketOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(TicketOffer[playerid]))
			        {
//			            if (ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
//						{
							if(GetMoney(playerid) <  TicketMoney[playerid]) return Msg(playerid, "Nincs elég pénzed hogy kifizesd a bírságot.");
				           	GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Kifizetted %s %dFt-os bírságcéduláját", giveplayer, TicketMoney[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s kifizette a %dFt-os bírságát", sendername, TicketMoney[playerid]);
							SendClientMessage(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
							ConsumingMoney[TicketOffer[playerid]] = 1;
							GiveMoney(playerid, - TicketMoney[playerid]);
							GiveMoney(TicketOffer[playerid], TicketMoney[playerid]);
							TicketOffer[playerid] = 999;
							TicketMoney[playerid] = 0;
							return 1;
//						}
//						else
//						{
//						    SendClientMessage(playerid, COLOR_GREY, "A rendõr messze van tõled!");
//						    return 1;
//						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nem adtak neked bírságcédulát!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"paper",true) == 0)
			{
			    if(PaperOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(PaperOffer[playerid]))
			        {
			            if(BringingPaper[PaperOffer[playerid]] > 0)
			            {
			                if (ProxDetectorS(5.0, playerid, PaperOffer[playerid]))
							{
				            	GetPlayerName(PaperOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Vettél egy újságpapírt tõle: %s (az olvasásához ird be /read paper).", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s megvette az újságodat", sendername);
								SendClientMessage(PaperOffer[playerid], COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pTitle]);
								strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pMaker]);
								strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine1]);
								strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine2]);
								strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine3]);
								strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine4]);
								strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine5]);
								strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine6]);
								strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine7]);
								strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
								GotPaper[playerid] = 1;
								PaperOffer[playerid] = 999;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Az újságeladó messze van tõled");
							    return 1;
							}
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nem ajánlottak újságot");
				    return 1;
				}
			}
			else if(strcmp(x_job,"boxing",true) == 0)
			{
			    if(BoxOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(BoxOffer[playerid]))
			        {
			            new points;
			            new mypoints;
			            GetPlayerName(BoxOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
			            new level = PlayerInfo[BoxOffer[playerid]][pBoxSkill];
						if(level >= 0 && level <= 50) { points = 40; }
						else if(level >= 51 && level <= 100) { points = 50; }
						else if(level >= 101 && level <= 200) { points = 60; }
						else if(level >= 201 && level <= 400) { points = 70; }
						else if(level >= 401) { points = 80; }
						if(AMT(playerid, MUNKA_BOXOLO))
						{
							new clevel = PlayerInfo[playerid][pBoxSkill];
							if(clevel >= 0 && clevel <= 50) { mypoints = 40; }
							else if(clevel >= 51 && clevel <= 100) { mypoints = 50; }
							else if(clevel >= 101 && clevel <= 200) { mypoints = 60; }
							else if(clevel >= 201 && clevel <= 400) { mypoints = 70; }
							else if(clevel >= 401) { mypoints = 80; }
						}
						else
						{
						    mypoints = 30;
						}
						format(string, sizeof(string), "* Elfogadtad %s box kihívását. %d élettel fogsz harcolni.",giveplayer,mypoints);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s elfogadta a kihívásod. %d élettel fogsz harcolni",sendername,points);
						SendClientMessage(BoxOffer[playerid], COLOR_LIGHTBLUE, string);
						SetHealth(playerid, mypoints);
						SetHealth(BoxOffer[playerid], points);
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
						SetPlayerFightingStyle (BoxOffer[playerid], FIGHT_STYLE_BOXING);
						SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
						SetPlayerPos(playerid, 762.9852,2.4439,1001.5942); SetPlayerFacingAngle(playerid, 131.8632);
						SetPlayerPos(BoxOffer[playerid], 758.7064,-1.8038,1001.5942); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
						TogglePlayerControllable(playerid, 0); TogglePlayerControllable(BoxOffer[playerid], 0);
						GameTextForPlayer(playerid, "~r~Varakozas", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Varakozas", 3000, 1);
						new name[MAX_PLAYER_NAME];
						new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(playerid, name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Box hírek: Box mérkõzés lesz! %s kontra %s! 60 másodpercig tart (Grove Street Edzõterem).",  sendername, giveplayer);
							OOCOff(COLOR_WHITE,string);
							TBoxer = playerid;
							BoxDelay = 60;
						}
						GetPlayerName(BoxOffer[playerid], name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Box hírek: Box mérkõzés lesz! %s kontra %s! 60 másodpercig tart (Grove Street Edzõterem)",  giveplayer, sendername);
							OOCOff(COLOR_WHITE,string);
							TBoxer = BoxOffer[playerid];
							BoxDelay = 60;
						}
						BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
						if(BoxDelay < 1) { BoxDelay = 20; }
						InRing = 1;
						Boxer1 = BoxOffer[playerid];
						Boxer2 = playerid;
						PlayerBoxing[playerid] = 1;
						PlayerBoxing[BoxOffer[playerid]] = 1;
						BoxOffer[playerid] = 999;
						return 1;
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nem ajánlottak box mérkõzést!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"taxi",true) == 0)
			{
				if(!LMT(playerid, LMUNKA_TAXI)) return Msg(playerid, "Nem vagy taxis!");
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAD2, "Használat: /accept taxi [Név/ID]");
				new jatekos;
				jatekos = ReturnUser(tmp);
				if(TaxiHivas[jatekos] == false) return Msg(playerid, "Nem hívott taxit!");
				TaxiHivas[jatekos] = false;
				for(new x = 0; x < MAX_PLAYERS; x++)
				{
					if(AdminDuty[x] == 0)
						SetPlayerMarkerForPlayer(playerid, x, COLOR_INVISIBLE);
				}
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Fogadtad %s hívását!", PlayerName(jatekos));
				SendFormatMessage(jatekos, COLOR_LIGHTGREEN, "%s fogadta a hívásod!", PlayerName(playerid));
				SendFormatMessageToAll(COLOR_GREEN, "Taxi sofõr %s fogadta %s hívását", PlayerName(playerid), PlayerName(jatekos));
				SetPlayerMarkerForPlayer(playerid, jatekos, COLOR_LIGHTGREEN);
				KiertMegy[playerid] = jatekos;
				return 1;
			}
			else if(strcmp(x_job,"medic",true) == 0)
			{
				if(!LMT(playerid, LMUNKA_MENTO)) return Msg(playerid, "Nem vagy mentõs");
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAD2, "Használat: /accept medic [Név/ID]");
				new jatekos;
				jatekos = ReturnUser(tmp);
				if(MentoHivas[jatekos] == false) return Msg(playerid, "Nem hívott mentõt!");
				MentoHivas[jatekos] = false;
				for(new x = 0; x < MAX_PLAYERS; x++)
				{
					if(AdminDuty[x] == 0)
						SetPlayerMarkerForPlayer(playerid, x, COLOR_INVISIBLE);
				}
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "Fogadtad %s hívását!", PlayerName(jatekos));
				SendFormatMessage(jatekos, COLOR_LIGHTBLUE, "%s fogadta a hívásod!", PlayerName(playerid));
				SendFormatMessageToAll(COLOR_LIGHTBLUE, "Mentõs %s fogadta %s hívását", PlayerName(playerid), PlayerName(jatekos));
				SetPlayerMarkerForPlayer(playerid, jatekos, COLOR_LIGHTGREEN);
				KiertMegy[playerid] = jatekos;
				return 1;
			}
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(TransportDuty[playerid] != 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nem vagy buszsofõr");
				    return 1;
			    }
	            if(BusCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Már fogadtál egy hívást");
				    return 1;
	            }
	            if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Küldetésen vagy!");
			        return 1;
			    }
	            if(BusCall < 999)
	            {
	                if(IsPlayerConnected(BusCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Elfogadtad %s hívását! Siess!",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Busz sofõr %s elfogadta a hívásodat, maradj ott ahol vagy! Ha nem kell /cancel bus",sendername);
						SendClientMessage(BusCall, COLOR_LIGHTBLUE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusCall, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						//GameTextForPlayer(playerid, "~w~Bus Caller~n~~r~Goto redmarker", 5000, 1);
						BusCallTime[playerid] = 1;
						BusAccepted[playerid] = BusCall;
						BusCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Nem hívtak buszt");
			    	return 1;
	            }
			}
			/*else if(strcmp(x_job,"medic",true) == 0)
			{
			    if(LMT(playerid, LMUNKA_MENTO) || LMT(playerid, LMUNKA_SFMENTO))
			    {
		            if(MedicCallTime[playerid] > 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "Már fogadtál egy hívást!");
					    return 1;
		            }
		            if(PlayerOnMission[playerid] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Küldetésen vagy");
				        return 1;
				    }
		            if(MedicCall < 999)
		            {
		                if(IsPlayerConnected(MedicCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "* Elfogadtad %s hívását! Siess, mert a beteg meghalhat!",giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* 60 másodperced van, utána a jel eltûnik!");
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s fogadta a hívásodat, várj ott, amíg odaér! Ha már nem kell /cancel medic",sendername);
							SendClientMessage(MedicCall, COLOR_LIGHTBLUE, string);
							if(LMT(playerid, LMUNKA_MENTO))
							{
								format(string, sizeof(string), "* Mentõs %s fogadta %s hívását", sendername, giveplayer);
								SendClientMessageToAll(COLOR_LIGHTBLUE, string);
							}
							/ *else if(LMT(playerid, LMUNKA_SFMENTO))
							{
								format(string, sizeof(string), "* San Fierro Mentõs %s fogadta %s hívását!", sendername, giveplayer);
								SendClientMessageToAll(COLOR_LIGHTBLUE, string);
							}* /
							new Float:X,Float:Y,Float:Z;
							GetPlayerPos(MedicCall, X, Y, Z);
							SetPlayerMarkerForPlayer(playerid, MedicCall, COLOR_RED);
							//SetPlayerCheckpoint(playerid, X, Y, Z, 5);
							//GameTextForPlayer(playerid, "~w~Medic Caller~n~~r~Goto redmarker", 5000, 1);
							MedicCallTime[playerid] = 1;
							MedicCall = 999;
							return 1;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "Nem hívtak mentõt!");
				    	return 1;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nem vagy mentõs");
				    return 1;
				}
			}*/
			else if(strcmp(x_job,"mechanic",true) == 0)
			{
			    if(!AMT(playerid, MUNKA_SZERELO))
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nem vagy szerelõ!");
				    return 1;
			    }
	            if(MechanicCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Már elfogadtál egy hívást!");
				    return 1;
	            }
	            if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Küldetésen nem fogadhatod el!");
			        return 1;
			    }
	            if(MechanicCall < 999)
	            {
	                if(IsPlayerConnected(MechanicCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(MechanicCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Fogadtad %s hívását, 30 másodperced van odaérni!",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* 30 másodperc után a radaron eltünik a jele");
                        format(string, sizeof(string), "* Autószerelõ %s fogadta a hívásodat, úton van, várj ott ahol vagy! Ha nem kell /cancel mechanic",sendername);
						SendClientMessage(MechanicCall, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Autószerelõ %s fogadta %s hívását!", sendername, giveplayer);
						SendClientMessageToAll(COLOR_LIGHTBLUE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(MechanicCall, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						//GameTextForPlayer(playerid, "~w~Mechanic Caller~n~~r~Goto redmarker", 5000, 1);
						MechanicCallTime[playerid] = 1;
						MechanicCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Senki sem hívott szerelõt!");
			    	return 1;
	            }
			}
			else if(strcmp(x_job,"refill",true) == 0)
			{
				if(IsPlayerConnected(playerid)) return Msg(playerid, "Jelenleg kiszedve.");
			    if(RefillOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(RefillOffer[playerid]))
			        {
			            if(GetMoney(playerid) > RefillPrice[playerid])
			            {
			                GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
			                new car = GetClosestVehicle(playerid);
			                new fuel;
			                PlayerInfo[RefillOffer[playerid]][pMechSkill] ++;
			                if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 50)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Az autószerelõ fejlettséged elérte a következõ szintet! (2) Több benzint tölthetsz a kocsiba"); }
							else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 100)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Az autószerelõ fejlettséged elérte a következõ szintet! (3) Több benzint tölthetsz a kocsiba"); }
							else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 200)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Az autószerelõ fejlettséged elérte a következõ szintet! (4) Több benzint tölthetsz a kocsiba"); }
							else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 400)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Az autószerelõ fejlettséged elérte a következõ szintet! (5) Több benzint tölthetsz a kocsiba"); }
							new level = PlayerInfo[RefillOffer[playerid]][pMechSkill];
							if(level >= 0 && level <= 50)
							{ fuel = 15; }
							else if(level >= 51 && level <= 100)
							{ fuel = 40; }
							else if(level >= 101 && level <= 200)
							{ fuel = 60; }
							else if(level >= 201 && level <= 400)
							{ fuel = 80; }
							else if(level >= 401)
							{ fuel = 100; }
			                format(string, sizeof(string), "* %s megtankolta a kocsidat %d literrel %dFT-ért.",giveplayer,fuel,RefillPrice[playerid]);
							SendClientMessage(RefillOffer[playerid], COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Megtankoltad %s kocsiját %d literrel %dFT-ért",sendername,fuel,RefillPrice[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							PlayerInfo[RefillOffer[playerid]][pPayCheck] += RefillPrice[playerid];
							GiveMoney(playerid, -RefillPrice[playerid]);
							if(Gas[car] < 110) { Gas[car] += fuel; }
					        RefillOffer[playerid] = 999;
							RefillPrice[playerid] = 0;
							return 1;
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Nincs pénzed!");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nincs felajánlás!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"live",true) == 0)
			{
			    if(LiveOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(LiveOffer[playerid]))
			        {
				        if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
						{
						    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Addig itt maradsz, amig az élõadásnak vége");
							SendClientMessage(LiveOffer[playerid], COLOR_LIGHTBLUE, "* Addig itt maradsz, amig az élõadásnak vége (Kikapcsolás: /live).");
							TogglePlayerControllable(playerid, 0);
							TogglePlayerControllable(LiveOffer[playerid], 0);
							TalkingLive[playerid] = LiveOffer[playerid];
							TalkingLive[LiveOffer[playerid]] = playerid;
							LiveOffer[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Messze vagy a riportertõl!");
							return 1;
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nincs felajánlás!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"lawyer",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /accept lawyer [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if (IsACop(playerid))
				{
				    if(IsPlayerConnected(giveplayerid))
				    {
				        if(giveplayerid != INVALID_PLAYER_ID)
				        {
				            if(AMT(giveplayerid, MUNKA_UGYVED))
				            {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Megendedted %s ügyvédnek, hogy kihozzon egy embert", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE,string);
								format(string, sizeof(string), "* %s megendte, hogy kihozd a védencedet a börtönbõl! (/free)", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE,string);
								ApprovedLawyer[giveplayerid] = 1;
							    return 1;
							}
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Invalid action! (You are no cop / Player aint a Lawyer / Bad ID)");
				    return 1;
				}
			}
			else if(strcmp(x_job,"bodyguard",true) == 0)
			{
			    if(GuardOffer[playerid] < 999)
			    {
			        if(GetMoney(playerid) > GuardPrice[playerid])
				    {
					    if(IsPlayerConnected(GuardOffer[playerid]))
					    {
					        GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Elfogadtad %s testõrségét %d-ért",giveplayer,GuardPrice[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s elfogadta a testõrségedet, és kaptál %d-t",sendername,GuardPrice[playerid]);
							SendClientMessage(GuardOffer[playerid], COLOR_LIGHTBLUE, string);
							PlayerInfo[GuardOffer[playerid]][pPayCheck] += GuardPrice[playerid];
							GiveMoney(playerid, -GuardPrice[playerid]);
					        GuardOffer[playerid] = 999;
							GuardPrice[playerid] = 0;
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed!");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Senki sem ajánlott testõrséget!");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"sex",true) == 0)
			{
			    if(SexOffer[playerid] < 999)
				{
					if(GetMoney(playerid) > SexPrice[playerid])
			  		{
						if (IsPlayerConnected(SexOffer[playerid]))
						{
						    new Car = GetPlayerVehicleID(playerid);
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car))
						    {
								GetPlayerName(SexOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Te sexeltél vele: %s, %d-ért", giveplayer, SexPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s sexelt veled %d-ért", sendername, SexPrice[playerid]);
								SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[SexOffer[playerid]][pPayCheck] += SexPrice[playerid];
								GiveMoney(playerid, -SexPrice[playerid]);
								PlayerInfo[SexOffer[playerid]][pSexSkill] ++;
								if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 50)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* A sex skilled elérte a következõ szintet! (2) Jobban sexelsz (élet), és kevesebb a betegség esélye!"); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 100)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* A sex skilled elérte a következõ szintet! (3) Jobban sexelsz (élet), és kevesebb a betegség esélye!"); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 200)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* A sex skilled elérte a következõ szintet! (4) Jobban sexelsz (élet), és kevesebb a betegség esélye!"); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 400)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* A sex skilled elérte a következõ szintet! (5) Jobban sexelsz (élet), és kevesebb a betegség esélye!"); }
								if(STDPlayer[playerid] == 0)
								{
								    if(Condom[playerid] < 1)
									{
									    new Float:health;
									    new level = PlayerInfo[SexOffer[playerid]][pSexSkill];
									    if(level >= 0 && level <= 50)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetHealth(playerid, health + 30.0); }
											new rand = random(sizeof(STD1));
											STDPlayer[playerid] = STD1[rand];
											STDPlayer[SexOffer[playerid]] = STD1[rand];
											if(STD1[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + no STD while having Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STD while having Sex."); }
											else if(STD1[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + a Chlamydia because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
											else if(STD1[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + a Gonorrhea because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
											else if(STD1[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + a Syphilis because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
										}
										else if(level >= 51 && level <= 100)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetHealth(playerid, health + 60.0); }
											new rand = random(sizeof(STD2));
											STDPlayer[playerid] = STD2[rand];
											STDPlayer[SexOffer[playerid]] = STD2[rand];
											if(STD2[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 60 Health + no STD while having Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STD while having Sex."); }
											else if(STD2[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 60 Health + a Chlamydia because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
											else if(STD2[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 60 Health + a Gonorrhea because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
											else if(STD2[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 60 Health + a Syphilis because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
										}
										else if(level >= 101 && level <= 200)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetHealth(playerid, health + 90.0); }
											new rand = random(sizeof(STD3));
											STDPlayer[playerid] = STD3[rand];
											STDPlayer[SexOffer[playerid]] = STD3[rand];
											if(STD3[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 90 Health + no STD while having Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STD while having Sex."); }
											else if(STD3[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 90 Health + a Chlamydia because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
											else if(STD3[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 90 Health + a Gonorrhea because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
											else if(STD3[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 90 Health + a Syphilis because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
										}
										else if(level >= 201 && level <= 400)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetHealth(playerid, health + 120.0); }
											new rand = random(sizeof(STD4));
											STDPlayer[playerid] = STD4[rand];
											STDPlayer[SexOffer[playerid]] = STD4[rand];
											if(STD4[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 120 Health + no STD while having Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STD while having Sex."); }
											else if(STD4[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 120 Health + a Chlamydia because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
											else if(STD4[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 120 Health + a Gonorrhea because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
											else if(STD4[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 120 Health + a Syphilis because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
										}
										else if(level >= 401)
										{
										    if(GetPlayerHealth(playerid, health) < 150) {
											SetHealth(playerid, health + 150.0); }
											SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Your Sex Skill Level is so high you gave high health and No STD.");
											SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* The Whore's Sex Skill Level is so high you got high health and No STD.");
										}
				      				}
									else
									{
									    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* The player used a Condom.");
									    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You used a Condom.");
									    Condom[playerid] --;
									}
								}
								else
								{
								    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* That player was already infected with a STD, can't get another one.");
								    return 1;
								}
								SexOffer[playerid] = 999;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   You or the Whore are not both in a Car !");
							    return 1;
							}
						}//Connected or not
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   You can't afford the Sex!");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You dont have any Sex offerd by a Whore !");
				    return 1;
				}
			}
            else if(strcmp(x_job,"felujitas",true) == 0)
			{
			    if(FelujitasElfogadas[playerid] > 0)
			    {
			        if(IsPlayerConnected(FelujitasElfogadas[playerid]))
			        {
		                format(string, sizeof(string), "* Elfogadtad a felajánlást.");
		                SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		                format(string, sizeof(string), "* Elfogadták a felajánlásodat.");
		                SendClientMessage(FelujitasElfogadas[playerid], COLOR_LIGHTBLUE, string);
		                FelujitasElfogadas[playerid] = 999;
		                return 1;
			        }
			    }
       			else
          		{
            		SendClientMessage(playerid, COLOR_GREY, "Nincs felajánlás!");
              		return 1;
          		}
			}
			else if(strcmp(x_job,"repair",true) == 0)
			{
			    if(RepairOffer[playerid] < 999)
			    {
			        if(GetMoney(playerid) > RepairPrice[playerid])
				    {
					    if(IsPlayerInAnyVehicle(playerid))
					    {
					        if(IsPlayerConnected(RepairOffer[playerid]))
					        {
						        GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        RepairCar[playerid] = GetPlayerVehicleID(playerid);
						        SetVehicleHealth(RepairCar[playerid], 1000.0);
						        RepairVehicle(RepairCar[playerid]);
								format(string, sizeof(string), "* Megjavítottad %s kocsiját %dFt-ért", giveplayer, RepairPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s megjavította a kocsidat %dFt-ért",sendername,RepairPrice[playerid]);
								SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[RepairOffer[playerid]][pMechSkill] ++;
				                if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 50)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Az autószerelõ fejlettséged elérte a következõ szintet! (2) Több benzint tölthetsz a kocsiba"); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 100)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Az autószerelõ fejlettséged elérte a következõ szintet! (3) Több benzint tölthetsz a kocsiba"); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 200)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Az autószerelõ fejlettséged elérte a következõ szintet! (4) Több benzint tölthetsz a kocsiba"); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 400)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Az autószerelõ fejlettséged elérte a következõ szintet! (5) Több benzint tölthetsz a kocsiba"); }
								PlayerInfo[RepairOffer[playerid]][pPayCheck] += RepairPrice[playerid];
								GiveMoney(playerid, -RepairPrice[playerid]);
						        RepairOffer[playerid] = 999;
								RepairPrice[playerid] = 0;
								return 1;
							}
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   You can't afford the Repair !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No-one offerd you to Repair your Car !");
			        return 1;
			    }
			}
			else { return 1; }
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/refill", true) == 0)
	{
		if(IsPlayerConnected(playerid)) return Msg(playerid, "Jelenleg kiszedve.");
	    if(IsPlayerConnected(playerid))
	    {
		    if(!AMT(playerid, MUNKA_SZERELO))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Nem vagy autószerelõ!");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /refill [playerid/PartOfName] [ennyiért]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 100000) { SendClientMessage(playerid, COLOR_GREY, "Az összeg 1 és 100000FT között lehet!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
					    //if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Can't do that!"); return 1; }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Felajánlottad %s-nak, hogy %dFT-ért megtankolod a kocsiját.",giveplayer,money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Autószerelõ %s felajánlotta neked, hogy feltankolja a kocsidat %dFTért. Elfogadása: /accept refill",sendername,money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						RefillOffer[playa] = playerid;
						RefillPrice[playa] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nincs közel hozzád!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Inaktív játékos");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/repair", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(!AMT(playerid, MUNKA_SZERELO))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Nem vagy autószerelõ!");
		        return 1;
		    }
			if(!PlayerToPoint(3, playerid, -1917.3201,304.5225,41.0469)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy a tuning mûhelybe!");
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /repair [playerid/PartOfName] [ennyiért]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 10000) { SendClientMessage(playerid, COLOR_GREY, "Az ára minimum 1, max 100000Ft lehet!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa) && IsPlayerInAnyVehicle(playa))
					{
					    //if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Can't do that!"); return 1; }
				    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Felajánlottad %s-nak, hogy megjavítod a kocsiját %dFT-ért", giveplayer, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Autószerelõ %s felajánlotta, hogy megjavítja a kocsidat %dFT-ért. Ha el akarod fogadni /accept repair",sendername,money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						RepairOffer[playa] = playerid;
						RepairPrice[playa] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nincs közel hozzád, vagy nincs kocsiban!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Õ nincs fenn!");
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/callcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(CarCalls[playerid] > 0)
		    {
		        new Float:plocx,Float:plocy,Float:plocz;
	            GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(CarID[playerid],plocx,plocy+4, plocz);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bought Car has arrived.");
				CarCalls[playerid] -= 1;
				format(string, sizeof(string), "* You can call your Bought Car for %d times more.", CarCalls[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Invalid action !");
		    }
		}
	    return 1;
	}*/
	if(strcmp(cmd, "/live", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
			    if(TalkingLive[playerid] != 255)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Élõadás vége");
			        SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Az élõadás végetért");
			        TogglePlayerControllable(playerid, 1);
			        TogglePlayerControllable(TalkingLive[playerid], 1);
		            TalkingLive[TalkingLive[playerid]] = 255;
			        TalkingLive[playerid] = 255;
			        return 1;
			    }
			    if(PlayerInfo[playerid][pNewsSkill] < 400)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nem vagy még elég tapasztalt riporter! (skill 5)");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /live [playerid/PartOfName]");
					return 1;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Magaddal akarsz beszélni? Inkább menj pszihiáterhez!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Felkérted %s-t, hogy résztvegyen az élõ adásban!", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s felajánlotta, hogy részt vegyél az élõ adásban!", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							LiveOffer[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Túl messze van!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ez a játékos nincs fenn!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not a News Reporter !");
			}
		}//not connected
		return 1;
	}

	if(strcmp(cmd, "/healme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if (PlayerToPoint(3, playerid,1173.2563,-1323.3102,15.3943)||PlayerToPoint(3, playerid,2029.5945,-1404.6426,17.2512))
			{
	            if(STDPlayer[playerid] > 0)
	            {
					STDPlayer[playerid] = 0;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kigyógyítottak a betegségbõl!");
					GiveMoney(playerid, -1000);
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Doki: A vizitdíj 1000FT. további szép napot!");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nincs betegséged!");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nem vagy a kórháznál!");
	        }
        }
		return 1;
	}
	if(strcmp(cmd, "/eject", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        new State;
	        if(IsPlayerInAnyVehicle(playerid))
	        {
         		State=GetPlayerState(playerid);
		        if(State!=PLAYER_STATE_DRIVER)
		        {
		        	SendClientMessage(playerid,COLOR_GREY,"Csak a vezetõ dobhat ki utast a kocsiból!");
		            return 1;
		        }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Használat: /eject [playerid/PartOfName]");
					return 1;
				}
				new playa;
				playa = ReturnUser(tmp);
				new test;
				test = GetPlayerVehicleID(playerid);
				if(IsPlayerConnected(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
				    {
				        if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "Magadat hogy dobod ki?"); return 1; }
				        if(IsPlayerInVehicle(playa,test))
				        {
							new PName[MAX_PLAYER_NAME];
							GetPlayerName(playerid,PName,sizeof(PName));
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "* Kidobtad a kocsiból: %s", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* A sofõr kidobott a kocsiból");
							SendClientMessage(playa, COLOR_LIGHTBLUE, string);
							RemovePlayerFromVehicle(playa);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, " Õ nincs a kocsiban!");
						    return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, " Invalid ID/Name!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You need to be in a Vehicle to use this !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sex", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(AMT(playerid, MUNKA_PROSTI))
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
					SendClientMessage(playerid, COLOR_GREY, "Csak kocsiba tudsz Sexelni!");
					return 1;
			    }
			    new Car = GetPlayerVehicleID(playerid);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /sex [playerid/PartOfName] [mennyiért]");
					return 1;
				}
				//giveplayerid = strval(tmp);
				giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				new money;
				money = strval(tmp);
				if(money < 1000 || money > 250000) { SendClientMessage(playerid, COLOR_GREY, "Min 1000Ftért, és max 250000Ftért lehet csak!"); return 1; }
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Magaddal akarsz Sexelni? Mennyire egy perverz vagy te! xD"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveplayerid, Car))
						    {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Felajánlottad neki: %s, hogy sexeljetek %dFt-ért", giveplayer, money);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s felajánlotta, hogy sexelj fele %dFt-ért! /accept sex hogy elfogadd", sendername, money);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					            SexOffer[giveplayerid] = playerid;
					            SexPrice[giveplayerid] = money;
				            }
				            else
				            {
				                SendClientMessage(playerid, COLOR_GREY, "Neked, és neki is a kocsiban kell lennie!");
				                return 1;
				            }
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Ez a játékos nincs közel hozzád!");
							return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nincs ilyen játékos!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   You are not a Whore !");
			}
		}//not connected
		return 1;
		}
	if(strcmp(cmd, "/wanted", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(IsACop(playerid))
			{
				new x;
				SendClientMessage(playerid, COLOR_GREEN, "Körözött személyek:");
			    for(new i=0; i < MAX_PLAYERS; i++) {
					if(IsPlayerConnected(i))
					{
					    if(WantedLevel[i] > 1)
					    {
							GetPlayerName(i, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "%s%s: %d", string,giveplayer,WantedLevel[i]);
							x++;
							if(x > 3) {
							    SendClientMessage(playerid, COLOR_YELLOW, string);
							    x = 0;
								format(string, sizeof(string), "");
							} else {
								format(string, sizeof(string), "%s, ", string);
							}
						}
					}
				}
				if(x <= 3 && x > 0) {
					string[strlen(string)-2] = '.';
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nem vagy Rendõr!");
			}
		}//not connected
		return 1;
	}
	
	if(egyezik(cmd, "/car") || egyezik(cmd, "/jármû"))
	{
		if(!AMT(playerid, MUNKA_AUTOTOLVAJ)) return Msg(playerid, "Nem vagy autótolvaj!");
		if(params != 1) return Msg(playerid, "/jármû [Lead / Feltör / Riasztó]");
		if(egyezik(param[1], "Riasztó") || egyezik(param[1], "Riaszto"))
		{
			new jarmu = GetPlayerVehicleID(playerid);
			if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Jármûben kell lenned.");
			if(GetJarmu(jarmu, KOCSI_RIASZTO) == 0) return Msg(playerid, "Mit akarsz kikapcsolni? Nem is megy...");
			Freeze(playerid);
			SetTimerEx("JarmuRiaszto", 10000, false, "i", playerid);
			Msg(playerid, "Elkezdted kikapcsolni a jármû riasztóját...");
			Cselekves(playerid, "zörög valamivel...", 1);
		}
		if(egyezik(param[1], "Feltör") || egyezik(param[1], "Feltor"))
		{
			if(IsPlayerInAnyVehicle(playerid)) return 1;
			new kozelbenlevojarmu = GetClosestVehicle(playerid);
			
			if(GetDistanceToVehicle(playerid, kozelbenlevojarmu) > 3.0) return Msg(playerid, "Nagyon közel kell lenned a jármûhöz.");
			if(IsABicikli(kozelbenlevojarmu)) return Msg(playerid, "Biciklit??-.-");
			new sofor = KocsiSofor(kozelbenlevojarmu);
			if(sofor != NINCS) return Msg(playerid, "Ha ülnek benne, hogy akarod feltörni??");
			if(!Locked(kozelbenlevojarmu)) return Msg(playerid, "A jármû nyitva, nem kell feltörni.");
			SendFormatMessage(playerid, COLOR_LIGHTRED, "* Rendszám: %d |  Elkezdted feltörni, várj!", kozelbenlevojarmu);
			Freeze(playerid);
			SetTimerEx("JarmuFeltores", 15000, false, "ii", playerid);
			Cselekves(playerid, "zörög valamivel...", 1);
		}
		if(egyezik(param[1], "Lead"))
		{
			 if(!IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Nem vagy jármûben!");
	
			 if(!PlayerToPoint(4.0, playerid, -1548.3618,123.6438,3.2966))
			 {
				SendClientMessage(playerid, COLOR_LIGHTRED, "* Nem vagy a leadó helyen! GPS-ed jelzi hova kell menned.");
				SetPlayerCheckpoint(playerid, -1548.3618,123.6438,3.2966,8.0);
				return 1;
			 }
			 if(PlayerInfo[playerid][pCarTime] > 0)
			 {
				SendFormatMessage(playerid, COLOR_LIGHTRED, "* Várnod kell %d percet...", PlayerInfo[playerid][pCarTime] / 60);
				return 1;
			 }
			 new car = IsAVsKocsi(GetPlayerVehicleID(playerid));
			 if(SajatKocsi(playerid, GetPlayerVehicleID(playerid)) || car != -1 && CarInfo[car][cOwned] == 0) return Msg(playerid, "Persze, majd ezt fogod leadni mi? -.-");
			 if(IsABicikli(GetPlayerVehicleID(playerid))) return Msg(playerid, "Biciklit??-.-");
			 new kocsiid = GetPlayerVehicleID(playerid);
			 new kocsitipus = GetVehicleModel(kocsiid);
			 new MenyiPenz = 0;
			 if(kocsitipus == 405 || kocsitipus == 411 || kocsitipus == 409 || kocsitipus == 415 || kocsitipus == 429 || kocsitipus == 477 || kocsitipus == 522 || kocsitipus == 560 || kocsitipus == 562 || kocsitipus == 559)
			 {
				MenyiPenz = Rand(1000 * PlayerInfo[playerid][pLevel], 2000 * PlayerInfo[playerid][pLevel]);
			 }
			 else
			 {
				MenyiPenz = Rand(500 * PlayerInfo[playerid][pLevel], 1000 * PlayerInfo[playerid][pLevel]);
			 }
			 GiveMoney(playerid, MenyiPenz);
			 PlayerInfo[playerid][pCarTime] = 1200;
			 SendFormatMessage(playerid, COLOR_LIGHTRED, "* Jármû leadva! Rendszám: %d", GetPlayerVehicleID(playerid));
			 SendFormatMessage(playerid, COLOR_LIGHTRED, "* Kaptál érte %dFt-ot. Következõt %d Perc múlva viheted!", MenyiPenz, PlayerInfo[playerid][pCarTime] / 60);
			 DisablePlayerCheckpoint(playerid);
		     KocsiRespawn(GetPlayerVehicleID(playerid));
		}
		if(egyezik(param[1], "debug"))
		{
			if(!IsScripter(playerid)) return 1;
			PlayerInfo[playerid][pCarTime] = 0;
			Msg(playerid, "CarTime 0.");
		}
	}
	
	/*if(strcmp(cmd, "/dropcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(AMT(playerid, MUNKA_AUTOTOLVAJ))
			{
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Küldetésen vagy! Ilyenkor nem tudod használni!");
			        return 1;
			    }
		        if(PlayerInfo[playerid][pCarTime] == 0)
		        {
		            GameTextForPlayer(playerid, "~w~Kocsi eladasa~n~~r~Menj a radaron jelzett pontra!", 5000, 1);
		            CP[playerid] = 1;
		            SetPlayerCheckpoint(playerid, -1548.3618,123.6438,3.2966,8.0);
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Már leadtál egy kocsit nemrég, várj, amíg ujra tudsz!");
		        }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nem vagy autótolvaj!");
			}
		}//not connected
		return 1;
	}*/

	if(strcmp(cmd, "/quitjob", true) == 0 || strcmp(cmd, "/felmond", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			    return SendClientMessage(playerid, COLOR_GREY, "Használata: /felmond [munka(1/2)]");

			new munka = strval(tmp);

			if(munka != 1 && munka != 2)
			    return SendClientMessage(playerid, COLOR_GREY, "Használata: /felmond [munka(1/2)]");

			if(munka == 1)
			{
			    if(PlayerInfo[playerid][pJob1] > 0)
			    {
					if(PlayerInfo[playerid][pContractTime] < 9000 && !Admin(playerid, 1337))
					{
					    new meg = floatround((9000 - PlayerInfo[playerid][pContractTime]) / 60);
				    	SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Még %d percet le kell dolgoznod, hogy kiléphess!", meg);
					    return 1;
					}
					else
					{
					    PlayerInfo[playerid][pJob1] = 0;
				    	//PlayerInfo[playerid][pChar] = 0;
					    PlayerInfo[playerid][pContractTime] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kiléptél a fõmunkádból.");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nincs fõmunkád!");
				}
			}

			if(munka == 2)
			{
			    if(PlayerInfo[playerid][pJob2] > 0)
			    {
					if(PlayerInfo[playerid][pContractTime2] < 9000 && !Admin(playerid, 2))
					{
					    new meg = floatround((9000 - PlayerInfo[playerid][pContractTime2]) / 60);
				    	SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Még %d percet le kell dolgoznod, hogy kiléphess!", meg);
					    return 1;
					}
					else
					{
					    PlayerInfo[playerid][pJob2] = 0;
				    	//PlayerInfo[playerid][pChar] = 0;
					    PlayerInfo[playerid][pContractTime2] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kiléptél a másodmunkádból.");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nincs másodmunkád!");
				}
			}

		}//not connected
		return 1;
	}

	if(strcmp(cmd, "/bail", true) == 0 || strcmp(cmd, "/óvadék", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(PlayerInfo[playerid][pJailed]>1)
			{
			    if(JailPrice[playerid] > 0)
			    {
			        if(GetMoney(playerid) > JailPrice[playerid])
			        {
			            format(string, sizeof(string), "Kifizetted az óvadékot! (%dFT)", JailPrice[playerid]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GiveMoney(playerid, -JailPrice[playerid]);
						JailPrice[playerid] = 0;
						WantLawyer[playerid] = 0; CallLawyer[playerid] = 0;
						PlayerInfo[playerid][pJailTime] = 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GRAD1, "Nem tudod kifizetni az óvadékot!");
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Nincs óvadék!");
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Nem vagy börtönben!");
			}
		}//not connected
		return 1;
	}
	/*if(strcmp(cmd, "/clear", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
//			new member = PlayerInfo[playerid][pMember];
//			new leader = PlayerInfo[playerid][pLeader];
//			new rank = PlayerInfo[playerid][pRank];
	 		if(IsACop(playerid))
			{
				if (!PlayerToPoint(3.0, playerid, 253.9280,69.6094,1003.6406))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Nem vagy a rendõrségen belül!");
					return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /clear [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
                        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Magadról nem tudod törölni a körözést!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Törölted %s körözését", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s törölte a körözésedet, így nem köröznek tovább!", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						WantedPoints[giveplayerid] = 0;
						WantedLevel[giveplayerid] = 0;
						ClearCrime(giveplayerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Hibás id/név");
				}
			}
			else if(member == 5||member == 6||leader == 5||leader == 6)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Használat: /clear [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot Clear yourself!"); return 1; }
					    if(rank < 4) { SendClientMessage(playerid, COLOR_GREY, "   You need Rank 4 to clear someone's Wanted Points + Records !"); return 1; }
					    if(GetMoney(playerid) < 5000) { SendClientMessage(playerid, COLOR_GREY, "   You need $5000 to Clear your Family Member !"); return 1; }
		                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    if(member > 0)
					    {
						    if(PlayerInfo[giveplayerid][pMember] != member)
							{
								SendClientMessage(playerid, COLOR_GREY, "   That player is not in your Family !");
								return 1;
							}
							format(string, sizeof(string), "* You cleared the Records and Wanted Points of %s for $5000.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Family Member %s with Rank %d, has cleared your Records and Wanted Points.", sendername, rank);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						}
						else if(leader > 0)
						{
			                if(PlayerInfo[giveplayerid][pMember] != leader)
							{
								SendClientMessage(playerid, COLOR_GREY, "   That player is not in your Family !");
								return 1;
							}
						    format(string, sizeof(string), "* You cleared the Records and Wanted Points of %s for $5000.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Family Leader %s, has cleared your Records and Wanted Points.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						}
						WantedPoints[giveplayerid] = 0;
						WantedLevel[giveplayerid] = 0;
						ClearCrime(giveplayerid);
						GiveMoney(playerid, - 5000);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Invalid ID/Name!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Te nem vagy Rendõr / FBI / Katona");
			}
		}//not connected
		return 1;
	}*/
/*	if(egyezik(cmd, "/kincs"))
	{
		if(params < 1) return Msg(playerid, "/kincs [spawn / nyit]");
		
		new kincsspawned = 0;
		if(egyezik(param[1], "spawn"))
		{
			if(kincsspawned == 0)
			{
				LoadKincsek();
				kincsspawned = 1;
				Msg(playerid, "Kincsek lerakva.");
			}
			else
			{
				Msg(playerid, "Hát ezzel nem fogod kifagyasztani mr oberth. :D");
			}
		}
		if(egyezik(param[1], "nyit"))
		{
			for(new k = 0; k < MAX_KINCS; k++)
			{
				if(PlayerToPoint(3, playerid, Kincs[k][kPosX], Kincs[k][kPosY], Kincs[k][kPosZ]))
				{
					new rnd;
			
					KincsGeneralas:
					rnd = random(1000)+1;

					if(1 <= rnd < 400) // Készpénz - 40%
					{
						SendClientMessage(playerid, COLOR_WHITE, "Jutalom: Pénz");
					}
					else if(400 <= rnd < 600) // Mati || Drog - 20%
					{
						if(Civil(playerid) || LegalisSzervezetTagja(playerid))
						{
							SendClientMessage(playerid, COLOR_WHITE, "Jutalom: Fegyver (civil / legál vagy nem kapod meg, újrasorsol");
							goto KincsGeneralas;
						}
					}
					else if(600 <= rnd < 800) // Fegyver - 20%
					{
						if(Civil(playerid) || LegalisSzervezetTagja(playerid))
						{
							SendClientMessage(playerid, COLOR_WHITE, "Jutalom: Fegyver (civil / legál vagy nem kapod meg, újrasorsol");
							goto KincsGeneralas;
						}
					}
					else if(800 <= rnd < 920) // Ház - 12%
					{
						SendClientMessage(playerid, COLOR_WHITE, "Jutalom: Egy Ház (van 3db házad nem kapod meg, újrasorsol)");
							goto KincsGeneralas;
					}
					else if(920 <= rnd < 990) // Jármû - 7%
					{
						SendClientMessage(playerid, COLOR_WHITE, "Jutalom: Egy Kocsi (van 3db kocsid nem kapod meg, újrasorsol)");
							goto KincsGeneralas;
					}
					else if(970 <= rnd < 990) // Arany - 2%
					{				
						SendClientMessage(playerid, COLOR_WHITE, "Jutalom: Arany");
					}
					else if(990 <= rnd <= 1000) // Gyémánt - 1%
					{
						SendClientMessage(playerid, COLOR_WHITE, "Jutalom: GYÉMÁNT");
					}
					return 1;
				}
			}
		}
		return 1;
	}
	*/
	if(egyezik(cmd, "/sziget"))
	{
		SetPlayerPos(playerid, 1417.6903,-3833.5371,17.1375);
		Msg(playerid, "Sikeres teleportálás.. Üdv az elhagyatott szigeten.");
		return 1;
	}
	if(egyezik(cmd, "/[Gates]"))
	{
		SetPlayerPos(playerid, -2455.0947,2433.9617,14.7278);
		Msg(playerid, "Sikeres teleportálás..");
		return 1;
	}
	if(egyezik(cmd, "/riporterlogolás"))
	{
		if(riporterlogolas[playerid] == 0)
		{
			riporterlogolas[playerid] = 1;
			SendClientMessage(playerid, COLOR_YELLOW, "[TOGLOG]Mostantól látod a /news logot!");
		}
		else
		{
			riporterlogolas[playerid] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "[TOGLOG]Mostantól NEM látod a /news logot!");
		}
	}
	
	if(egyezik(cmd, "/kaszinójáték") || egyezik(cmd, "/kj"))
	{
		if(params < 1) return Msg(playerid, "/(k)aszinó(j)áték [félkarú]");
		
		if(egyezik(param[1], "félkarú") || egyezik(param[1], "felkaru"))
		{
			if(params < 2) return Msg(playerid, "/(k)aszinó(j)áték félkarú [fogadási összeg]");
			{
				kaszinoosszeg = strval(param[2]);
				if(kaszinoosszeg < 25000 || kaszinoosszeg > 250000) return Msg(playerid, "Minimum 25000Ft és maximum 250,000Ft lehet a tét!");
				if(kaszinoosszeg > PlayerInfo[playerid][pAccount]) return Msg(playerid, "Nincs ennyi pénzed, úgy tûnik ez csak egy álom marad..");
				if(MunkaFolyamatban[playerid] == 1) return Msg(playerid, "Ilyen gyorsan azért ne akard eljátszani a pénzed..");
			
				MunkaFolyamatban[playerid] = 1;
			    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~A Felkaru Rablo sorsol..", 5000, 3);
				TogglePlayerControllable(playerid, false);
				PlayerInfo[playerid][pAccount] -= kaszinoosszeg;
				SetTimer("Kaszinojatek", 5000, false);
			}
		}
		return 1;
	}
	
	/*if(egyezik(cmd, "/drogtermesztés"))
	{
		if(params < 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "{F3FF02}/drogtermesztés {00C0FF}[ültet,] ");
			return 1;
		}
		
		if(param[1], "ültet"))
		{
			if(ultetett[playerid] != 0) return Msg(playerid, "Már ültettél veteményt!");
			if(PlayerInfo[playerid][pCserje] < 5  || PlayerInfo[playerid][pMak] < 5 || PlayerInfo[playerid][pCannabis] < 5) return Msg(playerid, "Szükséged van 5 darab Cserje, Mák, Cannabis magra!");
			
			SetTimerEx("DrogPlant", 25000, false, "i", playerid);
			PlayerInfo[playerid][pCserje] -= 5;
			PlayerInfo[playerid][pMak] -= 5;
			PlayerInfo[playerid][pCannabis] -= 5;
			MunkaFolyamatban[playerid] = 1;
		}
		return 1;
	}
		*/
	/*	
	if(egyezik(cmd, "
	"))
	{
		if(halaszvege[playerid] == 1) return Msg(playerid, "Aztmondtam relogolj. :(");
		
		if(params < 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "{F3FF02}/horgászat {00C0FF}[bedob, beránt, helyek, elad, vesz, halaim, visszadob, toplista, árak, info]");
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
				Msg(playerid, "(( Adminparancsok: /horgászat admin ))");
			}
			return 1;
		}
		
		if(egyezik(param[1], "visszadob"))
		{
			if(params < 2) return Msg(playerid, "/horgászat visszadob [összes / halslot(1,2,3,4,5)]");
			
			if(egyezik(param[2], "összes") || egyezik(param[2], "osszes"))
			{
				new hal1 = pHalak[playerid][pSlot1];
				new hal2 = pHalak[playerid][pSlot2];
				new hal3 = pHalak[playerid][pSlot3];
				new hal4= pHalak[playerid][pSlot4];
				new hal5 = pHalak[playerid][pSlot5];
				
				if(hal1 != 0) pHalak[playerid][pSlot1] = 0, pHalak[playerid][pSlot1nev] = 0;
				if(hal2 != 0) pHalak[playerid][pSlot2] = 0, pHalak[playerid][pSlot2nev] = 0;
				if(hal3 != 0) pHalak[playerid][pSlot3] = 0, pHalak[playerid][pSlot3nev] = 0;
				if(hal4 != 0) pHalak[playerid][pSlot4] = 0, pHalak[playerid][pSlot4nev] = 0;
				if(hal5 != 0) pHalak[playerid][pSlot5] = 0, pHalak[playerid][pSlot5nev] = 0;
				
				SendClientMessage(playerid, COLOR_GREY, "Visszadobtad mind az összes haladat!");
				return 1;
			}
			new hal1 = pHalak[playerid][pSlot1];
			new hal2 = pHalak[playerid][pSlot2];
			new hal3 = pHalak[playerid][pSlot3];
			new hal4= pHalak[playerid][pSlot4];
			new hal5 = pHalak[playerid][pSlot5];
			new eldobotthalslot;
			if(egyezik(param[2], "1"))	if(hal1 != 0) pHalak[playerid][pSlot1] = 0, pHalak[playerid][pSlot1nev] = 0, eldobotthalslot = 1;
			if(egyezik(param[2], "2"))	if(hal2 != 0) pHalak[playerid][pSlot2] = 0, pHalak[playerid][pSlot2nev] = 0, eldobotthalslot = 2;
			if(egyezik(param[2], "3"))	if(hal3 != 0) pHalak[playerid][pSlot3] = 0, pHalak[playerid][pSlot3nev] = 0, eldobotthalslot = 3;
			if(egyezik(param[2], "4"))	if(hal4 != 0) pHalak[playerid][pSlot4] = 0, pHalak[playerid][pSlot4nev] = 0, eldobotthalslot = 4;
			if(egyezik(param[2], "5"))	if(hal5 != 0) pHalak[playerid][pSlot5] = 0, pHalak[playerid][pSlot5nev] = 0, eldobotthalslot = 5;
			SendFormatMessage(playerid, COLOR_GREY, "Visszadobtad a %d sloton lévõ halat!", eldobotthalslot);
			return 1;
		}
		if(egyezik(param[1], "vesz"))
		{
			if(!PlayerToPoint(5, playerid, 377.9093,-1886.7325,7.8359))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nem vagy a vásárló helynél.. (Jelölve a térképeden.)");
				SetPlayerCheckpoint(playerid, 377.9093,-1886.7325,7.8359, 1); 
				return 1;
			}
			
			if(params < 2) return Msg(playerid, "/horgászat vesz [csali / horgászbot]");
			
			if(egyezik(param[2], "horgászbot") || egyezik(param[2], "horgaszbot"))
			{
				if(pHalak[playerid][pHorgaszbot] == 1) return Msg(playerid, "Már van horgászbotod.");
				if(PlayerInfo[playerid][pAccount] <  HORGASZBOTAR) return Msg(playerid, "Nincs elég pénzed!");
				
				SendFormatMessage(playerid, COLOR_WHITE, "{F3FF02}[HorgászBolt]: {00C0FF}Vettél egy horgászbotot! (-%dFt)", HORGASZBOTAR);
				PlayerInfo[playerid][pAccount] -= HORGASZBOTAR;
				pHalak[playerid][pHorgaszbot] = 1;
				new bizbepenzfele = HORGASZBOTAR/2;
				//BizPenz(BIZ_HAJO, bizbepenzfele);
			}
			if(egyezik(param[2], "csali"))
			{
				if(params < 3)
				{
					SendFormatMessage(playerid, COLOR_LIGHTRED, "/horgászat vesz csali [hány darabot?] (%dFt/db)", CSALIAR);
					return 1;
				}
				
				new mennyitvesz = strval(param[3]);
				new mennyibekerul = mennyitvesz*CSALIAR;
				if(PlayerInfo[playerid][pAccount] < mennyibekerul) return Msg(playerid, "Nincs elég pénzed!");
				if(mennyitvesz >= 1000) return Msg(playerid, "Na azért ennyit már nem okés?!");
				
				//MAX CSALI NINCS LEKORLÁTOZVA!! VÉGTELENIG LEHET STACKELNI!
				//MAX CSALI NINCS LEKORLÁTOZVA!! VÉGTELENIG LEHET STACKELNI!
				
				SendFormatMessage(playerid, COLOR_WHITE, "{F3FF02}[HorgászBolt]: {00C0FF}Vettél %ddb csalit! (-%dFt)", mennyitvesz, mennyibekerul);
				pHalak[playerid][pCsali] = mennyitvesz;
				PlayerInfo[playerid][pAccount] -= mennyibekerul;
				new bizbepenzfele = mennyibekerul/2;
				//BizPenz(BIZ_HAJO, bizbepenzfele);
			}
			return 1;
		}
		//====================================== ADMINOKNAK =============================
		//====================================== ADMINOKNAK =============================
		if(egyezik(param[1], "admin"))
		{
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(params < 2) return Msg(playerid, "/horgászat admin [skillgive / kapásidõ / cuccgive]");
				
				if(egyezik(param[2], "skillgive"))
				{
					if(params < 3) return Msg(playerid, "/horgászat admin skillgive [playerid]");
			
					new playerd = strval(param[3]);
					if(IsPlayerConnected(playerd))
					{
						if(params < 4) return Msg(playerid, "/horgászat admin skillgive playerid [mennyiség] (0-1000 között)");
						
						new skill = strval(param[4]);
						if(!(0 < skill < 1000)) return Msg(playerid, "0 és 1000 között! :)");
						
						PlayerInfo[playerid][pFishSkill] = skill;
						SendFormatMessage(playerid, COLOR_GREY, "[Admin]: FishSkill beállitva: %d", skill);
					}
					else
					{
						Msg(playerid, "Nincs ilyen játékos!");
					}
				}
				if(egyezik(param[2], "cuccgive"))
				{
					SendClientMessage(playerid, COLOR_GREY, "[Admin]: Pecabot és csali addolva!");
					pHalak[playerid][pHorgaszbot] = 1;
					pHalak[playerid][pCsali] = 20;
				}
				if(egyezik(param[2], "kapasido") || egyezik(param[2], "kapásidõ"))
				{
					if(params < 3) return Msg(playerid, "/horgászat admin kapasido [onoff | mennyi]");
					
					if(egyezik(param[3], "onoff"))
					{
						if(kapastimer == 0)
						{
							kapastimer = 1;
							SendFormatMessage(playerid, COLOR_GREY, "[Admin]: Kapás FIX Idõ bekapcsolva. (Beállitott idõ: %dsec)", kapasfix);
						}
						else
						{
							kapastimer = 0;
							SendClientMessage(playerid, COLOR_GREY, "[Admin]: Kapás FIX Idõ kikapcsolva.");
						}
					}
					if(egyezik(param[3], "mennyi"))
					{
						if(params < 4) return Msg(playerid, "/horgászat admin kapásidõ mennyi [idõ MÁSODPERCBEN]");
						
						new mennyilett = strval(param[4]);
						kapasfix = mennyilett;
						SendFormatMessage(playerid, COLOR_GREY, "[Admin]: Kapás Fix Idõ beállitva: %dsec", kapasfix);
					}
				}
			}
			else
			{
				Msg(playerid, "Nem vagy admin!");
			}
			return 1;
		}
		if(egyezik(param[1], "toplista") || egyezik(param[1], "top"))
		{
			SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}===============[ {F3FF02}Toplista (ONLINE) {FFFFFF}]===============");
			new neve[32], neve2[32], neve3[32];
			new highestid = INVALID_PLAYER_ID, highestid2 = INVALID_PLAYER_ID, highestid3 = INVALID_PLAYER_ID;
			new highest = -1, highest2 = -1, highest3 = -1;
			//============================ TOP 1 =============================
			//============================ TOP 1 =============================
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(pHalak[i][pOsszesFogott] > highest)
				{
					highestid = i;
					highest = pHalak[i][pOsszesFogott];
					neve = PlayerName(i);
				}
			}
			if(highestid != INVALID_PLAYER_ID)
			{
				SendFormatMessage(playerid, COLOR_GREY, "{F3FF02}[Elsõ]: {00C0FF}[%d]%s - %ddb kifogott hal.", highestid, neve, highest);
			}
			//============================ TOP 2 =============================
			//============================ TOP 2 =============================
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(highest > pHalak[i][pOsszesFogott] > highest2)
				{
					highestid2 = i;
					highest2 = pHalak[i][pOsszesFogott];
					neve2 = PlayerName(i);
				}
			}
		//	if(highestid2 != INVALID_PLAYER_ID)
			//{
				if(highest2 < 1) // ne irja ugyanazt 2x.. (playert)
				{
					SendClientMessage(playerid, COLOR_GREY, "{F3FF02}[Második]: {00C0FF}Nincs");
				}
				else
				{
					SendFormatMessage(playerid, COLOR_GREY, "{F3FF02}[Második]: {00C0FF}[%d]%s - %ddb kifogott hal.", highestid2, neve2, highest2);
				}
		//	}
			//============================ TOP 3 =============================
			//============================ TOP 3 =============================
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(highest2 > pHalak[i][pOsszesFogott] > highest3)
				{
					highestid3 = i;
					highest3 = pHalak[i][pOsszesFogott];
					neve3 = PlayerName(i);
				}
			}
			//if(highestid3 != INVALID_PLAYER_ID)
			//{//ne egyezzen ugyanazzal.. ha kevés palyer lenne (3-nál kevesebb,) akkor téged irna mind3 helyen.példának.
				if(highest3 < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "{F3FF02}[Harmadik]: {00C0FF}Nincs");
				}
				else
				{
					SendFormatMessage(playerid, COLOR_GREY, "{F3FF02}[Harmadik]: {00C0FF}[%d]%s - %ddb kifogott hal.", highestid3, neve3, highest3);
				}
			//}
			//===============================================================
			//===============================================================
			SendClientMessage(playerid, COLOR_WHITE, "===============================================");
			SendFormatMessage(playerid, COLOR_GREY, "Összesen kifogott halaid: %ddb", pHalak[playerid][pOsszesFogott]);
		}
		if(egyezik(param[1], "infó") || egyezik(param[1], "info"))
		{
			SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}===============[ {F3FF02}Horgászás Információk {FFFFFF}]===============");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szükséged lesz egy pecabotra, és némi csalira, amiket megkapsz a közeli boltban.");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Menj a horgászásra kijelölt helyekre és dobd be a botot, majd várj a kapásra!");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Kapás esetén rántsd be a horgászbotot. ('/horgászat beránt' paranccsal)");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "A nálad lévõ halakat eltudod adni a kereskedõnek. (Santa Maria)");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Némelyik horgászhely használatához bizonyos skillre lesz szükséged.");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "A horgászhelytõl függ hogy mit foghatsz ki.");
		}
		if(egyezik(param[1], "beránt") || egyezik(param[1], "berant"))
		{
			if(halaszkapas[playerid] == 1)
			{
				new skillmiatt = 0;
				switch(PlayerInfo[playerid][pFishSkill])
				{
					case 1..200: 
					{
						skillmiatt = 8000;
					}
					case 201..500:
					{
						skillmiatt = 5000;
					}
					case 501..700: 
					{
						skillmiatt = 3000;
					}
					case 701..1000:
					{
						skillmiatt = 1000;
					}
					default:
					{
						skillmiatt = 1000;
					}
				}
				GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Orso feltekerese..", skillmiatt, 3);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "{F3FF02}[Horgászat]: {00C0FF}Berántottad a horgászbotot! Tekered fel az órsót..");
				if(PlayerInfo[playerid][pAdmin] >= 1)
				{
					SendFormatMessage(playerid, COLOR_GREY, "[AdminHorgász]: (( Timer: %dsec múlva. ))", skillmiatt/1000);
				}
				SetTimerEx("HalaszKapas", skillmiatt, false, "i", playerid);
				halaszkapas[playerid] = 0;
			}
			else
			{
				berantasszamlalo[playerid]++;
				if(berantasszamlalo[playerid] == 5)
				{
					halaszvege[playerid] = 1;
					MunkaFolyamatban[playerid] = 0;
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid, COLOR_YELLOW, "Ezt a munkát nem fogod shortolni az is biztos..");
					SendClientMessage(playerid, COLOR_GREY, "Relogolj, és töröld ki a shortkeyt, ezután folytathatod a munkát!");
				}
				if(berantasszamlalo[playerid] == 3)
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Ne floodold a 'beránt' parancsot!!");
				} else {
					SendFormatMessage(playerid, COLOR_LIGHTRED, "Minek akarsz berántani? (%dx)", berantasszamlalo[playerid]);
					}
			}
		}
		if(egyezik(param[1], "halaim") || egyezik(param[1], "halak"))
		{
			new hal1 = pHalak[playerid][pSlot1];
			new hal2 = pHalak[playerid][pSlot2];
			new hal3 = pHalak[playerid][pSlot3];
			new hal4= pHalak[playerid][pSlot4];
			new hal5 = pHalak[playerid][pSlot5];
			new hal1nev = pHalak[playerid][pSlot1nev];
			new hal2nev = pHalak[playerid][pSlot2nev];
			new hal3nev = pHalak[playerid][pSlot3nev];
			new hal4nev = pHalak[playerid][pSlot4nev];
			new hal5nev = pHalak[playerid][pSlot5nev];
			
			SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}==================[ {F3FF02}Halaid {FFFFFF}]==================");
			if(hal1 == 0 && hal2 == 0 && hal3 == 0 && hal4 == 0 && hal5 == 0) return SendClientMessage(playerid, COLOR_YELLOW, "Nem fogtál még egy halat sem!");
			
			if(hal1 != 0)
			{
				new melyikhalis[32];
				switch(hal1nev)
				{
					case 1: melyikhalis = "Sügér";
					case 2: melyikhalis = "Csattogóhal";
					case 3: melyikhalis = "Pisztráng";
					case 4: melyikhalis = "BlueMarlin";
					case 5: melyikhalis = "Vitorláshal";
					case 6: melyikhalis = "Makréla";
					case 8: melyikhalis = "Tonhal";
					case 9: melyikhalis = "Angolna";
					case 10: melyikhalis = "Amúr";
					case 11: melyikhalis = "Kardhal";
					case 12: melyikhalis = "Süllõ";
				}
				SendFormatMessage(playerid, COLOR_ORANGE, "Hal: %s | Súly: %dkg", melyikhalis, hal1);
			}
			if(hal2 != 0)
			{
				new melyikhalis2[32];
				switch(hal2nev)
				{
					case 1: melyikhalis2 = "Sügér";
					case 2: melyikhalis2 = "Csattogóhal";
					case 3: melyikhalis2 = "Pisztráng";
					case 4: melyikhalis2 = "BlueMarlin";
					case 5: melyikhalis2 = "Vitorláshal";
					case 6: melyikhalis2 = "Makréla";
					case 8: melyikhalis2 = "Tonhal";
					case 9: melyikhalis2 = "Angolna";
					case 10: melyikhalis2 = "Amúr";
					case 11: melyikhalis2 = "Kardhal";
					case 12: melyikhalis2 = "Süllõ";
				}
				SendFormatMessage(playerid, COLOR_ORANGE, "Hal: %s | Súly: %dkg", melyikhalis2, hal2);
			}
			if(hal3 != 0)
			{
				new melyikhalis3[32];
				switch(hal3nev)
				{
					case 1: melyikhalis3 = "Sügér";
					case 2: melyikhalis3 = "Csattogóhal";
					case 3: melyikhalis3 = "Pisztráng";
					case 4: melyikhalis3 = "BlueMarlin";
					case 5: melyikhalis3 = "Vitorláshal";
					case 6: melyikhalis3 = "Makréla";
					case 8: melyikhalis3 = "Tonhal";
					case 9: melyikhalis3 = "Angolna";
					case 10: melyikhalis3 = "Amúr";
					case 11: melyikhalis3 = "Kardhal";
					case 12: melyikhalis3 = "Süllõ";
				}
				SendFormatMessage(playerid, COLOR_ORANGE, "Hal: %s | Súly: %dkg", melyikhalis3, hal3);
			}
			if(hal4 != 0)
			{
				new melyikhalis4[32];
				switch(hal4nev)
				{
					case 1: melyikhalis4 = "Sügér";
					case 2: melyikhalis4 = "Csattogóhal";
					case 3: melyikhalis4 = "Pisztráng";
					case 4: melyikhalis4 = "BlueMarlin";
					case 5: melyikhalis4 = "Vitorláshal";
					case 6: melyikhalis4 = "Makréla";
					case 8: melyikhalis4 = "Tonhal";
					case 9: melyikhalis4 = "Angolna";
					case 10: melyikhalis4 = "Amúr";
					case 11: melyikhalis4 = "Kardhal";
					case 12: melyikhalis4 = "Süllõ";
				}
				SendFormatMessage(playerid, COLOR_ORANGE, "Hal: %s | Súly: %dkg", melyikhalis4, hal4);
			}
			if(hal5 != 0)
			{
				new melyikhalis5[32];
				switch(hal5nev)
				{
					case 1: melyikhalis5 = "Sügér";
					case 2: melyikhalis5 = "Csattogóhal";
					case 3: melyikhalis5 = "Pisztráng";
					case 4: melyikhalis5 = "BlueMarlin";
					case 5: melyikhalis5 = "Vitorláshal";
					case 6: melyikhalis5 = "Makréla";
					case 8: melyikhalis5 = "Tonhal";
					case 9: melyikhalis5 = "Angolna";
					case 10: melyikhalis5 = "Amúr";
					case 11: melyikhalis5 = "Kardhal";
					case 12: melyikhalis5 = "Süllõ";
				}
				SendFormatMessage(playerid, COLOR_ORANGE, "Hal: %s | Súly: %dkg", melyikhalis5, hal5);
			}
		}
		
		if(egyezik(param[1], "bedob"))
		{
			/*
				new level = PlayerInfo[playerid][pFishSkill];
				if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 1."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level < 250) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 2."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 250 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 251 && level < 500) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 3."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 500 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 501 && level < 1000) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 4."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 1000 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 1000) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 5."); }
			*/
			switch(GetPlayerAnimationIndex(playerid))
			{
				case 1543,1538,1539:
				{
					return Msg(playerid, "Vizben? Mutasd már meg nekem is.. :D");
				}
			}
			
			//if(model != 595 || 430 || 446 || 452 || 453 || 454 || 472 || 473 || 484 || 493)
			//if(GetDistanceToVehicle(playerid, hajoja) > 10.0)
			
				if(!PlayerToPoint(150.0, playerid, 370.3924,-2425.9006,-0.4865) &&
					!PlayerToPoint(150.0, playerid, 3197.8337,-2060.1685,-0.3765) &&
					!PlayerToPoint(150.0, playerid, 2024.0540,-127.1852,-0.5232) &&
					!PlayerToPoint(150.0, playerid, -187.6936,-639.7835,-0.2355) &&
					!PlayerToPoint(150.0, playerid, -1747.1085,-2848.0251,-0.7444) &&
					!PlayerToPoint(150.0, playerid, 178.3143,319.8893,-1.5723)) return Msg(playerid, "Nem vagy a horgászásra kijelölt helyeken!");
					
			new pskillje = 0;
			switch(PlayerInfo[playerid][pFishSkill])
			{
				case 1..50: 
				{
					pskillje = 0; //1-es skill
				}
				case 51..200: 
				{
					pskillje = 1; //2-es skill
				}
				case 201..500:
				{
					pskillje = 2; //3-as skill
				}
				case 501..800: 
				{
					pskillje = 3; // 4
				}
				case 801..1000:
				{
					pskillje = 4; // 5
				}
				default:
				{
					pskillje = 4;
				}
			}
		
			if(pHalak[playerid][pSlot5] != 0) return Msg(playerid, "Nem tudsz több halat kifogni! (max 5db)");
			//ERRÕL_ERRE
			if(pHalak[playerid][pSlot1] != 0 || pHalak[playerid][pSlot2] != 0 || pHalak[playerid][pSlot3] != 0 || pHalak[playerid][pSlot4] != 0 || pHalak[playerid][pSlot5] != 0
			
			if(PlayerToPoint(150.0, playerid, 2024.0540,-127.1852,-0.5232) && pskillje < 1) return Msg(playerid, "Ennek a tónak a használatához 2-es skillre van szükséged..");
			if(PlayerToPoint(150.0, playerid, -187.6936,-639.7835,-0.2355) && pskillje < 2) return Msg(playerid, "Ennek a tónak a használatához 3-as skillre van szükséged..");
			if(PlayerToPoint(150.0, playerid, -1747.1085,-2848.0251,-0.7444) && pskillje < 3) return Msg(playerid, "Ennek a tónak a használatához 4-es skillre van szükséged..");
			if(PlayerToPoint(150.0, playerid, 178.3143,319.8893,-1.5723) && pskillje < 4) return Msg(playerid, "Ennek a tónak a használatához 5-ös skillre van szükséged..");

			if(pHalak[playerid][pHorgaszbot] == 0) return Msg(playerid, "Nincs horgászbotod.");
			if(pHalak[playerid][pCsali] == 0) return Msg(playerid, "Nincs csalid.");
			
			if(MunkaFolyamatban[playerid] == 1) return Msg(playerid, "Na-na.. Egyszerre csak egy!");
			
			// HA MINDEN OK!
			new randomtimer;
			if(kapastimer == 0) {
				randomtimer = Rand(30000, 120000); }
			else {
				randomtimer = kapasfix*1000; }
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "{F3FF02}[Horgászat]: {00C0FF}Bedobtad a horgászbotot! Várj türelemmel a kapásra.");
			//Ha admin akkor irja a timert
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
				SendFormatMessage(playerid, COLOR_GREY, "[AdminHorgász]:  (( Timer: %dsec múlva kapás ))", floatround(randomtimer)/1000);
			}
			GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Horgaszbot bedobva! Varj a kapasra.", randomtimer, 3);
			OnePlayAnim(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
			TogglePlayerControllable(playerid, false);
			pHalak[playerid][pCsali]--;
			MunkaFolyamatban[playerid] = 1;
			SetTimerEx("HalaszTimer", randomtimer, false, "i", playerid);
			berantasszamlalo[playerid] = 0;
			/*forward HalaszTimer(playerid);
			forward HalaszKapas(playerid);*/
		}
		
		if(egyezik(param[1], "elad"))
		{
			if(!PlayerToPoint(5.0, playerid, 377.9093,-1886.7325,7.8359))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nem vagy az eladó helynél.. (Jelölve a térképeden.)");
				SetPlayerCheckpoint(playerid, 377.9093,-1886.7325,7.8359, 1);
				return 1;
			}
			new hal1 = pHalak[playerid][pSlot1];
			new hal2 = pHalak[playerid][pSlot2];
			new hal3 = pHalak[playerid][pSlot3];
			new hal4= pHalak[playerid][pSlot4];
			new hal5 = pHalak[playerid][pSlot5];
			new hal1nev = pHalak[playerid][pSlot1nev];
			new hal2nev = pHalak[playerid][pSlot2nev];
			new hal3nev = pHalak[playerid][pSlot3nev];
			new hal4nev = pHalak[playerid][pSlot4nev];
			new hal5nev = pHalak[playerid][pSlot5nev];
			
			if(hal1 == 0 && hal2 == 0 && hal3 == 0 && hal4 == 0 && hal5 == 0) return SendClientMessage(playerid, COLOR_YELLOW, "Nem fogtál még egy halat sem!");
			
			new szorzoja;
			new ara;
			new halneve[32];
			new osszeseladott;
			new osszeshal;
			new osszessuly;
			if(hal1 != 0)
			{
				switch(hal1nev)
				{
					case 1: szorzoja = SUGERAR, halneve = "Sügér";
					case 2: szorzoja = CSATTOGOHALAR, halneve = "Csattogóhal";
					case 3: szorzoja  = PISZTRANGAR, halneve = "Pisztráng";
					case 4: szorzoja = BLUEMARLINAR,halneve = "BlueMarlin";
					case 5: szorzoja = VITORLASHALAR, halneve = "Vitorláshal";
					case 6: szorzoja = MAKRELAAR, halneve = "Makréla";
					case 8: szorzoja = TONHALAR, halneve = "Tonhal";
					case 9: szorzoja = ANGOLNAAR, halneve = "Angolna";
					case 10: szorzoja = AMURAR, halneve = "Amúr";
					case 11: szorzoja = KARDHALAR, halneve = "Kardhal";
					case 12: szorzoja = SULLOAR, halneve = "Süllõ";
				}
				ara = szorzoja*hal1; // HALÁR * KILÓVAL
				SendFormatMessage(playerid, COLOR_WHITE, "[Eladva/Sold] - Hal: %s | Súly: %dkg | Ára: %dFt", halneve, hal1, ara);
				pHalak[playerid][pSlot1] = 0;
				pHalak[playerid][pSlot1nev] = 0;
				osszeseladott += ara;
				osszeshal ++;
				osszessuly += hal1;
			}
			if(hal2 != 0)
			{
				switch(hal2nev)
				{
					case 1: szorzoja = SUGERAR, halneve = "Sügér";
					case 2: szorzoja = CSATTOGOHALAR, halneve = "Csattogóhal";
					case 3: szorzoja  = PISZTRANGAR, halneve = "Pisztráng";
					case 4: szorzoja = BLUEMARLINAR, halneve = "BlueMarlin";
					case 5: szorzoja = VITORLASHALAR, halneve = "Vitorláshal";
					case 6: szorzoja = MAKRELAAR, halneve = "Makréla";
					case 8: szorzoja = TONHALAR, halneve = "Tonhal";
					case 9: szorzoja = ANGOLNAAR, halneve = "Angolna";
					case 10: szorzoja = AMURAR, halneve = "Amúr";
					case 11: szorzoja = KARDHALAR, halneve = "Kardhal";
					case 12: szorzoja = SULLOAR, halneve = "Süllõ";
				}
				ara = szorzoja*hal2; // HALÁR * KILÓVAL
				SendFormatMessage(playerid, COLOR_WHITE, "[Eladva/Sold] - Hal: %s | Súly: %dkg | Ára: %dFt", halneve, hal2, ara);
				pHalak[playerid][pSlot2] = 0;
				pHalak[playerid][pSlot2nev] = 0;
				osszeseladott += ara;
				osszeshal ++;
				osszessuly += hal2;
			}
			if(hal3 != 0)
			{
				switch(hal3nev)
				{
					case 1: szorzoja = SUGERAR, halneve = "Sügér";
					case 2: szorzoja = CSATTOGOHALAR, halneve = "Csattogóhal";
					case 3: szorzoja  = PISZTRANGAR, halneve = "Pisztráng";
					case 4: szorzoja = BLUEMARLINAR, halneve = "BlueMarlin";
					case 5: szorzoja = VITORLASHALAR, halneve = "Vitorláshal";
					case 6: szorzoja = MAKRELAAR, halneve = "Makréla";
					case 8: szorzoja = TONHALAR, halneve = "Tonhal";
					case 9: szorzoja = ANGOLNAAR, halneve = "Angolna";
					case 10: szorzoja = AMURAR, halneve = "Amúr";
					case 11: szorzoja = KARDHALAR, halneve = "Kardhal";
					case 12: szorzoja = SULLOAR, halneve = "Süllõ";
				}
				ara = szorzoja*hal3; // HALÁR * KILÓVAL
				SendFormatMessage(playerid, COLOR_WHITE, "[Eladva/Sold] - Hal: %s | Súly: %dkg | Ára: %dFt", halneve, hal3, ara);
				pHalak[playerid][pSlot3] = 0;
				pHalak[playerid][pSlot3nev] = 0;
				osszeseladott += ara;
				osszeshal ++;
				osszessuly += hal3;
			}
			if(hal4 != 0)
			{
				switch(hal4nev)
				{
					case 1: szorzoja = SUGERAR, halneve = "Sügér";
					case 2: szorzoja = CSATTOGOHALAR, halneve = "Csattogóhal";
					case 3: szorzoja  = PISZTRANGAR, halneve = "Pisztráng";
					case 4: szorzoja = BLUEMARLINAR, halneve = "BlueMarlin";
					case 5: szorzoja = VITORLASHALAR, halneve = "Vitorláshal";
					case 6: szorzoja = MAKRELAAR, halneve = "Makréla";
					case 8: szorzoja = TONHALAR, halneve = "Tonhal";
					case 9: szorzoja = ANGOLNAAR, halneve = "Angolna";
					case 10: szorzoja = AMURAR, halneve = "Amúr";
					case 11: szorzoja = KARDHALAR, halneve = "Kardhal";
					case 12: szorzoja = SULLOAR, halneve = "Süllõ";
				}
				ara = szorzoja*hal4; // HALÁR * KILÓVAL
				SendFormatMessage(playerid, COLOR_WHITE, "[Eladva/Sold] - Hal: %s | Súly: %dkg | Ára: %dFt", halneve, hal4, ara);
				pHalak[playerid][pSlot4] = 0;
				pHalak[playerid][pSlot4nev] = 0;
				osszeseladott += ara;
				osszeshal ++;
				osszessuly += hal4;
			}
			if(hal5 != 0)
			{
				switch(hal5nev)
				{
					case 1: szorzoja = SUGERAR, halneve = "Sügér";
					case 2: szorzoja = CSATTOGOHALAR, halneve = "Csattogóhal";
					case 3: szorzoja  = PISZTRANGAR, halneve = "Pisztráng";
					case 4: szorzoja = BLUEMARLINAR, halneve = "BlueMarlin";
					case 5: szorzoja = VITORLASHALAR, halneve = "Vitorláshal";
					case 6: szorzoja = MAKRELAAR, halneve = "Makréla";
					case 8: szorzoja = TONHALAR, halneve = "Tonhal";
					case 9: szorzoja = ANGOLNAAR, halneve = "Angolna";
					case 10: szorzoja = AMURAR, halneve = "Amúr";
					case 11: szorzoja = KARDHALAR, halneve = "Kardhal";
					case 12: szorzoja = SULLOAR, halneve = "Süllõ";
				}
				ara = szorzoja*hal5; // HALÁR * KILÓVAL
				SendFormatMessage(playerid, COLOR_WHITE, "[Eladva/Sold] - Hal: %s | Súly: %dkg | Ára: %dFt", halneve, hal5, ara);
				pHalak[playerid][pSlot5] = 0;
				pHalak[playerid][pSlot5nev] = 0;
				osszeseladott += ara;
				osszeshal ++;
				osszessuly += hal5;
			}
			SendClientMessage(playerid, COLOR_YELLOW, "==============================================");
			SendFormatMessage(playerid, COLOR_WHITE, "{F3FF02}[Összesités]: {FFFFFF}Eladott hal: %ddb | ÖsszSúly: %dkg | ÖsszÁr: +%dFt", osszeshal, osszessuly, osszeseladott);
			new szovegee[32];
			format(szovegee, sizeof(szovegee), "~g~~h~+%dFt", osszeseladott);
			GameTextForPlayer(playerid, szovegee, 5000, 1);
			PlayerInfo[playerid][pPayCheck] += osszeseladott;
			
			return 1;
		}
		if(egyezik(param[1], "árak") || egyezik(param[1], "arak"))
		{
			
			SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}===============[ {F3FF02}Hal árak {FFFFFF}]===============");
			SendFormatMessage(playerid, COLOR_GREY, "Sügér - Átlag ár: %dFt/kg", SUGERAR);
			SendFormatMessage(playerid, COLOR_GREY, "Makréla - Átlag ár: %dFt/kg", MAKRELAAR);
			SendFormatMessage(playerid, COLOR_GREY, "Csattogóhal - Átlag ár: %dFt/kg", CSATTOGOHALAR);
			SendFormatMessage(playerid, COLOR_GREY, "BlueMarlin - Átlag ár: %dFt/kg", BLUEMARLINAR);
			SendFormatMessage(playerid, COLOR_GREY, "Pisztráng - Átlag ár: %dFt/kg", PISZTRANGAR);
			SendFormatMessage(playerid, COLOR_GREY, "Vitorláshal - Átlag ár: %dFt/kg", VITORLASHALAR);
			SendFormatMessage(playerid, COLOR_GREY, "Tonhal - Átlag ár: %dFt/kg", TONHALAR);
			SendFormatMessage(playerid, COLOR_GREY, "Angolna - Átlag ár: %dFt/kg", ANGOLNAAR);
			SendFormatMessage(playerid, COLOR_GREY, "Amúr - Átlag ár: %dFt/kg", AMURAR);
			SendFormatMessage(playerid, COLOR_GREY, "Kardhal - Átlag ár: %dFt/kg", KARDHALAR);
			SendFormatMessage(playerid, COLOR_GREY, "Süllõ - Átlag ár: %dFt/kg", SULLOAR);
			return 1;
		}
		if(egyezik(param[1], "hely") || egyezik(param[1], "helyek"))
		{
			if(params < 2) return Msg(playerid, "/horgászat hely [skillszinttõl]");
			{
				new skilltol = strval(param[2]);
				if(!(0 < skilltol < 6)) return Msg(playerid, "1 és 5 között!");
			
				if(skilltol > PlayerInfo[playerid][pFishSkill]) return Msg(playerid, "Nincs is ennyi skilled!");
				
				new pskillje2 = 0;
				switch(PlayerInfo[playerid][pFishSkill])
				{
					case 1..50: 
					{
						pskillje2 = 0; //1-es skill
					}
					case 51..200: 
					{
						pskillje2 = 1; //2-es skill
					}
					case 201..500:
					{
						pskillje2 = 2; //3-as skill
					}
					case 501..700: 
					{
						pskillje2 = 3; // 4
					}
					case 701..1000:
					{
						pskillje2 = 4; // 5
					}
					default:
					{
						pskillje2 = 4;
					}
				}
				
				if(egyezik(param[2], "1"))
				{
					if(params < 3) return Msg(playerid, "/horgászat helyek 1 [1, 2]");
					{
						if(egyezik(param[3], "1"))
						{
							Msg(playerid, "Jelölve a térképeden!");
							SetPlayerCheckpoint(playerid, 370.3924,-2425.9006,-0.4865, 1);
						}
						else if(egyezik(param[3], "2"))
						{
							Msg(playerid, "Jelölve a térképeden!");
							SetPlayerCheckpoint(playerid, 3197.8337,-2060.1685,-0.3765, 1);
						}
					}
				}
				else if(egyezik(param[2], "2"))
				{
					if(pskillje2 < 1) return Msg(playerid, "Ennek a tónak a használatához 2-es skillre van szükséged..");
					
					SetPlayerCheckpoint(playerid, 2024.0540,-127.1852,-0.5232, 1);
				}
				else if(egyezik(param[2], "3"))
				{
					if(pskillje2 < 2) return Msg(playerid, "Ennek a tónak a használatához 3-as skillre van szükséged..");
					
					Msg(playerid, "Jelölve a térképeden!");
					SetPlayerCheckpoint(playerid, -187.6936,-639.7835,-0.2355, 1);
				}
				else if(egyezik(param[2], "4"))
				{
					if(pskillje2 < 3) return Msg(playerid, "Ennek a tónak a használatához 4-es skillre van szükséged..");
					
					Msg(playerid, "Jelölve a térképeden!");
					SetPlayerCheckpoint(playerid, -1747.1085,-2848.0251,-0.7444, 1);
				}
				else if(egyezik(param[2], "5"))
				{
					if(pskillje2 < 4) return Msg(playerid, "Ennek a tónak a használatához 5-ös skillre van szükséged..");
					
					Msg(playerid, "Jelölve a térképeden!");
					SetPlayerCheckpoint(playerid, 178.3143,319.8893,-1.5723, 1);
				}
			}
		}
		return 1;
	}
	*/
	
	if(strcmp(cmd, "/ticket", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy zsaru!");
			    return 1;
			}

	        if(OnDuty[playerid] != 1 && LMT(playerid, LMUNKA_SCPD))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy szolgálatban!");
			    return 1;
			}

	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /ticket [playerid/PartOfName] [bírság] [oka]");
				return 1;
			}

			giveplayerid = ReturnUser(tmp);

            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Használat: /ticket [playerid/PartOfName] [bírság] [oka]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 10 || moneys > 100000) { SendClientMessage(playerid, COLOR_GREY, "Nana, egy bûntetés ára 10Ft és 100000Ft között lehet csak !"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Használat: /ticket [playerid/PartOfName] [bírság] [oka]");
							return 1;
						}

						format(string, sizeof(string), "* Megbûntetted %s -t (Összeg:%dFT), Oka: %s", giveplayer, moneys, (result));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s megbírságolt. Fizetendõ Összeg: %dFT, Oka: %s", sendername, moneys, (result));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* '/accept ticket' hogy befizesd.");
						TicketOffer[giveplayerid] = playerid;
						TicketMoney[giveplayerid] = moneys;
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Ez a játékos nincs hozzád közel!");
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Nincs ilyen játékos !");
			    return 1;
			}
		}
		return 1;
	}
	if(egyezik(cmd, "/arrest"))
	{
		if(!IsACop(playerid)) return Msg(playerid, "Nem vagy rendõr.");
		if(OnDuty[playerid] != 1) return Msg(playerid, "Nem vagy szolgálatban.");
		if(!PlayerToPoint(10.0, playerid, 267.2688,77.7713,1001.0391) &&
			!PlayerToPoint(10.0, playerid, -1606.3223,675.2178,-5.2422) &&
			!PlayerToPoint(10.0, playerid, 222.6867,113.4456,999.0156) &&
			!PlayerToPoint(10.0, playerid, 1526.9524,-1677.5056,5.8906) &&
			!PlayerToPoint(10.0, playerid, 193.5097,177.7687,1003.0234) &&
			!PlayerToPoint(10.0, playerid, 193.6819,159.4799,1003.0234) &&
			!PlayerToPoint(10.0, playerid, 227.1628,113.8590,999.0156) &&
			!PlayerToPoint(10.0, playerid, 215.038833, 1862.826782, 13.140625) &&
			!PlayerToPoint(10.0, playerid, 734.2736,-1351.9012,13.5000) &&
			!PlayerToPoint(10.0, playerid, 1208.880, -1820.819, 13.595))
		return Msg(playerid, "Hol akarod lecsukni?");
		if(params < 4) return Msg(playerid, "/arrest [bírság] [idõ (perc)] [óvadék] [indok]");
		moneys = strval(param[1]);
		new time = strval(param[2]);
		new bailprice = strval(param[3]);
		strtok(cmdtext, idx); strtok(cmdtext, idx); strtok(cmdtext, idx);
		
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[90];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		
		if(moneys < 0 || moneys > 500000) return Msg(playerid, "A minimum bírság 0Ft, maximum 500000Ft");
		if(time < 5 || time > 300) return Msg(playerid, "A börtönidõnek minimum 5 percnek kell lennie, és max 5 órának (300perc)");
		if(bailprice > 0 && bailprice < 10000 || bailprice > 3000000) return Msg(playerid, "A minimum óvadékösszeg 10000Ft, maximum 3 millió!");
		new suspect = GetClosestPlayer(playerid);
		if(GetDistanceBetweenPlayers(playerid,suspect) > 5) return Msg(playerid, "Nincs a közeledben");
		
		if(strlen(result) > 40) return Msg(playerid, "Maximum 40 karakter hossz! Fogalmazz röviden!");
		if(!EngedelyezettKarakterek(result)) return Msg(playerid, "Helytelen karakterek a szövegben!");
		
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Letartóztattad %s-t, oka: %s", PlayerName(suspect), result);
		GiveMoney(suspect, -moneys);
		SendFormatMessage(suspect, COLOR_LIGHTRED, "Letartóztatott %s, oka: %s", PlayerName(playerid), result);
		ResetWeapon(suspect);
			
		if(LMT(playerid, LMUNKA_SCPD))
		{
			format(string, sizeof(string), "<< Rendõr %s letartóztatta %s-t >>", PlayerName(playerid), PlayerName(suspect));
			OOCNews(COLOR_LIGHTRED, string);
		}
		else if(LMT(playerid, LMUNKA_FBI))
		{
			format(string, sizeof(string), "<< FBI Ügynök %s letartóztatta %s-t >>", PlayerName(playerid), PlayerName(suspect));
			OOCNews(COLOR_LIGHTRED, string);
			if(PlayerInfo[suspect][pZarolva] == 1) 
			{
				PlayerInfo[suspect][pZarolva] = 0;
				Msg(suspect, "Számládról a zárolás levéve!");
			}
		}
		
		else if(LMT(playerid, LMUNKA_KATONA))
		{
			format(string, sizeof(string), "<< Katona %s letartóztatta %s-t >>", PlayerName(playerid), PlayerName(suspect));
			OOCNews(COLOR_LIGHTRED, string);
		}
		else if(LMT(playerid, LMUNKA_SFPD))
		{
			format(string, sizeof(string), "<< SF Rendõr %s letartóztatta %s-t >>", PlayerName(playerid), PlayerName(suspect));
			OOCNews(COLOR_LIGHTRED, string);
		}
		else if(LMT(playerid, LMUNKA_VPOP))
		{
			format(string, sizeof(string), "<< VPOP Ügynök %s letartóztatta %s-t >>", PlayerName(playerid), PlayerName(suspect));
			OOCNews(COLOR_LIGHTRED, string);
		}
		if(PlayerToPoint(10.0, playerid, 193.5097,177.7687,1003.0234) || PlayerToPoint(10.0, playerid, 193.6819,159.4799,1003.0234) || PlayerToPoint(10.0, playerid, 1208.880, -1820.819, 13.595))
		{
			Jail(suspect, "+", (time*60), "fbi", result);
			format(string, sizeof(string), "%s elhelyezte %s-t az FBI börtönébe.", PlayerName(playerid), PlayerName(suspect));
			SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
			FrakcioInfo[LMUNKA_FBI][fPenz] += moneys;
		}
		else if(PlayerToPoint(10.0,playerid,1526.7924,-1677.8021,5.8906) || PlayerToPoint(10.0, playerid, 267.5284,77.6294,1001.0391))
		{
			Jail(suspect, "+", (time*60), "lspd", result);
			format(string, sizeof(string), "%s elhelyezte %s-t az LSPD börtönébe.", PlayerName(playerid), PlayerName(suspect));
			SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
			FrakcioInfo[LMUNKA_SCPD][fPenz] += moneys;
		}
		else if(PlayerToPoint(10.0,playerid,-1606.3223,675.2178,-5.2422) || PlayerToPoint(10.0,playerid,222.6867,113.4456,999.0156) || PlayerToPoint(10.0, playerid, 226.7355,122.7866,999.0410) || PlayerToPoint(10.0, playerid, 734.2736,-1351.9012,13.5000))
		{
			Jail(suspect, "+", (time*60), "sfpd", result);
			format(string, sizeof(string), "%s elhelyezte %s-t az VPOP börtönébe.", PlayerName(playerid), PlayerName(suspect));
			SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
			FrakcioInfo[LMUNKA_VPOP][fPenz] += moneys;
		}
		else if(PlayerToPoint(10.0, playerid, 215.038833, 1862.826782, 13.140625))
		{
			Jail(suspect, "+", (time*60), "fort", result);
			format(string, sizeof(string), "%s elhelyezte %s-t a Fort DeMorgen fegyenctelepen.", PlayerName(playerid), PlayerName(suspect));
			SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
			SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
			FrakcioInfo[LMUNKA_KATONA][fPenz] += moneys;
		}
		
		if(bailprice > 0)
		{
			JailPrice[suspect] = bailprice;
			format(string, sizeof(string), "%d másodpercre börtönbe kerültél.   Óvadék: %dFT", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
			Bilincs(suspect, 0);
			SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
		}
		else
		{
			JailPrice[suspect] = 0;
			format(string, sizeof(string), "%d másodpercre börtönbe kerültél.   Óvadék: Nincs", PlayerInfo[suspect][pJailTime]);
			Bilincs(suspect, 0);
			SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
		}
		PlayerInfo[suspect][pArrested] += 1;
		SetPlayerFree(suspect,playerid, "Letartóztatva.");
		WantedPoints[suspect] = 0;
		WantedLevel[suspect] = 0;
		WantLawyer[suspect] = 1;
		lspdmoney += 10000;
		Visz[playerid] = NINCS;
	}
	/*if(strcmp(cmd, "/arrest", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(LMT(playerid, LMUNKA_SCPD) || LMT(playerid, LMUNKA_FBI) || LMT(playerid, LMUNKA_KATONA) || LMT(playerid,LMUNKA_VPOP) || LMT(playerid, LMUNKA_SFPD))
			{
				if(OnDuty[playerid] != 1)
				    return SendClientMessage(playerid, COLOR_GREY, "Nem vagy szolgálatban!");

                if(PlayerToPoint(10.0, playerid, 267.2688,77.7713,1001.0391) ||
				PlayerToPoint(10.0, playerid, -1606.3223,675.2178,-5.2422) ||
				PlayerToPoint(10.0, playerid, 222.6867,113.4456,999.0156) ||
				PlayerToPoint(10.0, playerid, 1526.9524,-1677.5056,5.8906) ||
				PlayerToPoint(10.0, playerid, 193.5097,177.7687,1003.0234) ||
				PlayerToPoint(10.0, playerid, 193.6819,159.4799,1003.0234) ||
				PlayerToPoint(10.0,playerid,227.1628,113.8590,999.0156) ||
				PlayerToPoint(10.0, playerid, 215.038833, 1862.826782, 13.140625) || // Fort
				PlayerToPoint(10.0, playerid, 734.2736,-1351.9012,13.5000)) //VPOP külsõ
				{

					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
						return SendClientMessage(playerid, COLOR_GRAD2, "Használata: /arrest [bírság] [idõ (perc)] [óvadék összege]");
					moneys = strval(tmp);

					if(moneys < 0 || moneys > 500000) return SendClientMessage(playerid, COLOR_GREY, "A minimum bírság 0Ft, maximum 500000Ft");

					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
						return SendClientMessage(playerid, COLOR_GRAD2, "Használata: /arrest [bírság] [idõ (perc)] [óvadék összege]");
					new time = strval(tmp);

					if(time < 5 || time > 300) { SendClientMessage(playerid, COLOR_GREY, "A börtönidõnek minimum 5 percnek kell lennie, és max 5 órának (300perc)"); return 1; }

					//tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
						return SendClientMessage(playerid, COLOR_GRAD2, "Használata: /arrest [bírság] [idõ (perc)] [óvadék összege]");
					new bail = strval(tmp);

					if(bail < 0 || bail > 1) { SendClientMessage(playerid, COLOR_GREY, "Legyen-e óvadék? Igen(1) vagy nem(0)"); return 1; }

					new bailprice = strval(param[3]);
					if(bailprice < 1)
						return SendClientMessage(playerid, COLOR_GRAD2, "Használata: /arrest [bírság] [idõ (perc)] [óvadék összege]");
					if(bailprice > 0 && bailprice < 10000 || bailprice > 3000000) { SendClientMessage(playerid, COLOR_GREY, "A minimum óvadékösszeg 10000Ft, maximum 3 millió!"); return 1; }
					}

					new suspect = GetClosestPlayer(playerid);
					if(IsPlayerConnected(suspect))
					{
						if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
						{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));

							SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Letartóztattad %s-t !", giveplayer);

							GiveMoney(suspect, -moneys);
							SendFormatMessage(suspect, COLOR_LIGHTRED, "Letartóztatott %s!", sendername);

							ResetWeapon(suspect);

							if(LMT(playerid, LMUNKA_SCPD))
							{
								format(string, sizeof(string), "<< Rendõr %s lecsukta %s-t >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							else if(LMT(playerid, LMUNKA_FBI))
							{
								format(string, sizeof(string), "<< FBI Ügynök %s lecsukta %s-t >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
								if(PlayerInfo[suspect][pZarolva] == 1) 
								{
									PlayerInfo[suspect][pZarolva] = 0;
									Msg(suspect, "Számládról a zárolás levéve!");
								}
							}
							else if(LMT(playerid, LMUNKA_KATONA))
							{
								format(string, sizeof(string), "<< Katona %s lecsukta %s-t >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							else if(LMT(playerid, LMUNKA_SFPD))
							{
								format(string, sizeof(string), "<< SF Rendõr %s lecsukta %s-t >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							else if(LMT(playerid, LMUNKA_VPOP))
							{
								format(string, sizeof(string), "<< VPOP Ügynök %s lecsukta %s-t >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							if(PlayerToPoint(10.0, playerid, 193.5097,177.7687,1003.0234) || PlayerToPoint(10.0, playerid, 193.6819,159.4799,1003.0234))
							{
								Jail(suspect, "+", (time*60), "fbi");
								format(string, sizeof(string), "%s elhelyezte %s-t az FBI börtönébe.", PlayerName(playerid), PlayerName(suspect));
								SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
								FrakcioInfo[LMUNKA_FBI][fPenz] += moneys;
							}
							else if(PlayerToPoint(10.0,playerid,1526.7924,-1677.8021,5.8906) || PlayerToPoint(10.0, playerid, 267.5284,77.6294,1001.0391))
							{
								Jail(suspect, "+", (time*60), "lspd");
								format(string, sizeof(string), "%s elhelyezte %s-t az LSPD börtönébe.", PlayerName(playerid), PlayerName(suspect));
								SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
								FrakcioInfo[LMUNKA_SCPD][fPenz] += moneys;
							}
							else if(PlayerToPoint(10.0,playerid,-1606.3223,675.2178,-5.2422) || PlayerToPoint(10.0,playerid,222.6867,113.4456,999.0156) || PlayerToPoint(10.0, playerid, 226.7355,122.7866,999.0410) || PlayerToPoint(10.0, playerid, 734.2736,-1351.9012,13.5000))
							{
								Jail(suspect, "+", (time*60), "sfpd");
								format(string, sizeof(string), "%s elhelyezte %s-t az VPOP börtönébe.", PlayerName(playerid), PlayerName(suspect));
								SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
								FrakcioInfo[LMUNKA_VPOP][fPenz] += moneys;
							}
							else if(PlayerToPoint(10.0, playerid, 215.038833, 1862.826782, 13.140625))
							{
								Jail(suspect, "+", (time*60), "fort");
								format(string, sizeof(string), "%s elhelyezte %s-t a Fort DeMorgen fegyenctelepen.", PlayerName(playerid), PlayerName(suspect));
								SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_SCPD, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_SFPD, TEAM_BLUE_COLOR, string);
								SendRadioMessage(LMUNKA_VPOP, TEAM_BLUE_COLOR, string);
								FrakcioInfo[LMUNKA_KATONA][fPenz] += moneys;
							}
							if(bailprice > 0)
							{
								JailPrice[suspect] = bailprice;
								format(string, sizeof(string), "%d másodpercre börtönbe kerültél.   Óvadék: %dFT", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
								Bilincs(suspect, 0);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							}
							else
							{
								JailPrice[suspect] = 0;
								format(string, sizeof(string), "%d másodpercre börtönbe kerültél.   Óvadék: Nincs", PlayerInfo[suspect][pJailTime]);
								Bilincs(suspect, 0);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							}
							PlayerInfo[suspect][pArrested] += 1;
							SetPlayerFree(suspect,playerid, "Letartóztatva.");
							WantedPoints[suspect] = 0;
							WantedLevel[suspect] = 0;
							WantLawyer[suspect] = 1;
							lspdmoney += 10000;
							Visz[playerid] = NINCS;
						}//distance
					}//not connected
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Senki sincsen a közeledben.");
						return 1;
					}
				}
				else
				{
					Msg(playerid, "Nem vagy börtön közelben.");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Nem vagy LSPD/SFPD/FBI/Katona/VPOP !");
			    return 1;
			}
		}//not connected
		return 1;
	}*/
	
	/*if(strcmp(cmd, "/contract", true) == 0)
	{
	    if(!Bortonben(playerid))
	   	{
			if(PlayerInfo[playerid][pLevel] < 3) return Msg(playerid, "Minimum 3as szint."); 
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
				return SendClientMessage(playerid, COLOR_GRAD1, "Használat: /contract [playerid/PartOfName] [amount]");

			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
				return SendClientMessage(playerid, COLOR_GRAD1, "Használat: /contract [playerid/PartOfName] [amount]");

			moneys = strval(tmp);
			new minimum = PlayerInfo[giveplayerid][pLevel] * 2000;
			
			if(PlayerInfo[giveplayerid][pLevel] < 3) return Msg(playerid, "A játékos 3as szint alatt van, ezért nem rakhatsz rá vérdíjat."); 

			if(moneys < minimum)
			{
				SendFormatMessage(playerid, COLOR_GREY, "A vérdíjnak minimum %dFt-nak kell lennie!", minimum);
				return 1;
			}

			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if(LMT(playerid, LMUNKA_HITMAN) && LMT(giveplayerid, LMUNKA_HITMAN))
				        return SendClientMessage(playerid, COLOR_GREY, "   A saját csapattársadra nem rakhatsz vérdíjat...");

					if(LMT(giveplayerid, LMUNKA_SCPD) && moneys < 25000)
						return SendClientMessage(playerid, COLOR_GREY, "   Rendõrre akarsz vérdíjat tenni... nem olcsó mulatság! Minimum 25000Ft");

				    if(giveplayerid == playerid)
						return Msg(playerid, "Mi a faszért contractolsz magadra te barom?");


					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));

					playermoney = GetMoney(playerid);

					if(moneys < 1)
					    return SendClientMessage(playerid, COLOR_LIGHTRED, "O.O");

					if (playermoney >= moneys)
					{
						GiveMoney(playerid, (0 - moneys));
						PlayerInfo[giveplayerid][pHeadValue]+=moneys;
						format(string, sizeof(string), "Valaki azt akarja, hogy öljétek meg %s-t, %dFt-ért.", giveplayer, moneys);
						SendHitmanRadioMessage(COLOR_YELLOW, string);
						format(string, sizeof(string), "* %dFt-os vérdíjat tûztél ki rajta: %s", moneys, giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Hitman: %s %dFtos vérdíjat tûzött ki %s fejére", sendername, moneys, giveplayer);
						ABroadCast(COLOR_GREY, string, 1);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Nincs ennyi pénzed!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d nincs fent a szerveren.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		else
			Msg(playerid, "Börtönben nem lehet!");
		return 1;
	}*/
	return 1;
}
//------------------------------------------------------------------------------------------------------

public ProxDetector2(Float:radi, string[], Float:oldposx, Float:oldposy, Float:oldposz, col1,col2,col3,col4,col5)
{
	new Float:posx, Float:posy, Float:posz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	//radi = 2.0; //Trigger Radius
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(!BigEar[i])
			{
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
				if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				{
					SendClientMessage(i, col1, string);
				}
				else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				{
     				SendClientMessage(i, col2, string);
				}
				else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
     				SendClientMessage(i, col3, string);
				}
				else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
     				SendClientMessage(i, col4, string);
				}
				else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
     				SendClientMessage(i, col5, string);
				}
			}
			else
			{
				SendClientMessage(i, col1, string);
			}
		}
	}
	return 1;
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(!BigEar[i])
				{
				    new VW = GetPlayerVirtualWorld(playerid);
				    new VW2 = GetPlayerVirtualWorld(i);
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col1, string);
						}
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col2, string);
						}
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col3, string);
						}
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col4, string);
						}
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col5, string);
						}
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}//not connected
	return 1;
}

public CrimInRange(Float:radi, playerid,copid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public CustomPickups()
{
	new string[128], oks;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i) && Logged(i))
		{
			oks = 0;
			new tmpcar = -1;

			if(IsPlayerInAnyVehicle(i))
				tmpcar = GetPlayerVehicleID(i);

			new PlayerVW = GetPlayerVirtualWorld(i), PlayerInt = GetPlayerInterior(i);
			for(new c = 0; c < MAXAJTO; c++)
			{
				if(Ajtok[c][Van] == 1 && PlayerToPoint(3, i, Ajtok[c][BeX], Ajtok[c][BeY], Ajtok[c][BeZ]) && PlayerVW == Ajtok[c][BeVW] && PlayerInt == Ajtok[c][BeInt])
				{
                    GameTextForPlayer(i, Ajtok[c][Nev], CUSTOMPICKUPSTIME, 3);
					oks = 1;
					break;
				}
			}
			if(oks) continue;

			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(HouseInfo[h][Van] != 1) continue;

				if(PlayerToPoint(3.0, i, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
				{
					if(HouseInfo[h][hOwned] == 1)
					{
						if(HouseInfo[h][hRentabil] == 0)
							format(string, sizeof(string), "~w~[Gates] utca %d.~n~Tulaj:%s",h,HouseInfo[h][hOwner]);
						else
							format(string, sizeof(string), "~w~[Gates] utca %d.~n~Tulaj:%s~n~Berelheto:%dFT~n~Szobaberles: /rentroom",h,HouseInfo[h][hOwner],HouseInfo[h][hRent]);
						GameTextForPlayer(i, string, CUSTOMPICKUPSTIME, 3);
						oks = 1;
						break;
					}
					else
					{
					    if(HouseInfo[h][hCsak] != 1)
							format(string, sizeof(string), "~w~[Gates] utca %d.~n~Ara:~g~%dFT~n~~w~Haz megvetele:/buyhouse",h,HouseInfo[h][hValue]);
        				else
				         	format(string, sizeof(string), "~w~[Gates] utca %d.~n~Ara:~g~%dFT~n~~w~Haz megvetele:/buyhouse~n~Csak:%s",h,HouseInfo[h][hValue], HouseInfo[h][hCsakneki]);
						GameTextForPlayer(i, string, CUSTOMPICKUPSTIME, 3);
						oks = 1;
						break;
					}
				}
			}
			if(oks) continue;

			for(new h = 0; h < sizeof(BizzInfo); h++)
			{
				if(tmpcar != -1 && IsATruck(tmpcar) && PlayerToPoint(10.0, i, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]))
				{
					format(string, sizeof(string), "~w~%s~n~~r~Products Required~w~: %d~n~~y~Price per Product: ~w~: %dFT~n~~g~Funds: ~w~: %dFT",BizzInfo[h][bMessage],(BizzInfo[h][bMaxProducts]-BizzInfo[h][bProducts]),BizzInfo[h][bPriceProd],BizzInfo[h][bTill]);
					GameTextForPlayer(i, string, CUSTOMPICKUPSTIME, 3);
					oks = 1;
					break;
				}
				if(PlayerToPoint(2.0, i, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]))
				{
					if(BizzInfo[h][bOwned] == 1)
						format(string, sizeof(string), "~w~%s~w~~n~Tulaj : %s~n~Masodtulaj : %s~n~Belepo : ~g~%dFT ~n~Belepeshez /enter",BizzInfo[h][bMessage],BizzInfo[h][bOwner],BizzInfo[h][bExtortion],BizzInfo[h][bEntranceCost]);
					else
						format(string, sizeof(string), "~w~%s~w~~n~Ez a biznisz elado!~n~Ara: ~g~%dFT ~n~Biznisz megvetele:/buybiz",BizzInfo[h][bMessage],BizzInfo[h][bBuyPrice],BizzInfo[h][bLevelNeeded]);
					GameTextForPlayer(i, string, CUSTOMPICKUPSTIME, 3);
					oks = 1;
					break;
				}
			}
			if(oks) continue;

			if (PlayerToPoint(2.0, i, 1173.2563,-1323.3102,15.3943))
			{// Hospital near Ammu
				GameTextForPlayer(i, "~w~Type /healme to cure yourself", CUSTOMPICKUPSTIME, 5);
				continue;
			}
			else if (PlayerToPoint(2.0, i, 2029.5945,-1404.6426,17.2512))
			{// Hospital near speedway
				GameTextForPlayer(i, "~w~Type /healme to cure yourself", CUSTOMPICKUPSTIME, 5);
				continue;
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i, 362.639312, 169.937469, 1025.789062) && GetPlayerInterior(i) == 3)
			{
				GameTextForPlayer(i, "~y~Munkafelvevo hely~n~Munkafelvetel: /munka", CUSTOMPICKUPSTIME, 5);
				continue;
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i, 2525.047119, -1289.786499, 1048.289062) && GetPlayerInterior(i) == 2)
			{
				GameTextForPlayer(i, "~y~Illegalis munkafelvevo hely~n~Munkafelvetel: /munka", CUSTOMPICKUPSTIME, 5);
				continue;
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1778.7174,-1310.0137,13.7031))
			{
			    if(PlayerInfo[i][pMember] == 9 || PlayerInfo[i][pLeader] == 9) { GameTextForPlayer(i, "~w~Type ~r~/paper ~w~to create a newspaper", CUSTOMPICKUPSTIME,3); continue;}
			    else if(AMT(i, MUNKA_UJSAGOS)) { GameTextForPlayer(i, "~w~Type ~r~/papers ~w~to see all the made newspapers", CUSTOMPICKUPSTIME, 3); continue;}
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1381.0413,-1088.8511,27.3906))
			{
			    GameTextForPlayer(i, "~g~Welcome,~n~~y~Use /mission to take on a Mission", CUSTOMPICKUPSTIME, 3);
				continue;
			}
			else if(PlayerToPoint(3.0, i, -1446.6891,-1544.5245,102.0073))
			{
			    if(OrderReady[i] > 0)
			    {
			        switch (OrderReady[i])
			        {
			            case 1:
			            {
			                GiveWeapon(i, 24, 50); GiveWeapon(i, 29, 500); GiveWeapon(i, 25, 50); GiveWeapon(i, 4, 1);
			                GiveMoney(i, - 5000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Felvetted a megrendelt csomagot!");
			            }
			            case 2:
			            {
			                SetPlayerArmour(i, 100.0);
			                GiveWeapon(i, 24, 50); GiveWeapon(i, 29, 500); GiveWeapon(i, 25, 50); GiveWeapon(i, 31, 500); GiveWeapon(i, 4, 1);
			                GiveMoney(i, - 6000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Felvetted a megrendelt csomagot!");
			            }
			            case 3:
			            {
			                SetPlayerArmour(i, 100.0);
			                GiveWeapon(i, 24, 50); GiveWeapon(i, 29, 500); GiveWeapon(i, 25, 50); GiveWeapon(i, 30, 500); GiveWeapon(i, 4, 1);
			                GiveMoney(i, - 7000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Felvetted a megrendelt csomagot!");
			            }
			            case 4:
			            {
			                SetPlayerArmour(i, 100.0);
			                GiveWeapon(i, 24, 50); GiveWeapon(i, 29, 500); GiveWeapon(i, 25, 50); GiveWeapon(i, 31, 500); GiveWeapon(i, 4, 1); GiveWeapon(i, 34, 20);
			                GiveMoney(i, - 8000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Felvetted a megrendelt csomagot!");
			            }
			            case 5:
			            {
			                SetPlayerArmour(i, 100.0);
			                GiveWeapon(i, 24, 50); GiveWeapon(i, 29, 500); GiveWeapon(i, 25, 50); GiveWeapon(i, 30, 500); GiveWeapon(i, 4, 1); GiveWeapon(i, 34, 20);
			                GiveMoney(i, - 9000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Felvetted a megrendelt csomagot!");
			            }
			            case 6:
			            {
			                SetPlayerArmour(i, 100.0); SetHealth(i, 100.0);
			                GiveWeapon(i, 24, 100); GiveWeapon(i, 29, 500); GiveWeapon(i, 27, 100); GiveWeapon(i, 31, 500); GiveWeapon(i, 4, 1); GiveWeapon(i, 34, 100);
							GiveMoney(i, - 10000);
							SendClientMessage(i, COLOR_LIGHTBLUE, "* Felvetted a megrendelt csomagot!");
			            }
			            case 7:
			            {
			                SetPlayerArmour(i, 100.0); SetHealth(i, 100.0);
			                GiveWeapon(i, 23, 50); GiveWeapon(i, 29, 500); GiveWeapon(i, 25, 50); GiveWeapon(i, 30, 500); GiveWeapon(i, 4, 1); GiveWeapon(i, 34, 20);
			                GiveMoney(i, - 11000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Felvetted a megrendelt csomagot!");
			            }
 			            case 8:
			            {
			                SetPlayerArmour(i, 100.0); SetHealth(i, 100.0);
			                GiveWeapon(i, 23, 50); GiveWeapon(i, 32, 500); GiveWeapon(i, 25, 50); GiveWeapon(i, 30, 500); GiveWeapon(i, 4, 1); GiveWeapon(i, 34, 20); GiveWeapon(i, 35, 20);
			                GiveMoney(i, - 12000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Felvetted a megrendelt csomagot!");
			            }
 			            case 9:
			            {
			                SetPlayerArmour(i, 100.0); SetHealth(i, 100.0);
			                GiveWeapon(i, 23, 50); GiveWeapon(i, 32, 500); GiveWeapon(i, 25, 50); GiveWeapon(i, 30, 500); GiveWeapon(i, 4, 1); GiveWeapon(i, 34, 20); GiveWeapon(i, 36, 20);
			                GiveMoney(i, - 13500);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Felvetted a megrendelt csomagot!");
			            }
 			            case 10:
			            {
			                SetPlayerArmour(i, 100.0); SetHealth(i, 100.0);
			                GiveWeapon(i, 23, 50); GiveWeapon(i, 32, 500); GiveWeapon(i, 26, 50); GiveWeapon(i, 30, 500); GiveWeapon(i, 4, 1); GiveWeapon(i, 34, 20); GiveWeapon(i, 36, 20);
			                GiveMoney(i, - 15000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Felvetted a megrendelt csomagot!");
			            }
						case 11:
						{
			                SetPlayerArmour(i, 100.0); SetHealth(i, 100.0);
			                GiveWeapon(i, HitmanRendeles[i], 100);
			                GiveMoney(i, - 2500);
			                SendFormatMessage(i, COLOR_LIGHTBLUE, "* Felvetted a megrendelt fegyvert! (%s)", aWeaponNames[HitmanRendeles[i]]);
						}
			        }
			        OrderReady[i] = 0;
					HitmanRendeles[i] = 0;
					continue;
			    }
			}//Hitman delivery stuff
			else if(PlayerOnMission[i] > 0 && PlayMission[kToggle] == 0)
			{
			    if(MissionCheckpoint[i] == 1 && PlayerToPoint(10.0, i,PlayMission[kCP1][0],PlayMission[kCP1][1],PlayMission[kCP1][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText1]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText4]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText5]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText6]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 2;
					continue;
				}
				else if(MissionCheckpoint[i] == 2 && PlayerToPoint(10.0, i,PlayMission[kCP2][0],PlayMission[kCP2][1],PlayMission[kCP2][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText2]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText7]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText8]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText9]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 3;
					continue;
				}
				else if(MissionCheckpoint[i] == 3 && PlayerToPoint(10.0, i,PlayMission[kCP3][0],PlayMission[kCP3][1],PlayMission[kCP3][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText3]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText10]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText11]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText12]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 4;
					continue;
				}
				else if(MissionCheckpoint[i] == 4 && PlayerToPoint(10.0, i,PlayMission[kCP4][0],PlayMission[kCP4][1],PlayMission[kCP4][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText4]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText13]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText14]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText15]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 5;
					continue;
				}
				else if(MissionCheckpoint[i] == 5 && PlayerToPoint(10.0, i,PlayMission[kCP5][0],PlayMission[kCP5][1],PlayMission[kCP5][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText5]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText16]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText17]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText18]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 6;
					continue;
				}
				else if(MissionCheckpoint[i] == 6 && PlayerToPoint(10.0, i,PlayMission[kCP6][0],PlayMission[kCP6][1],PlayMission[kCP6][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText6]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "..:: Mission Passed : %s | Reward received: %dFt ::..", PlayMission[kTitle], PlayMission[kReward]);
					SendClientMessage(i, COLOR_GREEN, string);
					GiveMoney(i, PlayMission[kReward]);
					PlayerInfo[i][pMissionNr] = PlayerOnMission[i];
					MissionCheckpoint[i] = 0;
					PlayerOnMission[i] = 0;
					continue;
				}
			}
		}
	}
	return 1;
}


public IdleKick()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] < 1)
		    {
				GetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1], PlayerPos[i][2]);
				if(PlayerPos[i][0] == PlayerPos[i][3] && PlayerPos[i][1] == PlayerPos[i][4] && PlayerPos[i][2] == PlayerPos[i][5])
				{
				    SendClientMessage(i,COLOR_LIGHTRED, "Tétlenség miatt kirúgott a szerver");
					Kick(i);
				}
				PlayerPos[i][3] = PlayerPos[i][0];
				PlayerPos[i][4] = PlayerPos[i][1];
				PlayerPos[i][5] = PlayerPos[i][2];
			}
		}
	}
}

public OnPlayerText(playerid, text[])
{
	if(!IsPlayerConnected(playerid)) return 0;
	if(IsPlayerNPC(playerid)) { NPC_Uzenet(playerid, text); return 0; }
	if(strfind(text, "frici", true) != -1)
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(strfind(PlayerName(x), "Paolo", true) != -1 && PlayerInfo[x][pAdmin] >= 5)
			{
				Msg(x, "OOC szidás!")
				Msg(x, text, true);
			}
		}
	}

	AFKIdo[playerid] = 0;
	//new giver[MAX_PLAYER_NAME];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new tmp[256];
	new string[256];
	//new giveplayerid;

	if(PlayerInfo[playerid][pMuted] == 1)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, "A hangszálaiddal játszanak, ilyenkor nehéz!");
		return 0;
	}
	if(PlayerCuffed[playerid] == 1)
		return !Msg(playerid, "Sokkolva vagy, nem tudsz beszélni!");
	if(Leutve[playerid]) 
	{
		Msg(playerid, "El vagy ájulva ember én nem beszélnék a helyedben..");
		return 0;
	}
	if(AFK[playerid] == 1)
	{
		if(strcmp(text, "[Gates]", true) == 0)
		{
			AFK[playerid] = 0;
			SendClientMessage(playerid, COLOR_LIGHTRED, "===============[AFK]===============");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Mostmár nem vagy AFK!");
			SendClientMessage(playerid, COLOR_LIGHTRED, "===============[AFK]===============");
			TogglePlayerControllable(playerid, true);
			SetPlayerToTeamColor(playerid);
			return 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Ha szeretnél visszatérni az AFKból írd be, hogy \"[Gates]\"");
			return 0;
		}
	}
	if(Belepve[playerid] == 1)
	{
		new idx;
	    tmp = strtok(text, idx);
		if(egyezik(tmp, "álnév") || egyezik(tmp, "alnev"))
		{
			if(!Munkarang(playerid, 3)) return !Msg(playerid, "Access Denied. 3as rang szükséges.");
			{
				new length = strlen(text);
				while ((idx < length) && (text[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[256];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = text[idx];
					idx++;
				}
				result[idx - offset] = EOS;

				if(!strlen(result) && PlayerInfo[playerid][pHamisNev] == 0)
				{
					Msg(playerid,"Használat: álnev [újnév]");
					return 0;
				}
				if(!strlen(result) && PlayerInfo[playerid][pHamisNev] != 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Újra a régi neved van!");
					PlayerInfo[playerid][pHamisNev] = 0;
					return 0;
				}

				if(strlen(result) > MAX_PLAYER_NAME)
				{
					SendFormatMessage(playerid, COLOR_GRAD1, "Maximum %d karakter!", MAX_PLAYER_NAME);
					return 0;
				}

				PlayerInfo[playerid][pHamisNev] = result;
				format(string, sizeof(string), "Az új álneved mostantól %s!", result);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				return 0;
			}
		}
		else if(egyezik(tmp, "bankszámla") || egyezik(tmp, "bankszamla"))
		{
			tmp = strtok(text, idx);
			if(!strlen(tmp)) return !Msg(playerid, "bankszámla [számlaszám]");
			new uzenet[100];
			new bsz = strval(tmp);
			new player = BankSzamla(bsz);
			if(BankSzamla(bsz) == NINCS) return !Msg(playerid, "Nincs ilyen bankszámlaszám");
			if(PlayerInfo[player][pZarolva] == 1)
			{
				Msg(playerid, "Feloldottad a zárolást a számláról.");
				Format(uzenet, "PDA Üzenet: %s feloldotta a zárolást egy bankszámláról(Számlaszám: %d)", PlayerName(playerid), bsz);
				SendFamilyMessage(LMUNKA_FBI, Pink, uzenet);
				PlayerInfo[player][pZarolva] = 0;
				Msg(player, "Az FBI feloldotta a zárolást a számládról.");
				return 0;
			}
			if(PlayerInfo[player][pZarolva] == 0)
			{
				Msg(playerid, "Lezároltad a számlát.");
				Format(uzenet, "PDA Üzenet: %s lezárt egy számlát(Számlaszám: %d)", PlayerName(playerid), bsz);
				SendFamilyMessage(LMUNKA_FBI, Pink, uzenet);
				PlayerInfo[player][pZarolva] = 1;
				Msg(player, "Az FBI lezárolta a számlád.");
				return 0;
			}
		}
		else if(egyezik(tmp, "beépülés") || egyezik(tmp, "beepules"))
		{
			tmp = strtok(text, idx);
			if(!Munkarang(playerid, 3)) return !Msg(playerid, "Access Denied. 3as rang szükséges.");
			if(!strlen(tmp)) return !Msg(playerid, "beépülés [ruha]");
			new ruha = strval(tmp);
			new kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 3.0) return !Msg(playerid, "Csak Szolgálati Jármû mellet.");
			if(!IsValidSkin(ruha)) return !Msg(playerid, "Nincs ilyen ruha!");
			SetPlayerSkin(playerid, ruha);
			SendClientMessage(playerid, Pink, "Beépülés Sikeres.");
			new uzi[128];
			Format(uzi, "PDA Üzenet: %s felvett egy álruhát.", PlayerName(playerid));
			SendFamilyMessage(LMUNKA_FBI, Pink, uzi);
			return 0;
		}
		else if(egyezik(tmp, "deaktiválás") || egyezik(tmp, "deaktivalas"))
		{
			if(Fbibelepes != 1 && Fbibelepes != 3) return !Msg(playerid, "Nem volt Behatolás/ A rendszer nincs Aktiválva.");
			Fbibelepes = 0;
			MoveDynamicObject(Fbilezaro1, 234.6328125, 169.4833984375, 994.68664550781, 4);
			MoveDynamicObject(Fbilezaro2, 246.5712890625, 169.4853515625, 994.68664550781, 4);
			MoveDynamicObject(Fbilezaro3, 238.7548828125, 139.3955078125, 995.11334228516, 4);
			if(Fbibelepes == 1)
			{
				format(string, sizeof(string), "PDA Üzenet: System Deactivated!");
				SendRadioMessage(LMUNKA_FBI, Pink, string);
				SendSwatRadioMessage(COLOR_RED, string);
			}
			Msg(playerid, "System Deactivated.");
			return 0;
		}
		else if(egyezik(tmp, "aktiválás") || egyezik(tmp, "aktivalas"))
		{
			if(Fbibelepes == 3) return !Msg(playerid, "A rendszer aktiválva van.");
			MoveDynamicObject(Fbilezaro1, 234.6336517334, 169.48387145996, 1001.9366455078, 4);
			MoveDynamicObject(Fbilezaro2, 246.57153320313, 169.48551940918, 1001.9366455078, 4);
			MoveDynamicObject(Fbilezaro3, 238.75532531738, 139.39646911621, 1002.6133422852, 4);
			Fbibelepes = 3;
			Msg(playerid, "System Activated");
			return 0;
		}
		else if(egyezik(tmp, "rendõrfelfüggesztés") || egyezik(tmp, "rendorfelfuggesztes"))
		{
			tmp = strtok(text, idx);
			if(!Munkarang(playerid, 6)) return !Msg(playerid, "Access Denied. 6os rang szükséges.");
			if(!strlen(tmp)) return !Msg(playerid, "Rendõrfelfüggesztés [Név/ID]");
			new zseka = ReturnUser(tmp);
			if(zseka == INVALID_PLAYER_ID) return !Msg(playerid, "Hibás név!");
			if(!LMT(zseka, LMUNKA_SCPD) && !LMT(zseka, LMUNKA_VPOP)) return !Msg(playerid, "A Játékos nem Rendõr!");
			SendClientMessage(zseka, COLOR_LIGHTBLUE, "Az FBI felfüggesztett! Ismét civil vagy.");
			PlayerInfo[zseka][pLeader] = 0;
			PlayerInfo[zseka][pMember] = 0;
			PlayerInfo[zseka][pRank] = 0;
			PlayerInfo[zseka][pChar] = 0;
			PlayerInfo[zseka][pSwattag] = 0;
			PlayerInfo[zseka][pSwatRang] = 0;
			new rand = random(sizeof(CIV));
			SetSpawnInfo(zseka, SPAWNID, PlayerInfo[zseka][pModel],0.0,0.0,0.0,0,0,0,0,0,0,0);
			PlayerInfo[zseka][pModel] = CIV[rand];
			MedicBill[zseka] = 0;
			SpawnPlayer(zseka);
			SendFormatMessage(playerid, Pink, "%s felfüggesztve!", PlayerName(zseka));
			new uzi[128];
			Format(uzi, "PDA Üzenet: %s felfüggesztette %s.", PlayerName(playerid), PlayerName(zseka));
			SendFamilyMessage(LMUNKA_FBI, Pink, uzi);
			return 0;
		}
		else if(egyezik(tmp, "jelszó") || egyezik(tmp, "jelszo"))
		{
			SendFormatMessage(playerid, Pink, "A jelszó most %s.", FrakcioInfo[LMUNKA_FBI][fJelszo]);
			return 0;
		}
		else if(egyezik(tmp, "logout"))
		{
			SendFormatMessage(playerid, Pink, "Server Disconnected. Jó munkát %s Ügynök.", PlayerName(playerid));
			Belepve[playerid] = 0;
			return 0;
		}
		else if(egyezik(tmp, "lenyomozás") || egyezik(tmp, "lenyomozas"))
		{
			tmp = strtok(text, idx);
			if(!strlen(tmp)) return !Msg(playerid, "Lenyomozás [Név/ID]");
			if(egyezik(tmp, "kikapcsol"))
			{
				SendClientMessage(playerid, Pink, "Lenyomoz Kikapcsolva!");
				foreach(Jatekosok, ratyi)
				{
					SetPlayerMarkerForPlayer(playerid, ratyi, COLOR_INVISIBLE);
					Fbicelpont[playerid] = NINCS;
					Fbios[ratyi] = NINCS;
					return 0;
				}
			}
			new player = ReturnUser(tmp);
			if(player == INVALID_PLAYER_ID) return !Msg(playerid, "Hibás név!");
			if(PlayerInfo[player][pPnumber] == 0) return !Msg(playerid, "Nincs telefonja!");
			new vw = GetPlayerVirtualWorld(player);
			new inti = GetPlayerInterior(player);
			if(vw != 0 || inti != 0)
			{
				if(Hazbanvan[player] == 0)
				{
					if(inti == 18)
					{
						SendClientMessage(playerid, Pink, "Célszemély az egyik 24/7 be van!");
						Fbios[player] = playerid;
						return 0;
					}
					else if(inti == 3)
					{
						if(PlayerToPoint(30, player, 296.919982,-108.071998,1001.515625))
						{
							SendClientMessage(playerid, Pink, "Célszemély LS GS be van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(100, player, 384.808624,173.804992,1008.382812))
						{
							SendClientMessage(playerid, Pink, "Célszemély Városházán van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(100, player, 369.8337,162.5357,1014.1893))
						{
							SendClientMessage(playerid, Pink, "Célszemély Városházán van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(100, player, 368.2852,162.4965,1019.9844))
						{
							SendClientMessage(playerid, Pink, "Célszemély Városházán van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(100, player, 370.1142,163.1876,1025.7891))
						{
							SendClientMessage(playerid, Pink, "Célszemély Városházán van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(50, player, 833.269775,10.588416,1004.179687))
						{
							SendClientMessage(playerid, Pink, "Célszemély a Lottozóban van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(50, player, 207.054992,-138.804992,1003.507812))
						{
							SendClientMessage(playerid, Pink, "Célszemély a Bincoban van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(50, player, 288.745971,169.350997,1007.171875))
						{
							SendClientMessage(playerid, Pink, "Célszemély az FBI HQ-n van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(50, player, 1494.325195,1304.942871,1093.289062))
						{
							SendClientMessage(playerid, Pink, "Célszemély az Oktató HQ-n van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(50, player, 942.171997,-16.542755,1000.929687))
						{
							Msg(playerid, "Adminjail.");
							Fbios[player] = playerid;
							return 0;
						}
					}
					else if(inti == 4)
					{
						SendClientMessage(playerid, Pink, "Célszemély SF GS be van!");
						Fbios[player] = playerid;
						return 0;
					}
					else if(inti == 5)
					{
						if(PlayerToPoint(50, player, 72.111999,-3.898649,1000.728820))
						{
							SendClientMessage(playerid, Pink, "Célszemély LS Edzõterembe van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(50, player, 373.825653,-117.270904,1001.499511))
						{
							SendClientMessage(playerid, Pink, "Célszemély az egyik pizzázóban van!");
							Fbios[player] = playerid;
							return 0;
						}
					}
					else if(inti == 6)
					{
						if(PlayerToPoint(50, player, 774.213989,-48.924297,1000.585937))
						{
							SendClientMessage(playerid, Pink, "Célszemély Cobra Edzõterembe van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(100, player, 246.783996,63.900199,1003.640625))
						{
							SendClientMessage(playerid, Pink, "Célszemély LSPD-n van!");
							Fbios[player] = playerid;
							return 0;
						}
					}
					else if(inti == 9)
					{
						SendClientMessage(playerid, Pink, "Célszemély az egyik csirkésbe van!");
						Fbios[player] = playerid;
						return 0;
					}
					else if(inti == 10)
					{
						if(PlayerToPoint(50, player, 375.962463,-65.816848,1001.507812))
						{
							SendClientMessage(playerid, Pink, "Célszemély az egyik Burger Shotba van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(200, player, -975.975708,1060.983032,1345.671875))
						{
							SendClientMessage(playerid, Pink, "Célszemély az RC Gyakorlopályán van!");
							Fbios[player] = playerid;
							return 0;
						}
						else if(PlayerToPoint(200, player, 246.375991,109.245994,1003.218750))
						{
							if(vw == 20)
							{
								SendClientMessage(playerid, Pink, "Célszemély VPOP HQ-n van!");
								Fbios[player] = playerid;
								return 0;
							}
							else
							{
								SendClientMessage(playerid, Pink, "Célszemély SFPD HQ-n van!");
								Fbios[player] = playerid;
								return 0;
							}
						}
					}
					else if(inti == 1)
					{
						SendClientMessage(playerid, Pink, "Célszemély a Húsfeldolgozóban van!((Valameik Maffia Inti))");
						Fbios[player] = playerid;
						return 0;
					}
					else if(inti == 17)
					{
						SendClientMessage(playerid, Pink, "Célszemély Alhambrába van!");
						Fbios[player] = playerid;
						return 0;
					}
					else if(inti == 2)
					{
						Msg(playerid, "Gyárban van, de csak OOC tudod!");
						Fbios[player] = playerid;
						return 0;
					}
					else if(inti == 11)
					{
						SendClientMessage(playerid, Pink, "Célszemély Groove Kocsmában van!");
						Fbios[player] = playerid;
						return 0;
					}
				}
				else
				{
					SendFormatMessage(playerid, Pink, "Célszemély [Gates] utca %d szám alatt tartozkodik!", vw);
					Fbios[player] = playerid;
					return 0;
				}
			}
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(player, X,Y,Z);
			SetPlayerMarkerForPlayer(playerid, player, Pink);
			SendClientMessage(playerid, Pink, "Célszemély Lenyomozva!");
			SendClientMessage(playerid, Pink, "* Kikapcsoláshoz: lenyomozás kikapcsol");
			Fbicelpont[playerid] = player;
			Fbios[player] = playerid;
			return 0;
		}
		else if(egyezik(tmp, "lehallgatás"))
		{
			tmp = strtok(text, idx);
			new Allomas = strval(tmp);
			if(!strlen(tmp)) return !Msg(playerid, "lehallgatás [rádióállomás]");
			if(egyezik(tmp, "kikapcsol") || egyezik(tmp, "off"))
			{
				Msg(playerid, "Kikapcsolva");
				RadioHallgatas[playerid] = NINCS;
				return 0;
			}
			if(Allomas < 1 || Allomas > MAX_FRAKCIO) 
			{
				SendFormatMessage(playerid, Pink, "* Rádió állomások: 1-%d", MAX_FRAKCIO);
				return 0;
			}
			RadioHallgatas[playerid] = Allomas;
			SendFormatMessage(playerid, Pink, "* Csatlakozás sikeres. Állomás: %d", Allomas);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "=============[Rádió Adatok]=============");
			new szneve[32];
			new szam = RadioHallgatas[playerid] - 1;
			szneve = Szervezetneve[szam][0];
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Szervezet Neve: %s", szneve);
			new menyien = 0;
			for(new oj = 0; oj < MAX_PLAYERS; oj++)
			{
				if(PlayerInfo[oj][pMember] == RadioHallgatas[playerid] || PlayerInfo[oj][pLeader] == RadioHallgatas[playerid]) menyien++;
			}
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* A rádiót %d-an/en hallgatják.", menyien);
			SendClientMessage(playerid, Pink, "* Kikapcsoláshoz: lehallgatás kikapcsol");
			return 0;
		}
		else if(egyezik(tmp, "adatnézés") || egyezik(tmp, "adatnezes"))
		{
			tmp = strtok(text, idx);
			new player = ReturnUser(tmp);
			if(!strlen(tmp)) return !Msg(playerid, "Adatnézés [Név/ID]");
			if(PlayerInfo[player][pArrested] < 1) return !Msg(playerid, "Róla nincs akta, mivel még nem volt lecsukva.");
			if(player == INVALID_PLAYER_ID) return !Msg(playerid, "Hibás név!");
			Akta(playerid, player);
			return 0;
		}
		else if(egyezik(tmp, "clear"))
		{
			tmp = strtok(text, idx);
			new player = ReturnUser(tmp);
			if(!strlen(tmp)) return !Msg(playerid, "Clear [Név/ID]");
			if(player == INVALID_PLAYER_ID) return !Msg(playerid, "Hibás név!");
			if(player == playerid && !IsAdmin(playerid)) return !Msg(playerid, "Magadról nem -.-'");
			WantedPoints[player] = 0;
			WantedLevel[player] = 0;
			ClearCrime(player);
			SendClientMessage(playerid, Pink, "Körözés Törölve!");
			Msg(player, "Törölték a körözést rólad.");
			return 0;
		}
		/*else if(egyezik(tmp, "lefoglalás"))
		{
			new kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, kocsi) > 5) return !Msg(playerid, "Nincs a közelben jármû.");
			if(Locked(kocsi)) return !Msg(playerid, "A jármû zárva.");
			PutPlayerInVehicle(playerid, kocsi, 0);
			Msg(playerid, "Jármû lefoglalva.");
			Cselekves(playerid, "lefoglalt egy jármûvet...", 1);
			Lefoglalt[playerid] = 1;
			return 0;
		}*/
		else
		{
			SendClientMessage(playerid, Pink2, "| - Jelszó - Clear");
			SendClientMessage(playerid, Pink, "| - Beépülés - Álnév");
			SendClientMessage(playerid, Pink2, "| - Aktiválás - Deaktiválás");
			SendClientMessage(playerid, Pink, "| - Lehallgatás - Lefoglalás");
			SendClientMessage(playerid, Pink2, "| - Lenyomozás - Adatnézés");
			SendClientMessage(playerid, Pink, "| - Rendõrfelfüggesztés - Bankszámla");
			SendClientMessage(playerid, Pink2, "							                Logout					");
			return 0;
		}
	}
	if(Autocp[playerid] == 22)
	{
		if(egyezik(text, "igen"))
		{
			Msg(playerid, "Rendben végeztetek az órával, a tanítvány megkapja a jogosítványát.");
			Autocp[playerid] = 0;
			new tanulo = Jogsineki[playerid];
			if(Vizsgafajta[tanulo] == 5)
			{
				Msg(tanulo, "Gratulálunk! Megkaptad az Engedélyed!");
			}
			else
			{
				Msg(tanulo, "Gratulálunk! Megkaptad a Jogosítványodat!");
			}
			Autocp[tanulo] = 0;
			VizsgaAjanlat[tanulo] = NINCS;
			TakingLesson[tanulo] = 0;
			if(Vizsgafajta[tanulo] == 1)
			{
				PlayerInfo[tanulo][pCarLic] = JOGSI_AUTO;
			}
			else if(Vizsgafajta[tanulo] == 2)
			{
				PlayerInfo[tanulo][pMotorJogsi] = JOGSI_MOTOR;
			}
			else if(Vizsgafajta[tanulo] == 3)
			{
				PlayerInfo[tanulo][pKamionJogsi] = JOGSI_KAMION;
			}
			else if(Vizsgafajta[tanulo] == 4)
			{
				PlayerInfo[tanulo][pBoatLic] = JOGSI_HAJO;
			}
			else if(Vizsgafajta[tanulo] == 5)
			{
				PlayerInfo[tanulo][pGunLic] = JOGSI_FEGYVER;
			}
			else if(Vizsgafajta[tanulo] == 7)
			{
				PlayerInfo[tanulo][pFlyLic] = JOGSI_REPULO;
			}
			Vizsgafajta[tanulo] = 0;
			return 0;
		}
		else if(egyezik(text, "nem"))
		{
			Msg(playerid, "Rendben végeztetek az órával, a tanítvány nem fog jogosítványt kapni. A jogosítvány felét visszautaltuk.");
			Autocp[playerid] = 0;
			new tanulo = Jogsineki[playerid];
			Msg(tanulo, "Sajnos nem mentél át a vizsgán, de ne bánkodj a pénz felét visszakaptad!");
			Autocp[tanulo] = 0;
			TakingLesson[tanulo] = 0;
			PlayerInfo[playerid][pAccount] -= Tanulofelpenz[tanulo];
			new uo = (Tanulofelpenz[tanulo] / 2);
			PlayerInfo[tanulo][pAccount] += uo;
			FrakcioInfo[LMUNKA_OKTATO][fPenz] += uo;
			VizsgaAjanlat[tanulo] = NINCS;
			return 0;
			
		}
		else
		{
			Msg(playerid, "Mondom igen vagy nem!");
			return 0;
		}
	}
	
	if(RegistrationStep[playerid] > 0)
	{
	    if(RegistrationStep[playerid] == 1)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if(strcmp("male", tmp, true) == 0 || strcmp("fiú", tmp, true) == 0 || strcmp("fiu", tmp, true) == 0)
			{
			    PlayerInfo[playerid][pSex] = 1;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Oks, fiú vagy.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Milyen idõs legyen a karaktered? (10-60)");
			    RegistrationStep[playerid] = 2;
			    return 0;
			}
			else if(strcmp("female", tmp, true) == 0 || strcmp("lány", tmp, true) == 0 || strcmp("lany", tmp, true) == 0)
			{
			    PlayerInfo[playerid][pSex] = 2;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Oks, lány vagy.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Milyen idõs legyen a karaktered? (10-60)");
			    RegistrationStep[playerid] = 2;
			    return 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Nemed? (fiú/lány)");
			}
			return 0;
		}
		else if(RegistrationStep[playerid] == 2)
	    {
	        new idx;
	    	tmp = strtok(text, idx);

			if(strval(tmp) < 10 || strval(tmp) > 60)
			{
				Msg(playerid, "A korod 10 és 60 között lehet (év)", false);
				return 0;
			}

			PlayerInfo[playerid][pAge] = strval(tmp);
			format(string, sizeof(string), "Oks, szóval %d éves vagy.",PlayerInfo[playerid][pAge]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			RegistrationStep[playerid] = 3;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Honnan származol? (Európa, USA, vagy Ázsia)");
			return 0;
	    }
	    else if(RegistrationStep[playerid] == 3)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if(strcmp("usa", tmp, true) == 0)
			{
			    PlayerInfo[playerid][pOrigin] = 1;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Oké, szóval amerikai vagy.");
				RegistrationStep[playerid] = 4;
			}
			else if(strcmp("europa", tmp, true) == 0 || strcmp("europe", tmp, true) == 0 || strcmp("európa", tmp, true) == 0)
			{
			    PlayerInfo[playerid][pOrigin] = 2;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Oké, szóval európai vagy.");
				RegistrationStep[playerid] = 4;
			}
			else if(strcmp("ázsia", tmp, true) == 0 || strcmp("Ázsia", tmp, true) == 0 || strcmp("azsia", tmp, true) == 0 || strcmp("asia", tmp, true) == 0)
			{
			    PlayerInfo[playerid][pOrigin] = 3;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Oké, szóval ázsiai vagy.");
				RegistrationStep[playerid] = 4;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Honnan származol? (Európa, USA, vagy Ázsia)");
			}

			if(RegistrationStep[playerid] == 4)
			{
			    /*SendClientMessage(playerid, COLOR_LIGHTRED, "Okés! Az adataid megvannak! Most jön az elmélet!");
			    SendClientMessage(playerid, COLOR_WHITE, "==================================================");
			    SendClientMessage(playerid, COLOR_ORANGE, "Elsõ kérdés. Mi az az RP? (Az angol szakkifejezés kell)");*/
				Msg(playerid, "Rendben, mostmár regisztrálhatsz a /register parancs segítsévégel");
				RegistrationStep[playerid] = 0;
				RegAdatok[playerid] = 1;
			}

			return 0;
	    }
	}

	if(SelectChar[playerid] == 255)
	{
	    new idx, x, skin, skinszam;
	    tmp = strtok(text, idx);
	    if ((strcmp("next", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("next")))
		{
		    switch (SelectCharID[playerid])
			{
				case 1: //Police Force
				{
				    skinszam = SkinekSzama[0];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[0][skin-1]);
		            ChosenSkin[playerid] = Skinek[0][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 2: //FBI
				{
				    skinszam = SkinekSzama[1];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[1][skin-1]);
		            ChosenSkin[playerid] = Skinek[1][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
    			}
				case 3: //National Guard
				{
				    skinszam = SkinekSzama[2];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[2][skin-1]);
		            ChosenSkin[playerid] = Skinek[2][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 4: //Fire&Ambulance
				{
				    skinszam = SkinekSzama[3];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[3][skin-1]);
		            ChosenSkin[playerid] = Skinek[3][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 5: //Grove Street
				{
				    skinszam = SkinekSzama[4];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[4][skin-1]);
		            ChosenSkin[playerid] = Skinek[4][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 6: //Yakuza
				{
				    skinszam = SkinekSzama[5];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[5][skin-1]);
		            ChosenSkin[playerid] = Skinek[5][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 7: //Önkormányzat
				{
				    skinszam = SkinekSzama[6];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[6][skin-1]);
		            ChosenSkin[playerid] = Skinek[6][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 8: //Hitman Agency
				{
				    skinszam = SkinekSzama[7];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[7][skin-1]);
		            ChosenSkin[playerid] = Skinek[7][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 9: //News Reporters
				{
				    skinszam = SkinekSzama[8];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[8][skin-1]);
		            ChosenSkin[playerid] = Skinek[8][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 10: //Taxi Cab Company
				{
				    skinszam = SkinekSzama[9];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[9][skin-1]);
		            ChosenSkin[playerid] = Skinek[9][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 11: //mafia
				{
				    skinszam = SkinekSzama[10];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[10][skin-1]);
		            ChosenSkin[playerid] = Skinek[10][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 12: //SA mafia
				{
				    skinszam = SkinekSzama[11];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[11][skin-1]);
		            ChosenSkin[playerid] = Skinek[11][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 13: // MS13
				{
				    skinszam = SkinekSzama[12];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[12][skin-1]);
		            ChosenSkin[playerid] = Skinek[12][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
				}
				case 14: // LSAA
				{
				    skinszam = SkinekSzama[13];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[13][skin-1]);
		            ChosenSkin[playerid] = Skinek[13][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
 				}
				case 15: // LSPD
				{
				    skinszam = SkinekSzama[14];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[14][skin-1]);
		            ChosenSkin[playerid] = Skinek[14][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
 				}
 				case 16: // Oktató
				{
				    skinszam = SkinekSzama[15];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[15][skin-1]);
		            ChosenSkin[playerid] = Skinek[15][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
 				}
                case 17: // TGG
				{
				    skinszam = SkinekSzama[16];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[16][skin-1]);
		            ChosenSkin[playerid] = Skinek[16][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
 				}
                case 18: // SF taxi
				{
				    skinszam = SkinekSzama[17];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[17][skin-1]);
		            ChosenSkin[playerid] = Skinek[17][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
 				}
 				case 19: // SF Mentõ
				{
				    skinszam = SkinekSzama[18];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[18][skin-1]);
		            ChosenSkin[playerid] = Skinek[18][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
 				}
				case 20: // VPOP
				{
				    skinszam = SkinekSzama[19];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[19][skin-1]);
		            ChosenSkin[playerid] = Skinek[19][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
 				}
				case 21: // RSM
				{
				    skinszam = SkinekSzama[20];
				    for(x = 1; x <= skinszam; x++)
				    {
				        if(SelectCharPlace[playerid] == x)
				        {
		                    skin = x;
				        }
				    }
		            SetPlayerSkin(playerid, Skinek[20][skin-1]);
		            ChosenSkin[playerid] = Skinek[20][skin-1];

			        if(SelectCharPlace[playerid] == skinszam)
			            SelectCharPlace[playerid] = 1;
					else
					    SelectCharPlace[playerid] = (skin + 1);
 				}

			}
		    return 0;
		}
		else if ((strcmp("done", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("done")))
		{
		    if(ChangePos2[playerid][1] == 1)
		    {
		        SetPlayerInterior(playerid, ChangePos2[playerid][0]);
		        SetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
		        ChangePos2[playerid][1] = 0;
		        return 0;
		    }
		    PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
		    SetSpawnInfo(playerid, SPAWNID, PlayerInfo[playerid][pChar],0.0,0.0,0.0,0,0,0,0,0,0,0);
			//SetPlayerToTeamColor(playerid);
			MedicBill[playerid] = 0;
			SpawnPlayer(playerid);
			SetPlayerVirtualWorld(playerid, 0);
		    SelectCharPlace[playerid] = 0;
		    SelectCharID[playerid] = 0;
		    SelectChar[playerid] = 0;
		    return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Következõért 'next', kiválasztáshoz 'done'.");
		    return 0;
		}
	}
	if(MarriageCeremoney[playerid] > 0)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("igen", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("igen")))
		{
		    if(GotProposedBy[playerid] < 999)
		    {
			    if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
				    format(string, sizeof(string), "Pap: %s elfogadod %s-t feleségedért? (írd 'igen'.", giveplayer,sendername);
					SendClientMessage(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
			}
			else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Pap: %s és %s házastársaknak nyilványítalak titeket...Férj & Feleség, megcsókolhatod.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Pap: %s és %s házastársaknak nyilványítalak titeket...Férj & Feleség, megcsókolhatod.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Házasság: Van egy új házaspárunk, %s & %s összeházasodott.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
					    format(string, sizeof(string), "Pap: %s és %s meleg társaknak nyilványítalak titeket...Férj & Férj, megcsókolhatod.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Pap: %s és %s meleg társaknak nyilványítalak titeket...Férj & Feleség, megcsókolhatod.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Házasság: Van egy új meleg párunk, %s & %s összeházasodott.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
					    format(string, sizeof(string), "Pap: %s és %s meleg társaknak nyilványítalak titeket...Feleség & Feleség, megcsókolhatod.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Pap: %s és %s meleg társaknak nyilványítalak titeket...Feleség & Feleség, megcsókolhatod.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Házasság: Van egy új meleg társunk, %s & %s összeházasodott.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(string, sizeof(string), "%s", sendername);
					strmid(PlayerInfo[ProposedTo[playerid]][pMarriedTo], string, 0, strlen(string), 255);
					format(string, sizeof(string), "%s", giveplayer);
					strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
					GiveMoney(playerid, - 100000);
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pPhousekey] = PlayerInfo[playerid][pPhousekey];
					PlayerInfo[ProposedTo[playerid]][pPbiskey] = PlayerInfo[playerid][pPbiskey];
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
		else if ((strcmp("nem", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("nem")))
		{
		    if(GotProposedBy[playerid] < 999)
		    {
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Nem akarod házastársul %s, nem 'igen'-t irtál.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s nem akart elvenni, nem 'igen'-t írt.",sendername);
				    SendClientMessage(GotProposedBy[playerid], COLOR_YELLOW, string);
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
		    }
		    else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Nem akarod házastársul %s, nem 'igen'-t irtál.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s nem akart elvenni, nem 'igen'-t írt.",sendername);
				    SendClientMessage(ProposedTo[playerid], COLOR_YELLOW, string);
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
	    return 0;
	}
	if(WritingPaper[playerid] > 0)
	{
	    new line;
        new nstring[256];
        new idx;
        new length = strlen(text);
		while ((idx < length) && (text[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = text[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
		    if(WritingLine[playerid] == 1) { SendClientMessage(playerid, COLOR_GRAD2, "* Please type in the Title of your Newspaper."); }
		    else { SendClientMessage(playerid, COLOR_LIGHTRED, "* Please type in a Text Line of your Newspaper."); }
			return 0;
		}
		format(nstring, sizeof(nstring), "%s", text);
		switch(WritingLine[playerid])
		{
		    case 1:
		    {
		        new fstring[MAX_PLAYER_NAME];
		        GetPlayerName(playerid, sendername, sizeof(sendername));
				format(fstring, sizeof(fstring), "%s", sendername);
				strmid(PaperInfo[WritingPaperNumber[playerid]][PaperMaker], fstring, 0, strlen(fstring), 255);
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperTitle], nstring, 0, strlen(nstring), 255);
		        line = 0; WritingLine[playerid] = 2;
		        SendClientMessage(playerid, COLOR_LIGHTRED, "* Now you can write down the News Lines, 7 remaining.");
		    }
		    case 2:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText1], nstring, 0, strlen(nstring), 255);
		        line = 1; WritingLine[playerid] = 3;
		    }
		    case 3:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText2], nstring, 0, strlen(nstring), 255);
		        line = 2; WritingLine[playerid] = 4;
		    }
		    case 4:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText3], nstring, 0, strlen(nstring), 255);
		        line = 3; WritingLine[playerid] = 5;
		    }
		    case 5:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText4], nstring, 0, strlen(nstring), 255);
		        line = 4; WritingLine[playerid] = 6;
		    }
		    case 6:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText5], nstring, 0, strlen(nstring), 255);
		        line = 5; WritingLine[playerid] = 7;
		    }
		    case 7:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText6], nstring, 0, strlen(nstring), 255);
		        line = 6; WritingLine[playerid] = 8;
		    }
		    case 8:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText7], nstring, 0, strlen(nstring), 255);
		        PaperInfo[WritingPaperNumber[playerid]][PaperUsed] = 1;
		        SavePapers();
		        line = 7; WritingLine[playerid] = 0; WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999;
		    }
		}
		if(line > 0)
		{
			format(string, sizeof(string), "* You wrote Line %d of the Newspaper.", line);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			if(line == 7)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Your Newspaper has been added to the News List (for Paper Boys).");
			}
		}
	    return 0;
	}
	if(ConnectedToPC[playerid] == 255)
	{
		new idx;
	    tmp = strtok(text, idx);
		if(egyezik(tmp, "versenyzõk") || egyezik(tmp, "versenyzok"))
		{
			if(!IsHitman(playerid)) return 1;
			
			SendFormatMessage(playerid, COLOR_WHITE, "Versenyzõk száma: %d | Hátralévõ idõ: %d másodperc(%d Perc)", BVJatekosok, BVIdo, BVIdo/60);
			
			new tolteny, weapon[13], ammo[13], Float:elet, Float:pajzs;
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || BViadal[x] != 1) continue;
				
				for(new y = 0; y < 13; y++)
				{
					GetPlayerWeaponData(x, y, weapon[y], ammo[y]);
					if(weapon[y] == GetPlayerWeapon(x))
					{
						tolteny = ammo[y];
						break;
					}
				}
				
				GetPlayerHealth(x, elet);
				GetPlayerArmour(x, pajzs);
				
				SendFormatMessage(playerid, COLOR_WHITE, "Név: %s | Fegyver: %s | Töltény: %d | Élet: %1.f | Pajzs: %1.f", PlayerName(x), aWeaponNames[GetPlayerWeapon(x)], tolteny, elet, pajzs);
			}
			
			return 0;
		}
	    if(egyezik(tmp, "vérdíjak") || egyezik(tmp, "verdijak"))
		{
			new fejpenz, emberek, txt[128];
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(x != playerid && IsPlayerConnected(x) && Logged(x))
				{
					fejpenz = PlayerInfo[x][pHeadValue];
					if(fejpenz > 0)
					{
						emberek++;
						if(emberek % 4 != 0)
						{
							if(emberek % 4 == 1)
								format(txt, sizeof(txt), "%s [%d]", PlayerName(x), fejpenz);
							else
								format(txt, sizeof(txt), "%s, %s [%d]", txt, PlayerName(x), fejpenz);
						}
						else
						{
							format(txt, sizeof(txt), "%s, %s [%d]", txt, PlayerName(x), fejpenz);
							SendClientMessage(playerid, COLOR_GREY, txt);
						}
					}
				}
				if(x == (MAX_PLAYERS - 1) && emberek % 4 != 0)
					SendClientMessage(playerid, COLOR_GREY, txt);
			}
			if(emberek < 1)
				return !Msg(playerid, "Nincs vérdíj senkin", false, COLOR_GREY);
			return 0;
		}

		if(egyezik(tmp, "célpontok") || egyezik(tmp, "celpontok"))
		{
			new emberek;
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || x == playerid) continue;
				if(PlayerInfo[x][pHeadValue] > 0)
				{
					emberek++;
					SetPlayerMarkerForPlayer(playerid, x, 0x00FF00AA);
				}
			}
			return 0;
		}
		if(egyezik(tmp, "tagok"))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "=============[Hitman Tagok]=============");
		    for(new x = 0; x < MAX_PLAYERS; x++)
			{
   				if(IsHitman(x))
		    	{
		    	    if(IsDirector(playerid))
			    	{
						SendFormatMessage(playerid, COLOR_LIGHTRED, "- [%d]%s [%s]",x, PlayerName(x), PlayerInfo[x][pHitmanNev]);
					}
					else
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "- %s", PlayerInfo[x][pHitmanNev]);
					}
				}
			}
			SendClientMessage(playerid, COLOR_WHITE, "=============[Hitman Tagok]=============");
			return 0;
		}
		if(egyezik(tmp, "bomba"))
		{
			if(!IsPlayerInAnyVehicle(playerid)) return !Msg (playerid, "Jármûben kell lenned");
		    new kocsim = GetPlayerVehicleID(playerid);
			if(VanBombaBenne[kocsim] != NINCS) return !Msg(playerid, "Ebben a jármûben már van bomba.");
			Msg(playerid, "Bomba telepítve, ha beindítják a motort robban!");
			VanBombaBenne[kocsim] = playerid;
			return 0;
		}

		if(egyezik(tmp, "munka"))
		{
			new uzi[128];
			if(HitmanDuty[playerid])
			{
				Format(uzi, "<< %s befejezte a melót >>", PlayerInfo[playerid][pHitmanNev]);
				HitmanDuty[playerid] = 0;
			}
			else
			{
				Format(uzi, "<< %s munkába állt >>", PlayerInfo[playerid][pHitmanNev]);
				HitmanDuty[playerid] = 1;
			}
			SendHitmanRadioMessage(COLOR_YELLOW, uzi);
			return 0;
		}

		if(egyezik(tmp, "bilincs"))
		{
			if(PlayerCuffed[playerid] > 0)
			{
					Msg(playerid, "Bilincs leszedve!");
					Bilincs(playerid, 0);
			}
			else return !Msg(playerid, "Nem vagy bilincsben.");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(Visz[i] == playerid) Visz[i] = NINCS;
			}
			return 0;			
		}

		if(egyezik(tmp, "ruha"))
		{
			tmp = strtok(text, idx);

			if(!strlen(tmp))
				return !Msg(playerid, "ruha [ruhaid]");

			new skin = strval(tmp);

			if(!IsValidSkin(skin))
				return !Msg(playerid, "Nincs ilyen ruha!");

			SetPlayerSkin(playerid,skin);
			PlayerInfo[playerid][pModel] = skin;

			return 0;
		}

		if(egyezik(tmp, "Hírdetés") || egyezik(tmp, "Hirdetes"))
		{
		    SendClientMessageToAll(COLOR_LIGHTRED, "Hitman: Gondod van valakivel? Talán félsz a zsaruktól? Bízd ránk! Gyors és Spéci munka!((/contract))");

			return 0;
		}

		if(egyezik(tmp, "alnev") || egyezik(tmp, "álnév"))
		{
			new length = strlen(text);
			while ((idx < length) && (text[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = text[idx];
				idx++;
			}
			result[idx - offset] = EOS;

			if(!strlen(result) && PlayerInfo[playerid][pHamisNev] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Használat: alnev [újnév]");
				return 0;
			}

			if(!strlen(result) && PlayerInfo[playerid][pHamisNev] != 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Újra a régi neved van!");
				PlayerInfo[playerid][pHamisNev] = 0;
				return 0;
			}

			if(strlen(result) > MAX_PLAYER_NAME)
			{
				SendFormatMessage(playerid, COLOR_GRAD1, "Maximum %d karakter!", MAX_PLAYER_NAME);
				return 0;
			}

			PlayerInfo[playerid][pHamisNev] = result;
			format(string, sizeof(string), "Az új álneved mostantól %s!", result);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			return 0;
		}

		else if ((strcmp("Rendelés", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Rendelés")) || (strcmp("Rendeles", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Rendeles")))
		{
		    if(OrderReady[playerid] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Már rendeltél egy csomagot! Menj a HQ-ra, vedd fel, és rendelj ujat utána!");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if ((strcmp("1", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("1")))
			{
			    if(GetMoney(playerid) >= 5000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 1;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if ((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    if(GetMoney(playerid) >= 6000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 2;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if ((strcmp("3", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("3")))
			{
			    if(GetMoney(playerid) >= 7000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 3;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if ((strcmp("4", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("4")))
			{
			    if(GetMoney(playerid) >= 8000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 4;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if ((strcmp("5", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("5")))
			{
			    if(GetMoney(playerid) >= 9000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 5;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if ((strcmp("6", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("6")))
			{
			    if(GetMoney(playerid) >= 10000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 6;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if ((strcmp("7", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("7")))
			{
			    if(GetMoney(playerid) >= 11000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 7;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if ((strcmp("8", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("8")))
			{
			    if(GetMoney(playerid) >= 12000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 8;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if ((strcmp("9", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("9")))
			{
			    if(GetMoney(playerid) >= 13500)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 9;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if ((strcmp("10", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("10")))
			{
			    if(GetMoney(playerid) >= 15000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 10;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if((strcmp("X", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("X")))
			{
			    if(GetMoney(playerid) >= 2500)
			    {
					tmp = strtok(text, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GREY, "Használata: \"rendelés x [fegyvernév]\"");
						return 0;
					}

					new f = -1;
					for(new x = 1; x <= 46; x++)
					{
						if(strfind(aWeaponNames[x], tmp, true) != -1)
							f = x;
					}

					if(f == -1 || f == 19 || f == 20 || f == 21 || f == 38 || f == 39 || f == 40 || f == 43 || f == 44 || f == 45)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ilyen fegyver nincs, vagy tiltott!");
						return 0;
					}

			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvert! A HQ-n felveheted!");
			        OrderReady[playerid] = 11;
					HitmanRendeles[playerid] = f;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Nincs elég pénzed!");
			        return 0;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "|__________________ Fegyver csomagok __________________|");
				SendClientMessage(playerid, COLOR_GREY, "|(1) (5000Ft) Kés, Deagle, MP5, Shotgun");
				SendClientMessage(playerid, COLOR_GREY, "|(2) (6000Ft) Péncél, Kés, Deagle, M4, MP5, Shotgun");
				SendClientMessage(playerid, COLOR_GREY, "|(3) (7000Ft) Péncél, Kés, Deagle, AK47, MP5, Shotgun");
				SendClientMessage(playerid, COLOR_GREY, "|(4) (8000Ft) Péncél, Kés, Deagle, M4, MP5, Shotgun, Távcsöves");
				SendClientMessage(playerid, COLOR_GREY, "|(5) (9000Ft) Péncél, Kés, Deagle, AK47, MP5, Shotgun, Távcsöves");
				SendClientMessage(playerid, COLOR_GREY, "|(6) (10000Ft) Süti, Péncél, Kés, Deagle, M4, MP5, Shotgun, Távcsöves");
				SendClientMessage(playerid, COLOR_GREY, "|(7) (11000Ft) Süti, Péncél, Kés, Hangtompitós, AK47, MP5, Shotgun, Távcsöves");
				SendClientMessage(playerid, COLOR_GREY, "|(8) (12000Ft) Süti, Péncél, Kés, Hangtompitós, AK47, Tec 9, Shotgun, Távcsöves, Rakéta");
				SendClientMessage(playerid, COLOR_GREY, "|(9) (13500Ft) Süti, Péncél, Kés, Hangtompitós, AK47, Tec 9, Shotgun, Távcsöves, Hõkövetõ");
				SendClientMessage(playerid, COLOR_GREY, "|(10) (15000Ft) Süti, Péncél, Kés, Hangtompitós, AK47, Tec 9, Sörétes, Távcsöves, Hõkövetõ");
				SendClientMessage(playerid, COLOR_GREY, "|(X) (2500Ft) Süti, Péncél + Egyéni fegyver > \"rendelés x [fegyver]\"");
			    SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________|");
			    return 0;
			}
		}
		else if((strcmp("Kikapcsol", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Kikapcsol")))
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kikapcsoltad a laptopodat.");
      		ConnectedToPC[playerid] = 0;
		    return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "====[ Laptop ]====");
			SendClientMessage(playerid, COLOR_YELLOW2, "| - Tagok - Hírdetés");
			SendClientMessage(playerid, COLOR_YELLOW2, "| - Vérdíjak  - Ruha");
			SendClientMessage(playerid, COLOR_YELLOW2, "| - Célpontok - Álnév");
			SendClientMessage(playerid, COLOR_YELLOW2, "| - Rendelés - Bilincs");
			SendClientMessage(playerid, COLOR_YELLOW2, "| - Bomba - Munka");
		    return 0;
		}

	}
	if(CallLawyer[playerid] == 111)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("yes", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("yes")))
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "** %s ügyvédet hívott.", sendername);
	    	SendJobMessage(2, TEAM_AZTECAS_COLOR, string);
	    	SendJobMessage(2, TEAM_AZTECAS_COLOR, "* Menj a rendõrségre és beszélj egy rendõrrel!");
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "Üzeneted továbbítottuk az ügyvédeknek!");
	    	WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
	    	return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs Ügyvéd, büntetés letöltése...");
		    WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
		    return 0;
		}
	}
	if(TalkingLive[playerid] != 255)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
//		if(PlayerInfo[playerid][pJob] == 6)
//		{
//		    format(string, sizeof(string), "LiveNR %s: %s", sendername, text);
//			OOCNews(COLOR_LIGHTGREEN, string);
//		}
//		else
//		{
	    format(string, sizeof(string), "~~~ *ÉLÕ* %s: %s ~~~", sendername, text);
		OOCNews(COLOR_Live, string);
//		}
		return 0;
	}
	if(Mobile[playerid] != 255)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "[Telefon] Valaki mondja: %s", text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

		if(Mobile[playerid] == 911)
		{
			if(!strlen(text))
				SendClientMessage(playerid, COLOR_ALLDEPT, "Sürgõsségi: Sajnálom, nem értem, LSPD vagy LSMD ?");

			else if(strcmp("lspd", text, true) == 0 || strcmp("rendorseg", text, true) == 0 || strcmp("rendõrség", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Sürgõsségi: Átkapcsolom magát a rendõrségre, kérem tartsa...");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "Rendõrség: Üdvözlöm, itt a rendõrség, kérem mondja el mi történt.");
			}

			else if(strcmp("lsmd", text, true) == 0 || strcmp("mento", text, true) == 0 || strcmp("mentõ", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Sürgõsségi: Átkapcsolom a mentõszolgálathoz, kérem tartsa...");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Mentõszolgálat: Kérem röviden mondja el, hogy mi történt!");
			}

			else
				SendClientMessage(playerid, COLOR_ALLDEPT, "Sürgõsségi: Nem értem... Rendõrség vagy Mentõ?");

			return 0;
		}

		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "912: Elnézést de nem értem.");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Rendõrség: Tudja az elkövetõ nevét? Ha nem csak mondja: ''nem''.");
			Mobile[playerid] = 913;
			return 0;
		}

		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Rendõrség: Sajnálom... nem értem");
				return 0;
			}

			new wanted[128];

			if(strcmp("nem", tmp, true) == 0)
			{
				new turner[MAX_PLAYER_NAME];
				GetPlayerName(playerid, turner, sizeof(turner));
				SendClientMessage(playerid, COLOR_DBLUE, "Rendõrség: Minden egység riasztva. Köszönjük bejelentését!");
				SendFamilyMessage(LMUNKA_SCPD, COLOR_DBLUE, "=========== BEJELENTÉS ===========");
				SendFamilyMessage(LMUNKA_FBI, COLOR_DBLUE, "=========== BEJELENTÉS ===========");
				SendFamilyMessage(LMUNKA_SFPD, COLOR_DBLUE, "=========== BEJELENTÉS ===========");
				SendFamilyMessage(LMUNKA_VPOP, COLOR_DBLUE, "=========== BEJELENTÉS ===========");
				format(wanted, sizeof(wanted), "HQ: Minden egységnek! Bejelentõ: %s | Tettes: Ismeretlen",turner);
				SendFamilyMessage(LMUNKA_SCPD, COLOR_DBLUE, wanted);
				SendFamilyMessage(LMUNKA_FBI, COLOR_DBLUE, wanted);
				SendFamilyMessage(LMUNKA_SFPD, COLOR_DBLUE, wanted);
				SendFamilyMessage(LMUNKA_VPOP, COLOR_DBLUE, wanted);
				format(wanted, sizeof(wanted), "HQ: Bûncselekmény: %s",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(LMUNKA_SCPD, COLOR_DBLUE, wanted);
				SendFamilyMessage(LMUNKA_FBI, COLOR_DBLUE, wanted);
                SendFamilyMessage(LMUNKA_SFPD, COLOR_DBLUE, wanted);
				SendFamilyMessage(LMUNKA_VPOP, COLOR_DBLUE, wanted);
				SendClientMessage(playerid, COLOR_GRAD2, "Lerakták.");
				Mobile[playerid] = 255;
				return 0;
			}
			new badguy;

			badguy = ReturnUser(tmp);
			if (IsPlayerConnected(badguy))
			{
			    if(badguy != INVALID_PLAYER_ID)
			    {
					SendClientMessage(playerid, COLOR_DBLUE, "Rendõrség: Minden egység riasztva. Köszönjük bejelentését!");

					SendFamilyMessage(LMUNKA_SCPD, COLOR_DBLUE, "=========== BEJELENTÉS ===========");
					SendFamilyMessage(LMUNKA_FBI, COLOR_DBLUE, "=========== BEJELENTÉS ===========");
                    SendFamilyMessage(LMUNKA_SFPD, COLOR_DBLUE, "=========== BEJELENTÉS ===========");
					format(wanted, sizeof(wanted), "HQ: Minden egységnek! Bejelentõ: %s | Tettes: %s", PlayerName(playerid), PlayerName(badguy));
					SendFamilyMessage(LMUNKA_SCPD, COLOR_DBLUE, wanted);
					SendFamilyMessage(LMUNKA_FBI, COLOR_DBLUE, wanted);
					SendFamilyMessage(LMUNKA_SFPD, COLOR_DBLUE, wanted);
					format(wanted, sizeof(wanted), "HQ: Bûncselekmény: %s",PlayerCrime[playerid][pAccusing]);
					SendFamilyMessage(LMUNKA_SCPD, COLOR_DBLUE, wanted);
					SendFamilyMessage(LMUNKA_FBI, COLOR_DBLUE, wanted);
					SendFamilyMessage(LMUNKA_SFPD, COLOR_DBLUE, wanted);

					SetPlayerCriminal(badguy,playerid, PlayerCrime[playerid][pAccusing]);

					//if(WantedPoints[badguy] <= 0) { } else { WantedPoints[badguy] += 2; }
					SendClientMessage(playerid, COLOR_GRAD2, "Lerakták.");
					Mobile[playerid] = 255;
					return 0;
				}//invalid id
				return 0;
			}//not connected
			else
			{
				format(string, sizeof(string), "Rendõrség: Sajnálom, nincs információnk errõl a személyrõl: %s. Biztos jó név?", tmp);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}

		if(Mobile[playerid] == 914)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Mentõszolgálat: Sajnálom, de nem értem.");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Mentõszolgálat: Minden egységnek jelentve. Köszönjük bejelentését!");
			format(wanted, sizeof(wanted), "HQ: Minden egységnek! Jelentõ: %s",turner);
			SendTeamMessage(LMUNKA_MENTO, TEAM_CYAN_COLOR, wanted);  //SendCopMessage(TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "HQ: Incidens: %s",text);
			SendTeamMessage(LMUNKA_MENTO, TEAM_CYAN_COLOR, wanted);
			SendClientMessage(playerid, COLOR_GRAD2, "Lerakták.");
			Mobile[playerid] = 255;
			return 0;
		}

		if(IsPlayerConnected(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
			}
		}

		else
		{
			SendClientMessage(playerid, COLOR_YELLOW,"Nincs senki a vonalban...");
		}
		return 0;
	}

	if(PlayerRaceInfo[playerid][xEpites] != NINCS)
	{
		new params = Parameterek(text);
		new param[3][32];
		new idx;

		if(params > 0)
		{
			new params_szamlalo = 1;
			while(params_szamlalo <= params && params_szamlalo < sizeof(param))
			{
				param[params_szamlalo] = GetParam(text, params_szamlalo);
				params_szamlalo++;
			}
		}

		new funkcio[32];
		funkcio = strtok(text, idx);

		new slot = PlayerRaceInfo[playerid][xEpites];

		if(egyezik(funkcio, "start"))
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerRaceCheckpoint(playerid, 2, x, y, z, 0.0, 0.0, 0.0, RACECPMERETB);
			RaceStart[slot][0] = x;
			RaceStart[slot][1] = y;
			RaceStart[slot][2] = z;

			Msg(playerid, "Start checkpoint lerakva", false);
		}
		else if(egyezik(funkcio, "finish"))
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerRaceCheckpoint(playerid, 2, x, y, z, 0.0, 0.0, 0.0, RACECPMERETB);
			RaceCel[slot][0] = x;
			RaceCel[slot][1] = y;
			RaceCel[slot][2] = z;

			Msg(playerid, "Finish checkpoint lerakva", false);
		}
		/*else if(egyezik(funkcio, "CP"))
		{
			if(params < 1)
			{
				Msg(playerid, "Használata: cp [szám]", false);
				return 0;
			}

			new cp = strval(param[1]);
			if(cp < 0 || cp >= RACEMAXCP)
				Msg(playerid, "Nincs ilyen CP!", false);

			PlayerRaceInfo[playerid][xEpitesCP] = cp;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Az építés a %d CPtõl folytatódik", cp);
		}*/
		else if(egyezik(funkcio, "next"))
		{
			if(PlayerRaceInfo[playerid][xEpitesCP] >= RACEMAXCP)
			{
				Msg(playerid, "Elérted a maximális CP számát! Rakd le a Finish-t!", false);
				return 0;
			}

			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerRaceCheckpoint(playerid, 2, x, y, z, 0.0, 0.0, 0.0, RACECPMERETB);

			PlayerRaceInfo[playerid][xEpitesCP]++;
			new cp = PlayerRaceInfo[playerid][xEpitesCP];
			RaceCP[slot][cp][0] = x;
			RaceCP[slot][cp][1] = y;
			RaceCP[slot][cp][2] = z;

			SendFormatMessage(playerid, COLOR_LIGHTRED, "Ez volt a %d. CP, még %d CP-t rakhatsz le!", cp, (RACEMAXCP - cp));
		}
		else if(egyezik(funkcio, "back"))
		{
			new cp = PlayerRaceInfo[playerid][xEpitesCP];
			if(cp == 0)
			{
				Msg(playerid, "Hova akarsz már visszamenni? Ez a nulladik... -.-\"", false);
				return 0;
			}
			new Float:x, Float:y, Float:z;
			x = RaceCP[slot][cp-1][0];
			y = RaceCP[slot][cp-1][1];
			z = RaceCP[slot][cp-1][2];

			SetPlayerRaceCheckpoint(playerid, 2, x, y, z, 0.0, 0.0, 0.0, RACECPMERETB);
			PlayerRaceInfo[playerid][xEpitesCP] = cp - 1;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Visszaugrottál a %d. CPre", (cp-1));
		}
		else if(egyezik(funkcio, "save"))
		{
			if(RaceStart[slot][0] == 0.0 || RaceStart[slot][1] == 0.0 || RaceStart[slot][2] == 0.0 || RaceCel[slot][0] == 0.0 || RaceCel[slot][1] == 0.0 || RaceCel[slot][2] == 0.0)
			{
				Msg(playerid, "Nincs megadva Start vagy Cél pozíció!", false);
				return 0;
			}

			if(!strlen(RaceInfo[slot][rNev]))
			{
				Msg(playerid, "A Racenek nincs neve, adnod kell egy nevet neki > nev [név]", false);
				return 0;
			}

			if(params < 1)
			{
				Msg(playerid, "Használata: save [savenév] - NEM tartalmazhat space-t!", false);
				return 0;
			}

			new snev[32], where[64];
			snev = strtok(text, idx);
			strmid(snev, param[1], 0, strlen(param[1]), 40);

			new query[350], setdata[40], start[40], cel[40];
			Format(start, "%.2f,%.2f,%.2f", RaceStart[slot][0], RaceStart[slot][1], RaceStart[slot][2]);
			Format(cel, "%.2f,%.2f,%.2f", RaceCel[slot][0], RaceCel[slot][1], RaceCel[slot][2]);

			Format(where, "SNev='%s'", snev);
			if(Mysql_Num(SQL_DB_Verseny, where) < 1)
				Format(query, "INSERT INTO %s (SNev, Nev, Start, Cel) VALUES('%s', '%s', '%s', '%s')", SQL_DB_Verseny, snev, RaceInfo[slot][rNev], start, cel);
			else
				Format(query, "UPDATE %s SET SNev='%s', Nev='%s', Start='%s', Cel='%s' WHERE %s", SQL_DB_Verseny, snev, RaceInfo[slot][rNev], start, cel, where);

			mysql_query(query);

			new cp;
			for(new x = 0; x < RACEMAXCP; x++)
			{
				if(RaceCP[slot][x][0] == 0.0 || RaceCP[slot][x][1] == 0.0 || RaceCP[slot][x][2] == 0.0) continue;

				Format(setdata, "%f,%f,%f", RaceCP[slot][x][0], RaceCP[slot][x][1], RaceCP[slot][x][2]);
				Format(query, "UPDATE %s SET CK%d = '%s' WHERE %s", SQL_DB_Verseny, cp, setdata, where);
				mysql_query(query);
				cp++;
			}
			Format(query, "UPDATE %s SET Checkpointok='%d' WHERE %s", SQL_DB_Verseny, cp, where);
			mysql_query(query);

			SendFormatMessage(playerid, COLOR_YELLOW, "%s mentve - CPk száma %d", snev, cp);
			Msg(playerid, "A race-t ujra kell loadolnod, ha újra szerkeszteni szeretnéd v. indítani", false);
			RaceInfo[slot][rStatusz] = RACE_NINCS;
			PlayerRaceInfo[playerid][xEpites] = NINCS;
			DisablePlayerRaceCheckpoint(playerid);
		}
		else if(egyezik(funkcio, "nev"))
		{
			new length = strlen(text);
			while ((idx < length) && (text[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = text[idx];
				idx++;
			}
			result[idx - offset] = EOS;

			if(!strlen(result))
			{
				Msg(playerid, "Használata: nev [név]", false);
				return 0;
			}

			strmid(RaceInfo[slot][rNev], result, 0, strlen(result), 60);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "A Race neve beállítva: %s", result);
		}
		else
		{
			Msg(playerid, "Funkciók: start, finish, next, back, save", false);
			Msg(playerid, "Info: Start > start pozíció lerakása | Finish > cél pozícíó megadása | Nev [név] > A race neve", false);
			Msg(playerid, "Info: Next > Lerakja a következõ CP-t | Back > Egy CPvel visszamegy | Save [név] > Mentés", false);
		}

		return 0;
	}

	if(realchat)
	{
	    if(gPlayerLogged[playerid] == 0)
	    {
	        return 0;
      	}
		GetPlayerName(playerid, sendername, sizeof(sendername));

		if(!gBooc[playerid])
		{
			if(SzajBekotve[playerid] == 1)
			{	
				Msg(playerid, "A szád bevan kötve, így nem tudsz beszélni.");
				return 0;
			}
			if(strfind(text, ":D", true) != -1 || strfind(text, "xD", true) != -1)
			{
				ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);

				if(PlayerInfo[playerid][pHamisNev] == 0)
					format(string, sizeof(string), "* %s nevet.", sendername);
				else
					format(string, sizeof(string), "* %s nevet.", PlayerInfo[playerid][pHamisNev]);

				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 0;
			}

			if(strfind(text, ":)", true) != -1)
			{
				if(PlayerInfo[playerid][pHamisNev] == 0)
					format(string, sizeof(string), "* %s mosolyog.", sendername);
				else
					format(string, sizeof(string), "* %s mosolyog.", PlayerInfo[playerid][pHamisNev]);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 0;
			}

			if(strfind(text, ":(", true) != -1)
			{
				if(PlayerInfo[playerid][pHamisNev] == 0)
					format(string, sizeof(string), "* %s szomorú.", sendername);
				else
					format(string, sizeof(string), "* %s szomorú.", PlayerInfo[playerid][pHamisNev]);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 0;
			}

			if(strfind(text, ":P", true) != -1)
			{
				if(PlayerInfo[playerid][pHamisNev] == 0)
					format(string, sizeof(string), "* %s nyelvet ölt.", sendername);
				else
					format(string, sizeof(string), "* %s nyelvet ölt.", PlayerInfo[playerid][pHamisNev]);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 0;
			}

			if(strfind(text, ";)", true) != -1)
			{
				if(PlayerInfo[playerid][pHamisNev] == 0)
					format(string, sizeof(string), "* %s kacsint.", sendername);
				else
					format(string, sizeof(string), "* %s kacsint.", PlayerInfo[playerid][pHamisNev]);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 0;
			}

			if(strfind(text, ":@", true) != -1)
			{
				if(PlayerInfo[playerid][pHamisNev] == 0)
					format(string, sizeof(string), "* %s nagyon ideges.", sendername);
				else
					format(string, sizeof(string), "* %s nagyon ideges.", PlayerInfo[playerid][pHamisNev]);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 0;
			}

			if(strfind(text, ":O", true) != -1)
			{
				if(PlayerInfo[playerid][pHamisNev] == 0)
					format(string, sizeof(string), "* %s csodálkozik.", sendername);
				else
					format(string, sizeof(string), "* %s csodálkozik.", PlayerInfo[playerid][pHamisNev]);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 0;
			}

			if(strfind(text, ":S", true) != -1)
			{
				if(PlayerInfo[playerid][pHamisNev] == 0)
					format(string, sizeof(string), "* %s rosszul van.", sendername);
				else
					format(string, sizeof(string), "* %s rosszul van.", PlayerInfo[playerid][pHamisNev]);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 0;
			}
		}

		if(!gBooc[playerid])
		{
			if(SzovegEllenorzes(playerid, text, "IC"))
				return 0;
			
			new kocsiszoveg, kocsi;
			kocsi = GetPlayerVehicleID(playerid);
			if(IsPlayerInAnyVehicle(playerid) && !IsABicikli(kocsi) && !Bikes(kocsi) && !IsAMotor(kocsi))
			{
				if(!AblakLent[kocsi]) kocsiszoveg = 1;
				else kocsiszoveg = 2;
			}

			if(PlayerInfo[playerid][pHamisNev] == 0)
			{				
				switch(kocsiszoveg)
				{
					case 1: format(string, 128, "[Jármûben] %s mondja: %s", sendername, text);
					case 2: format(string, 128, "[Jámûbõl] %s mondja: %s", sendername, text);
					default: format(string, 128, "%s mondja: %s", sendername, text);
				}
				
				ChatLog(string);
			}
			else
			{
				format(string, sizeof(string), "[%s]%s mondja: %s", sendername, PlayerInfo[playerid][pHamisNev], text);
				ChatLog(string);
				
				switch(kocsiszoveg)
				{
					case 1: format(string, 128, "[Jármûben] %s mondja: %s", PlayerInfo[playerid][pHamisNev], text);
					case 2: format(string, 128, "[Jármûbõl] %s mondja: %s", PlayerInfo[playerid][pHamisNev], text);
					default: format(string, 128, "%s mondja: %s", PlayerInfo[playerid][pHamisNev], text);
				}
			}
			if(IsPlayerInAnyVehicle(playerid) && !IsABicikli(kocsi) && !Bikes(kocsi) && !IsAMotor(kocsi) && !AblakLent[kocsi])
			{
				for(new p = 0; p < MAX_PLAYERS; p++)
				{
					if(IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
						SendClientMessage(p, COLOR_WHITE, string);
				}
			}
			else
			{
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SetPlayerChatBubble(playerid, text, COLOR_WHITE, 5, 5000);
			}
		}
		else
		{
			if(SzovegEllenorzes(playerid, text, "IC(OOC)", ELLENORZES_MINDKETTO))
				return 0;
				
			if(PlayerInfo[playerid][pHamisNev] == 0)
			{
				format(string, sizeof(string), "%s mondja OOC: (( %s ))", sendername, text);
				ChatLog(string);
			}
			else
			{
				format(string, sizeof(string), "[%s]%s mondja OOC: (( %s ))", sendername, PlayerInfo[playerid][pHamisNev], text);
				ChatLog(string);
				format(string, sizeof(string), "%s mondja OOC: (( %s ))", PlayerInfo[playerid][pHamisNev], text);
			}
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid, text, COLOR_WHITE, 5, 5000);
		}
		return 0;
	}
	return 1;
}

public SetCamBack(playerid)
{
    if(IsPlayerConnected(playerid))
    {
		new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetPlayerPos(playerid, -1863.15, -21.6598, 1060.15); // Warp the player
		SetPlayerInterior(playerid,14);
	}
}

public FixHour(hour)
{
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

public LAddsOn()
{
	ladds = 1;
	return 1;
}

public AddsOn()
{
	adds=1;
	return 1;
}

public Startup(playerid, vehicleid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	
	if(IsABicikli(vehicleid)) SetJarmu(vehicleid, KOCSI_MOTOR, 1);
	else if(engineOn[vehicleid]) SetJarmu(vehicleid, KOCSI_MOTOR, 1);
	else
	{
		SetJarmu(vehicleid, KOCSI_MOTOR, 0);
		SendClientMessage(playerid, COLOR_YELLOW, "A motort a /motor paranccsal, vagy a SPACE lenyomásával indíthatod, vagy ha nincs kulcsod /ellop");
	}

	return 1;
}



public EngineBreak()
{
	for(new player = 0; player < MAX_PLAYERS; player++)
	{
		if(!IsPlayerInAnyVehicle(player)) continue;
		new Float:vHealth, car;
		car = GetPlayerVehicleID(player);
		GetVehicleHealth(car, vHealth);
		if(IsPlayerInAnyVehicle(player))
		if(vHealth < 350)
		{
			SetVehicleHealth(car, 350);
			Msg(player, "Elromlott a jármûved, hívj szerelõt! (/service mechanic)");
			engineOn[car] = 0;
			SetJarmu(car, KOCSI_MOTOR, 0);
		}
	}

	return 1;
}

public Mergezes(playerid)
{
		new string[256];
		if(Mergezve[playerid] < 1)
		{
			KiMergezte[playerid] = NINCS;
			Mergezve[playerid] = 0;
			return 1;
		}
		SetHealth(playerid, 0);
		if(PlayerInfo[playerid][pHeadValue] > 0)
		{
			if(IsHitman(KiMergezte[playerid]) && HitmanDuty[KiMergezte[playerid]])
			{
				SendFormatMessageToAll(COLOR_YELLOW, " <<< A bérgyilkos teljesítette a megbízó kérését - %s kinyírva >>> ", PlayerName(playerid));
				format(string,sizeof(string),"<< %s teljesítette a megbízást >>", PlayerInfo[KiMergezte[playerid]][pHitmanNev]);
				SendHitmanRadioMessage(COLOR_YELLOW, string);
				SendFormatMessage(KiMergezte[playerid], COLOR_LIGHTBLUE, "A megbízást teljesítetted. A cég átutalta a pénzt a számládra. (%dFt)", PlayerInfo[playerid][pHeadValue]);

				PlayerInfo[KiMergezte[playerid]][pAccount] += PlayerInfo[playerid][pHeadValue];
				PlayerInfo[playerid][pHeadValue] = 0;
				format(string, sizeof(string), "%s megmérgezte %s-t", PlayerInfo[KiMergezte[playerid]][pHitmanNev],  PlayerName(playerid));
				ABroadCast(COLOR_GREY, string, 1);
			}
		}
		KiMergezte[playerid] = NINCS;
		Mergezve[playerid] = 0;
		return 1;
}

public JarmuRiasztoBe(carid)
{
	if(GetJarmu(carid, KOCSI_RIASZTO) == 1)
	{
		SetJarmu(carid, KOCSI_RIASZTO, 1);
		SetTimerEx("JarmuRiasztoBe", 5000, false, "i", carid);
	}
}

public JarmuRiaszto(playerid)
{
		UnFreeze(playerid);
		if(!IsPlayerInAnyVehicle(playerid)) return 1;
		SendClientMessage(playerid, COLOR_LIGHTRED, "* Riasztó kikapcsolva!");
		if(KocsiRiaszto[GetPlayerVehicleID(playerid)] == 1)
			KocsiRiaszto[GetPlayerVehicleID(playerid)] = 0;
		SetJarmu(GetPlayerVehicleID(playerid), KOCSI_RIASZTO, 0);	
		return 1;
}

public SisakFel(playerid)
{
	UnFreeze(playerid);
	SisakotVesz[playerid] = 0;
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	switch(GetPlayerSkin(playerid))
	{
		#define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, SISAKSLOT, 18645, 2, (%0), (%1), (%2), (%3), (%4), (%5));
		case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
		case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
		case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
		case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
		case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
		case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
		case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
		case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
		case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
		case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
		case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
		case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
	}
	Sisak[playerid] = 1;
	Msg(playerid, "Felvetted a bukósisakot.");
	Cselekves(playerid, "felvette a bukósisakot...");
	return 1;
}

public JarmuFeltores(playerid)
{
		if(IsPlayerInAnyVehicle(playerid)) return 1;
		new kozelbenlevojarmu = GetClosestVehicle(playerid);
			
		if(GetDistanceToVehicle(playerid, kozelbenlevojarmu) > 3.0) return Msg(playerid, "Nagyon közel kell lenned a jármûhöz.");
		if(IsABicikli(kozelbenlevojarmu)) return Msg(playerid, "Biciklit??-.-");
		new sofor = KocsiSofor(kozelbenlevojarmu);
		if(sofor != NINCS) return Msg(playerid, "Ha ülnek benne, hogy akarod feltörni??");
		if(!Locked(kozelbenlevojarmu)) return Msg(playerid, "A jármû nyitva, nem kell feltörni.");
		SendClientMessage(playerid, COLOR_LIGHTRED, "* Jármû feltörve!");
		UnLockCar(kozelbenlevojarmu);
		UnFreeze(playerid);
		if(KocsiRiaszto[kozelbenlevojarmu] == 1)
		{
			Msg(playerid, "Bekapcsolt a riasztó!");
			Cselekves(playerid, "Megszóltalt egy riasztó...", 2);
			SetJarmu(kozelbenlevojarmu, KOCSI_RIASZTO, 1);
			SetTimerEx("JarmuRiasztoBe", 5000, false, "i", kozelbenlevojarmu);
		}
		return 1;
}

public robpenzpakolas(playerid)
{
	new string[128];
	if(robpenzido[playerid] == 0)
	{
		format(string,sizeof(string), "* Valaki bepakolja a táskájába a pénzt.");
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string), "** Kiraboltad a bankot. Rabolt összeg: %dFt",robmoney);
		SendClientMessage(playerid,COLOR_YELLOW,string);
		GiveMoney(playerid, robmoney);
		TogglePlayerControllable(playerid, 1);
		ClearAnimations(playerid);
		return 1;
	}
	else
	{
	    robpenzido[playerid]--;
	    format(string, sizeof(string), "%d", robpenzido[playerid]);
     	GameTextForPlayer(playerid, string, 1000, 4);
	    SetTimerEx("robpenzpakolas", 1000, false, "i", playerid);
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    SetPlayerPosFindZ(playerid, fX, fY, fZ); 
    return 1;
}


public AlapTuning(playerid)
{
	new kocsim;
	kocsim = GetClosestVehicle(playerid);
	if(GetDistanceToVehicle(playerid, kocsim) > 5.5) return Msg(playerid, "Nincs a közelben a jármû!");
	new kocsi;
	kocsi = GetVehicleModel(kocsim);
	new biz;
	biz = BIZ_TUNING;
	if(tuningolo[playerid] == 1)
	{
		AddVehicleComponent(kocsim, 1010);
		SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "10x Nitró felszerelve!");
		SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
		GiveMoney(playerid, -65000);
		BizPenz(biz, 65000);
		BizzInfo[BIZ_TUNING][bProducts] -= 10;
		tuningolo[playerid] = NINCS;
	}
	if(tuningolo[playerid] == 2)
	{
		AddVehicleComponent(kocsim, 1087);
		SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Hidraulika felszerelve!");
		SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
		GiveMoney(playerid, -35000);
		BizPenz(biz, 35000);
		BizzInfo[BIZ_TUNING][bProducts] -= 15;
		tuningolo[playerid] = NINCS;
	}
	if(tuningolo[playerid] == 3)
	{
			if(kocsi == 560)
			{
				AddVehicleComponent(kocsim, 1026);
				AddVehicleComponent(kocsim, 1027);
				AddVehicleComponent(kocsim, 1032);
				AddVehicleComponent(kocsim, 1169);
				AddVehicleComponent(kocsim, 1138);
				AddVehicleComponent(kocsim, 1141);
				AddVehicleComponent(kocsim, 1028);
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
			else if(kocsi == 562)
			{
				AddVehicleComponent(kocsim, 1034);
				AddVehicleComponent(kocsim, 1038);
				AddVehicleComponent(kocsim, 1036);
				AddVehicleComponent(kocsim, 1040);
				AddVehicleComponent(kocsim, 1147);
				AddVehicleComponent(kocsim, 1149);
	            AddVehicleComponent(kocsim, 1171);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
            else if(kocsi == 559)
			{
				AddVehicleComponent(kocsim, 1065);
				AddVehicleComponent(kocsim, 1067);
				AddVehicleComponent(kocsim, 1069);
				AddVehicleComponent(kocsim, 1071);
				AddVehicleComponent(kocsim, 1159);
				AddVehicleComponent(kocsim, 1160);
	            AddVehicleComponent(kocsim, 1162);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
            else if(kocsi == 558)
			{
				AddVehicleComponent(kocsim, 1088);
				AddVehicleComponent(kocsim, 1090);
				AddVehicleComponent(kocsim, 1092);
				AddVehicleComponent(kocsim, 1094);
				AddVehicleComponent(kocsim, 1164);
				AddVehicleComponent(kocsim, 1166);
	           	AddVehicleComponent(kocsim, 1168);
	 			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
			else if(kocsi == 561)
			{
				AddVehicleComponent(kocsim, 1055);
				AddVehicleComponent(kocsim, 1056);
				AddVehicleComponent(kocsim, 1058);
				AddVehicleComponent(kocsim, 1062);
				AddVehicleComponent(kocsim, 1064);
				AddVehicleComponent(kocsim, 1154);
	 			AddVehicleComponent(kocsim, 1155);
	 			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
			else if(kocsi == 565)
			{
				AddVehicleComponent(kocsim, 1046);
				AddVehicleComponent(kocsim, 1047);
				AddVehicleComponent(kocsim, 1049);
				AddVehicleComponent(kocsim, 1051);
				AddVehicleComponent(kocsim, 1054);
				AddVehicleComponent(kocsim, 1150);
				AddVehicleComponent(kocsim, 1153);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ALIEN tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
			else
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sultan,Jester,Uranus,Flash,Stratum,Elegy kocsikra!");
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				tuningolo[playerid] = NINCS;
	            return 1;
			}
	}
	if(tuningolo[playerid] == 4)
	{
			if(kocsi == 560)
			{
				AddVehicleComponent(kocsim, 1029);
				AddVehicleComponent(kocsim, 1030);
				AddVehicleComponent(kocsim, 1031);
				AddVehicleComponent(kocsim, 1133);
				AddVehicleComponent(kocsim, 1139);
				AddVehicleComponent(kocsim, 1140);
				AddVehicleComponent(kocsim, 1170);
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
			else if(kocsi == 562)
			{
				AddVehicleComponent(kocsim, 1035);
				AddVehicleComponent(kocsim, 1037);
				AddVehicleComponent(kocsim, 1039);
				AddVehicleComponent(kocsim, 1041);
				AddVehicleComponent(kocsim, 1146);
				AddVehicleComponent(kocsim, 1148);
	            AddVehicleComponent(kocsim, 1172);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
            else if(kocsi == 559)
			{
				AddVehicleComponent(kocsim, 1066);
				AddVehicleComponent(kocsim, 1068);
				AddVehicleComponent(kocsim, 1070);
				AddVehicleComponent(kocsim, 1072);
				AddVehicleComponent(kocsim, 1158);
				AddVehicleComponent(kocsim, 1161);
	            AddVehicleComponent(kocsim, 1173);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
            else if(kocsi == 558)
			{
				AddVehicleComponent(kocsim, 1089);
				AddVehicleComponent(kocsim, 1091);
				AddVehicleComponent(kocsim, 1093);
				AddVehicleComponent(kocsim, 1095);
				AddVehicleComponent(kocsim, 1163);
				AddVehicleComponent(kocsim, 1165);
	 			AddVehicleComponent(kocsim, 1167);
	 			SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
			else if(kocsi == 561)
			{
				AddVehicleComponent(kocsim, 1057);
				AddVehicleComponent(kocsim, 1059);
				AddVehicleComponent(kocsim, 1050);
				AddVehicleComponent(kocsim, 1061);
				AddVehicleComponent(kocsim, 1063);
				AddVehicleComponent(kocsim, 1156);
	            AddVehicleComponent(kocsim, 1157);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
			else if(kocsi == 565)
			{
				AddVehicleComponent(kocsim, 1045);
				AddVehicleComponent(kocsim, 1048);
				AddVehicleComponent(kocsim, 1050);
				AddVehicleComponent(kocsim, 1052);
				AddVehicleComponent(kocsim, 1053);
				AddVehicleComponent(kocsim, 1151);
	            AddVehicleComponent(kocsim, 1152);
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "XFLOW tuning felszerelve!");
				SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				GiveMoney(playerid, -75000);
				RepairVehicle(kocsim);
				BizPenz(biz, 75000);
				BizzInfo[BIZ_TUNING][bProducts] -= 50;
				tuningolo[playerid] = NINCS;
			}
			else
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sultan,Jester,Uranus,Flash,Stratum,Elegy kocsikra tudok csak!");
	            SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
				tuningolo[playerid] = NINCS;
	            return 1;
			}
	}
	if(tuningolo[playerid] == 5)
	{
		SetVehicleColor(kocsim, Tszin[playerid], Tszin[playerid]);
		RepairVehicle(kocsim);
		SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Kocsi átfestve!");
		SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
		GiveMoney(playerid, -5000);
		BizPenz(biz, 5000);
		BizzInfo[BIZ_TUNING][bProducts] -= 20;
		Tszin[playerid] = NINCS;
		tuningolo[playerid] = NINCS;
	}
	if(tuningolo[playerid] == 6)
	{
		AddVehicleComponent(kocsim, Tkerek[playerid]);
		SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Új kerék felrakva!");
		SendClientMessage(playerid, COLOR_LIGHTRED, "================[Tuning]================");
		GiveMoney(playerid, -7000);
		BizPenz(biz, 7000);
		BizzInfo[BIZ_TUNING][bProducts] -= 5;
		Tkerek[playerid] = NINCS;
		tuningolo[playerid] = NINCS;
	}
	return 1;
}


OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}


stock IsOOC(szoveg[])
{
	if(strfind(szoveg, "((") != NINCS || strfind(szoveg, "))") != NINCS || strfind(szoveg, ") )") != NINCS || strfind(szoveg, "( (") != NINCS ||
		strfind(szoveg, "{{") != NINCS || strfind(szoveg, "}}") != NINCS || strfind(szoveg, "} }") != NINCS || strfind(szoveg, "{ {") != NINCS ||
		strfind(szoveg, "[[") != NINCS || strfind(szoveg, "]]") != NINCS || strfind(szoveg, "] ]") != NINCS || strfind(szoveg, "[ [") != NINCS
	)
		return 1;
	return 0;
}

stock KocsiRendszam(kocsi, bool:kell_ra_rakas = true)
{
	new string[20];
	//if(IsValidDynamic3DTextLabel(KocsiRendszamID[kocsi]))
	//	DestroyDynamic3DTextLabel(KocsiRendszamID[kocsi]);

	if(!NPCKocsi[kocsi] && kell_ra_rakas) // Buszra nem kell rendszám
	{
		format(string, sizeof(string), "SEE-%d", kocsi);
		//KocsiRendszamID[kocsi] = CreateDynamic3DTextLabel(string, 0xFF0000AA, 0.0, 0.0, 2.0, 50.0, INVALID_PLAYER_ID, kocsi, 0, 0);
		SetVehicleNumberPlate(kocsi, string);
	}
}

//GET X Y IN FRONT OR BEHIND PLAYER---------------------------------------------
stock GetXYInFrontOfPlayer(playerid,&Float:x,&Float:y,Float:dis)
{
	new Float:a, Float:z;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,a);
	GetXYInFrontOfPoint(x, y, a, dis);
}

stock GetXYBehindPlayer(playerid,&Float:x,&Float:y,Float:dis)
{
	new Float:a, Float:z;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,a);
	GetXYBehindPoint(x, y, a, dis);
}

//GET X Y IN FRONT/BEHIND/LEFT/RIGHT OF POINT-----------------------------------

stock GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}

stock GetXYBehindPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x -= (distance * floatsin(-angle, degrees));
	y -= (distance * floatcos(-angle, degrees));
}

stock GetXYLeftOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x -= (distance * floatsin(-angle - 90.0, degrees));
	y -= (distance * floatcos(-angle - 90.0, degrees));
}

stock GetXYRightOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x -= (distance * floatsin(-angle + 90.0, degrees));
	y -= (distance * floatcos(-angle + 90.0, degrees));
}

//------------------------------------------------------------------------------

//GET X Y IN FRONT OR BEHIND OF VEHICLE-----------------------------------------
stock GetXYInFrontOfVehicle(playerid,&Float:x,&Float:y,Float:dis)
{
	new currentveh;
	new Float:a, Float:z;
	currentveh = GetPlayerVehicleID(playerid);
	GetVehiclePos(currentveh, x, y, z);
	GetVehicleZAngle(currentveh, a);
	GetXYInFrontOfPoint(x, y, a,dis);
}

stock GetXYBehindVehicle(playerid,&Float:x,&Float:y,Float:dis)
{
	new currentveh;
	new Float:a, Float:z;
	currentveh = GetPlayerVehicleID(playerid);
	GetVehiclePos(currentveh, x, y, z);
	GetVehicleZAngle(currentveh, a);
	GetXYBehindPoint(x, y, a,dis);
}
//------------------------------------------------------------------------------
Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ) {

	new Float:TGTDistance;

	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

	new Float:tmpX, Float:tmpY, Float:tmpZ;

	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;

	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y) {

  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2,X));
  DY = floatabs(floatsub(y2,Y));

  if (DY == 0.0 || DX == 0.0) {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else {
    angle = atan(DX/DY);

    if(X > x2 && Y <= y2) angle += 90.0;
    else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    else if(X < x2 && Y >= y2) angle -= 90.0;
    else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  }

  return floatadd(angle, 90.0);
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
	GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
	GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

	new Float:vertical, Float:horizontal;

	switch (GetPlayerWeapon(playerid))
	{
		case 34,35,36:
		{
			if(DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
			else return false;
		}
		case 30,31: {vertical = 4.0; horizontal = -1.6;}
		case 33: {vertical = 2.7; horizontal = -1.0;}
		default: {vertical = 6.0; horizontal = -2.2;}
	}

	new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
	new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
	GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));

	if(DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
	return false;
}

stock IsPlayerAimingAtPlayer(playerid, targetplayerid) {
  new Float:x, Float:y, Float:z;
  GetPlayerPos(targetplayerid, x, y, z);
  return IsPlayerAimingAt(playerid, x, y, z, 1.1);
}
/*
[color=yellow]Ötlet kifejtése:[/color][color=beige]
Többször fel volt már hozva ez a téma, hogy újra kéne irni az egész /fish rendszert..
Sokat gondolkozok azon hogyan is lenne értelme a hajóbérlõ biznisznek..(nem errõl van most szó, de ehhez kapcsolódna a script).

Maga a munka:
[li]/fish parancs --> /halász [bedob, kihúz, beránt, hely, lead, info][/li]
[li]/halász bedob --> random timerek: 30,60,120 | egyszer elkezdted akkor nem mozoghatsz, kivéve hogyha kihúzod a botot.(/halász kihúz)[/li]
[li]/halász kihúz --> Ha meggondoltad magad és nem akarsz halászni, tehát nem várod meg a timert, és mész a dolgodra akkor kiveszed a pecabotot. (unfreeze, stb.)[/li]
[li]/halász beránt --> Amikor lejárt a timer(30,60,120), akkor induljon el 5-10másodperces visszaszámlálás, eddig van idõd berántani a botot.(/halász beránt). Visszaszámlálás ideje attól függhet akár hogy mekkora halat fogtál, akár skilltõl.[/li]
[li]/halász helyek --> Különbözõ helyeken mást fogsz.. Némelyik helyhez skill szükséges hogy halászni tudj, mert ott értékesebb halakat foghatsz. A parancs annyit csináljon hogy CP-t te
[li]/halász lead --> Nálad lévõ halakat leadod vele. Akár mappolni hozzá egy exterioros dolgot, ahol leadhatod. (könnyebb esetben szimplán santa marián)[/li]
[li]/halász info -->

SendClientMessage(playerid, COLOR_WHITE, "===============[ Halászás Információk ]===============");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szükséged lesz egy pecabotra, és némi csalira, amiket megkapsz a közeli boltban.");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Menj a horgászatra kijelölt helyekre és dobd be a botot, majd várj a kapásra!");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Kapás esetén rántsd be a horgászbotot. ('/halász beránt' paranccsal)");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Ha úgy gondolod rossz helyen vagy akkor kihúzhatod a pecabotot. ('/halász kihúz')");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "A nálad lévõ halakat eltudod adni a kereskedõnek, aki a Santa Maria partjain tartózkodik.");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Némelyik horgászhely használatához szükséged van némi tapasztalatra.");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Horgászhelyektõl függõen mást foghatsz ki a vizbõl! :)");


[color=yellow]Ötlet kifejtése:[/color][color=beige]
Többször fel volt már hozva ez a téma, hogy újra kéne irni az egész /fish rendszert..
Sokat gondolkozok azon hogyan is lenne értelme a hajóbérlõ biznisznek..(nem errõl van most szó, de ehhez kapcsolódna a script).

Maga a munka:

[b]/fish parancs[/b] --> /halász [bedob, kihúz, beránt, hely, lead, info]

[b]/halász bedob[/b] --> random timerek: 30,60,120 | egyszer elkezdted akkor nem mozoghatsz, kivéve hogyha kihúzod a botot.(/halász kihúz). A parancs csak akkor müködjön hogyha PlayerToPoint(?) adott helyek.

[b]/halász kihúz[/b] --> Ha meggondoltad magad és nem akarsz halászni, tehát nem várod meg a timert, és mész a dolgodra akkor kiveszed a pecabotot. (unfreeze, stb.)
[b]
/halász beránt[/b] --> Amikor lejárt a timer(30,60,120), akkor induljon el 5-10másodperces visszaszámlálás, eddig van idõd berántani a botot.(/halász beránt). Visszaszámlálás ideje attól függhet akár hogy mekkora halat fogtál, akár skilltõl.

[b]/halász helyek[/b] --> Különbözõ helyeken mást fogsz.. Némelyik helyhez skill szükséges hogy halászni tudj, mert ott értékesebb halakat foghatsz. A parancs szerintem csak szimplán irja hogy "class wikin talál a helyekrõl információt.", ha jól tudom egyszerre több checkpointot nem lehet mutatni a játékosnak.

[b]/halász lead[/b] --> Nálad lévõ halakat leadod vele. Akár mappolni hozzá egy exterioros dolgot, ahol leadhatod. (könnyebb esetben szimplán santa marián)

[b]/halász info[/b] -->

Halász helyek (PlayerToPointtal?):
[spoiler][img]http://i.imgur.com/qtvtrTn.jpg[/img][/spoiler]



[color=yellow]Ötlet kifejtése:[/color][color=beige]
Többször fel volt már hozva ez a téma, hogy újra kéne irni az egész /fish rendszert..
Sokat gondolkozok azon hogyan is lenne értelme a hajóbérlõ biznisznek..(nem errõl van most szó, de ehhez kapcsolódna a script).

Maga a munka:

[b]/fish parancs[/b] --> /halász [bedob, kihúz, beránt, hely, lead, info]

[b]/halász bedob[/b] --> random timerek: 30,60,120 | egyszer elkezdted akkor nem mozoghatsz, kivéve hogyha kihúzod a botot.(/halász kihúz). A parancs csak akkor müködjön hogyha PlayerToPoint(?) adott helyek.

[b]/halász kihúz[/b] --> Ha meggondoltad magad és nem akarsz halászni, tehát nem várod meg a timert, és mész a dolgodra akkor kiveszed a pecabotot. (unfreeze, stb.)
[b]
/halász beránt[/b] --> Amikor lejárt a timer(30,60,120), akkor induljon el 5-10másodperces visszaszámlálás, eddig van idõd berántani a botot.(/halász beránt). Visszaszámlálás ideje attól függhet akár hogy mekkora halat fogtál, akár skilltõl.

[b]/halász helyek[/b] --> Különbözõ helyeken mást fogsz.. Némelyik helyhez skill szükséges hogy halászni tudj, mert ott értékesebb halakat foghatsz. A parancs szerintem csak szimplán irja hogy "class wikin talál a helyekrõl információt.", ha jól tudom egyszerre több checkpointot nem lehet mutatni a játékosnak.

[b]/halász lead[/b] --> Nálad lévõ halakat leadod vele. Akár mappolni hozzá egy exterioros dolgot, ahol leadhatod. (könnyebb esetben szimplán santa marián)

[b]/halász info[/b] -->

[code]SendClientMessage(playerid, COLOR_WHITE, "===============[ Halászás Információk ]===============");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Szükséged lesz egy pecabotra, és némi csalira, amiket megkapsz a közeli boltban.");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Menj a horgászásra kijelölt helyekre és dobd be a botot, majd várj a kapásra!");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Kapás esetén rántsd be a horgászbotot. ('/halász beránt' paranccsal)");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Ha úgy gondolod rossz helyen vagy akkor kihúzhatod a pecabotot. ('/halász kihúz')");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "A nálad lévõ halakat eltudod adni a kereskedõnek, aki a Santa Maria partjain tartózkodik.");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Némelyik horgászhely használatához szükséged van némi tapasztalatra.");
SendClientMessage(playerid, COLOR_LIGHTGREEN, "Horgászhelyektõl függõen mást foghatsz ki a vizbõl! :)");[/code]

[b]Tehát a skillek mire lesznek jók?:[/b]
[li]Horgászhelyek használata[/li]
[li]Kilogramm

Halász helyek (PlayerToPointtal?):
[spoiler][img]http://i.imgur.com/qtvtrTn.jpg[/img][/spoiler]

*/